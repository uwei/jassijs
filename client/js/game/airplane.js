define(["require", "exports", "game/product", "game/airplanedialog"], function (require, exports, product_1, airplanedialog_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allAirplaneTypes = exports.Airplane = void 0;
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    //
    class Airplane {
        constructor(world) {
            this.status = "";
            this.loadedCount = 0;
            this.activeRoute = 0;
            this.squadron = []; //Geschwader
            this.type = "Airplane";
            this.world = world;
            this.route = [];
            this.products = [];
            for (var x = 0; x < product_1.allProducts.length; x++) {
                this.products[x] = 0;
            }
            this.typeid = 1;
            this.action = "wait";
            /*  for(var x=0;x<4;x++){
                  var rt=new Route();
                  rt.cityid=x;
                  this.route.push(rt);
              }*/
        }
        getCurrentCity() {
            for (var x = 0; x < this.world.cities.length; x++) {
                if (this.world.cities[x].x === this.x && this.world.cities[x].y === this.y) {
                    return this.world.cities[x];
                }
            }
            return undefined;
        }
        updateSquadron() {
            var speed = allAirplaneTypes[this.typeid].speed;
            var capacity = allAirplaneTypes[this.typeid].capacity;
            for (var x = 0; x < this.squadron.length; x++) {
                speed = Math.min(this.squadron[x].speed, speed);
                capacity += this.squadron[x].capacity;
            }
            this.speed = speed;
            this.capacity = capacity;
        }
        render() {
            var _this = this;
            this.dom = document.createRange().createContextualFragment("<span z-index:2;style='font-size:20px;transform:rotate(0turn)' class='mdi mdi-airplane'></span>").children[0]; //document.createElement("span");
            this.dom.style.position = "absolute";
            this.dom.addEventListener("click", (ev) => {
                _this.onclick(ev);
                return undefined;
            });
            this.lastUpdate = this.world.game.date.getTime();
            this.update();
        }
        refreshLoadedCount() {
            var all = 0;
            for (var x = 0; x < product_1.allProducts.length; x++) {
                all += this.products[x];
            }
            this.loadedCount = all;
        }
        flyTo(city) {
            var x = city.x;
            var y = city.y;
            this.lastUpdate = this.world.game.date.getTime();
            // console.log("fly to " + city.name)
            this.action = "fly";
            this.status = "fly to " + city.name;
            this.targetX = x;
            this.targetY = y;
            this.update();
        }
        select() {
            if (this.dom)
                this.dom.classList.add("airplane_selected");
        }
        unselect() {
            if (this.dom)
                this.dom.classList.remove("airplane_selected");
        }
        arrived() {
            console.log("target arrived");
            this.targetX = undefined;
            this.targetY = undefined;
            this.action = "wait";
            this.status = "";
            this.dom.style.transform = "rotate(0deg)";
            if (this.activeRoute !== -1) {
                console.log("unload now");
                this.action = "unload";
                this.status = "unload";
                this.lastAction = this.lastUpdate;
            }
        }
        calcNewPosition() {
            var pixelToTarget = Math.round(Math.sqrt(Math.pow(this.targetX - this.x, 2) + Math.pow(this.targetY - this.y, 2))); //Pytharoras
            var fromX = this.x;
            var fromY = this.y;
            var fromTime = 0;
            var toX = this.targetX;
            var toY = this.targetY;
            var toTime = pixelToTarget / this.speed; //t=s/v; in Tage
            var speedVectorX = toX - fromX;
            var speedVectorY = toY - fromY;
            var speedVectorTime = (toTime - fromTime);
            var nowTime = (this.world.game.date.getTime() - this.lastUpdate) / (1000 * 60 * 60 * 24);
            var nowX = Math.round((nowTime / speedVectorTime) * speedVectorX + fromX);
            var nowY = Math.round((nowTime / speedVectorTime) * speedVectorY + fromY);
            if (nowTime >= toTime) {
                this.x = this.targetX;
                this.y = this.targetY;
                this.arrived();
            }
            else {
                var rad = Math.atan((fromX - toX) / (fromY - toY));
                var winkel = 0;
                if (fromY > toY) {
                    winkel = 360 - rad * (180) / Math.PI;
                }
                else {
                    winkel = 180 - rad * (180) / Math.PI;
                }
                var s = ("" + winkel).replace(",", ".");
                this.dom.style.transform = "rotate(" + s + "deg)";
                // console.log(pixelToTarget+" pixel in "+toTime+" seconds. Position "+nowX+" "+nowY+" lastupdate "+nowTime+" "+winkel+"Â°");
                this.x = nowX;
                this.y = nowY;
            }
        }
        update() {
            if (!this.dom) {
                return;
            }
            if (this.loadedCount === this.capacity && !this.dom.classList.contains("airplane_fullloaded")) {
                this.dom.classList.add("airplane_fullloaded");
            }
            if (this.loadedCount !== this.capacity && this.dom.classList.contains("airplane_fullloaded")) {
                this.dom.classList.remove("airplane_fullloaded");
            }
            if (this.targetX !== undefined) {
                this.calcNewPosition();
            }
            this.lastUpdate = this.world.game.date.getTime();
            this.dom.style.top = this.y + "px";
            this.dom.style.left = (this.x - 35) + "px";
            if (this.activeRoute !== -1 && this.route.length > 1) {
                if (this.action === "unload" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    // console.log("load now");
                    this.action = "load";
                    this.status = "load";
                    this.lastAction = this.lastUpdate;
                    if (this.activeRoute >= this.route.length) {
                        this.activeRoute = 0;
                    }
                    else
                        this.route[this.activeRoute].unload();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                }
                if (this.action === "load" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    this.lastAction = this.lastUpdate;
                    if (this.activeRoute >= this.route.length)
                        this.activeRoute = 0;
                    else
                        this.route[this.activeRoute].load();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                    this.activeRoute++;
                    if (this.activeRoute >= this.route.length)
                        this.activeRoute = 0;
                    var city = this.world.cities[this.route[this.activeRoute].cityid];
                    this.flyTo(city);
                }
            }
        }
        onclick(th) {
            var _a;
            th.preventDefault();
            th.stopPropagation();
            console.log(this.name);
            (_a = this.world.selection) === null || _a === void 0 ? void 0 : _a.unselect();
            this.world.selection = this;
            this.select();
            var h = airplanedialog_1.AirplaneDialog.getInstance();
            h.airplane = this;
            h.show();
        }
        getDailyCosts() {
            var ret = allAirplaneTypes[this.typeid].costs;
            for (var x = 0; x < this.squadron.length; x++) {
                ret += allAirplaneTypes[this.squadron[x].typeid].costs;
            }
            return ret;
        }
    }
    exports.Airplane = Airplane;
    var allAirplaneTypes = [
        { typeid: 0, model: "Airplane A", speed: 200, capacity: 200, costs: 60, buildDays: 25, buildingCosts: 20000, buildingMaterial: [0, 0, 0, 40, 0, 10, 0, 10, 0, 10, 0, 0, 0, 0, 10] },
        { typeid: 1, model: "Airplane B", speed: 210, capacity: 300, costs: 90, buildDays: 30, buildingCosts: 41000, buildingMaterial: [0, 0, 0, 60, 0, 20, 0, 20, 0, 20, 0, 0, 0, 0, 20] },
        { typeid: 2, model: "Airplane C", speed: 220, capacity: 500, costs: 150, buildDays: 39, buildingCosts: 60000, buildingMaterial: [0, 0, 0, 100, 0, 30, 0, 30, 0, 30, 0, 0, 0, 0, 30] },
        { typeid: 3, model: "Airplane D", speed: 240, capacity: 650, costs: 180, buildDays: 45, buildingCosts: 75000, buildingMaterial: [0, 0, 0, 120, 0, 40, 0, 40, 0, 40, 0, 0, 0, 0, 40] },
        { typeid: 4, model: "Airplane E", speed: 260, capacity: 1000, costs: 270, buildDays: 56, buildingCosts: 150000, buildingMaterial: [0, 0, 0, 200, 0, 50, 0, 50, 0, 50, 0, 0, 0, 0, 50] },
        { typeid: 5, model: "Airplane F", speed: 300, capacity: 2000, costs: 500, buildDays: 79, buildingCosts: 300000, buildingMaterial: [0, 0, 0, 400, 0, 100, 0, 100, 0, 100, 0, 0, 0, 0, 100] },
    ];
    exports.allAirplaneTypes = allAirplaneTypes;
});
//<span style='font-size:100px;'>&#9951;</span>
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9nYW1lL2FpcnBsYW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFNQSxTQUFTLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNELEVBQUU7SUFDRixNQUFhLFFBQVE7UUF1QmpCLFlBQVksS0FBWTtZQVJ4QixXQUFNLEdBQVcsRUFBRSxDQUFDO1lBSXBCLGdCQUFXLEdBQVEsQ0FBQyxDQUFDO1lBQ3JCLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLGFBQVEsR0FBWSxFQUFFLENBQUMsQ0FBQSxZQUFZO1lBQ25DLFNBQUksR0FBRyxVQUFVLENBQUM7WUFFZCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxxQkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFFeEI7WUFDRCxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCOzs7O2lCQUlLO1FBQ1QsQ0FBQztRQUNELGNBQWM7WUFFVixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMvQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFD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LENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUM7UUFDckosRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxZQUFZLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxRQUFRLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxhQUFhLEVBQUMsS0FBSyxFQUFDLGdCQUFnQixFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQztRQUNySixFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLEdBQUcsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDO1FBQ3ZKLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsWUFBWSxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsUUFBUSxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUMsR0FBRyxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsYUFBYSxFQUFDLEtBQUssRUFBQyxnQkFBZ0IsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUM7UUFDdkosRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxZQUFZLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBQyxHQUFHLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxhQUFhLEVBQUMsTUFBTSxFQUFDLGdCQUFnQixFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQztRQUN6SixFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLEdBQUcsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLGFBQWEsRUFBQyxNQUFNLEVBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDO0tBQzVKLENBQUM7SUFDSyw0Q0FBZ0I7O0FBQ3ZCLCtDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmxkIH0gZnJvbSBcImdhbWUvd29ybGRcIjtcbmltcG9ydCB7IGFsbFByb2R1Y3RzIH0gZnJvbSBcImdhbWUvcHJvZHVjdFwiO1xuaW1wb3J0IHsgQWlycGxhbmVEaWFsb2cgfSBmcm9tIFwiZ2FtZS9haXJwbGFuZWRpYWxvZ1wiO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tIFwiZ2FtZS9yb3V0ZVwiO1xuaW1wb3J0IHsgQ2l0eSB9IGZyb20gXCJnYW1lL2NpdHlcIjtcblxuZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xufVxuLy9cbmV4cG9ydCBjbGFzcyBBaXJwbGFuZSB7XG4gICAgdHlwZWlkOm51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWN0aW9uOiBzdHJpbmc7XG4gICAgbGFzdEFjdGlvbjogbnVtYmVyO1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgLy9waXhlbCBwcm8gc2Vjb25kXG4gICAgc3BlZWQ6IG51bWJlcjtcbiAgICBsYXN0VXBkYXRlOiBudW1iZXI7XG4gICAgdGFyZ2V0WDogbnVtYmVyO1xuICAgIHRhcmdldFk6IG51bWJlcjtcbiAgICBkb206IEhUTUxTcGFuRWxlbWVudDtcbiAgICB3b3JsZDogV29ybGQ7XG4gICAgcHJvZHVjdHM7XG4gICAgc3RhdHVzOiBzdHJpbmcgPSBcIlwiO1xuICAgIHJvdXRlOiBSb3V0ZVtdO1xuICAgIGNvc3RzOm51bWJlcjtcbiAgICBjYXBhY2l0eTpudW1iZXI7XG4gICAgbG9hZGVkQ291bnQ6bnVtYmVyPTA7XG4gICAgYWN0aXZlUm91dGUgPSAwO1xuICAgIHNxdWFkcm9uOkFpcnBsYW5lW109W107Ly9HZXNjaHdhZGVyXG4gICAgdHlwZSA9IFwiQWlycGxhbmVcIjtcbiAgICBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQpIHtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgICAgICB0aGlzLnJvdXRlID0gW107XG4gICAgICAgICB0aGlzLnByb2R1Y3RzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxQcm9kdWN0cy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgdGhpcy5wcm9kdWN0c1t4XSA9IDA7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGVpZD0xO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IFwid2FpdFwiO1xuICAgICAgICAvKiAgZm9yKHZhciB4PTA7eDw0O3grKyl7XG4gICAgICAgICAgICAgIHZhciBydD1uZXcgUm91dGUoKTtcbiAgICAgICAgICAgICAgcnQuY2l0eWlkPXg7XG4gICAgICAgICAgICAgIHRoaXMucm91dGUucHVzaChydCk7XG4gICAgICAgICAgfSovXG4gICAgfSBcbiAgICBnZXRDdXJyZW50Q2l0eSgpe1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndvcmxkLmNpdGllcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMud29ybGQuY2l0aWVzW3hdLng9PT10aGlzLngmJnRoaXMud29ybGQuY2l0aWVzW3hdLnk9PT10aGlzLnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53b3JsZC5jaXRpZXNbeF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlU3F1YWRyb24oKXtcbiAgICAgICAgdmFyIHNwZWVkPWFsbEFpcnBsYW5lVHlwZXNbdGhpcy50eXBlaWRdLnNwZWVkO1xuICAgICAgICB2YXIgY2FwYWNpdHk9YWxsQWlycGxhbmVUeXBlc1t0aGlzLnR5cGVpZF0uY2FwYWNpdHk7XG4gICAgICAgIGZvcih2YXIgeD0wO3g8dGhpcy5zcXVhZHJvbi5sZW5ndGg7eCsrKXtcbiAgICAgICAgICAgIHNwZWVkPU1hdGgubWluKHRoaXMuc3F1YWRyb25beF0uc3BlZWQsc3BlZWQpO1xuICAgICAgICAgICAgY2FwYWNpdHkrPXRoaXMuc3F1YWRyb25beF0uY2FwYWNpdHk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGVlZD1zcGVlZDtcbiAgICAgICAgdGhpcy5jYXBhY2l0eT1jYXBhY2l0eTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmRvbSA9IDxhbnk+ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoXCI8c3BhbiB6LWluZGV4OjI7c3R5bGU9J2ZvbnQtc2l6ZToyMHB4O3RyYW5zZm9ybTpyb3RhdGUoMHR1cm4pJyBjbGFzcz0nbWRpIG1kaS1haXJwbGFuZSc+PC9zcGFuPlwiKS5jaGlsZHJlblswXTsvL2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgICBcbiAgICAgICBcbiAgICAgICBcbiAgICAgICAgdGhpcy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgX3RoaXMub25jbGljayhldik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlID0gdGhpcy53b3JsZC5nYW1lLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgfVxuICAgIHJlZnJlc2hMb2FkZWRDb3VudCgpe1xuICAgICAgICB2YXIgYWxsPTA7XG4gICAgICAgIGZvcih2YXIgeD0wO3g8YWxsUHJvZHVjdHMubGVuZ3RoO3grKyl7XG4gICAgICAgICAgICBhbGwrPXRoaXMucHJvZHVjdHNbeF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2FkZWRDb3VudD1hbGw7XG4gICAgfVxuICAgIGZseVRvKGNpdHk6IENpdHkpIHtcbiAgICAgICAgdmFyIHggPSBjaXR5Lng7XG4gICAgICAgIHZhciB5ID0gY2l0eS55O1xuXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IHRoaXMud29ybGQuZ2FtZS5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJmbHkgdG8gXCIgKyBjaXR5Lm5hbWUpXG4gICAgICAgIHRoaXMuYWN0aW9uID0gXCJmbHlcIjtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBcImZseSB0byBcIiArIGNpdHkubmFtZTtcbiAgICAgICAgdGhpcy50YXJnZXRYID0geDtcbiAgICAgICAgdGhpcy50YXJnZXRZID0geTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICBcbiAgICB9XG4gICAgc2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kb20pXG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiYWlycGxhbmVfc2VsZWN0ZWRcIik7XG4gICAgfVxuICAgIHVuc2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kb20pXG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiYWlycGxhbmVfc2VsZWN0ZWRcIik7XG4gICAgfVxuICAgIGFycml2ZWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGFyZ2V0IGFycml2ZWRcIik7XG4gICAgICAgIHRoaXMudGFyZ2V0WCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50YXJnZXRZID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IFwid2FpdFwiO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IFwiXCI7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKDBkZWcpXCI7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVJvdXRlICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1bmxvYWQgbm93XCIpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBcInVubG9hZFwiO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInVubG9hZFwiO1xuICAgICAgICAgICAgdGhpcy5sYXN0QWN0aW9uID0gdGhpcy5sYXN0VXBkYXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhbGNOZXdQb3NpdGlvbigpIHtcbiAgICAgICAgdmFyIHBpeGVsVG9UYXJnZXQgPSBNYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyh0aGlzLnRhcmdldFggLSB0aGlzLngsIDIpICsgTWF0aC5wb3codGhpcy50YXJnZXRZIC0gdGhpcy55LCAyKSkpOy8vUHl0aGFyb3Jhc1xuICAgICAgICB2YXIgZnJvbVggPSB0aGlzLng7XG4gICAgICAgIHZhciBmcm9tWSA9IHRoaXMueTtcbiAgICAgICAgdmFyIGZyb21UaW1lID0gMDtcbiAgICAgICAgdmFyIHRvWCA9IHRoaXMudGFyZ2V0WDtcbiAgICAgICAgdmFyIHRvWSA9IHRoaXMudGFyZ2V0WTtcbiAgICAgICAgdmFyIHRvVGltZSA9IHBpeGVsVG9UYXJnZXQgLyB0aGlzLnNwZWVkOyAgICAvL3Q9cy92OyBpbiBUYWdlXG4gICAgICAgIHZhciBzcGVlZFZlY3RvclggPSB0b1ggLSBmcm9tWDtcbiAgICAgICAgdmFyIHNwZWVkVmVjdG9yWSA9IHRvWSAtIGZyb21ZO1xuICAgICAgICB2YXIgc3BlZWRWZWN0b3JUaW1lID0gKHRvVGltZSAtIGZyb21UaW1lKTtcbiAgICAgICAgdmFyIG5vd1RpbWUgPSAodGhpcy53b3JsZC5nYW1lLmRhdGUuZ2V0VGltZSgpIC0gdGhpcy5sYXN0VXBkYXRlKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICAgICAgdmFyIG5vd1ggPSBNYXRoLnJvdW5kKChub3dUaW1lIC8gc3BlZWRWZWN0b3JUaW1lKSAqIHNwZWVkVmVjdG9yWCArIGZyb21YKTtcbiAgICAgICAgdmFyIG5vd1kgPSBNYXRoLnJvdW5kKChub3dUaW1lIC8gc3BlZWRWZWN0b3JUaW1lKSAqIHNwZWVkVmVjdG9yWSArIGZyb21ZKTtcbiAgICAgICAgaWYgKG5vd1RpbWUgPj0gdG9UaW1lKSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnRhcmdldFg7XG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnRhcmdldFk7XG4gICAgICAgICAgICB0aGlzLmFycml2ZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByYWQgPSBNYXRoLmF0YW4oKGZyb21YIC0gdG9YKSAvIChmcm9tWSAtIHRvWSkpO1xuICAgICAgICAgICAgdmFyIHdpbmtlbCA9IDA7XG4gICAgICAgICAgICBpZiAoZnJvbVkgPiB0b1kpIHtcbiAgICAgICAgICAgICAgICB3aW5rZWwgPSAzNjAgLSByYWQgKiAoMTgwKSAvIE1hdGguUEk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpbmtlbCA9IDE4MCAtIHJhZCAqICgxODApIC8gTWF0aC5QSTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzID0gKFwiXCIgKyB3aW5rZWwpLnJlcGxhY2UoXCIsXCIsIFwiLlwiKTtcbiAgICAgICAgICAgIHRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKFwiICsgcyArIFwiZGVnKVwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocGl4ZWxUb1RhcmdldCtcIiBwaXhlbCBpbiBcIit0b1RpbWUrXCIgc2Vjb25kcy4gUG9zaXRpb24gXCIrbm93WCtcIiBcIitub3dZK1wiIGxhc3R1cGRhdGUgXCIrbm93VGltZStcIiBcIit3aW5rZWwrXCLCsFwiKTtcbiAgICAgICAgICAgIHRoaXMueCA9IG5vd1g7XG4gICAgICAgICAgICB0aGlzLnkgPSBub3dZO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYoIXRoaXMuZG9tKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmxvYWRlZENvdW50PT09dGhpcy5jYXBhY2l0eSYmIXRoaXMuZG9tLmNsYXNzTGlzdC5jb250YWlucyhcImFpcnBsYW5lX2Z1bGxsb2FkZWRcIikpe1xuICAgICAgICAgICAgdGhpcy5kb20uY2xhc3NMaXN0LmFkZChcImFpcnBsYW5lX2Z1bGxsb2FkZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5sb2FkZWRDb3VudCE9PXRoaXMuY2FwYWNpdHkmJnRoaXMuZG9tLmNsYXNzTGlzdC5jb250YWlucyhcImFpcnBsYW5lX2Z1bGxsb2FkZWRcIikpe1xuICAgICAgICAgICAgdGhpcy5kb20uY2xhc3NMaXN0LnJlbW92ZShcImFpcnBsYW5lX2Z1bGxsb2FkZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGNOZXdQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IHRoaXMud29ybGQuZ2FtZS5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5kb20uc3R5bGUudG9wID0gdGhpcy55ICsgXCJweFwiO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS5sZWZ0ID0gKHRoaXMueCAtIDM1KSArIFwicHhcIjtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlUm91dGUgIT09IC0xICYmIHRoaXMucm91dGUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSBcInVubG9hZFwiICYmICh0aGlzLmxhc3RVcGRhdGUgLSB0aGlzLmxhc3RBY3Rpb24pID4gKDMgKiAxMDAwICogNjAgKiA2MCkpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxvYWQgbm93XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gXCJsb2FkXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImxvYWRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RBY3Rpb24gPSB0aGlzLmxhc3RVcGRhdGU7XG4gICAgICAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlUm91dGU+PXRoaXMucm91dGUubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVSb3V0ZT0wO1xuICAgICAgICAgICAgICAgICB9ZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlW3RoaXMuYWN0aXZlUm91dGVdLnVubG9hZCgpO1xuICAgICAgICAgICAgICAgIEFpcnBsYW5lRGlhbG9nLmdldEluc3RhbmNlKCkudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwibG9hZFwiICYmICh0aGlzLmxhc3RVcGRhdGUgLSB0aGlzLmxhc3RBY3Rpb24pID4gKDMgKiAxMDAwICogNjAgKiA2MCkpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMubGFzdEFjdGlvbiA9IHRoaXMubGFzdFVwZGF0ZTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFjdGl2ZVJvdXRlPj10aGlzLnJvdXRlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVSb3V0ZT0wO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVt0aGlzLmFjdGl2ZVJvdXRlXS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgQWlycGxhbmVEaWFsb2cuZ2V0SW5zdGFuY2UoKS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVJvdXRlKys7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5hY3RpdmVSb3V0ZT49dGhpcy5yb3V0ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUm91dGU9MDtcbiAgICAgICAgICAgICAgICB2YXIgY2l0eSA9IHRoaXMud29ybGQuY2l0aWVzW3RoaXMucm91dGVbdGhpcy5hY3RpdmVSb3V0ZV0uY2l0eWlkXTtcbiAgICAgICAgICAgICAgICB0aGlzLmZseVRvKGNpdHkpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25jbGljayh0aDogTW91c2VFdmVudCkge1xuICAgICAgICB0aC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5uYW1lKTtcbiAgICAgICAgdGhpcy53b3JsZC5zZWxlY3Rpb24/LnVuc2VsZWN0KCk7XG4gICAgICAgIHRoaXMud29ybGQuc2VsZWN0aW9uID0gdGhpcztcbiAgICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICAgICAgdmFyIGggPSBBaXJwbGFuZURpYWxvZy5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBoLmFpcnBsYW5lID0gdGhpcztcbiAgICAgICAgaC5zaG93KCk7XG5cbiAgICB9XG4gICAgZ2V0RGFpbHlDb3N0cygpe1xuICAgICAgICB2YXIgcmV0PWFsbEFpcnBsYW5lVHlwZXNbdGhpcy50eXBlaWRdLmNvc3RzO1xuICAgICAgICBmb3IodmFyIHg9MDt4PHRoaXMuc3F1YWRyb24ubGVuZ3RoO3grKyl7XG4gICAgICAgICAgICByZXQrPWFsbEFpcnBsYW5lVHlwZXNbdGhpcy5zcXVhZHJvblt4XS50eXBlaWRdLmNvc3RzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxudmFyIGFsbEFpcnBsYW5lVHlwZXM9W1xue3R5cGVpZDowLG1vZGVsOlwiQWlycGxhbmUgQVwiLHNwZWVkOjIwMCxjYXBhY2l0eToyMDAsIGNvc3RzOjYwLGJ1aWxkRGF5czoyNSxidWlsZGluZ0Nvc3RzOjIwMDAwLGJ1aWxkaW5nTWF0ZXJpYWw6WzAsMCwwLDQwLDAsMTAsMCwxMCwwLDEwLDAsMCwwLDAsMTBdfSxcbnt0eXBlaWQ6MSxtb2RlbDpcIkFpcnBsYW5lIEJcIixzcGVlZDoyMTAsY2FwYWNpdHk6MzAwLCBjb3N0czo5MCxidWlsZERheXM6MzAsYnVpbGRpbmdDb3N0czo0MTAwMCxidWlsZGluZ01hdGVyaWFsOlswLDAsMCw2MCwwLDIwLDAsMjAsMCwyMCwwLDAsMCwwLDIwXX0sXG57dHlwZWlkOjIsbW9kZWw6XCJBaXJwbGFuZSBDXCIsc3BlZWQ6MjIwLGNhcGFjaXR5OjUwMCwgY29zdHM6MTUwLGJ1aWxkRGF5czozOSxidWlsZGluZ0Nvc3RzOjYwMDAwLGJ1aWxkaW5nTWF0ZXJpYWw6WzAsMCwwLDEwMCwwLDMwLDAsMzAsMCwzMCwwLDAsMCwwLDMwXX0sXG57dHlwZWlkOjMsbW9kZWw6XCJBaXJwbGFuZSBEXCIsc3BlZWQ6MjQwLGNhcGFjaXR5OjY1MCwgY29zdHM6MTgwLGJ1aWxkRGF5czo0NSxidWlsZGluZ0Nvc3RzOjc1MDAwLGJ1aWxkaW5nTWF0ZXJpYWw6WzAsMCwwLDEyMCwwLDQwLDAsNDAsMCw0MCwwLDAsMCwwLDQwXX0sXG57dHlwZWlkOjQsbW9kZWw6XCJBaXJwbGFuZSBFXCIsc3BlZWQ6MjYwLGNhcGFjaXR5OjEwMDAsIGNvc3RzOjI3MCxidWlsZERheXM6NTYsYnVpbGRpbmdDb3N0czoxNTAwMDAsYnVpbGRpbmdNYXRlcmlhbDpbMCwwLDAsMjAwLDAsNTAsMCw1MCwwLDUwLDAsMCwwLDAsNTBdfSxcbnt0eXBlaWQ6NSxtb2RlbDpcIkFpcnBsYW5lIEZcIixzcGVlZDozMDAsY2FwYWNpdHk6MjAwMCwgY29zdHM6NTAwLGJ1aWxkRGF5czo3OSxidWlsZGluZ0Nvc3RzOjMwMDAwMCxidWlsZGluZ01hdGVyaWFsOlswLDAsMCw0MDAsMCwxMDAsMCwxMDAsMCwxMDAsMCwwLDAsMCwxMDBdfSxcbl07XG5leHBvcnR7YWxsQWlycGxhbmVUeXBlc307XG4vLzxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAwcHg7Jz4mIzk5NTE7PC9zcGFuPiJdfQ==