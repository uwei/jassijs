define(["require", "exports", "game/airplanedialog"], function (require, exports, airplanedialog_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Airplane = void 0;
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    //
    class Airplane {
        constructor(world) {
            this.status = "";
            this.loadedCount = 0;
            this.activeRoute = -1;
            this.squadron = []; //Geschwader
            this.type = "Airplane";
            this.world = world;
            this.route = [];
            this.products = [];
            for (var x = 0; x < parameter.allProducts.length; x++) {
                this.products[x] = 0;
            }
            this.typeid = 1;
            this.action = "";
            /*  for(var x=0;x<4;x++){
                  var rt=new Route();
                  rt.cityid=x;
                  this.route.push(rt);
              }*/
        }
        getCurrentCity() {
            for (var x = 0; x < this.world.cities.length; x++) {
                if (this.world.cities[x].x === this.x && this.world.cities[x].y === this.y) {
                    return this.world.cities[x];
                }
            }
            return undefined;
        }
        updateSquadron() {
            var speed = parameter.allAirplaneTypes[this.typeid].speed;
            var capacity = parameter.allAirplaneTypes[this.typeid].capacity;
            for (var x = 0; x < this.squadron.length; x++) {
                speed = Math.min(this.squadron[x].speed, speed);
                capacity += this.squadron[x].capacity;
            }
            this.speed = speed;
            this.capacity = capacity;
        }
        render() {
            var _this = this;
            this.dom = document.createRange().createContextualFragment("<span z-index:2;style='font-size:20px;transform:rotate(0turn)' class='mdi mdi-airplane'></span>").children[0]; //document.createElement("span");
            this.dom.style.position = "absolute";
            this.dom.style.zIndex = "10";
            this.dom.addEventListener("click", (ev) => {
                _this.onclick(ev);
                return undefined;
            });
            this.lastUpdate = this.world.game.date.getTime();
            this.update();
        }
        refreshLoadedCount() {
            var all = 0;
            for (var x = 0; x < parameter.allProducts.length; x++) {
                all += this.products[x];
            }
            this.loadedCount = all;
        }
        flyTo(city) {
            var x = city.x;
            var y = city.y;
            this.lastUpdate = this.world.game.date.getTime();
            // console.log("fly to " + city.name)
            this.action = "fly";
            this.status = "fly to " + city.name;
            this.targetX = x;
            this.targetY = y;
            this.update();
        }
        select() {
            if (this.dom)
                this.dom.classList.add("airplane_selected");
        }
        unselect() {
            if (this.dom)
                this.dom.classList.remove("airplane_selected");
        }
        arrived() {
            this.targetX = undefined;
            this.targetY = undefined;
            this.action = "";
            this.status = "";
            this.dom.style.transform = "rotate(0deg)";
            if (this.activeRoute !== -1) {
                this.action = "unload";
                this.status = "unload";
                this.lastAction = this.lastUpdate;
            }
        }
        calcNewPosition() {
            var pixelToTarget = Math.round(Math.sqrt(Math.pow(this.targetX - this.x, 2) + Math.pow(this.targetY - this.y, 2))); //Pytharoras
            var fromX = this.x;
            var fromY = this.y;
            var fromTime = 0;
            var toX = this.targetX;
            var toY = this.targetY;
            var toTime = pixelToTarget / this.speed; //t=s/v; in Tage
            var speedVectorX = toX - fromX;
            var speedVectorY = toY - fromY;
            var speedVectorTime = (toTime - fromTime);
            var nowTime = (this.world.game.date.getTime() - this.lastUpdate) / (1000 * 60 * 60 * 24);
            var nowX = Math.round((nowTime / speedVectorTime) * speedVectorX + fromX);
            var nowY = Math.round((nowTime / speedVectorTime) * speedVectorY + fromY);
            if (nowTime >= toTime) {
                this.x = this.targetX;
                this.y = this.targetY;
                this.arrived();
            }
            else {
                var rad = Math.atan((fromX - toX) / (fromY - toY));
                var winkel = 0;
                if (fromY > toY) {
                    winkel = 360 - rad * (180) / Math.PI;
                }
                else {
                    winkel = 180 - rad * (180) / Math.PI;
                }
                var s = ("" + winkel).replace(",", ".");
                this.dom.style.transform = "rotate(" + s + "deg)";
                // console.log(pixelToTarget+" pixel in "+toTime+" seconds. Position "+nowX+" "+nowY+" lastupdate "+nowTime+" "+winkel+"Â°");
                this.x = nowX;
                this.y = nowY;
            }
        }
        update() {
            if (!this.dom) {
                return;
            }
            if (this.loadedCount === this.capacity && !this.dom.classList.contains("airplane_fullloaded")) {
                this.dom.classList.add("airplane_fullloaded");
            }
            if (this.loadedCount !== this.capacity && this.dom.classList.contains("airplane_fullloaded")) {
                this.dom.classList.remove("airplane_fullloaded");
            }
            if (this.status === "" && !this.dom.classList.contains("airplane_lazy")) {
                this.dom.classList.add("airplane_lazy");
            }
            if (this.status !== "" && this.dom.classList.contains("airplane_lazy")) {
                this.dom.classList.remove("airplane_lazy");
            }
            if (this.targetX !== undefined) {
                this.calcNewPosition();
            }
            this.lastUpdate = this.world.game.date.getTime();
            this.dom.style.top = this.y + "px";
            this.dom.style.left = (this.x - 35) + "px";
            if (this.activeRoute !== -1 && this.route.length > 1) {
                if (this.action === "unload" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    // console.log("load now");
                    this.action = "load";
                    this.status = "load";
                    this.lastAction = this.lastUpdate;
                    if (this.activeRoute >= this.route.length) {
                        this.activeRoute = 0;
                    }
                    else
                        this.route[this.activeRoute].unload();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                }
                if (this.action === "load" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    this.lastAction = this.lastUpdate;
                    if (this.activeRoute >= this.route.length)
                        this.activeRoute = 0;
                    else
                        this.route[this.activeRoute].load();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                    this.activeRoute++;
                    if (this.activeRoute >= this.route.length)
                        this.activeRoute = 0;
                    var city = this.world.cities[this.route[this.activeRoute].cityid];
                    this.flyTo(city);
                }
            }
        }
        onclick(th) {
            var _a;
            th.preventDefault();
            th.stopPropagation();
            (_a = this.world.selection) === null || _a === void 0 ? void 0 : _a.unselect();
            this.world.selection = this;
            this.select();
            var h = airplanedialog_1.AirplaneDialog.getInstance();
            h.airplane = this;
            h.show();
        }
        getDailyCosts() {
            var ret = parameter.allAirplaneTypes[this.typeid].costs;
            for (var x = 0; x < this.squadron.length; x++) {
                ret += parameter.allAirplaneTypes[this.squadron[x].typeid].costs;
            }
            return ret;
        }
    }
    exports.Airplane = Airplane;
});
//<span style='font-size:100px;'>&#9951;</span>
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9nYW1lL2FpcnBsYW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFLQSxTQUFTLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNELEVBQUU7SUFDRixNQUFhLFFBQVE7UUF1QmpCLFlBQVksS0FBWTtZQVJ4QixXQUFNLEdBQVcsRUFBRSxDQUFDO1lBSXBCLGdCQUFXLEdBQVEsQ0FBQyxDQUFDO1lBQ3JCLGdCQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakIsYUFBUSxHQUFZLEVBQUUsQ0FBQyxDQUFBLFlBQVk7WUFDbkMsU0FBSSxHQUFHLFVBQVUsQ0FBQztZQUVkLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUV4QjtZQUNELElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDakI7Ozs7aUJBSUs7UUFDVCxDQUFDO1FBQ0QsY0FBYztZQUVWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9DLElBQUksSUFBSSxDQUFDLEtBQUss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QkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUNsRTtZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2YsQ0FBQztLQUNKO0lBeE5ELDRCQXdOQzs7QUFFRCwrQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JsZCB9IGZyb20gXCJnYW1lL3dvcmxkXCI7XG5pbXBvcnQgeyBBaXJwbGFuZURpYWxvZyB9IGZyb20gXCJnYW1lL2FpcnBsYW5lZGlhbG9nXCI7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gXCJnYW1lL3JvdXRlXCI7XG5pbXBvcnQgeyBDaXR5IH0gZnJvbSBcImdhbWUvY2l0eVwiO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWF4KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG59XG4vL1xuZXhwb3J0IGNsYXNzIEFpcnBsYW5lIHtcbiAgICB0eXBlaWQ6bnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhY3Rpb246IHN0cmluZztcbiAgICBsYXN0QWN0aW9uOiBudW1iZXI7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICAvL3BpeGVsIHBybyBzZWNvbmRcbiAgICBzcGVlZDogbnVtYmVyO1xuICAgIGxhc3RVcGRhdGU6IG51bWJlcjtcbiAgICB0YXJnZXRYOiBudW1iZXI7XG4gICAgdGFyZ2V0WTogbnVtYmVyO1xuICAgIGRvbTogSFRNTFNwYW5FbGVtZW50O1xuICAgIHdvcmxkOiBXb3JsZDtcbiAgICBwcm9kdWN0cztcbiAgICBzdGF0dXM6IHN0cmluZyA9IFwiXCI7XG4gICAgcm91dGU6IFJvdXRlW107XG4gICAgY29zdHM6bnVtYmVyO1xuICAgIGNhcGFjaXR5Om51bWJlcjtcbiAgICBsb2FkZWRDb3VudDpudW1iZXI9MDtcbiAgICBhY3RpdmVSb3V0ZSA9IC0xO1xuICAgIHNxdWFkcm9uOkFpcnBsYW5lW109W107Ly9HZXNjaHdhZGVyXG4gICAgdHlwZSA9IFwiQWlycGxhbmVcIjtcbiAgICBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQpIHtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgICAgICB0aGlzLnJvdXRlID0gW107XG4gICAgICAgICB0aGlzLnByb2R1Y3RzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBwYXJhbWV0ZXIuYWxsUHJvZHVjdHMubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdHNbeF0gPSAwO1xuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eXBlaWQ9MTtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBcIlwiO1xuICAgICAgICAvKiAgZm9yKHZhciB4PTA7eDw0O3grKyl7XG4gICAgICAgICAgICAgIHZhciBydD1uZXcgUm91dGUoKTtcbiAgICAgICAgICAgICAgcnQuY2l0eWlkPXg7XG4gICAgICAgICAgICAgIHRoaXMucm91dGUucHVzaChydCk7XG4gICAgICAgICAgfSovXG4gICAgfSBcbiAgICBnZXRDdXJyZW50Q2l0eSgpe1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndvcmxkLmNpdGllcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMud29ybGQuY2l0aWVzW3hdLng9PT10aGlzLngmJnRoaXMud29ybGQuY2l0aWVzW3hdLnk9PT10aGlzLnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53b3JsZC5jaXRpZXNbeF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlU3F1YWRyb24oKXtcbiAgICAgICAgdmFyIHNwZWVkPXBhcmFtZXRlci5hbGxBaXJwbGFuZVR5cGVzW3RoaXMudHlwZWlkXS5zcGVlZDtcbiAgICAgICAgdmFyIGNhcGFjaXR5PXBhcmFtZXRlci5hbGxBaXJwbGFuZVR5cGVzW3RoaXMudHlwZWlkXS5jYXBhY2l0eTtcbiAgICAgICAgZm9yKHZhciB4PTA7eDx0aGlzLnNxdWFkcm9uLmxlbmd0aDt4Kyspe1xuICAgICAgICAgICAgc3BlZWQ9TWF0aC5taW4odGhpcy5zcXVhZHJvblt4XS5zcGVlZCxzcGVlZCk7XG4gICAgICAgICAgICBjYXBhY2l0eSs9dGhpcy5zcXVhZHJvblt4XS5jYXBhY2l0eTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwZWVkPXNwZWVkO1xuICAgICAgICB0aGlzLmNhcGFjaXR5PWNhcGFjaXR5O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZG9tID0gPGFueT5kb2N1bWVudC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChcIjxzcGFuIHotaW5kZXg6MjtzdHlsZT0nZm9udC1zaXplOjIwcHg7dHJhbnNmb3JtOnJvdGF0ZSgwdHVybiknIGNsYXNzPSdtZGkgbWRpLWFpcnBsYW5lJz48L3NwYW4+XCIpLmNoaWxkcmVuWzBdOy8vZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS56SW5kZXggPSBcIjEwXCI7XG4gICAgICAgIFxuICAgICAgIFxuICAgICAgIFxuICAgICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5vbmNsaWNrKGV2KTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGUgPSB0aGlzLndvcmxkLmdhbWUuZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB9XG4gICAgcmVmcmVzaExvYWRlZENvdW50KCl7XG4gICAgICAgIHZhciBhbGw9MDtcbiAgICAgICAgZm9yKHZhciB4PTA7eDxwYXJhbWV0ZXIuYWxsUHJvZHVjdHMubGVuZ3RoO3grKyl7XG4gICAgICAgICAgICBhbGwrPXRoaXMucHJvZHVjdHNbeF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2FkZWRDb3VudD1hbGw7XG4gICAgfVxuICAgIGZseVRvKGNpdHk6IENpdHkpIHtcbiAgICAgICAgdmFyIHggPSBjaXR5Lng7XG4gICAgICAgIHZhciB5ID0gY2l0eS55O1xuXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IHRoaXMud29ybGQuZ2FtZS5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJmbHkgdG8gXCIgKyBjaXR5Lm5hbWUpXG4gICAgICAgIHRoaXMuYWN0aW9uID0gXCJmbHlcIjtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBcImZseSB0byBcIiArIGNpdHkubmFtZTtcbiAgICAgICAgdGhpcy50YXJnZXRYID0geDtcbiAgICAgICAgdGhpcy50YXJnZXRZID0geTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICBcbiAgICB9XG4gICAgc2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kb20pXG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiYWlycGxhbmVfc2VsZWN0ZWRcIik7XG4gICAgfVxuICAgIHVuc2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kb20pXG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiYWlycGxhbmVfc2VsZWN0ZWRcIik7XG4gICAgfVxuICAgIGFycml2ZWQoKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0WCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50YXJnZXRZID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IFwiXCI7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gXCJcIjtcbiAgICAgICAgdGhpcy5kb20uc3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoMGRlZylcIjtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlUm91dGUgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IFwidW5sb2FkXCI7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwidW5sb2FkXCI7XG4gICAgICAgICAgICB0aGlzLmxhc3RBY3Rpb24gPSB0aGlzLmxhc3RVcGRhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY05ld1Bvc2l0aW9uKCkge1xuICAgICAgICB2YXIgcGl4ZWxUb1RhcmdldCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMudGFyZ2V0WCAtIHRoaXMueCwgMikgKyBNYXRoLnBvdyh0aGlzLnRhcmdldFkgLSB0aGlzLnksIDIpKSk7Ly9QeXRoYXJvcmFzXG4gICAgICAgIHZhciBmcm9tWCA9IHRoaXMueDtcbiAgICAgICAgdmFyIGZyb21ZID0gdGhpcy55O1xuICAgICAgICB2YXIgZnJvbVRpbWUgPSAwO1xuICAgICAgICB2YXIgdG9YID0gdGhpcy50YXJnZXRYO1xuICAgICAgICB2YXIgdG9ZID0gdGhpcy50YXJnZXRZO1xuICAgICAgICB2YXIgdG9UaW1lID0gcGl4ZWxUb1RhcmdldCAvIHRoaXMuc3BlZWQ7ICAgIC8vdD1zL3Y7IGluIFRhZ2VcbiAgICAgICAgdmFyIHNwZWVkVmVjdG9yWCA9IHRvWCAtIGZyb21YO1xuICAgICAgICB2YXIgc3BlZWRWZWN0b3JZID0gdG9ZIC0gZnJvbVk7XG4gICAgICAgIHZhciBzcGVlZFZlY3RvclRpbWUgPSAodG9UaW1lIC0gZnJvbVRpbWUpO1xuICAgICAgICB2YXIgbm93VGltZSA9ICh0aGlzLndvcmxkLmdhbWUuZGF0ZS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RVcGRhdGUpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICB2YXIgbm93WCA9IE1hdGgucm91bmQoKG5vd1RpbWUgLyBzcGVlZFZlY3RvclRpbWUpICogc3BlZWRWZWN0b3JYICsgZnJvbVgpO1xuICAgICAgICB2YXIgbm93WSA9IE1hdGgucm91bmQoKG5vd1RpbWUgLyBzcGVlZFZlY3RvclRpbWUpICogc3BlZWRWZWN0b3JZICsgZnJvbVkpO1xuICAgICAgICBpZiAobm93VGltZSA+PSB0b1RpbWUpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMudGFyZ2V0WDtcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMudGFyZ2V0WTtcbiAgICAgICAgICAgIHRoaXMuYXJyaXZlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJhZCA9IE1hdGguYXRhbigoZnJvbVggLSB0b1gpIC8gKGZyb21ZIC0gdG9ZKSk7XG4gICAgICAgICAgICB2YXIgd2lua2VsID0gMDtcbiAgICAgICAgICAgIGlmIChmcm9tWSA+IHRvWSkge1xuICAgICAgICAgICAgICAgIHdpbmtlbCA9IDM2MCAtIHJhZCAqICgxODApIC8gTWF0aC5QSTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lua2VsID0gMTgwIC0gcmFkICogKDE4MCkgLyBNYXRoLlBJO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHMgPSAoXCJcIiArIHdpbmtlbCkucmVwbGFjZShcIixcIiwgXCIuXCIpO1xuICAgICAgICAgICAgdGhpcy5kb20uc3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyBzICsgXCJkZWcpXCI7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwaXhlbFRvVGFyZ2V0K1wiIHBpeGVsIGluIFwiK3RvVGltZStcIiBzZWNvbmRzLiBQb3NpdGlvbiBcIitub3dYK1wiIFwiK25vd1krXCIgbGFzdHVwZGF0ZSBcIitub3dUaW1lK1wiIFwiK3dpbmtlbCtcIsKwXCIpO1xuICAgICAgICAgICAgdGhpcy54ID0gbm93WDtcbiAgICAgICAgICAgIHRoaXMueSA9IG5vd1k7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZighdGhpcy5kb20pe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMubG9hZGVkQ291bnQ9PT10aGlzLmNhcGFjaXR5JiYhdGhpcy5kb20uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWlycGxhbmVfZnVsbGxvYWRlZFwiKSl7XG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiYWlycGxhbmVfZnVsbGxvYWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmxvYWRlZENvdW50IT09dGhpcy5jYXBhY2l0eSYmdGhpcy5kb20uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWlycGxhbmVfZnVsbGxvYWRlZFwiKSl7XG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiYWlycGxhbmVfZnVsbGxvYWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLnN0YXR1cz09PVwiXCImJiF0aGlzLmRvbS5jbGFzc0xpc3QuY29udGFpbnMoXCJhaXJwbGFuZV9sYXp5XCIpKXtcbiAgICAgICAgICAgIHRoaXMuZG9tLmNsYXNzTGlzdC5hZGQoXCJhaXJwbGFuZV9sYXp5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuc3RhdHVzIT09XCJcIiYmdGhpcy5kb20uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWlycGxhbmVfbGF6eVwiKSl7XG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiYWlycGxhbmVfbGF6eVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50YXJnZXRYICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY05ld1Bvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlID0gdGhpcy53b3JsZC5nYW1lLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS50b3AgPSB0aGlzLnkgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLmxlZnQgPSAodGhpcy54IC0gMzUpICsgXCJweFwiO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVSb3V0ZSAhPT0gLTEgJiYgdGhpcy5yb3V0ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwidW5sb2FkXCIgJiYgKHRoaXMubGFzdFVwZGF0ZSAtIHRoaXMubGFzdEFjdGlvbikgPiAoMyAqIDEwMDAgKiA2MCAqIDYwKSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibG9hZCBub3dcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBcImxvYWRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwibG9hZFwiO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdEFjdGlvbiA9IHRoaXMubGFzdFVwZGF0ZTtcbiAgICAgICAgICAgICAgICAgaWYodGhpcy5hY3RpdmVSb3V0ZT49dGhpcy5yb3V0ZS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVJvdXRlPTA7XG4gICAgICAgICAgICAgICAgIH1lbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVbdGhpcy5hY3RpdmVSb3V0ZV0udW5sb2FkKCk7XG4gICAgICAgICAgICAgICAgQWlycGxhbmVEaWFsb2cuZ2V0SW5zdGFuY2UoKS51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gXCJsb2FkXCIgJiYgKHRoaXMubGFzdFVwZGF0ZSAtIHRoaXMubGFzdEFjdGlvbikgPiAoMyAqIDEwMDAgKiA2MCAqIDYwKSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0QWN0aW9uID0gdGhpcy5sYXN0VXBkYXRlO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlUm91dGU+PXRoaXMucm91dGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVJvdXRlPTA7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlW3RoaXMuYWN0aXZlUm91dGVdLmxvYWQoKTtcbiAgICAgICAgICAgICAgICBBaXJwbGFuZURpYWxvZy5nZXRJbnN0YW5jZSgpLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUm91dGUrKztcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFjdGl2ZVJvdXRlPj10aGlzLnJvdXRlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVSb3V0ZT0wO1xuICAgICAgICAgICAgICAgIHZhciBjaXR5ID0gdGhpcy53b3JsZC5jaXRpZXNbdGhpcy5yb3V0ZVt0aGlzLmFjdGl2ZVJvdXRlXS5jaXR5aWRdO1xuICAgICAgICAgICAgICAgIHRoaXMuZmx5VG8oY2l0eSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvbmNsaWNrKHRoOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLndvcmxkLnNlbGVjdGlvbj8udW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy53b3JsZC5zZWxlY3Rpb24gPSB0aGlzO1xuICAgICAgICB0aGlzLnNlbGVjdCgpO1xuICAgICAgICB2YXIgaCA9IEFpcnBsYW5lRGlhbG9nLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGguYWlycGxhbmUgPSB0aGlzO1xuICAgICAgICBoLnNob3coKTtcblxuICAgIH1cbiAgICBnZXREYWlseUNvc3RzKCl7XG4gICAgICAgIHZhciByZXQ9cGFyYW1ldGVyLmFsbEFpcnBsYW5lVHlwZXNbdGhpcy50eXBlaWRdLmNvc3RzO1xuICAgICAgICBmb3IodmFyIHg9MDt4PHRoaXMuc3F1YWRyb24ubGVuZ3RoO3grKyl7XG4gICAgICAgICAgICByZXQrPXBhcmFtZXRlci5hbGxBaXJwbGFuZVR5cGVzW3RoaXMuc3F1YWRyb25beF0udHlwZWlkXS5jb3N0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cblxuLy88c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwMHB4Oyc+JiM5OTUxOzwvc3Bhbj4iXX0=