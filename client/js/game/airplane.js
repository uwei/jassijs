define(["require", "exports", "game/product", "game/airplanedialog"], function (require, exports, product_1, airplanedialog_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Airplane = void 0;
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    //
    class Airplane {
        constructor(world) {
            this.status = "";
            this.activeRoute = 0;
            this.type = "Airplane";
            this.world = world;
            this.route = [];
            /*  for(var x=0;x<4;x++){
                  var rt=new Route();
                  rt.cityid=x;
                  this.route.push(rt);
              }*/
        }
        render() {
            var _this = this;
            this.dom = document.createRange().createContextualFragment("<span style='transform:rotate(0turn)' class='mdi mdi-airplane'></span>").children[0]; //document.createElement("span");
            this.dom.style.position = "absolute";
            this.action = "wait";
            this.products = [];
            for (var x = 0; x < product_1.allProducts.length; x++) {
                this.products[x] = 0;
            }
            this.dom.addEventListener("click", (ev) => {
                _this.onclick(ev);
                return undefined;
            });
            this.lastUpdate = this.world.game.date.getTime();
            this.update();
        }
        flyTo(city) {
            var x = city.x;
            var y = city.y;
            this.lastUpdate = this.world.game.date.getTime();
            console.log("fly to " + city.name);
            this.action = "fly";
            this.status = "fly to " + city.name;
            this.targetX = x;
            this.targetY = y;
            this.update();
            for (var i = 0; i < this.world.cities.length; i++) {
                var pos = this.world.cities[i].airplanesInCity.indexOf(this);
                if (pos !== -1) {
                    this.world.cities[i].airplanesInCity.splice(pos, 1);
                }
            }
        }
        select() {
            var _a;
            (_a = this.dom) === null || _a === void 0 ? void 0 : _a.style.color = "red";
        }
        unselect() {
            var _a;
            (_a = this.dom) === null || _a === void 0 ? void 0 : _a.style.color = "black";
        }
        arrived() {
            var _a;
            console.log("target arrived");
            this.targetX = undefined;
            this.targetY = undefined;
            this.action = "wait";
            this.status = "";
            (_a = this.world.findCityAt(this.x, this.y)) === null || _a === void 0 ? void 0 : _a.airplanesInCity.push(this);
            this.dom.style.transform = "rotate(0deg)";
            if (this.activeRoute !== -1) {
                console.log("unload now");
                this.action = "unload";
                this.status = "unload";
                this.lastAction = this.lastUpdate;
            }
        }
        calcNewPosition() {
            var pixelToTarget = Math.round(Math.sqrt(Math.pow(this.targetX - this.x, 2) + Math.pow(this.targetY - this.y, 2))); //Pytharoras
            var fromX = this.x;
            var fromY = this.y;
            var fromTime = 0;
            var toX = this.targetX;
            var toY = this.targetY;
            var toTime = pixelToTarget / this.speed; //t=s/v; in Tage
            var speedVectorX = toX - fromX;
            var speedVectorY = toY - fromY;
            var speedVectorTime = (toTime - fromTime);
            var nowTime = (this.world.game.date.getTime() - this.lastUpdate) / (1000 * 60 * 60 * 24);
            var nowX = Math.round((nowTime / speedVectorTime) * speedVectorX + fromX);
            var nowY = Math.round((nowTime / speedVectorTime) * speedVectorY + fromY);
            if (nowTime >= toTime) {
                this.x = this.targetX;
                this.y = this.targetY;
                this.arrived();
            }
            else {
                var rad = Math.atan((fromX - toX) / (fromY - toY));
                var winkel = 0;
                if (fromY > toY) {
                    winkel = 360 - rad * (180) / Math.PI;
                }
                else {
                    winkel = 180 - rad * (180) / Math.PI;
                }
                var s = ("" + winkel).replace(",", ".");
                this.dom.style.transform = "rotate(" + s + "deg)";
                // console.log(pixelToTarget+" pixel in "+toTime+" seconds. Position "+nowX+" "+nowY+" lastupdate "+nowTime+" "+winkel+"Â°");
                this.x = nowX;
                this.y = nowY;
            }
        }
        update() {
            if (this.targetX !== undefined) {
                this.calcNewPosition();
            }
            this.lastUpdate = this.world.game.date.getTime();
            this.dom.style.top = this.y + "px";
            this.dom.style.left = (this.x - 15) + "px";
            if (this.activeRoute !== -1 && this.route.length > 1) {
                if (this.action === "unload" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    console.log("load now");
                    this.action = "load";
                    this.status = "load";
                    this.lastAction = this.lastUpdate;
                    this.route[this.activeRoute].unload();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                }
                if (this.action === "load" && (this.lastUpdate - this.lastAction) > (3 * 1000 * 60 * 60)) {
                    this.activeRoute++;
                    if (this.activeRoute === this.route.length)
                        this.activeRoute = 0;
                    var city = this.world.cities[this.route[this.activeRoute].cityid];
                    this.flyTo(city);
                    this.lastAction = this.lastUpdate;
                    this.route[this.activeRoute].load();
                    airplanedialog_1.AirplaneDialog.getInstance().update();
                }
            }
        }
        onclick(th) {
            var _a;
            th.preventDefault();
            th.stopPropagation();
            console.log(this.name);
            (_a = this.world.selection) === null || _a === void 0 ? void 0 : _a.unselect();
            this.world.selection = this;
            this.select();
            var h = airplanedialog_1.AirplaneDialog.getInstance();
            h.airplane = this;
            h.show();
        }
    }
    exports.Airplane = Airplane;
});
//<span style='font-size:100px;'>&#9951;</span>
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9nYW1lL2FpcnBsYW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFNQSxTQUFTLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNELEVBQUU7SUFDRixNQUFhLFFBQVE7UUFrQmpCLFlBQVksS0FBWTtZQUp4QixXQUFNLEdBQVcsRUFBRSxDQUFDO1lBRXBCLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLFNBQUksR0FBQyxVQUFVLENBQUM7WUFFWixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNoQjs7OztpQkFJSztRQUNULENBQUM7UUFDRCxNQUFNO1lBQ0YsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQVEsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLHdCQUF3QixDQUFDLHdFQUF3RSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsaUNBQWlDO1lBQ3ZMLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFFckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHFCQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUV4QjtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBYyxFQUFFLEVBQUU7Z0JBQ2xELEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2xCLE9BQU8sU0FBUyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWxCLENBQUM7UUFFRCxLQUFLLENBQUMsSUFBUztZQUNYLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDYixJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRWIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUMsU0FBUyxHQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZEO2FBQ0o7UUFDTCxDQUFDO1FBQ0QsTUFBTTs7WUFDRixNQUFBLElBQUksQ0FBQyxHQUFHLDBDQUFFLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxRQUFROztZQUNKLE1BQUEsSUFBSSxDQUFDLEdBQUcsMENBQUUsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDcEMsQ0FBQztRQUNELE9BQU87O1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLDBDQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQztZQUMxQyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO2dCQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3JDO1FBQ0wsQ0FBQztRQUNELGVBQWU7WUFDWCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsWUFBWTtZQUMvSCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2QixJQUFJLE1BQU0sR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFJLGdCQUFnQjtZQUM1RCxJQUFJLFlBQVksR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksWUFBWSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDL0IsSUFBSSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDMUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDekYsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDMUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDMUUsSUFBSSxPQUFPLElBQUksTUFBTSxFQUFFO2dCQUNuQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDdEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2xCO2lCQUFNO2dCQUNILElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLElBQUksS0FBSyxHQUFHLEdBQUcsRUFBRTtvQkFDYixNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7aUJBQ3hDO3FCQUFNO29CQUNILE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDeEM7Z0JBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUNsRCw0SEFBNEg7Z0JBQzVILElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNkLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ2pCO1FBQ0wsQ0FBQztRQUNELE1BQU07WUFFRixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUM1QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDMUI7WUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDM0MsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFHLFFBQVEsSUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQ2hGLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO29CQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztvQkFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDdEMsK0JBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDekM7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFHLE1BQU0sSUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQzlFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDbkIsSUFBRyxJQUFJLENBQUMsV0FBVyxLQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTt3QkFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksSUFBSSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7b0JBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNwQywrQkFBYyxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUV6QzthQUNKO1FBQ0wsQ0FBQztRQUNELE9BQU8sQ0FBQyxFQUFjOztZQUNsQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDcEIsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUM1QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsR0FBRywrQkFBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUViLENBQUM7S0FDSjtJQWpLRCw0QkFpS0M7O0FBRUQsK0NBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ybGQgfSBmcm9tIFwiZ2FtZS93b3JsZFwiO1xuaW1wb3J0IHsgYWxsUHJvZHVjdHMgfSBmcm9tIFwiZ2FtZS9wcm9kdWN0XCI7XG5pbXBvcnQgeyBBaXJwbGFuZURpYWxvZyB9IGZyb20gXCJnYW1lL2FpcnBsYW5lZGlhbG9nXCI7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gXCJnYW1lL3JvdXRlXCI7XG5pbXBvcnQgeyBDaXR5IH0gZnJvbSBcImdhbWUvY2l0eVwiO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWF4KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG59XG4vL1xuZXhwb3J0IGNsYXNzIEFpcnBsYW5lIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWN0aW9uOiBzdHJpbmc7XG4gICAgbGFzdEFjdGlvbjogbnVtYmVyO1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgLy9waXhlbCBwcm8gc2Vjb25kXG4gICAgc3BlZWQ6IG51bWJlcjtcbiAgICBsYXN0VXBkYXRlOiBudW1iZXI7XG4gICAgdGFyZ2V0WDogbnVtYmVyO1xuICAgIHRhcmdldFk6IG51bWJlcjtcbiAgICBkb206IEhUTUxTcGFuRWxlbWVudDtcbiAgICB3b3JsZDogV29ybGQ7XG4gICAgcHJvZHVjdHM7XG4gICAgc3RhdHVzOiBzdHJpbmcgPSBcIlwiO1xuICAgIHJvdXRlOiBSb3V0ZVtdO1xuICAgIGFjdGl2ZVJvdXRlID0gMDtcbiAgICB0eXBlPVwiQWlycGxhbmVcIjtcbiAgICBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQpIHtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgICAgICB0aGlzLnJvdXRlID0gW107XG4gICAgICAgIC8qICBmb3IodmFyIHg9MDt4PDQ7eCsrKXtcbiAgICAgICAgICAgICAgdmFyIHJ0PW5ldyBSb3V0ZSgpO1xuICAgICAgICAgICAgICBydC5jaXR5aWQ9eDtcbiAgICAgICAgICAgICAgdGhpcy5yb3V0ZS5wdXNoKHJ0KTtcbiAgICAgICAgICB9Ki9cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmRvbSA9IDxhbnk+ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoXCI8c3BhbiBzdHlsZT0ndHJhbnNmb3JtOnJvdGF0ZSgwdHVybiknIGNsYXNzPSdtZGkgbWRpLWFpcnBsYW5lJz48L3NwYW4+XCIpLmNoaWxkcmVuWzBdOy8vZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgXG4gICAgICAgIHRoaXMuYWN0aW9uID0gXCJ3YWl0XCI7XG4gICAgICAgIHRoaXMucHJvZHVjdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxQcm9kdWN0cy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgdGhpcy5wcm9kdWN0c1t4XSA9IDA7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5vbmNsaWNrKGV2KTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGUgPSB0aGlzLndvcmxkLmdhbWUuZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB9XG5cbiAgICBmbHlUbyhjaXR5OkNpdHkpIHtcbiAgICAgICAgdmFyIHg9Y2l0eS54O1xuICAgICAgICB2YXIgeT1jaXR5Lnk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxhc3RVcGRhdGUgPSB0aGlzLndvcmxkLmdhbWUuZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZmx5IHRvIFwiICsgY2l0eS5uYW1lKVxuICAgICAgICB0aGlzLmFjdGlvbiA9IFwiZmx5XCI7XG4gICAgICAgIHRoaXMuc3RhdHVzPVwiZmx5IHRvIFwiKyBjaXR5Lm5hbWU7XG4gICAgICAgIHRoaXMudGFyZ2V0WCA9IHg7XG4gICAgICAgIHRoaXMudGFyZ2V0WSA9IHk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53b3JsZC5jaXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLndvcmxkLmNpdGllc1tpXS5haXJwbGFuZXNJbkNpdHkuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZC5jaXRpZXNbaV0uYWlycGxhbmVzSW5DaXR5LnNwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdCgpIHtcbiAgICAgICAgdGhpcy5kb20/LnN0eWxlLmNvbG9yID0gXCJyZWRcIjtcbiAgICB9XG4gICAgdW5zZWxlY3QoKSB7XG4gICAgICAgIHRoaXMuZG9tPy5zdHlsZS5jb2xvciA9IFwiYmxhY2tcIjtcbiAgICB9XG4gICAgYXJyaXZlZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0YXJnZXQgYXJyaXZlZFwiKTtcbiAgICAgICAgdGhpcy50YXJnZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRhcmdldFkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gXCJ3YWl0XCI7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gXCJcIjtcbiAgICAgICAgdGhpcy53b3JsZC5maW5kQ2l0eUF0KHRoaXMueCwgdGhpcy55KT8uYWlycGxhbmVzSW5DaXR5LnB1c2godGhpcyk7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKDBkZWcpXCI7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVJvdXRlICE9PSAtMSkge1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidW5sb2FkIG5vd1wiKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gXCJ1bmxvYWRcIjtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJ1bmxvYWRcIjtcbiAgICAgICAgICAgIHRoaXMubGFzdEFjdGlvbiA9IHRoaXMubGFzdFVwZGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYWxjTmV3UG9zaXRpb24oKSB7XG4gICAgICAgIHZhciBwaXhlbFRvVGFyZ2V0ID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codGhpcy50YXJnZXRYIC0gdGhpcy54LCAyKSArIE1hdGgucG93KHRoaXMudGFyZ2V0WSAtIHRoaXMueSwgMikpKTsvL1B5dGhhcm9yYXNcbiAgICAgICAgdmFyIGZyb21YID0gdGhpcy54O1xuICAgICAgICB2YXIgZnJvbVkgPSB0aGlzLnk7XG4gICAgICAgIHZhciBmcm9tVGltZSA9IDA7XG4gICAgICAgIHZhciB0b1ggPSB0aGlzLnRhcmdldFg7XG4gICAgICAgIHZhciB0b1kgPSB0aGlzLnRhcmdldFk7XG4gICAgICAgIHZhciB0b1RpbWUgPSBwaXhlbFRvVGFyZ2V0IC8gdGhpcy5zcGVlZDsgICAgLy90PXMvdjsgaW4gVGFnZVxuICAgICAgICB2YXIgc3BlZWRWZWN0b3JYID0gdG9YIC0gZnJvbVg7XG4gICAgICAgIHZhciBzcGVlZFZlY3RvclkgPSB0b1kgLSBmcm9tWTtcbiAgICAgICAgdmFyIHNwZWVkVmVjdG9yVGltZSA9ICh0b1RpbWUgLSBmcm9tVGltZSk7XG4gICAgICAgIHZhciBub3dUaW1lID0gKHRoaXMud29ybGQuZ2FtZS5kYXRlLmdldFRpbWUoKSAtIHRoaXMubGFzdFVwZGF0ZSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG4gICAgICAgIHZhciBub3dYID0gTWF0aC5yb3VuZCgobm93VGltZSAvIHNwZWVkVmVjdG9yVGltZSkgKiBzcGVlZFZlY3RvclggKyBmcm9tWCk7XG4gICAgICAgIHZhciBub3dZID0gTWF0aC5yb3VuZCgobm93VGltZSAvIHNwZWVkVmVjdG9yVGltZSkgKiBzcGVlZFZlY3RvclkgKyBmcm9tWSk7XG4gICAgICAgIGlmIChub3dUaW1lID49IHRvVGltZSkge1xuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy50YXJnZXRYO1xuICAgICAgICAgICAgdGhpcy55ID0gdGhpcy50YXJnZXRZO1xuICAgICAgICAgICAgdGhpcy5hcnJpdmVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmFkID0gTWF0aC5hdGFuKChmcm9tWCAtIHRvWCkgLyAoZnJvbVkgLSB0b1kpKTtcbiAgICAgICAgICAgIHZhciB3aW5rZWwgPSAwO1xuICAgICAgICAgICAgaWYgKGZyb21ZID4gdG9ZKSB7XG4gICAgICAgICAgICAgICAgd2lua2VsID0gMzYwIC0gcmFkICogKDE4MCkgLyBNYXRoLlBJO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5rZWwgPSAxODAgLSByYWQgKiAoMTgwKSAvIE1hdGguUEk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcyA9IChcIlwiICsgd2lua2VsKS5yZXBsYWNlKFwiLFwiLCBcIi5cIik7XG4gICAgICAgICAgICB0aGlzLmRvbS5zdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZShcIiArIHMgKyBcImRlZylcIjtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBpeGVsVG9UYXJnZXQrXCIgcGl4ZWwgaW4gXCIrdG9UaW1lK1wiIHNlY29uZHMuIFBvc2l0aW9uIFwiK25vd1grXCIgXCIrbm93WStcIiBsYXN0dXBkYXRlIFwiK25vd1RpbWUrXCIgXCIrd2lua2VsK1wiwrBcIik7XG4gICAgICAgICAgICB0aGlzLnggPSBub3dYO1xuICAgICAgICAgICAgdGhpcy55ID0gbm93WTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGNOZXdQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IHRoaXMud29ybGQuZ2FtZS5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5kb20uc3R5bGUudG9wID0gdGhpcy55ICsgXCJweFwiO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS5sZWZ0ID0gKHRoaXMueCAtIDE1KSArIFwicHhcIjtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlUm91dGUgIT09IC0xJiZ0aGlzLnJvdXRlLmxlbmd0aD4xKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb249PT1cInVubG9hZFwiJiYodGhpcy5sYXN0VXBkYXRlIC0gdGhpcy5sYXN0QWN0aW9uKSA+ICgzICogMTAwMCo2MCo2MCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWQgbm93XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gXCJsb2FkXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImxvYWRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RBY3Rpb24gPSB0aGlzLmxhc3RVcGRhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVt0aGlzLmFjdGl2ZVJvdXRlXS51bmxvYWQoKTtcbiAgICAgICAgICAgICAgICBBaXJwbGFuZURpYWxvZy5nZXRJbnN0YW5jZSgpLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uPT09XCJsb2FkXCImJih0aGlzLmxhc3RVcGRhdGUgLSB0aGlzLmxhc3RBY3Rpb24pID4gKDMgKiAxMDAwKjYwKjYwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUm91dGUrKztcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFjdGl2ZVJvdXRlPT09dGhpcy5yb3V0ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUm91dGU9MDtcbiAgICAgICAgICAgICAgICB2YXIgY2l0eT10aGlzLndvcmxkLmNpdGllc1t0aGlzLnJvdXRlW3RoaXMuYWN0aXZlUm91dGVdLmNpdHlpZF07XG4gICAgICAgICAgICAgICAgdGhpcy5mbHlUbyhjaXR5KTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RBY3Rpb24gPSB0aGlzLmxhc3RVcGRhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVt0aGlzLmFjdGl2ZVJvdXRlXS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgQWlycGxhbmVEaWFsb2cuZ2V0SW5zdGFuY2UoKS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvbmNsaWNrKHRoOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm5hbWUpO1xuICAgICAgICB0aGlzLndvcmxkLnNlbGVjdGlvbj8udW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy53b3JsZC5zZWxlY3Rpb24gPSB0aGlzO1xuICAgICAgICB0aGlzLnNlbGVjdCgpO1xuICAgICAgICB2YXIgaCA9IEFpcnBsYW5lRGlhbG9nLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGguYWlycGxhbmUgPSB0aGlzO1xuICAgICAgICBoLnNob3coKTtcblxuICAgIH1cbn1cblxuLy88c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwMHB4Oyc+JiM5OTUxOzwvc3Bhbj4iXX0=