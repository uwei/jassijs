define(["require", "exports", "game/product", "game/icons"], function (require, exports, product_1, icons_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Company = void 0;
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    var distributionTable = undefined;
    function getRandomCompanyType(notThisIds = undefined) {
        if (notThisIds === undefined)
            notThisIds = [];
        if (!distributionTable) {
            distributionTable = [];
            var distCount = 0;
            for (var x = 0; x < product_1.allProducts.length; x++) {
                for (var y = 0; y < product_1.allProducts[x].distribution; y++) {
                    distributionTable.push(product_1.allProducts[x].id);
                }
            }
        }
        var rand = undefined;
        while (rand === undefined || notThisIds.indexOf(rand) > -1) {
            rand = getRandomInt(distributionTable.length);
            rand = distributionTable[rand];
        }
        return rand;
    }
    class Company {
        constructor(notThisIds = undefined) {
            this.buildings = 0;
            this.workers = 0;
            this.productid = getRandomCompanyType(notThisIds);
            this.buildings = getRandomInt(3) + 1;
            this.workers = 25 * this.buildings;
        }
        getMaxWorkers() {
            return this.buildings * 25;
        }
        getDailyProduce() {
            var produce = this.workers * product_1.allProducts[this.productid].dailyProduce / 25;
            return Math.round(produce);
        }
        getDailyInput1() {
            var needs = 0;
            var product = product_1.allProducts[this.productid];
            if (product.input1 !== undefined) {
                var p = product_1.allProducts[product.input1];
                needs = this.workers * product.input1Amount / 25;
            }
            return needs;
        }
        getBuildingCoastsAsIcon() {
            var a = this.getBuildingCoasts();
            return a[0] + icons_1.Icons.money + "<br/>" + a[1] + product_1.allProducts[0].getIcon() + "<br/>" + a[2] + product_1.allProducts[1].getIcon();
        }
        getBuildingCoasts() {
            var fact = 5 - (product_1.allProducts[this.productid].distribution) / 4;
            return [fact * 10000,
                fact * 5,
                fact * 10];
        }
        getDailyInput2() {
            var needs = 0;
            var product = product_1.allProducts[this.productid];
            if (product.input2 !== undefined) {
                needs = this.workers * product.input2Amount / 25;
            }
            return needs;
        }
    }
    exports.Company = Company;
    function test() {
        var ids = [];
        var t = [];
        for (var x = 0; x < product_1.allProducts.length; x++) {
            var h = new Company(ids);
            ids.push(h.productid);
            t.push(h.productid);
        }
        t.sort();
        for (var x = 0; x < t.length; x++) {
            console.log(t[x]);
        }
    }
    exports.test = test;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGFueS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2dhbWUvQ29tcGFueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBR0EsU0FBUyxZQUFZLENBQUMsR0FBRztRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxJQUFJLGlCQUFpQixHQUFhLFNBQVMsQ0FBQztJQUU1QyxTQUFTLG9CQUFvQixDQUFDLGFBQXVCLFNBQVM7UUFDMUQsSUFBSSxVQUFVLEtBQUssU0FBUztZQUN4QixVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNwQixpQkFBaUIsR0FBRyxFQUFFLENBQUM7WUFDdkIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxxQkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHFCQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNsRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMscUJBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDN0M7YUFDSjtTQUNKO1FBQ0QsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3hELElBQUksR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFD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LENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtJQUNMLENBQUM7SUFaRCxvQkFZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFsbFByb2R1Y3RzIH0gZnJvbSBcImdhbWUvcHJvZHVjdFwiO1xyXG5pbXBvcnQgeyBJY29ucyB9IGZyb20gXCJnYW1lL2ljb25zXCI7XHJcblxyXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcclxufVxyXG52YXIgZGlzdHJpYnV0aW9uVGFibGU6IG51bWJlcltdID0gdW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gZ2V0UmFuZG9tQ29tcGFueVR5cGUobm90VGhpc0lkczogbnVtYmVyW10gPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChub3RUaGlzSWRzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgbm90VGhpc0lkcyA9IFtdO1xyXG4gICAgaWYgKCFkaXN0cmlidXRpb25UYWJsZSkge1xyXG4gICAgICAgIGRpc3RyaWJ1dGlvblRhYmxlID0gW107XHJcbiAgICAgICAgdmFyIGRpc3RDb3VudCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxQcm9kdWN0cy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGFsbFByb2R1Y3RzW3hdLmRpc3RyaWJ1dGlvbjsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb25UYWJsZS5wdXNoKGFsbFByb2R1Y3RzW3hdLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciByYW5kID0gdW5kZWZpbmVkO1xyXG4gICAgd2hpbGUgKHJhbmQgPT09IHVuZGVmaW5lZCB8fCBub3RUaGlzSWRzLmluZGV4T2YocmFuZCkgPiAtMSkge1xyXG4gICAgICAgIHJhbmQgPSBnZXRSYW5kb21JbnQoZGlzdHJpYnV0aW9uVGFibGUubGVuZ3RoKTtcclxuICAgICAgICByYW5kID0gZGlzdHJpYnV0aW9uVGFibGVbcmFuZF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJhbmQ7XHJcbn1cclxuZXhwb3J0IGNsYXNzIENvbXBhbnkge1xyXG4gICAgcHJvZHVjdGlkOiBudW1iZXI7XHJcbiAgICBidWlsZGluZ3M6IG51bWJlciA9IDA7XHJcbiAgICB3b3JrZXJzOiBudW1iZXIgPSAwO1xyXG4gICAgY29uc3RydWN0b3Iobm90VGhpc0lkczogbnVtYmVyW10gPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLnByb2R1Y3RpZCA9IGdldFJhbmRvbUNvbXBhbnlUeXBlKG5vdFRoaXNJZHMpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRpbmdzID0gZ2V0UmFuZG9tSW50KDMpKzE7XHJcbiAgICAgICAgdGhpcy53b3JrZXJzID0gMjUgKiB0aGlzLmJ1aWxkaW5ncztcclxuICAgIH1cclxuICAgIGdldE1heFdvcmtlcnMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZGluZ3MgKiAyNTtcclxuICAgIH1cclxuICAgIGdldERhaWx5UHJvZHVjZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBwcm9kdWNlID0gdGhpcy53b3JrZXJzICogYWxsUHJvZHVjdHNbdGhpcy5wcm9kdWN0aWRdLmRhaWx5UHJvZHVjZSAvIDI1O1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHByb2R1Y2UpO1xyXG4gICAgfVxyXG4gICAgZ2V0RGFpbHlJbnB1dDEoKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgbmVlZHMgPSAwO1xyXG4gICAgICAgIHZhciBwcm9kdWN0ID0gYWxsUHJvZHVjdHNbdGhpcy5wcm9kdWN0aWRdO1xyXG4gICAgICAgIGlmIChwcm9kdWN0LmlucHV0MSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhciBwPSBhbGxQcm9kdWN0c1twcm9kdWN0LmlucHV0MV07XHJcbiAgICAgICAgICAgIG5lZWRzID0gdGhpcy53b3JrZXJzICogcHJvZHVjdC5pbnB1dDFBbW91bnQvMjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZWVkcztcclxuICAgIH1cclxuICAgIGdldEJ1aWxkaW5nQ29hc3RzQXNJY29uKCl7XHJcbiAgICAgICAgdmFyIGE9dGhpcy5nZXRCdWlsZGluZ0NvYXN0cygpO1xyXG4gICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGFbMF0rSWNvbnMubW9uZXkrXCI8YnIvPlwiK2FbMV0rYWxsUHJvZHVjdHNbMF0uZ2V0SWNvbigpK1wiPGJyLz5cIithWzJdK2FsbFByb2R1Y3RzWzFdLmdldEljb24oKTtcclxuICAgIH0gICAgXHJcbiAgICBnZXRCdWlsZGluZ0NvYXN0cygpe1xyXG4gICAgICAgIHZhciBmYWN0PTUtKGFsbFByb2R1Y3RzW3RoaXMucHJvZHVjdGlkXS5kaXN0cmlidXRpb24pLzQ7XHJcbiAgICAgICAgcmV0dXJuIFtmYWN0KjEwMDAwLFxyXG4gICAgICAgICAgICAgICAgZmFjdCo1LFxyXG4gICAgICAgICAgICAgICAgZmFjdCoxMF1cclxuICAgIH1cclxuICAgIGdldERhaWx5SW5wdXQyKCk6IG51bWJlciB7XHJcbiAgICAgICAgdmFyIG5lZWRzID0gMDtcclxuICAgICAgICB2YXIgcHJvZHVjdCA9IGFsbFByb2R1Y3RzW3RoaXMucHJvZHVjdGlkXTtcclxuICAgICAgICBpZiAocHJvZHVjdC5pbnB1dDIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBuZWVkcyA9IHRoaXMud29ya2VycyAqIHByb2R1Y3QuaW5wdXQyQW1vdW50LzI1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmVlZHM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHRlc3QoKSB7XHJcbiAgICB2YXIgaWRzID0gW107XHJcbiAgICB2YXIgdCA9IFtdO1xyXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxQcm9kdWN0cy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgIHZhciBoID0gbmV3IENvbXBhbnkoaWRzKTtcclxuICAgICAgICBpZHMucHVzaChoLnByb2R1Y3RpZCk7XHJcbiAgICAgICAgdC5wdXNoKGgucHJvZHVjdGlkKTtcclxuICAgIH1cclxuICAgIHQuc29ydCgpO1xyXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB0Lmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codFt4XSk7XHJcbiAgICB9XHJcbn0iXX0=