var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define("jassi/jassi", ["require", "exports", "remote/jassi/base/Jassi", "jassi/base/Errors", "remote/jassi/base/Classes", "remote/jassi/base/Jassi", "jassi/base/Extensions", "remote/jassi/base/Registry", "jassi/ext/jquerylib", "jassi/ext/intersection-observer"], function (require, exports, Jassi_1, Errors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Jassi_1.default.errors = new Errors_1.Errors();
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('service-worker.js');
        navigator.serviceWorker.addEventListener("message", (evt) => {
            if (evt.data === "wait for login") {
                new Promise((resolve_1, reject_1) => { require(["jassi/base/LoginDialog"], resolve_1, reject_1); }).then((data) => {
                    data.login();
                    //          navigator.serviceWorker.controller.postMessage("logindialog closed");
                });
            }
        });
    }
    //jassi.extensions.init();
    exports.default = Jassi_1.default;
});
define("jassi/modul", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        "require": {
            "paths": {
                "ace": "//cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/",
                "ace/ext/language_tools": "//cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/ext-language_tools"
            },
            "shim": {
                "ace/ext/language_tools": [
                    "ace/ace"
                ]
            }
        }
    };
});
//this file is autogenerated dont modify
define("jassi/registry", ["require"], function (require) {
    return {
        default: {
            "jassi/base/Actions.ts": {
                "date": 1612005774792,
                "jassi.base.Actions": {}
            },
            "jassi/base/ChromeDebugger.ts": {
                "date": 1611689907504,
                "jassi.base.ChromeDebugger": {}
            },
            "jassi/base/Database.ts": {
                "date": 1588526300200,
                "jassi.base.Database": {},
                "jassi.base.Database.TypeResolver": {},
                "jassi.base.Database.Type": {},
                "jassi.base.Database.Field": {}
            },
            "jassi/base/DatabaseSchema.ts": {
                "date": 1612005179448,
                "jassi.base.DatabaseSchema": {}
            },
            "jassi/base/Debugger.ts": {
                "date": 1588523924622,
                "jassi.base.Debugger": {}
            },
            "jassi/base/Errors.ts": {
                "date": 1590693468836
            },
            "jassi/base/Extensions.ts": {
                "date": 1612004703379
            },
            "jassi/base/LoginDialog.ts": {
                "date": 1610723045615
            },
            "jassi/base/Parser.ts": {
                "date": 1612904216874,
                "jassi.base.Parser": {}
            },
            "jassi/base/PropertyEditorService.ts": {
                "date": 1612004739848,
                "jassi.base.PropertyEditorService": {}
            },
            "jassi/base/Router.ts": {
                "date": 1588524821202,
                "jassi.base.Router": {}
            },
            "jassi/base/Tests.ts": {
                "date": 1604076786422,
                "jassi.ui.TestAction": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                },
                "jassi.base.Test": {}
            },
            "jassi/base/Windows.ts": {
                "date": 1612724975654,
                "jassi.base.Windows": {}
            },
            "jassi/jassi.ts": {
                "date": 1612729069589
            },
            "jassi/modul.ts": {
                "date": 1612722507221
            },
            "jassi/security/GroupView.ts": {
                "date": 1597615748170,
                "jassi/security/GroupView": {
                    "$DBObjectView": [
                        {
                            "classname": "{{dbfullclassname}}"
                        }
                    ]
                }
            },
            "jassi/security/UserView.ts": {
                "date": 1597614942534,
                "jassi/UserView": {
                    "$DBObjectView": [
                        {
                            "classname": "jassi.security.User"
                        }
                    ]
                }
            },
            "jassi/template/TemplateDBDialog.ts": {
                "date": 1612004753567,
                "jassi.ui.TemplateDBDialogProperties": {},
                "jassi.ui.TemplateDBDialog": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                }
            },
            "jassi/template/TemplateDBObject.ts": {
                "date": 1611490529777,
                "jassi.ui.TemplateDBDialogProperties": {},
                "jassi.ui.TemplateDBObject": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                }
            },
            "jassi/template/TemplateEmptyDialog.ts": {
                "date": 1598795072331,
                "jassi.ui.TemplateEmptyDialog": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                }
            },
            "jassi/ui/AcePanel.ts": {
                "date": 1611772382861,
                "jassi.ui.AcePanel": {}
            },
            "jassi/ui/BoxPanel.ts": {
                "date": 1612904106557,
                "jassi.ui.BoxPanel": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/BoxPanel",
                            "icon": "mdi mdi-view-sequential-outline",
                            "editableChildComponents": [
                                "this"
                            ]
                        }
                    ],
                    "$Property": [
                        {
                            "name": "isAbsolute",
                            "hide": true,
                            "type": "boolean"
                        }
                    ]
                }
            },
            "jassi/ui/Button.ts": {
                "date": 1612620482145,
                "jassi.ui.Button": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Button",
                            "icon": "mdi mdi-gesture-tap-button",
                            "initialize": {
                                "text": "button"
                            }
                        }
                    ]
                }
            },
            "jassi/ui/Checkbox.ts": {
                "date": 1612388063284,
                "jassi.ui.Checkbox": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Ceckbox",
                            "icon": "mdi mdi-checkbox-marked-outline"
                        }
                    ]
                }
            },
            "jassi/ui/CodeEditor.ts": {
                "date": 1612894347233,
                "jassi.ui.CodeEditor": {}
            },
            "jassi/ui/CodeEditorInvisibleComponents.ts": {
                "date": 1600096007442,
                "jassi.ui.CodeEditorInvisibleComponents": {}
            },
            "jassi/ui/CodePanel.ts": {
                "date": 1604055453286,
                "jassi.ui.AcePanel": {}
            },
            "jassi/ui/Component.ts": {
                "date": 1612619149818,
                "jassi.ui.Component": {}
            },
            "jassi/ui/ComponentDescriptor.ts": {
                "date": 1600096007441,
                "jassi.ui.ComponentDescriptor": {}
            },
            "jassi/ui/ComponentExplorer.ts": {
                "date": 1598795059392,
                "jassi.ui.ComponentExplorer": {}
            },
            "jassi/ui/ComponentPalette.ts": {
                "date": 1612620102819,
                "jassi.ui.ComponentPalette": {}
            },
            "jassi/ui/ComponentSpy.ts": {
                "date": 1600096007442,
                "jassi.ui.ComponentSpy": {}
            },
            "jassi/ui/Container.ts": {
                "date": 1601930218480,
                "jassi.ui.Container": {}
            },
            "jassi/ui/ContextMenu.ts": {
                "date": 1612388142986,
                "jassi.ui.ContextMenu": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/ContextMenu",
                            "icon": "mdi mdi-dots-vertical",
                            "editableChildComponents": [
                                "menu"
                            ]
                        }
                    ]
                }
            },
            "jassi/ui/converters/DefaultConverter.ts": {
                "date": 1597689239292,
                "jassi.ui.converters.DefaultConverterProperties": {},
                "jassi.ui.converters.DefaultConverter": {
                    "$Converter": [
                        {
                            "name": "custom"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json",
                            "componentType": "jassi.ui.converters.DefaultConverterProperties"
                        }
                    ]
                }
            },
            "jassi/ui/converters/NumberConverter.ts": {
                "date": 1597688970430,
                "jassi.ui.converters.NumberConverter": {
                    "$Converter": [
                        {
                            "name": "number"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json"
                        }
                    ]
                }
            },
            "jassi/ui/converters/StringConverter.ts": {
                "date": 1597688965742,
                "jassi.ui.converters.StringConverter": {
                    "$Converter": [
                        {
                            "name": "string"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json"
                        }
                    ]
                }
            },
            "jassi/ui/CSSProperties.ts": {
                "date": 1597932720160,
                "jassi.ui.CSSProperties": {}
            },
            "jassi/ui/DatabaseDesigner.ts": {
                "date": 1612388339522,
                "jassi/ui/DatabaseDesigner": {}
            },
            "jassi/ui/Databinder.ts": {
                "date": 1612388398549,
                "jassi.ui.Databinder": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Databinder",
                            "icon": "mdi mdi-connection"
                        }
                    ]
                }
            },
            "jassi/ui/DataComponent.ts": {
                "date": 1588525732312,
                "jassi.ui.DataComponent": {}
            },
            "jassi/ui/DBObjectDialog.ts": {
                "date": 1612004874888,
                "jassi.ui.DBObjectDialog": {}
            },
            "jassi/ui/DBObjectExplorer.ts": {
                "date": 1612005505464,
                "jassi.ui.DBObjectNode": {},
                "jassi.ui.DBFileActions": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                },
                "jassi.ui.DBObjectActions": {
                    "$ActionProvider": [
                        "jassi.ui.DBObjectNode"
                    ]
                },
                "jassi.ui.DBObjectExplorer": {}
            },
            "jassi/ui/DBObjectView.ts": {
                "date": 1612388578948,
                "jassi/ui/DBObjectView": {
                    "$UIComponent": [
                        {
                            "editableChildComponents": [
                                "this",
                                "me.main",
                                "me.toolbar",
                                "me.save",
                                "me.remove",
                                "me.refresh"
                            ]
                        }
                    ]
                }
            },
            "jassi/ui/DesignDummy.ts": {
                "date": 1612386417095,
                "jassi.ui.DesignDummy": {}
            },
            "jassi/ui/designer/ComponentDesigner.ts": {
                "date": 1612474029633,
                "jassi.ui.designer.ComponentDesigner": {}
            },
            "jassi/ui/DockingContainer.ts": {
                "date": 1612724975654,
                "jassi.ui.DockingContainer": {}
            },
            "jassi/ui/ErrorPanel.ts": {
                "date": 1612904325314,
                "jassi.ui.ErrorPanel": {}
            },
            "jassi/ui/FileExplorer.ts": {
                "date": 1598795027158,
                "jassi.ui.FileActions": {
                    "$ActionProvider": [
                        "jassi.base.FileNode"
                    ]
                },
                "jassi.ui.FileExplorer": {}
            },
            "jassi/ui/helper/DragAndDropper.ts": {
                "date": 1609025183247,
                "jassi.ui.helper.DragAndDropper": {}
            },
            "jassi/ui/helper/Resizer.ts": {
                "date": 1600096007442,
                "jassi.ui.helper.Resizer": {}
            },
            "jassi/ui/HTMLEditorPanel.ts": {
                "date": 1611772363627,
                "jassi.ui.HTMLEditorPanel": {}
            },
            "jassi/ui/HTMLPanel.ts": {
                "date": 1612392182333,
                "jassi.ui.HTMLPanel": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/HTMLPanel",
                            "icon": "mdi mdi-cloud-tags"
                        }
                    ]
                }
            },
            "jassi/ui/Image.ts": {
                "date": 1612620133369,
                "jassi.ui.Image": {
                    "$UIComponent": [
                        {
                            "fullPath": "default/Image",
                            "icon": "mdi mdi-file-image"
                        }
                    ]
                }
            },
            "jassi/ui/InvisibleComponent.ts": {
                "date": 1599987111224,
                "jassi.ui.InvisibleComponent": {
                    "$Property": [
                        {
                            "hideBaseClassProperties": true
                        }
                    ]
                }
            },
            "jassi/ui/Menu.ts": {
                "date": 1612387671271,
                "jassi.ui.Menu": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Menu",
                            "icon": "mdi mdi-menu",
                            "initialize": {
                                "text": "menu"
                            }
                        }
                    ]
                }
            },
            "jassi/ui/MenuItem.ts": {
                "date": 1612388976092,
                "jassi.ui.MenuItem": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/MenuItem",
                            "icon": "mdi mdi-menu-open",
                            "initialize": {
                                "text": "menu"
                            },
                            "editableChildComponents": [
                                "items"
                            ]
                        }
                    ]
                }
            },
            "jassi/ui/MonacoPanel.ts": {
                "date": 1609019340495,
                "jassi.ui.MonacoPanel": {}
            },
            "jassi/ui/ObjectChooser.ts": {
                "date": 1612389049686,
                "jassi.ui.ObjectChooser": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/ObjectChooser",
                            "icon": "mdi mdi-glasses"
                        }
                    ]
                }
            },
            "jassi/ui/OptionDialog.ts": {
                "date": 1599942356283,
                "jassi.ui.OptionDialog": {},
                "jassi.ui.OptionDialogTestProp": {}
            },
            "jassi/ui/Panel.ts": {
                "date": 1612389020475,
                "jassi.ui.PanelCreateProperties": {},
                "jassi.ui.Panel": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Panel",
                            "icon": "mdi mdi-checkbox-blank-outline",
                            "editableChildComponents": [
                                "this"
                            ]
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json",
                            "componentType": "jassi.ui.PanelCreateProperties"
                        }
                    ]
                }
            },
            "jassi/ui/PDFViewer.ts": {
                "date": 1611936363489,
                "jassi.ui.PDFViewer": {}
            },
            "jassi/ui/Property.ts": {
                "date": 1600026410359,
                "jassi.ui.Property": {}
            },
            "jassi/ui/PropertyEditor.ts": {
                "date": 1612621534269,
                "jassi.ui.PropertyEditor": {},
                "jassi.ui.PropertyEditorTestProperties": {}
            },
            "jassi/ui/PropertyEditors/BooleanEditor.ts": {
                "date": 1588523740259,
                "jassi.ui.PropertyEditors.BooleanEditor": {
                    "$PropertyEditor": [
                        [
                            "boolean"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/ClassSelectorEditor.ts": {
                "date": 1612389063604,
                "jassi.ui.PropertyEditors.ClassSelectorEditor": {
                    "$PropertyEditor": [
                        [
                            "classselector"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/ColorEditor.ts": {
                "date": 1600096007443,
                "jassi.ui.PropertyEditors.ColorEditor": {
                    "$PropertyEditor": [
                        [
                            "color"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/ComponentSelectorEditor.ts": {
                "date": 1597834090572,
                "jassi.ui.PropertyEditors.ComponentSelectorEditor": {
                    "$PropertyEditor": [
                        [
                            "componentselector"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/DatabinderEditor.ts": {
                "date": 1588526053983,
                "jassi.ui.PropertyEditors.DatabinderEditor": {
                    "$PropertyEditor": [
                        [
                            "databinder"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/DBObjectEditor.ts": {
                "date": 1597673551588,
                "jassi.ui.PropertyEditors.DBObjectEditor": {
                    "$PropertyEditor": [
                        [
                            "dbobject"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/DefaultEditor.ts": {
                "date": 1601043915417,
                "jassi.ui.PropertyEditors.DefaultEditor": {
                    "$PropertyEditor": [
                        [
                            "string",
                            "number",
                            "number[]"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/Editor.ts": {
                "date": 1588525820601,
                "jassi.ui.PropertyEditors.Editor": {}
            },
            "jassi/ui/PropertyEditors/FontEditor.ts": {
                "date": 1597779781903,
                "jassi.ui.PropertyEditors.FontEditor": {
                    "$PropertyEditor": [
                        [
                            "font"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/FunctionEditor.ts": {
                "date": 1598471346710,
                "jassi.ui.PropertyEditors.FunctionEditor": {
                    "$PropertyEditor": [
                        [
                            "function"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/HTMLEditor.ts": {
                "date": 1588526029376,
                "jassi.ui.PropertyEditors.HTMLEditor": {
                    "$PropertyEditor": [
                        [
                            "html"
                        ]
                    ]
                }
            },
            "jassi/ui/PropertyEditors/JsonEditor.ts": {
                "date": 1612389230395,
                "jassi.ui.PropertyEditors.JsonEditor": {
                    "$PropertyEditor": [
                        [
                            "json"
                        ]
                    ]
                },
                "jassi.ui.PropertyEditorTestProperties": {},
                "jassi.ui.PropertyEditorTestProperties2": {}
            },
            "jassi/ui/PropertyEditors/LoadingEditor.ts": {
                "date": 1601070457611
            },
            "jassi/ui/PropertyEditors/NameEditor.ts": {
                "date": 1588526029376,
                "jassi.ui.PropertyEditors.NameEditor": {
                    "$PropertyEditor": [
                        [
                            "*name*"
                        ]
                    ]
                }
            },
            "jassi/ui/Repeater.ts": {
                "date": 1612389374909,
                "jassi.ui.Repeater": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Repeater",
                            "icon": "mdi mdi-locker-multiple",
                            "editableChildComponents": [
                                "this",
                                "design"
                            ]
                        }
                    ]
                }
            },
            "jassi/ui/SearchExplorer.ts": {
                "date": 1604078315197,
                "jassi.ui.SearchExplorer": {}
            },
            "jassi/ui/Select.ts": {
                "date": 1612389415505,
                "jassi.ui.SelectCreateProperties": {},
                "jassi.ui.Select": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Select",
                            "icon": "mdi mdi-form-dropdown"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json",
                            "componentType": "jassi.ui.SelectCreateProperties"
                        }
                    ]
                }
            },
            "jassi/ui/Style.ts": {
                "date": 1612389497339,
                "jassi.ui.Style": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Style",
                            "icon": "mdi mdi-virus"
                        }
                    ]
                }
            },
            "jassi/ui/Table.ts": {
                "date": 1612389527281,
                "jassi.ui.TableEditorProperties": {},
                "jassi.ui.Table": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Table",
                            "icon": "mdi mdi-grid"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json",
                            "componentType": "jassi.ui.TableEditorProperties"
                        }
                    ]
                }
            },
            "jassi/ui/Textbox.ts": {
                "date": 1612389551897,
                "jassi.ui.Textbox": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Textbox",
                            "icon": "mdi mdi-form-textbox"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "string"
                        }
                    ]
                }
            },
            "jassi/ui/Tree.ts": {
                "date": 1612724975654,
                "jassi.ui.TreeEditorPropertiesMulti": {},
                "jassi.ui.TreeEditorProperties": {},
                "jassi.ui.Tree": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Tree",
                            "icon": "mdi mdi-file-tree"
                        }
                    ],
                    "$Property": [
                        {
                            "name": "new",
                            "type": "json",
                            "componentType": "jassi.ui.TreeEditorProperties"
                        }
                    ]
                }
            },
            "jassi/ui/Upload.ts": {
                "date": 1612389679828,
                "jassi.ui.Upload": {
                    "$UIComponent": [
                        {
                            "fullPath": "common/Upload",
                            "icon": "mdi mdi-cloud-upload-outline"
                        }
                    ]
                }
            },
            "jassi/ui/VariablePanel.ts": {
                "date": 1601114418181,
                "jassi.ui.VariablePanel": {}
            },
            "jassi/util/Cookies.ts": {
                "date": 1611783871704
            },
            "jassi/util/CSVImport.ts": {
                "date": 1611772353658,
                "jassi/util/CSVImport": {}
            },
            "jassi/util/DatabaseSchema.ts": {
                "date": 1611489275438
            },
            "jassi/util/monaco.d.ts": {
                "date": 499162500000
            },
            "jassi/util/Reloader.ts": {
                "date": 1612005124479,
                "jassi.util.Reloader": {}
            },
            "jassi/util/Tools.ts": {
                "date": 1611772338823,
                "jassi.util.Tools": {}
            },
            "jassi/util/TSSourceMap.ts": {
                "date": 1612207450166,
                "jassi.util.TSSourceMap": {}
            },
            "jassi/util/Typescript.ts": {
                "date": 1612903324011,
                "jassi/util/Typescript": {}
            },
            "remote/jassi/base/Classes.ts": {
                "date": 1612978064279,
                "remote.jassi.base.Classes": {}
            },
            "remote/jassi/base/Database.ts": {
                "date": 1611443365012,
                "remote.jassi.base.Database": {}
            },
            "remote/jassi/base/DBArray.ts": {
                "date": 1612978074795,
                "remote.jassi.base.DBArray": {}
            },
            "remote/jassi/base/DBObject.ts": {
                "date": 1612978081977,
                "remote.jassi.base.DBObject": {}
            },
            "remote/jassi/base/DBObjectQuery.ts": {
                "date": 1588526274466
            },
            "remote/jassi/base/Extensions.ts": {
                "date": 1586622168850
            },
            "remote/jassi/base/FileNode.ts": {
                "date": 1612978100341,
                "remote.jassi.base.FileNode": {}
            },
            "remote/jassi/base/hallo.ts": {
                "date": 1578943024284
            },
            "remote/jassi/base/Jassi.ts": {
                "date": 1612978109124,
                "remote.jassi.base.Jassi": {}
            },
            "remote/jassi/base/Registry.ts": {
                "date": 1612977751408
            },
            "remote/jassi/base/RemoteObject.ts": {
                "date": 1612978124533,
                "remote.jassi.base.RemoteObject": {}
            },
            "remote/jassi/base/RemoteProtocol.ts": {
                "date": 1612978136697,
                "remote.jassi.base.RemoteProtocol": {}
            },
            "remote/jassi/base/Server.ts": {
                "date": 1612903657911,
                "remote.jassi.base.Server": {}
            },
            "remote/jassi/ext/registry.ts": {
                "date": 1612727161765
            },
            "remote/jassi/security/Group.ts": {
                "date": 1612978162142,
                "remote.jassi.security.Group": {
                    "$DBObject": [
                        {
                            "name": "jassi_group"
                        }
                    ]
                }
            },
            "remote/jassi/security/ParentRight.ts": {
                "date": 1612978166426,
                "remote.jassi.security.ParentRight": {
                    "$DBObject": [
                        {
                            "name": "jassi_parentright"
                        }
                    ]
                }
            },
            "remote/jassi/security/Right.ts": {
                "date": 1612978170240,
                "remote.jassi.security.Right": {
                    "$DBObject": [
                        {
                            "name": "jassi_right"
                        }
                    ]
                }
            },
            "remote/jassi/security/Rights.ts": {
                "date": 1612978176062,
                "remote.jassi.security.Rights": {}
            },
            "remote/jassi/security/User.ts": {
                "date": 1612978182309,
                "remote.jassi.security.User": {
                    "$DBObject": [
                        {
                            "name": "jassi_user"
                        }
                    ]
                }
            }
        }
    };
});
define("jassi/base/Actions", ["require", "exports", "remote/jassi/base/Registry", "remote/jassi/base/Jassi", "remote/jassi/base/Classes"], function (require, exports, Registry_1, Jassi_2, Classes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Actions = exports.$ActionProvider = exports.$Action = exports.ActionProperties = void 0;
    class ActionProperties {
    }
    exports.ActionProperties = ActionProperties;
    function $Action(property) {
        return function (target, propertyKey, descriptor) {
            Registry_1.default.registerMember("$Action", target, propertyKey, property);
        };
    }
    exports.$Action = $Action;
    function $ActionProvider(longclassname) {
        return function (pclass) {
            Registry_1.default.register("$ActionProvider", pclass);
        };
    }
    exports.$ActionProvider = $ActionProvider;
    let Actions = class Actions {
        static async getActionsFor(vdata) {
            var oclass = vdata[0].constructor;
            var ret = [];
            /*men.text = actions[x].name;
                    men.icon = actions[x].icon;
                    men.onclick(function (evt) {
                        ac.run([node]);
                    });*/
            var sclass = Classes_1.classes.getClassName(oclass);
            var allclasses = (await Registry_1.default.getJSONData("$ActionProvider")).filter(entr => entr.params[0] === sclass);
            await Registry_1.default.loadAllFilesForEntries(allclasses);
            let data = Registry_1.default.getData("$ActionProvider");
            for (let x = 0; x < allclasses.length; x++) {
                var entr = allclasses[x];
                var mem = Registry_1.default.getMemberData("$Action")[entr.classname];
                for (let name in mem) {
                    var ac = mem[name][0][0];
                    if (ac.isEnabled !== undefined && ((await ac.isEnabled(vdata)) === false))
                        continue;
                    ret.push({
                        name: ac.name,
                        call: Classes_1.classes.getClass(entr.classname)[name]
                    });
                }
            }
            return ret;
        }
    };
    Actions = __decorate([
        Jassi_2.$Class("jassi.base.Actions")
    ], Actions);
    exports.Actions = Actions;
    async function test() {
    }
    exports.test = test;
});
define("jassi/base/Router", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Classes", "jassi/ui/ComponentDescriptor", "jassi/base/Windows"], function (require, exports, Jassi_3, Classes_2, ComponentDescriptor_1, Windows_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.router = exports.Router = void 0;
    new Promise((resolve_2, reject_2) => { require(["remote/jassi/base/Classes"], resolve_2, reject_2); });
    let Router = class Router {
        constructor() {
        }
        /**
         * registers a database class
         * @param {string} - the name of the class
         * @param {class} - the class
         */
        register(name, data) {
            throw "Error not implemented";
        }
        /**
         * resolve the url
         * @param {string} hash - the hash to resolve
         */
        resolve(hash) {
            if (hash === "")
                return;
            var tags = hash.substring(1).split("&");
            var params = {};
            for (var x = 0; x < tags.length; x++) {
                var kv = tags[x].split("=");
                params[kv[0]] = kv[1];
            }
            if (params.do !== undefined) {
                var clname = params.do;
                //load js file
                Classes_2.classes.loadClass(clname).then(function (cl) {
                    if (cl === undefined)
                        return;
                    var props = ComponentDescriptor_1.ComponentDescriptor.describe(cl).fields;
                    ;
                    var id = undefined;
                    for (var p = 0; p < props.length; p++) {
                        if (props[p].id) {
                            id = props[p].name;
                        }
                    }
                    var name = params.do + "-" + params[id];
                    if (Windows_1.default.contains(name)) {
                        var window = Windows_1.default.show(name);
                        var ob = Windows_1.default.findComponent(name);
                        if (ob !== undefined) {
                            for (var key in params) {
                                if (key !== "do" && //no classname
                                    key !== id) { //no id!
                                    ob[key] = params[key];
                                }
                            }
                        }
                        return window;
                    }
                    else {
                        var ob = new cl();
                        for (var key in params) {
                            if (key !== "do") {
                                ob[key] = params[key];
                            }
                        }
                        //editor=new jassi.ui.CodeEditor();
                        Windows_1.default.add(ob, ob.title, name);
                        //await editor.openFile(url);
                        if (ob.callEvent !== undefined) {
                            Windows_1.default.onclose(ob, function (param) {
                                ob.callEvent("close", param);
                            });
                        }
                    }
                });
                /*var urltags=[];
                for(var p=0;p<props.length;p){
                    if(props[p].isUrlTag){
                        urltags.push(props[p]);
                    }
                }*/
            }
        }
        /**
         * generate a URL from the component
         * @param {jassi.ui.Component} component - the component to inspect
         */
        getURLFromComponent(component) {
        }
        /**
         *
         * @param {string} hash - the hash to navigate
         */
        navigate(hash) {
            window.location.hash = hash;
            this.resolve(hash);
        }
    };
    Router = __decorate([
        Jassi_3.$Class("jassi.base.Router"),
        __metadata("design:paramtypes", [])
    ], Router);
    exports.Router = Router;
    ;
    window.addEventListener("popstate", function (evt) {
        router.resolve(window.location.hash);
    });
    let router = new Router();
    exports.router = router;
});
define("jassi/base/Windows", ["require", "exports", "jassi/ui/Panel", "remote/jassi/base/Jassi", "jassi/ext/goldenlayout", "jassi/ui/ComponentDescriptor", "remote/jassi/base/Classes", "jassi/util/Cookies"], function (require, exports, Panel_1, Jassi_4, goldenlayout_1, ComponentDescriptor_2, Classes_3, Cookies_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Windows = void 0;
    let Windows = class Windows {
        /**
         * the window system -> jassi.windows
         * @class jassi.base.Windows
         */
        constructor() {
            this._noRestore = [];
            this._myLayout = undefined;
            this._counter = 0;
            this._id = "jassi.windows";
            this.dom = $('<div class="Windows" id="' + this._id + 'jassi.windows"/>')[0];
            this._desktop = new Panel_1.Panel();
            this._desktop.maximize();
            //@member {Object.<string,lm.items.Component>} holds all known windows 
            this.components = [];
            //  this._desktop.add(new jassi.ui.Button());
            $(document.body).append(this.dom);
            //formemoryleak
            this._init();
        }
        /**
         * inits the component
         */
        _init() {
            var config = {
                settings: {
                    showPopoutIcon: false
                },
                content: [{
                        type: 'row',
                        name: 'mid',
                        isClosable: false,
                        content: [
                            {
                                type: 'stack',
                                name: 'center',
                                isClosable: false,
                                content: [{
                                        type: 'component',
                                        isClosable: false,
                                        componentName: 'main',
                                        componentState: {}
                                    }]
                            }
                        ]
                    }]
            };
            this._myLayout = new goldenlayout_1.default(config);
            var thisDesktop = this._desktop;
            var _this = this;
            this._myLayout.registerComponent('main', function (container, state) {
                var v = container.getElement();
                v[0].appendChild(thisDesktop.dom); //html( '<h2>' + state.text + '</h2>');
                _this.inited = true;
            });
            this._myLayout.init();
            this.restoreWindows();
            var j = this._myLayout;
        }
        /**
         * search a window
         * @param {object|undefined} parent - the parent window
         * @param {type} name - name of the window
         * @returns {object} - the founded window
         */
        _findDeep(parent, name) {
            if (parent === undefined)
                parent = this._myLayout.root;
            for (var x = 0; x < parent.contentItems.length; x++) {
                if (parent.contentItems[x].config.name === name || parent.contentItems[x].config.componentName === name)
                    return parent.contentItems[x];
                var test = this._findDeep(parent.contentItems[x], name);
                if (test !== undefined)
                    return test;
            }
            return undefined;
        }
        /**
         * true if there a window with that name
         * @param {string} name
         * @returns {boolean}
         */
        contains(name) {
            return this._myLayout._components[name] !== undefined;
        }
        /**
         * activate the window
         * @param {string} name - the neme of the window
         * @returns {objet} - the window
         */
        show(name) {
            //           var m=this._find(this._myLayout.root,name);
            var m = this.components[name];
            if (m.parent.header !== undefined)
                m.parent.header.parent.setActiveContentItem(m);
            return m;
        }
        /**
         * finds the component for the name
         * @param {string} name - the name of the window
         * @returns {jassi.ui.Component} - the found dom element
         */
        findComponent(name) {
            var m = this.components[name]; //this._find(this._myLayout.root,name);
            if (m === undefined)
                return undefined;
            if (m.container === undefined || m.container._config === undefined || m.container._config.componentState === undefined)
                return undefined;
            var ret = m.container._config.componentState.component;
            if (ret._this !== undefined)
                return ret._this;
        }
        /**
         * adds a window to the side (left - area)
         * @param {dom|jassi.ui.Component} component - the component to add
         * @param {string} title - the title
         */
        addLeft(component, title) {
            var parentname = 'xxxleft';
            this._noRestore.push(title);
            var config = {
                name: parentname,
                type: 'stack',
                content: []
            };
            var _this = this;
            var parent = this.components[parentname];
            if (parent === undefined) {
                this._myLayout.root.contentItems[0].addChild(config, 0);
                parent = this._myLayout.root.contentItems[0].contentItems[0];
                this._myLayout.root.contentItems[0].contentItems[0].config.width = 15;
                this.components[parentname] = parent;
                parent.on("itemDestroyed", () => {
                    delete _this.components[parentname];
                    _this._myLayout.updateSize();
                });
            }
            this._add(parent, component, title);
        }
        /**
        * adds a window to the side (left - area)
        * @param {dom|jassi.ui.Component} component - the component to add
        * @param {string} title - the title
        */
        addRight(component, title) {
            var parentname = 'xxxright';
            this._noRestore.push(title);
            var _this = this;
            var config = {
                name: parentname,
                type: 'column',
                content: []
            };
            var parent = this.components[parentname];
            if (parent === undefined) {
                var pos = this._myLayout.root.contentItems[0].contentItems.length;
                this._myLayout.root.contentItems[0].addChild(config, pos);
                parent = this._myLayout.root.contentItems[0].contentItems[pos];
                parent.config.width = 15;
                this.components[parentname] = parent;
                parent.on("itemDestroyed", () => {
                    delete _this.components[parentname];
                    _this._myLayout.updateSize();
                });
            }
            this._add(parent, component, title);
        }
        add(component, title, name = undefined) {
            var parent = this.components["center"];
            if (parent === undefined)
                parent = this.components["center"] = this._findDeep(this._myLayout.root, "center");
            return this._add(parent, component, title, name);
        }
        /**
         * add a window to the main area
         * @param {dom|jassi.ui.Component} component - the component to add
         * @param {string} title - the title
         * @param {string} [id] - the name (id) - =title if undefined
         */
        _add(parent, component, title, name = undefined) {
            var _this = this;
            if (component.dom !== undefined)
                component = component.dom;
            if (name === undefined)
                name = title;
            if (this.components[name] !== undefined)
                name = name + this._counter++;
            var config = {
                title: title,
                type: 'component',
                componentName: name,
                componentState: { title: title, name: name, component: component }
            };
            this._myLayout.registerComponent(name, function (container, state) {
                var v = container.getElement();
                state.component._container = container;
                var z = v[0].appendChild(state.component); //html( '<h2>' + state.text + '</h2>');
                _this.onclose(state.component, function (data) {
                    if (data.config.componentState.component._this !== undefined)
                        data.config.componentState.component._this.destroy();
                    delete data.config.componentState.component._container;
                    delete data.config.componentState.component;
                    //memory leak golden layout
                    // container.tab._dragListener._oDocument.unbind('mouseup touchend', container.tab._dragListener._fUp);
                    /*  container.tab.element.remove();
                      var myNode =container.tab.element[0];
                      while (myNode.firstChild) {
                          myNode.removeChild(myNode.firstChild);
                      }*/
                    // container.tab.header.activeContentItem = undefined;
                    delete _this._myLayout._components[name];
                    delete _this.components[name];
                    _this.saveWindows();
                });
                var test = _this.components[name];
            });
            parent.addChild(config);
            for (var x = 0; x < parent.contentItems.length; x++) {
                if (parent.contentItems[x].config.name === name || parent.contentItems[x].config.componentName === name) {
                    this.components[name] = parent.contentItems[x];
                    //activate
                    var _this = this;
                    setTimeout(function () {
                        _this.show(name);
                        _this.saveWindows();
                    }, 10);
                    //this.components[name].parent.header.parent.setActiveContentItem(this.components[name]);
                }
            }
            var j = 9;
        }
        test() {
            var name = "oo";
            var title = "oo";
            var config = {
                title: title,
                type: 'component',
                componentName: name,
                componentState: { title: title, name: name }
            };
            var tt = $("<Button>");
            var _this = this;
            this._myLayout.registerComponent(name, function (container, componentState) {
                // var v=container.getElement();
                container.on("destroy", function (data) {
                    var hh = container.tab;
                    hh._dragListener._oDocument.unbind('mouseup touchend', hh._dragListener._fUp);
                    delete _this._myLayout._components[name];
                });
            });
            var center = this.components["center"];
            if (center === undefined)
                center = this.components["center"] = this._findDeep(this._myLayout.root, "center");
            center.addChild(config);
        }
        /**
         * gets the url for the given component
         * @param {jassi.ui.component} comp - the component to read
         */
        getUrlFromComponent(comp) {
            var props = ComponentDescriptor_2.ComponentDescriptor.describe(comp.constructor).fields;
            var urltags = [];
            for (var p = 0; p < props.length; p++) {
                if (props[p].isUrlTag) {
                    urltags.push(props[p]);
                }
            }
            var url = "#do=" + Classes_3.classes.getClassName(comp);
            for (var x = 0; x < urltags.length; x++) {
                url = url + "&" + urltags[x].name + "=" + comp[urltags[x].name];
            }
            return url;
            return "";
        }
        restoreWindows() {
            var save = Cookies_1.Cookies.get('openedwindows');
            if (save === undefined || save === "")
                return;
            var all = save.split(",");
            new Promise((resolve_3, reject_3) => { require(["./Router"], resolve_3, reject_3); }).then(function (router) {
                for (var x = 0; x < all.length; x++) {
                    router.router.navigate(all[x]);
                }
            });
        }
        /*
         * writes all opened components to cookie
         */
        saveWindows() {
            var all = [];
            for (var key in this.components) {
                var comp = this.findComponent(key); //this.components[key].container._config.componentState.component;
                if (comp !== undefined && this._noRestore.indexOf(key) === -1) {
                    // comp=comp._this;
                    if (comp !== undefined) {
                        var url = this.getUrlFromComponent(comp);
                        all.push(url);
                    }
                }
            }
            var s = "";
            for (var x = 0; x < all.length; x++) {
                s = s + (s === "" ? "" : ",") + all[x];
            }
            Cookies_1.Cookies.set('openedwindows', s, { expires: 30 });
        }
        /**
         * fired if component is closing
         * @param {dom|jassi.UI.Component} component - the component to register this event
         * @param {function} func
         */
        onclose(component, func) {
            if (component.dom !== undefined)
                component = component.dom;
            component._container.on("destroy", function (data) {
                func(data);
            });
        }
    };
    Windows = __decorate([
        Jassi_4.$Class("jassi.base.Windows"),
        __metadata("design:paramtypes", [])
    ], Windows);
    exports.Windows = Windows;
    var windows = new Windows();
    windows = windows;
    exports.default = windows;
});
//   myRequire("lib/goldenlayout.js",function(){
//  jassi.windows._init();
//  });
//return Component.constructor;
define("jassi/base/ChromeDebugger", ["require", "exports", "remote/jassi/base/Jassi", "jassi/base/Debugger", "jassi/ui/OptionDialog", "jassi/util/TSSourceMap", "jassi/util/Reloader", "remote/jassi/base/Server", "jassi/base/Windows"], function (require, exports, Jassi_5, Debugger_1, OptionDialog_1, TSSourceMap_1, Reloader_1, Server_1, Windows_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChromeDebugger = void 0;
    //		var extensionId="nheagplodboonenlmdkdeicbgpdgnclk";//homepc
    //var extensionId="acdfaoillomjkcepfbfdbccmipjhgmco";//laptop
    var extensionId = "nfbbhnmkfdonfbobklbjinalhgileegp"; //laptop neu
    /**
     * debugging in Chrome
     */
    let ChromeDebugger = class ChromeDebugger extends Debugger_1.Debugger {
        constructor() {
            super();
            this.allBreakPoints = {};
            this.listentoCodeChanges();
        }
        urlToFile(url) {
            var file = url;
            var wurl = window.location.href.split("/app.html")[0];
            file = file.replace(wurl + "/", "");
            file = file.split("?")[0];
            return file;
        }
        async saveCode(url, code) {
            //alert(code);
            var file = this.urlToFile(url);
            var filename = file.replace("$temp", "");
            var _this = this;
            //give the user the option to reload the changes in codeeditor
            var editor = Windows_2.default.findComponent("jassi.ui.CodeEditor-" + filename);
            if (editor !== undefined) {
                if (editor._codeToReload === undefined) {
                    OptionDialog_1.OptionDialog.show("The source was updated in Chrome. Do you want to load this modification?", ["Yes", "No"], editor, false).then(function (data) {
                        if (data.button === "Yes")
                            editor.value = editor._codeToReload;
                        delete editor._codeToReload;
                    });
                }
                //remove temporary debugpoints
                if (file.indexOf("$temp") > -1) {
                    var reg = new RegExp("{var debug_editor.*debug_editor\\.addVariables\\(_variables_\\)\\;}");
                    var ret = reg.exec(code);
                    while (ret !== null) {
                        code = code.substring(0, ret.index) + code.substring(ret.index + ret[0].length);
                        ret = reg.exec(code);
                    }
                }
                editor._codeToReload = code;
            }
            if (file.indexOf("$temp") > -1) {
                return;
            }
            new Server_1.Server().saveFile(file, code).then(function () {
                new Reloader_1.Reloader().reloadJS(file.replace(".ts", ""));
                if (code.indexOf("jassi.register(") > -1) {
                    Jassi_5.default.registry.reload();
                }
            });
        }
        static isExtensionInstalled() {
            if (window["chrome"] === undefined)
                return false;
            try {
                window["chrome"].runtime.sendMessage(extensionId, { name: "connect" }, undefined);
            }
            catch (ex) {
                return false;
            }
            return true;
        }
        listentoCodeChanges() {
            var _this = this;
            window["chrome"].runtime.sendMessage(extensionId, { name: "getCodeChange" }, undefined, function (ret) {
                if (_this.destroyed)
                    return;
                _this.saveCode(ret.url.url, ret.data);
                _this.listentoCodeChanges();
            });
        }
        /**
         * remove all breakpoints for the file
         * @param file
         */
        async removeBreakpointsForFile(file) {
            var bps = this.allBreakPoints[file];
            if (bps === undefined)
                return;
            while (bps.length > 0) {
                await this.breakpointChanged(file, Number(bps[0].split(":")[0]), Number(bps[0].split(":")[1]), false);
            }
        }
        /**
         * sets a breakpoint for debugging
         * @param {string} file
         * @param {number} line
         * @param {number} enable - if true then breakpoint is set if false then removed
         * @param {string} type - the type default undefined->stop debugging
         **/
        async breakpointChanged(file, line, column, enable, type = undefined) {
            if (this.allBreakPoints[file] === undefined) {
                this.allBreakPoints[file] = [];
            }
            if (enable) {
                this.allBreakPoints[file].push(line + ":" + column);
            }
            else {
                var pos = this.allBreakPoints[file].indexOf(line + ":" + column);
                this.allBreakPoints[file].splice(pos, 1);
            }
            var newline = await new TSSourceMap_1.TSSourceMap().getLineFromTS(file, line, column);
            var ret = new Promise(function (resolve) {
                //http://localhost/jassi/public_html/demo/TreeTable.js?bust=1551539152470
                var sfile = file.replace(".ts", ".js");
                var url = window.location.href.split("/app.html")[0] + "/" + "js/" + sfile; //+"?bust="+window.jassiversion;
                window["chrome"].runtime.sendMessage(extensionId, {
                    name: "breakpointChanged",
                    url: url,
                    line: newline,
                    enable: enable,
                    condition: "1===1",
                    type: type
                }, undefined, function (ret) {
                    resolve(ret);
                });
            });
            return ret;
        }
        /**
        * add debugpoints in code
        * @param {[string]} lines - code
        * @param {Object.<number, boolean>} debugpoints - the debugpoints
        * @param {jassi.ui.CodeEditor} codeEditor
        */
        addDebugpoints(lines, debugpoints, codeEditor) {
            //added directly
        }
        /**
         * report current variable scope
         * @param {numer} url - url of the script
         * @param {[Object.<string,object>]} variables
         */
        reportVariables(url, variables, type = undefined) {
            return;
            var file = this.urlToFile(url);
            var _this = this;
            var editor = Jassi_5.default.windows.findComponent("jassi.ui.CodeEditor-" + file);
            if (editor !== undefined) {
                editor.addVariables(variables);
            }
        }
        destroy() {
            //	chrome.runtime.sendMessage(extensionId,{name: "disconnect"},undefined);
            this.destroyed = true;
        }
    };
    ChromeDebugger = __decorate([
        Jassi_5.$Class("jassi.base.ChromeDebugger"),
        __metadata("design:paramtypes", [])
    ], ChromeDebugger);
    exports.ChromeDebugger = ChromeDebugger;
    Jassi_5.default.test = function () {
        alert(Jassi_5.default.base.ChromeDebugger.isExtensionInstalled());
        var kk = new Jassi_5.default.base.ChromeDebugger();
    };
    if (ChromeDebugger.isExtensionInstalled()) {
        if (Jassi_5.default.debugger !== undefined)
            Jassi_5.default.debugger.destroy();
        Jassi_5.default.debugger = new ChromeDebugger();
    }
});
define("jassi/base/Database", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Classes", "remote/jassi/base/DBArray"], function (require, exports, Jassi_6, Classes_4, DBArray_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Database = void 0;
    var cl = Classes_4.classes; //force import
    let Database = class Database {
        /**
         * database service
         * @class jassi.base.Database
         */
        constructor() {
            /** @member {jassi.base.Database.TypeResolver} holds typedefinitions for each type
             *  use  typeDef[sclassname]
             */
            this.typeDef = new TypeResolver(this);
            /**
             * @member {Object.<string,{Object.<number,jassi.base.DBObject>}>} holds all known databaseobjects
             * cache[typename][id]=ob
             **/
            this.cache = {};
        }
        /**
         * clears the cache
         */
        clearCache() {
            for (var key in this.cache) {
                this.cache[key] = {};
            }
        }
        /**
         * registers a database class
         * @param {string} - the name of the class
         * @param {class} - the class
         */
        register(name, data) {
            var cl = Classes_4.classes.getClass(name);
            cl.prototype._dbtype = name;
            this.typeDef.addClass(cl);
            this.cache[name] = {};
        }
        /**
         * uploads the type definition to the server
         * @param {jassi.base.Database.Type} the type definition
         */
        async uploadType(definition) {
            var sdef = JSON.stringify(definition, undefined, "\t");
            return Jassi_6.default.server.call("uploadType", sdef);
        }
        /**
         * reloads a database object
         * @param {DBObject} objectToReload - the object to reload
         * @returns {jassi.base.DBObject} - the reloaded object
         */
        async reload(objectToReload) {
            var type = objectToReload.__proto__._dbtype;
            var ret = await this.query(type, "id=" + objectToReload.id);
            if (ret.length > 0)
                return ret[0];
        }
        /**
         * loads a object from db
         * @param {string} type - the typename
         * @param {int} id - the id of the object, load all if undefined
         * @param [{string}] resolveFields - the fields to resolve
         * @returns {jassi.base.DBObject}
         */
        async load(type, id, resolveFields = undefined) {
            var sid = "id>0";
            if (id !== undefined)
                sid = "id=" + id;
            if (resolveFields === undefined)
                resolveFields = [];
            for (var x = 0; x < resolveFields.length; x++) { //add .this
                resolveFields[x] = (resolveFields[x].startsWith("this.") ? "" : "this.") + resolveFields[x];
            }
            var ret = await this.query(type, sid, resolveFields);
            if (id !== undefined)
                return (ret.length > 0) ? ret[0] : null;
            return ret;
        }
        /**
         * Child objects are not loaded completly. This loads the object completly.
         * @param {jassi.base.DBObject} ob - the object to resolve
         * @returns {jassi.base.DBObject|jassi.base.DBArray}
         */
        async resolve(ob) {
            if (ob !== undefined) {
                if (ob.unresolvedclassname !== undefined) {
                    var ret = await this._getMember(ob.parent, ob.member, ob.unresolvedclassname, ob.id);
                    //set linked object
                    /*        var link=this.typeDef.linkForField(ob.parent.__proto__._dbtype,ob.member);
                            
                            if(link!==undefined&&this.getTypeDef(ob.parent.__proto__._dbtype)[ob.member].type==="array"&&
                                     link.type!="array"){//array can not connected){
                                for(var x=0;x<ret.length;x++){
                                    var aob=ret[x];
                                    
                                    aob["_"+link.name]=ob.parent;
                                }
                            }else if(link!==undefined&&link.type==="object"){
                                ret["_"+link.name]=ob.parent;
                            }
                                */
                    if (ret instanceof DBArray_1.DBArray) {
                    }
                    return ret;
                }
                else
                    return ob;
            }
            //if(ob)
        }
        /**
         * Child objects are not loaded completly. This loads a object member of a object.
         * @param {DBObject} ob - the object
         * @param {string} member - the name of the member to load
         * @param {string} memberclassname - the typename of the member
         * @param {int|string} ids - the id or the ids (comma separated) e.g. id1,id2,id3
         * @returns {DBObject} - the resolved member
         */
        async _getMember(ob, member, memberclassname, ids) {
            if (ids === undefined || ids === null) {
                var data = {
                    id: ob.id,
                    type: ob.__proto__._dbtype,
                    member: member
                };
                var sret = await Jassi_6.default.server.call("getMember", data);
                var obret = await this._fromJSON(memberclassname, sret);
                return obret;
            }
            //we only need to expand ids
            var def = this.typeDef.getTypeDef(ob.__proto__._dbtype);
            var field = def[member];
            if (field.type === "object") {
                var test = db.cache[memberclassname][ids];
                if (test !== undefined)
                    return test;
                return (await this.query(memberclassname, "id in (" + ids + ")"))[0];
            }
            if (field.type === "array") {
                var ret = new Jassi_6.default.base.DBArray();
                var vids = ids.split(",");
                var idsToResolve = "";
                for (var x = 0; x < vids.length; x++) {
                    var test = db.cache[memberclassname][vids[x]];
                    if (test !== undefined)
                        ret.add(test);
                    else { //resolve
                        var T = Classes_4.classes.getClass(memberclassname);
                        ob = new T();
                        idsToResolve = idsToResolve + (idsToResolve === "" ? "" : ",") + vids[x];
                        this.cache[memberclassname][vids[x]] = ob;
                        ret.add(ob); //will be filled with cache
                    }
                }
                if (idsToResolve !== "")
                    await this.query(memberclassname, "id in (" + idsToResolve + ")")[0]; //would be resolved with cache
                return ret;
            }
            //var sret=jassi.server.call("getMember",data);
            //var obret= this._fromJSON(memberclassname,sret);
            return obret;
        }
        /**
         * createObjects from returned json array retObs
         */
        _createObjects(type, retObs, resolvedFields) {
            var ret = new Jassi_6.default.base.DBArray();
            for (var x = 0; x < retObs.length; x++) {
                var props = retObs[x];
                var ob = this.cache[type][props["id"]];
                if (ob === undefined) {
                    var T = Classes_4.classes.getClass(type);
                    ob = new T();
                    this.cache[type][props["id"]] = ob;
                }
                //all returned relations are set to null
                for (var f = 0; f < resolvedFields.length; f++) {
                    ob._setObjectProperty(resolvedFields[f], null);
                }
                for (var prop in props) {
                    // var prop=props[y];
                    var data = props[prop];
                    /*if(data!==null&&data.unresolvedclassname!==undefined){
                        var def= this.typeDef.getTypeDef(type);
                        var field=def[prop];
    
                        if(field.type==="object"){
                            var iscached=this.cache[field.usertype][data["id"]];
                            if(iscached!==undefined){
                                 ob._setObjectProperty(prop,iscached);
                                 continue;
                             }
                         }
                         data.parent=ob;
                         data.member=prop;
                         data.id=data["id"];
                         data.resolve=async function(){
                             var res=await jassi.db.resolve(this);
                             this.parent._setObjectProperty(this.member,res);
                             ret=this.parent._objectProperties[this.member];
                             return ret;
                         }
                         data.resolve.bind(data);
                         ob._setObjectProperty(prop,data);
                        
    
                    }else*/
                    ob[prop] = data;
                }
                ret.push(ob);
            }
            return ret;
        }
        /**
         * loads an object from a jsonstring
         * @param {string} type - the name of the type
         * @param {string} json - the json string
         * @returns {jassi.base.DBObject}
         */
        async _fromJSON(type, json) {
            //   if(json==undefined)
            //       return null;
            var data = JSON.parse(json);
            var retOb = data.result;
            var retObs = retOb;
            var resolvedFields = [];
            var allResolvedFields = [];
            for (var cl in data.relations) {
                for (var field in data.relations[cl]) {
                    var sfield = field.split(".")[1];
                    if (resolvedFields.indexOf(sfield) === -1)
                        resolvedFields.push(sfield);
                }
                allResolvedFields.push(field);
            }
            var ret = this._createObjects(type, retObs, resolvedFields);
            for (var cl in data.resolvedObjects) {
                resolvedFields = [];
                var arr = data.resolvedObjects[cl];
                var rels = data.relations[cl];
                //calc object members for the class which we would modify 
                for (var rel in rels) {
                    for (var test = 0; test < allResolvedFields.length; test++) {
                        if (allResolvedFields[test].indexOf(rel + ".") !== -1) {
                            var toAdd = allResolvedFields[test].substring((rel + ".").length);
                            toAdd = toAdd.split(".")[0];
                            if (resolvedFields.indexOf(toAdd) === -1) {
                                resolvedFields.push(toAdd);
                            }
                        }
                    }
                }
                this._createObjects(cl, arr, resolvedFields);
            }
            //setup relations
            for (var cl in data.relations) {
                for (var ffield in data.relations[cl]) {
                    var _field = ffield.split(".");
                    field = _field[field.length - 1];
                    var rels = data.relations[cl][ffield];
                    for (var id in rels) {
                        var ob = this.cache[cl][Number(id)];
                        var def = this.typeDef.getTypeDef(cl);
                        var ofield = def[field];
                        var fieldtype = ofield.usertype;
                        if (ofield.type === "object") {
                            var mob = this.cache[fieldtype][Number(rels[id])];
                            ob._setObjectProperty(field, mob);
                        }
                        else {
                            var arr = new Jassi_6.default.base.DBArray();
                            var adata = rels[id];
                            for (var x = 0; x < adata.length; x++) {
                                var mob = this.cache[fieldtype][Number(adata[x])];
                                arr.add(mob);
                            }
                            ob._setObjectProperty(field, arr);
                        }
                    }
                }
            }
            if (retOb.length === undefined)
                return ret[0];
            return ret;
        }
        /**
         * executes a database query
         * @param {string} type - the name of the returned type
         * @param {type} query - the query string
         * @param [{string}] resolveFields - the fields to resolve
         * @returns {jassi.base.DBArray}
         */
        async query(type, query, resolveFields = undefined) {
            var parameter = {
                type: type,
                resolve: resolveFields
            };
            var sret = await Jassi_6.default.server.call("query", query, parameter);
            var ret = await this._fromJSON(type, sret);
            return ret;
        }
        /**
         * save the object to database
         * @param {jassi.base.DBObject} ob - the object to save
         */
        async save(ob) {
            var parameter = { type: ob.__proto__._dbtype };
            var toSave = { id: ob.id };
            var type = this.typeDef.getTypeDef(ob.__proto__._dbtype);
            var test = this.cache[ob.__proto__._dbtype][ob.id];
            if (test !== undefined && test !== ob)
                throw "only one persistent instance could saved! Use reload to get the previous persistent instance";
            for (var member in type) {
                var field = type[member];
                if (member === "linkedfields" || member === "name" || member === "fields" || member === "_classname")
                    continue;
                if (field.type === "object") {
                    if (ob._objectProperties[member] !== undefined && ob._objectProperties[member].unresolvedclassname !== undefined)
                        continue; //member was not resolved so ignore it
                    if (ob[member] === undefined || ob[member] === null) {
                        toSave[member] = null;
                    }
                    else
                        toSave[member] = { id: ob[member].id };
                }
                else if (field.type === "array") {
                    if (ob._objectProperties[member] !== undefined && ob._objectProperties[member].unresolvedclassname !== undefined)
                        continue; //member was not resolved so ignore it
                    var arr = ob[member];
                    if (ob[member] === undefined || ob[member] === null) {
                        toSave[member] = null;
                        continue;
                    }
                    toSave[member] = [];
                    for (var x = 0; x < arr.length; x++) {
                        var child = arr[x];
                        toSave[member].push({ id: child.id });
                    }
                }
                else if (field.type === "int" || field.type === "string")
                    toSave[member] = ob[member];
                else {
                    throw "member " + field.name + "type can not be saved " + field.type;
                }
            }
            var sob = JSON.stringify(toSave, undefined, "\t");
            var ret = await Jassi_6.default.server.call("save", sob, parameter);
            if (!$.isNumeric(ret))
                throw ret;
            ob.id = Number(ret);
            this.cache[ob.__proto__._dbtype][ob.id] = ob;
            $.notify("saved", "info", { position: "right" });
        }
        /**
         * deletes an object in the database
         * @param {jassi.base.DBObject} ob - the object to remove
         */
        async remove(ob) {
            var parameter = { type: ob.__proto__._dbtype };
            return await Jassi_6.default.server.call("remove", { id: ob.id }, parameter);
        }
    };
    Database = __decorate([
        Jassi_6.$Class("jassi.base.Database"),
        __metadata("design:paramtypes", [])
    ], Database);
    exports.Database = Database;
    let TypeResolver = class TypeResolver {
        /**
         * database definition of database classes
         * @class jassi.base.Database.TypeResolver
         */
        constructor(db) {
            this.db = db;
        }
        /**
         * adds a class to resolver
         * @param {class} thisclass - the class to add
         */
        addClass(thisclass) {
            return;
            var classname = thisclass.prototype._dbtype;
            var sclassname = classname.replaceAll(".", "_");
            //var def=JSON.parse(ret.responseText);
            this[sclassname] = new Type(sclassname);
            var fields = thisclass._fields;
            for (var x = 0; x < fields.length; x++) {
                var jf = fields[x];
                var field = new Field(jf.name, jf.type, jf.usertype, jf.link);
                this[sclassname][field.name] = field;
                if (field.link !== undefined) {
                    this[sclassname].linkedfields[field.link] = field;
                }
            }
        }
        /**
        * types are linked if they
        * gets the linked for a field
        *
        */
        linkForField(classname, field) {
            var link = this.getTypeDef(classname)[field].link;
            if (link === undefined) {
                var test = this.getTypeDef(classname)[field].usertype;
                test = this.getTypeDef(test).linkedfields[classname + "." + field];
                if (test !== undefined) {
                    return test;
                }
            }
            else {
                var stypename = link.substring(0, link.lastIndexOf("."));
                var sfield = link.substring(link.lastIndexOf(".") + 1, link.length);
                return this.getTypeDef(stypename)[sfield];
            }
            return undefined;
        }
        getTypeDef(classname) {
            var sclassname = classname.replaceAll(".", "_");
            if (this[sclassname] === undefined) {
                //var def=JSON.parse(ret.responseText);
                this[sclassname] = new Jassi_6.default.base.Database.Type(sclassname);
                debugger;
                alert("is the next line right?");
                var def = this[sclassname];
                for (var x = 0; x < def.fields.length; x++) {
                    var jf = def.fields[x];
                    var field = new Jassi_6.default.base.Database.Field(jf.name, jf.type, jf.usertype, jf.link);
                    this[sclassname][field.name] = field;
                    if (field.link !== undefined) {
                        this[sclassname].linkedfields[field.link] = field;
                    }
                }
            }
            return this[sclassname];
        }
    };
    TypeResolver = __decorate([
        Jassi_6.$Class("jassi.base.Database.TypeResolver"),
        __metadata("design:paramtypes", [Object])
    ], TypeResolver);
    let Type = class Type {
        /**
     * type definition of database class
     * @class jassi.base.Database.Type
     */
        constructor(name) {
            /**
             * @member {string} - the name of the type
             */
            this.name = name;
            /**
             * @member {[jassi.base.Database.Field]} - the persistent fields
             */
            this.fields = undefined;
            /**
             * all linked fields
             * @member {Object.<string,jassi.base.Database.Field>} [classname+"."+field]
             */
            this.linkedfields = {};
        }
    };
    Type = __decorate([
        Jassi_6.$Class("jassi.base.Database.Type"),
        __metadata("design:paramtypes", [Object])
    ], Type);
    let Field = class Field {
        /**
     * type definition of database field
     * @class jassi.base.Database.Field
     */
        constructor(name, type, usertype, link) {
            /**
             * @member {string} - the name of the field
             */
            this.name = name;
            /**
             * @member {string} - the database type
             * oneof string,int,object,array
             */
            this.type = type;
            /**
             * @member {string} - must be defined by type array and object
             */
            this.usertype = usertype;
            /**
             * @member {string} - the type and fieldname of the linked field [type.member]
             * The field is linked to an other field and has no own sql-table.
             * e.g.  Customer.invoices  could be linked to Invoice.customer
             * Links can be set between fields of type array or object of the own or a different classes.
             * If two fields are linked - the link must be set on only one field.
             */
            this.link = link;
        }
    };
    Field = __decorate([
        Jassi_6.$Class("jassi.base.Database.Field"),
        __metadata("design:paramtypes", [Object, Object, Object, Object])
    ], Field);
    var db = new Database();
    exports.default = db;
    Jassi_6.default.test = async function () {
        var all = await db.load("de.Kunde", undefined, ["rechnungen", "rechnungen.zeilen", "rechnungen.zeilen.ar"]);
        //var all=await jassi.db.load("de.ARZeile",undefined,["ar"]);
        all = all;
        //jassi.server.call("testQuery");
    };
});
define("jassi/base/DatabaseSchema", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry", "jassi/util/Typescript", "jassi/base/Parser", "jassi/template/TemplateDBObject", "jassi/util/Tools", "remote/jassi/base/Server", "jassi/base/Windows", "jassi/ui/OptionDialog", "jassi/ext/jquery.choosen"], function (require, exports, Jassi_7, Registry_2, Typescript_1, Parser_1, TemplateDBObject_1, Tools_1, Server_2, Windows_3, OptionDialog_2) {
    "use strict";
    var DatabaseSchema_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test2 = exports.test = exports.DatabaseSchema = exports.DatabaseClass = exports.DatabaseField = void 0;
    class DatabaseField {
        get nullable() {
            var _a;
            return (_a = this.properties) === null || _a === void 0 ? void 0 : _a.nullable;
        }
        set nullable(value) {
            if (value === undefined) {
                if (this.properties)
                    delete this.properties.nullable;
                return;
            }
            if (DatabaseSchema.basicdatatypes.indexOf(this.type) === -1 || this.relation) {
                if (value === undefined)
                    return;
                throw "This field could not be nullable";
            }
            if (this.properties === undefined)
                this.properties = {};
            this.properties.nullable = value;
        }
        getReverseField() {
            if (this.inverseSide && this.inverseSide !== "") {
                if (this.inverseSide.indexOf(".") === -1)
                    return undefined;
                var sp = this.inverseSide.split(".");
                var clname = this.type.replace("[]", "");
                var cl = this.parent.parent.getClass(clname);
                if (!cl)
                    return undefined;
                return cl.getField(sp[1]);
            }
            return undefined;
        }
        /**
         * looks possible relations in the type class
         **/
        getPossibleRelations() {
            if (this.name === "id")
                return ["PrimaryColumn", "PrimaryGeneratedColumn"];
            if (!this.type || DatabaseSchema.basicdatatypes.indexOf(this.type) >= 0)
                return [];
            var values = [];
            if (this.type.endsWith("[]")) {
                values = ["", "OneToMany", "ManyToMany"];
            }
            else
                values = ["", "OneToOne", "ManyToOne"];
            var cl = this.type.replace("[]", "");
            var parentcl = this.parent.name;
            var relclass = this.parent.parent.getClass(cl);
            for (var x = 0; x < relclass.fields.length; x++) {
                var relfield = relclass.fields[x];
                if (this.type.endsWith("[]")) {
                    if (relfield.type === parentcl) {
                        //OneToMany
                        values.push("e." + relfield.name);
                    }
                    if (relfield.type === (parentcl + "[]")) {
                        //ManyToMany
                        values.push("e." + relfield.name);
                        values.push("e." + relfield.name + "(join)");
                    }
                }
                else {
                    if (relfield.type === parentcl) {
                        //OneToOne
                        values.push("e." + relfield.name);
                        values.push("e." + relfield.name + "(join)");
                    }
                    if (relfield.type === (parentcl + "[]")) {
                        //ManyToOne
                        values.push("e." + relfield.name);
                    }
                }
            }
            return values;
        }
        get relationinfo() {
            if (this.relation === "OneToOne" || this.relation === "ManyToMany" || this.relation === "ManyToOne" || this.relation === "OneToMany") {
                if (this.inverseSide) {
                    return this.inverseSide + (this.join ? "(join)" : "");
                }
                else {
                    return this.relation;
                }
            }
            else if (this.relation === "PrimaryColumn" || this.relation === "PrimaryGeneratedColumn")
                return this.relation;
            else
                return undefined;
        }
        set relationinfo(value) {
            var _a;
            if (value === "")
                value = undefined;
            if (value === undefined) {
                this.relation = undefined;
                //  return;
            }
            if (value === "PrimaryColumn" || value === "PrimaryGeneratedColumn") {
                if (this.name === "id")
                    this.relation = value;
                return;
            }
            if (value === undefined || value === "OneToOne" || value === "ManyToMany" || value === "ManyToOne" || value === "OneToMany") {
                var old = this.getReverseField();
                if (old !== undefined)
                    old.inverseSide = undefined; //delete the relation on the reverse side
                this.relation = value;
                this.inverseSide = undefined;
            }
            else {
                var oval = value;
                if (oval.endsWith("(join)")) {
                    oval = oval.replace("(join)", "");
                    this.join = true;
                }
                else
                    this.join = false;
                this.inverseSide = oval;
                var rfield = this.getReverseField();
                if (rfield === undefined) {
                    this.inverseSide = undefined;
                    throw Error("relation not found");
                }
                //set the relation on the reverse side
                if (!((_a = rfield.inverseSide) === null || _a === void 0 ? void 0 : _a.endsWith("." + this.name)))
                    rfield.inverseSide = "e." + this.name;
                if (this.type.endsWith("[]")) {
                    if (rfield.type.endsWith("[]")) {
                        this.relation = "ManyToMany";
                        //sets the join in the other
                        rfield.join = !this.join;
                    }
                    else {
                        this.relation = "OneToMany";
                    }
                }
                else {
                    if (rfield.type.endsWith("[]")) {
                        this.relation = "ManyToOne";
                    }
                    else {
                        this.relation = "OneToOne";
                        //sets the join in the other
                        rfield.join = !this.join;
                    }
                }
            }
        }
    }
    exports.DatabaseField = DatabaseField;
    class DatabaseClass {
        constructor() {
            this.fields = [];
        }
        getField(name) {
            for (var x = 0; x < this.fields.length; x++) {
                var cl = this.fields[x];
                if (cl.name === name)
                    return cl;
            }
            ;
            return undefined;
        }
    }
    exports.DatabaseClass = DatabaseClass;
    var classnode = undefined;
    let DatabaseSchema = DatabaseSchema_1 = class DatabaseSchema {
        constructor() {
            this.databaseClasses = [];
        }
        getClass(name) {
            for (var x = 0; x < this.databaseClasses.length; x++) {
                var cl = this.databaseClasses[x];
                if (cl.name === name)
                    return cl;
            }
            ;
            return undefined;
        }
        //type => ARZeile
        getFulltype(type, parsedClass) {
            var pos = type.lastIndexOf(">");
            if (pos > -1)
                type = type.substring(pos + 1).trim();
            var file = parsedClass.parent.imports[type];
            var ret = this.definedImports[type + "|" + file];
            if (!ret) {
                throw Error("Import not found " + parsedClass.fullClassname + " : " + type);
            }
            return ret;
        }
        createDBClass(cl) {
            var scode = TemplateDBObject_1.TemplateDBObject.code.replaceAll("{{fullclassname}}", cl.name);
            var file = "remote/" + cl.name.replaceAll(".", "/") + ".ts";
            cl.filename = file;
            cl.simpleclassname = cl.name.split(".")[cl.name.split(".").length - 1];
            scode = scode.replaceAll("{{classname}}", cl.simpleclassname);
            scode = scode.replaceAll("{{PrimaryAnnotator}}", "@" + cl.getField("id").relation + "()");
            var parser = new Parser_1.Parser();
            parser.parse(scode);
            for (var key in parser.classes) {
                var pclass = parser.classes[key];
                pclass["filename"] = file;
                if (pclass.decorator["$DBObject"]) {
                    //var dbclass=pclass.decorator["$Class"].param[0];
                    this.parsedClasses[pclass.fullClassname] = pclass;
                    this.definedImports[pclass.name + "|" + file.substring(0, file.length - 3)] = pclass;
                }
            }
        }
        createDBField(field, dbcl) {
            var _a;
            var decs = {};
            if (field.join && field.relation === "OneToOne")
                decs["JoinColumn"] = { name: "JoinColumn", parameter: [] };
            if (field.join && field.relation === "ManyToMany")
                decs["JoinTable"] = { name: "JoinTable", parameter: [] };
            var realtype = field.type;
            var realprops = field.properties;
            if (field.type === "decimal") {
                realtype = "number";
                if (!realprops)
                    realprops = {};
                realprops.type = "decimal";
            }
            if (field.type === "int")
                realtype = "number";
            var s = realprops ? (_a = Tools_1.Tools.objectToJson(realprops, undefined, false)) === null || _a === void 0 ? void 0 : _a.replaceAll("\n", "") : undefined;
            var p = undefined;
            if (!field.relation || field.relation === "") {
                if (s)
                    p = [s];
                decs["Column"] = { name: "Column", parameter: p };
            }
            else if (field.relation === "PrimaryColumn" || field.relation === "PrimaryGeneratedColumn") {
                if (s)
                    p = [s];
                decs[field.relation] = { name: field.relation, parameter: p };
            }
            else {
                var params = [];
                var tcl = field.type.replace("[]", "");
                realtype = this.getClass(tcl).simpleclassname;
                this.parsedClasses[dbcl.name].parent.addImportIfNeeded(realtype, this.getClass(tcl).filename);
                params.push("type => " + tcl);
                if (field.inverseSide && field.inverseSide !== "")
                    params.push(field.inverseSide);
                if (s)
                    params.push(s);
                decs[field.relation] = { name: field.relation, parameter: params };
            }
            this.parsedClasses[dbcl.name].parent.addOrModifyMember({ name: field.name, type: realtype, decorator: decs }, this.parsedClasses[dbcl.name]);
        }
        async reloadCodeInEditor(file, text) {
            var editor = Windows_3.default.findComponent("jassi.ui.CodeEditor-" + file);
            if (editor !== undefined) {
                if (editor._codeToReload === undefined) {
                    var data = await OptionDialog_2.OptionDialog.show("The source was updated in Chrome. Do you want to load this modification?", ["Yes", "No"], editor, false);
                    if (data.button === "Yes")
                        editor.value = text;
                    delete editor._codeToReload;
                }
            }
        }
        async updateSchema(onlyPreview = false) {
            var _a;
            ///todo wenn kein basicfieldtype muss eine Beziehung hinterlegt sein throw Error
            var changes = "";
            var org = new DatabaseSchema_1();
            await org.loadSchemaFromCode();
            var modifiedclasses = [];
            //check relations
            for (var x = 0; x < this.databaseClasses.length; x++) {
                var dbcl = this.databaseClasses[x];
                for (var y = 0; y < dbcl.fields.length; y++) {
                    let f = dbcl.fields[y];
                    if (DatabaseSchema_1.basicdatatypes.indexOf(f.type) === -1 && (f.relation === undefined || f.relation === ""))
                        throw Error("Relation must be filled " + dbcl.name + " field " + f.name);
                }
            }
            for (var x = 0; x < this.databaseClasses.length; x++) {
                var dbcl = this.databaseClasses[x];
                if (org.getClass(dbcl.name) === undefined) {
                    changes += "create class " + dbcl.name + "\n";
                    modifiedclasses.push(dbcl);
                    if (!onlyPreview) {
                        this.createDBClass(dbcl);
                    }
                }
                for (var y = 0; y < dbcl.fields.length; y++) {
                    var field = dbcl.fields[y];
                    var forg = (_a = org.getClass(dbcl.name)) === null || _a === void 0 ? void 0 : _a.getField(field.name);
                    if (org.getClass(dbcl.name) === undefined || forg === undefined) {
                        changes += "create field " + dbcl.name + ": " + field.name + "\n";
                        if (modifiedclasses.indexOf(dbcl) === -1)
                            modifiedclasses.push(dbcl);
                        if (!onlyPreview) {
                            this.createDBField(field, dbcl);
                        }
                    }
                    else {
                        var jfield = JSON.stringify(field.properties);
                        var jorg = JSON.stringify(forg.properties);
                        var fieldjoin = field.join;
                        if (fieldjoin === false)
                            fieldjoin = undefined;
                        if (field.type !== forg.type || field.inverseSide !== forg.inverseSide || field.relation !== forg.relation || jfield !== jorg || fieldjoin !== forg.join) {
                            changes += "modify deorator field " + dbcl.name + ": " + field.name + "\n";
                            if (modifiedclasses.indexOf(dbcl) === -1)
                                modifiedclasses.push(dbcl);
                            if (!onlyPreview) {
                                this.createDBField(field, dbcl);
                            }
                        }
                    }
                }
            }
            var files = [];
            var contents = [];
            if (!onlyPreview) {
                for (var x = 0; x < modifiedclasses.length; x++) {
                    var mcl = modifiedclasses[x];
                    var text = this.parsedClasses[mcl.name].parent.getModifiedCode();
                    files.push(mcl.filename);
                    contents.push(text);
                    console.log(mcl.filename + "\n");
                    console.log(text + "\n");
                }
                try {
                    await new Server_2.Server().saveFiles(files, contents);
                    for (var y = 0; y < files.length; y++)
                        await this.reloadCodeInEditor(files[y], contents[y]);
                }
                catch (perr) {
                    alert(perr.message);
                }
            }
            return changes;
        }
        async parseFiles() {
            this.parsedClasses = {};
            this.definedImports = {};
            var data = await Registry_2.default.getJSONData("$DBObject");
            data.forEach((entr) => {
                var parser = new Parser_1.Parser();
                var file = entr.filename;
                var code = Typescript_1.default.getCode(file);
                parser.parse(code);
                for (var key in parser.classes) {
                    var pclass = parser.classes[key];
                    pclass["filename"] = file;
                    if (pclass.decorator["$DBObject"]) {
                        //var dbclass=pclass.decorator["$Class"].param[0];
                        this.parsedClasses[pclass.fullClassname] = pclass;
                        this.definedImports[pclass.name + "|" + file.substring(0, file.length - 3)] = pclass;
                    }
                }
            });
        }
        async loadSchemaFromCode() {
            await this.parseFiles();
            //await registry.loadAllFilesForService("$DBObject")
            var data = Registry_2.default.getJSONData("$DBObject");
            this.databaseClasses = [];
            var _this = this;
            (await data).forEach((entr) => {
                var dbclass = new DatabaseClass();
                dbclass.name = entr.classname;
                dbclass.parent = _this;
                this.databaseClasses.push(dbclass);
                var pclass = this.parsedClasses[entr.classname];
                dbclass.filename = pclass["filename"];
                dbclass.simpleclassname = pclass.name;
                dbclass.name = pclass.fullClassname;
                for (var fname in pclass.members) {
                    var pfield = pclass.members[fname];
                    if (!pfield.decorator["Column"] && !pfield.decorator["PrimaryColumn"] && !pfield.decorator["PrimaryGeneratedColumn"] && !pfield.decorator["OneToOne"] && !pfield.decorator["ManyToOne"] && !pfield.decorator["OneToMany"] && !pfield.decorator["ManyToMany"])
                        continue;
                    var field = new DatabaseField();
                    field["parent"] = dbclass;
                    field.name = fname;
                    dbclass.fields.push(field);
                    var meta = pfield.decorator;
                    if (meta["PrimaryColumn"]) {
                        field.relation = "PrimaryColumn";
                    }
                    else if (meta["PrimaryGeneratedColumn"]) {
                        field.relation = "PrimaryColumn";
                    }
                    else if (meta["Column"]) {
                        field.relation = undefined;
                        //var mt=mtype[0][0];
                        if (meta["Column"].parameter.length > 0 && meta["Column"].parameter.length > 0) {
                            field.properties = meta["Column"].parsedParameter[0];
                        }
                    }
                    else if (meta["ManyToOne"]) {
                        field.relation = "ManyToOne";
                        if (meta["ManyToOne"].parameter.length > 0) {
                            for (var x = 0; x < meta["ManyToOne"].parameter.length; x++) {
                                let vd = meta["ManyToOne"].parameter[x];
                                if (x === 0) {
                                    field.type = this.getFulltype(meta["ManyToOne"].parameter[0], pclass).fullClassname;
                                }
                                else {
                                    if (!meta["ManyToOne"].parameter[x].startsWith("{")) {
                                        field.inverseSide = vd.split(">")[1].trim();
                                    }
                                    else {
                                        field.properties = meta["ManyToOne"].parsedParameter[x];
                                    }
                                }
                            }
                        }
                    }
                    else if (meta["OneToMany"]) {
                        field.relation = "OneToMany";
                        if (meta["OneToMany"].parameter.length > 0) {
                            for (var x = 0; x < meta["OneToMany"].parameter.length; x++) {
                                let vd = meta["OneToMany"].parameter[x];
                                if (x === 0) {
                                    field.type = this.getFulltype(meta["OneToMany"].parameter[0], pclass).fullClassname + "[]";
                                }
                                else {
                                    if (!meta["OneToMany"].parameter[x].startsWith("{")) {
                                        field.inverseSide = vd.split(">")[1].trim();
                                    }
                                    else {
                                        field.properties = meta["OneToMany"].parsedParameter[x];
                                    }
                                }
                            }
                        }
                    }
                    else if (meta["ManyToMany"]) {
                        field.relation = "ManyToMany";
                        if (meta["ManyToMany"].parameter.length > 0) {
                            for (var x = 0; x < meta["ManyToMany"].parameter.length; x++) {
                                let vd = meta["ManyToMany"].parameter[x];
                                if (x === 0) {
                                    field.type = this.getFulltype(meta["ManyToMany"].parameter[0], pclass).fullClassname + "[]";
                                }
                                else {
                                    if (!meta["ManyToMany"].parameter[x].startsWith("{")) {
                                        field.inverseSide = vd.split(">")[1].trim();
                                    }
                                    else {
                                        field.properties = meta["ManyToMany"].parsedParameter[x];
                                    }
                                }
                            }
                        }
                        if (meta["JoinTable"])
                            field.join = true;
                    }
                    else if (meta["OneToOne"]) {
                        field.relation = "OneToOne";
                        if (meta["OneToOne"].parameter.length > 0) {
                            for (var x = 0; x < meta["OneToOne"].parameter.length; x++) {
                                let vd = meta["OneToOne"].parameter[x];
                                if (x === 0) {
                                    field.type = this.getFulltype(meta["OneToOne"].parameter[0], pclass).fullClassname;
                                }
                                else {
                                    if (!meta["OneToOne"].parameter[x].startsWith("{")) {
                                        field.inverseSide = vd.split(">")[1].trim();
                                    }
                                    else {
                                        field.properties = meta["OneToOne"].parsedParameter[x];
                                    }
                                }
                            }
                        }
                        if (meta["JoinColumn"])
                            field.join = true;
                    }
                    if (meta["PrimaryColumn"] || meta["PrimaryGeneratedColumn"] || meta["Column"]) {
                        var tp = pfield.type;
                        if (tp === "string")
                            field.type = "string";
                        else if (tp === "number")
                            field.type = "int";
                        else if (tp === "boolean")
                            field.type = "boolean";
                        else
                            throw new Error("type unknown " + dbclass.name + ":" + field.name);
                        if (field.properties !== undefined && field.properties["type"]) {
                            field.type = field.properties["type"];
                        }
                    }
                }
            });
        }
    };
    DatabaseSchema.basicdatatypes = ["string", "int", "decimal", "boolean"];
    DatabaseSchema = DatabaseSchema_1 = __decorate([
        Jassi_7.$Class("jassi.base.DatabaseSchema")
    ], DatabaseSchema);
    exports.DatabaseSchema = DatabaseSchema;
    /*
    @$Class("jassi.base.DatabaseColumnOptions")
    class ColumnOptions{
    //	@$Property({type:"string",chooseFrom:DatabaseSchema.basicdatatypes,description:"Column type. Must be one of the value from the ColumnTypes class."})
      //  type?: ColumnType;
        @$Property({description:"Indicates if column's value can be set to NULL.", default:false})
        nullable?: boolean;
        @$Property({type:"string",description:"Default database value."})
        default?: any;
        @$Property({description:"Indicates if column is always selected by QueryBuilder and find operations.",default:true})
        @$Property({description:'Column types length. Used only on some column types. For example type = "string" and length = "100" means that ORM will create a column with type varchar(100).'})
        length?: number;
        [name:string]:any;
    }*/
    async function test() {
        var schema = new DatabaseSchema();
        await schema.loadSchemaFromCode();
        var schema2 = new DatabaseSchema();
        await schema2.loadSchemaFromCode();
        var test = new DatabaseClass();
        test.parent = schema2;
        test.name = "de.NeuerKunde";
        var testf = new DatabaseField();
        testf.name = "id";
        testf.type = "int";
        testf.relation = "PrimaryColumn";
        test.fields.push(testf);
        schema2.databaseClasses.push(test);
        var f = new DatabaseField();
        f.name = "hallo";
        f.type = "string";
        schema2.getClass("de.AR").fields.push(f);
        schema2.getClass("de.AR").getField("nummer").properties = { nullable: false };
        console.log(await schema2.updateSchema(true));
        //console.log(result);
        //test.pop();
        //schema.visitNode(sourceFile);
    }
    exports.test = test;
    async function test2() {
        var schema = new DatabaseSchema();
        await schema.loadSchemaFromCode();
        var h = schema.getClass("de.AR").getField("kunde");
        var f = h.getReverseField();
        var kk = f.relationinfo;
        debugger;
        f.relationinfo = kk;
    }
    exports.test2 = test2;
});
define("jassi/base/Debugger", ["require", "exports", "remote/jassi/base/Jassi"], function (require, exports, Jassi_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Debugger = void 0;
    //https://developer.chrome.com/extensions/messaging
    let Debugger = class Debugger {
        /**
         * routing of url
         * @class jassi.base.Debugger
         */
        constructor() {
        }
        /**
         * @param {string} file - the file to save
         * @param {string} code - the code to Transform
         * @param [number] debuglines - lines which updates the variables
         * @param {Object.<int,string>}  debuglinesConditions - is the breakpoint in line conitionally [line]->condition
         **/
        async debugCode(file, code, debuglines, debuglinesConditions, evalToCursorPosition) {
        }
        /**
         * remove all breakpoints for the file
         * @param file
         */
        async removeBreakpointsForFile(file) {
        }
        /**
        * extract all variables in code
        * @param {string} code - the code to inspect
        */
        _extractVariables(code) {
            var pos = 0;
            var ret = [];
            while (pos !== -1) {
                pos = code.indexOf("var" + " ", pos);
                if (pos !== -1) {
                    var p1 = code.indexOf(" ", pos + 4);
                    var p2 = code.indexOf(";", pos + 4);
                    var p3 = code.indexOf("=", pos + 4);
                    var p = Math.min(p1 === -1 ? 999999999 : p1, p2 === -1 ? 999999999 : p2, p3 === -1 ? 999999999 : p3);
                    var variabel = code.substring(pos + 4, p);
                    var patt = new RegExp("\\W");
                    if (!patt.test(variabel))
                        ret.push(variabel);
                    pos = pos + 1;
                }
            }
            return ret;
        }
        /**
         * sets a breakpoint for debugging
         * @param {string} file
         * @param {number} line
         * @param {number} enable - if true then breakpoint is set if false then removed
         * @param {string} type - the type default undefined->stop debugging
         **/
        breakpointChanged(file, line, column, enable, type) {
            //	console.log("break on"+file);
        }
        /**
         * report current variable scope
         * @param {numer} id - id of the variablepanel
         * @param {[Object.<string,object>]} variables
         */
        reportVariables(id, variables) {
            var editor = $("#" + id)[0]._this;
            alert(editor);
            editor["addVariables"](variables);
        }
        /**
        * add debugpoints in code
        * @param {[string]} lines - code
        * @param {Object.<number, boolean>} debugpoints - the debugpoints
        * @param {jassi.ui.CodeEditor} codeEditor
        */
        addDebugpoints(lines, debugpoints, codeEditor) {
            Jassi_8.default.d[codeEditor._id] = undefined;
            //        	jassi.ui.VariablePanel.get(this._id).__db=undefined;
            var hassome = undefined;
            this.debugpoints = debugpoints;
            for (var point in debugpoints) {
                if (debugpoints[point] === true) {
                    //lines[point]="if(jassi.ui.VariablePanel.get("+this._id+").__db===undefined){ jassi.ui.VariablePanel.get("+this._id+").__db=true;debugger;}"+lines[point];
                    lines[point] = "if(jassi.d(" + codeEditor._id + ")) debugger;" + lines[point];
                    /*if(hassome===undefined){
                        hassome=true;
                        lines[0]="var _variables_=$('#"+this._id+"')[0]._this;"+lines[0];
                    }*/
                }
            }
        }
        /**
         *
         * @param {string} code - full source code
         * @param {jassi.ui.CodeEditor} codeEditor
         * @returns {string}
         */
        getCodeForBreakpoint(code, codeEditor) {
            /*	var reg = /([\w]*)[\(][^\)]*[\)]/g;
                var test=reg.exec(code);
                test=reg.exec();
                alert(test);*/
            var vars = this._extractVariables(code);
            var reg = /[A-Z,a-z,0-9,\_]*[/w]*[\(][A-Z,a-z,0-9,\_,\,]*\)\{/g;
            var test = reg.exec(code);
            while (test) {
                if (!test[0].startsWith("while") && !test[0].startsWith("if")) {
                    var params = test[0].substring(test[0].indexOf("(") + 1, test[0].indexOf(")"));
                    if (params.length > 0) {
                        var ps = params.split(",");
                        for (var p = 0; p < ps.length; p++) {
                            if (vars.indexOf(ps[p]) === -1)
                                vars.push(ps[p]);
                        }
                    }
                }
                test = reg.exec(code);
            }
            var svars = "{var debug_editor=$('#'+" + codeEditor._id + ")[0]._this;var _variables_={} ;try{if(this!==jassi)_variables_['this']=this;}catch(ex){};";
            //svars=svars+"try{_variables_.addParameters(arguments);}catch(ex){};";
            for (var x = 0; x < vars.length; x++) {
                //        alert(vars[x]);
                svars = svars + "try{_variables_['" + vars[x] + "']=" + vars[x] + ";}catch(ex){};";
            }
            svars = svars + "debug_editor.addVariables(_variables_);}";
            return svars;
        }
        destroy() {
            this.destroyed = true;
        }
    };
    Debugger = __decorate([
        Jassi_8.$Class("jassi.base.Debugger"),
        __metadata("design:paramtypes", [])
    ], Debugger);
    exports.Debugger = Debugger;
    if (Jassi_8.default.debugger === undefined)
        Jassi_8.default.debugger = new Debugger();
    require(["jassi/base/ChromeDebugger"]);
});
define("jassi/base/Errors", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Errors = void 0;
    class Errors {
        /**
        * Error handling.
        * @class jassi.base.Error
        */
        constructor() {
            this.items = [];
            this.handler = {};
            var _this = this;
            Errors.errors = this;
            window.addEventListener("unhandledrejection", function (err) {
                _this.addError(err);
            });
            window.addEventListener("error", function (err) {
                _this.addError(err);
            });
            /* window.onerror =function(errorMsg, url, lineNumber, column, errorObj) {
                  var stack=(errorObj===null||errorObj===undefined)?"":errorObj.stack;
                  var s = 'Error: ' + errorMsg +
                                             ' Script: ' + url +
                                             ' (' + lineNumber +
                                             ', ' + column +
                                             '): ' +  stack+"->"+url;
                  var err={ errorMsg:errorMsg,url:url,lineNumber:lineNumber,column:column,errorObj:errorObj};
                 _this.addError(err);
                  console.error(s);
                  
                  if(orge!==null)
                  return orge(errorMsg, url, lineNumber, column, errorObj);
              }*/
            var org = console.log;
            console.log = function (ob) {
                org(ob);
                if (ob === undefined)
                    return;
                var logOb = { infoMsg: ob };
                _this.items.push(logOb);
                if (_this.items.count > 10) {
                    _this.items.splice(10, 1);
                }
                for (var key in _this.handler) {
                    _this.handler[key](logOb);
                }
            };
        }
        addError(err) {
            this.items.push(err);
            if (this.items.count > 20) {
                this.items.splice(20, 1);
            }
            for (var key in this.handler) {
                this.handler[key](err);
            }
        }
        /**
         * raise if error is thrown
         * @param {function} func - callback function
         * @param {string} [id] - the id of the component that registers the error
         */
        onerror(func, id) {
            if (id === undefined)
                id = Errors._randomID++;
            this.handler[id] = func;
        }
        /**
         * raise if error is thrown
         * @param {function} func - callback function
         * @param {string} [id] - the id of the component that registers the error
         */
        offerror(id) {
            delete this.handler[id];
        }
    }
    exports.Errors = Errors;
    Errors._randomID = 10000;
    ;
});
define("jassi/base/Extensions", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry"], function (require, exports, Jassi_9, Registry_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Extensions = void 0;
    class Extensions {
        constructor() {
            this.items = {};
        }
        /**
         * extend the class
         * @param {class} type - extend the type - add functions
         */
        extend(classname, classdef) {
            var exts = this.items[classname];
            if (exts !== undefined) {
                for (var alias in exts) {
                    var cl = exts[alias];
                    if (cl.extend) {
                        cl.extend(classdef);
                    }
                }
            }
        }
        async forFile(file) {
            var items = await Registry_3.default.getJSONData("extensions");
            return items[file];
        }
        /**
         * init the Extensions
         */
        init() {
            /*
            var config={
                paths:{},
                shim:{},
                map:{'*':{}}
            }

            var items=registry.get("extensions");
            for(var clname in items){
                var file=clname.replaceAll(".","/");
                config.paths[clname]=file;
                config.map["*"][file]=clname;
                
                var files=["jassi/jassi"];
                for(var f=0;f<items[clname].length;f++){
                    files.push("js/"+items[clname][f].file.replace(".ts",".js"));
                }
                config.shim[clname]=files;
            }*/
            //requirejs.config(config);
        }
        /**
         * extend an existing class
         * all methods and property where copied
         * @param {string} - the name of the class to extend
         * @param {class} - the class
         */
        register(name, extClass, alias) {
            if (alias === undefined)
                throw "Error Extension " + name + ": alias must be implemented";
            if (this.items[name] === undefined)
                this.items[name] = {};
            this.items[name][alias] = extClass;
        }
    }
    exports.Extensions = Extensions;
    var extensions = Jassi_9.default.extensions;
    exports.default = extensions;
});
define("jassi/base/LoginDialog", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.login = exports.doAfterLogin = void 0;
    var queue = [];
    function doAfterLogin(resolve, prot) {
        queue.push([resolve, prot]);
    }
    exports.doAfterLogin = doAfterLogin;
    var isrunning = false;
    async function check(dialog, win) {
        var test = (win.document && win.document.body) ? win.document.body.innerHTML : "";
        if (test.indexOf("{}") !== -1) {
            dialog.dialog("destroy");
            document.body.removeChild(dialog[0]);
            isrunning = false;
            for (var x = 0; x < queue.length; x++) {
                var data = queue[x];
                data[0](await data[1].call());
            }
            queue = [];
        }
        else {
            setTimeout(() => {
                check(dialog, win);
            }, 100);
        }
    }
    async function login() {
        if (isrunning)
            return;
        queue = [];
        isrunning = true;
        return new Promise((resolve) => {
            var fr = $(`
    <iframe src="/login.html" name="navigation"></iframe>
 `);
            document.body.appendChild(fr[0]);
            setTimeout(() => {
                if (!fr[0]["contentWindow"]) {
                    alert("no content window for login");
                }
                check(fr, fr[0]["contentWindow"]);
            }, 100);
            fr.dialog();
            /* var sform = `
             
             <form    action="javascript:alert(9);" method="post" class="" >
                 <input type="text" name="username" ><br>
                 <input type="password" name="password" ><br>
                  <button  class="LoginButton" type="button">Login</button>
             </form>
             
             `;
             var form = $(sform);
             form.submit("submit", function (e) {
                // e.preventDefault();
             });
             form.find(":button").on("click", () => {
                 //@ts-ignore
                 form.submit();
                 $.post({
                     url:"user/login",
                     data:"user=admin&password=j@ssi"
                 })
                 form.dialog("destroy");
             })
            
             document.body.appendChild(form[0]);
             var ret=form.dialog({
                 modal:true
             });
             return ret;
         });*/
        });
    }
    exports.login = login;
});
define("jassi/base/Parser", ["require", "exports", "remote/jassi/base/Jassi", "jassi/util/Typescript"], function (require, exports, Jassi_10, Typescript_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Parser = exports.ParsedClass = void 0;
    class ParsedDecorator {
        constructor() {
            this.parsedParameter = [];
            this.parameter = [];
        }
    }
    class ParsedMember {
        constructor() {
            this.decorator = {};
        }
    }
    class ParsedClass {
        constructor() {
            this.members = {};
            this.decorator = {};
        }
    }
    exports.ParsedClass = ParsedClass;
    let Parser = class Parser {
        /**
         * parses Code for UI relevant settings
         * @class jassi.ui.CodeEditor.Parser
         */
        constructor() {
            this.sourceFile = undefined;
            this.typeMe = {};
            this.classes = {};
            this.imports = {};
            this.functions = {};
            this.data = {};
            /** {[string]} - all code lines*/
        }
        getModifiedCode() {
            const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
            const resultFile = ts.createSourceFile("dummy.ts", "", ts.ScriptTarget.Latest, /*setParentNodes*/ false, ts.ScriptKind.TS);
            const result = printer.printNode(ts.EmitHint.Unspecified, this.sourceFile, resultFile);
            return result;
        }
        /**
         * add a property
         * @param {string} variable - name of the variable
         * @param {string} property - name of the property
         * @param {string} value  - code - the value
         * @param node - the node of the statement
         */
        add(variable, property, value, node) {
            if (value === undefined || value === null)
                return;
            value = value.trim();
            property = property.trim();
            if (this.data[variable] === undefined) {
                this.data[variable] = {};
            }
            if (this.data[variable][property] === undefined) {
                this.data[variable][property] = [];
            }
            if (Array.isArray(this.data[variable][property])) {
                this.data[variable][property].push({
                    value: value,
                    node: node
                });
            }
        }
        /**
         * read a property value from code
         * @param {string} variable - the name of the variable
         * @param {string} property - the name of the property
         */
        getPropertyValue(variable, property) {
            if (this.data[variable] !== undefined) {
                if (this.data[variable][property] !== undefined) {
                    var ret = this.data[variable][property][0].value;
                    return ret;
                }
            }
            return undefined;
            /* variable="this."+variable;
             if(this.data[variable]!==undefined){
                 if(this.data[variable][property]!==undefined){
                     return this.data[variable][property][0].value;
                 }
             }*/
            //this 
            //   var value=this.propertyEditor.parser.getPropertyValue(this.variablename,this.property.name);
        }
        addTypeMe(name, type) {
            if (!this.typeMeNode)
                return;
            var tp = ts.createTypeReferenceNode(type, []);
            var newnode = ts.createPropertySignature(undefined, name + "?", undefined, tp, undefined);
            this.typeMeNode["members"].push(newnode);
        }
        addImportIfNeeded(name, file) {
            if (this.imports[name] === undefined) {
                var imp = ts.createNamedImports([ts.createImportSpecifier(undefined, ts.createIdentifier(name))]);
                const importNode = ts.createImportDeclaration(undefined, undefined, ts.createImportClause(undefined, imp), ts.createLiteral(file));
                this.sourceFile = ts.updateSourceFileNode(this.sourceFile, [importNode, ...this.sourceFile.statements]);
            }
        }
        parseTypeMeNode(node) {
            var _this = this;
            if (node.kind === ts.SyntaxKind.TypeLiteral) {
                if (node["members"])
                    this.typeMeNode = node;
                node["members"].forEach(function (tnode) {
                    var name = tnode.name.text;
                    var stype = tnode.type.typeName.text;
                    _this.typeMe[name] = { node: tnode, value: stype };
                    //            this.add("me", name, "typedeclaration:" + stype, undefined, aline, aline);
                });
            }
            node.getChildren().forEach(c => this.parseTypeMeNode(c));
        }
        convertArgument(arg) {
            if (arg === undefined)
                return undefined;
            if (arg.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                var ret = {};
                var props = arg.properties;
                if (props !== undefined) {
                    for (var p = 0; p < props.length; p++) {
                        ret[props[p].name.text] = this.convertArgument(props[p].initializer);
                    }
                }
                return ret;
            }
            else if (arg.kind === ts.SyntaxKind.StringLiteral) {
                return arg.text;
            }
            else if (arg.kind === ts.SyntaxKind.ArrayLiteralExpression) {
                let ret = [];
                for (var p = 0; p < arg.elements.length; p++) {
                    ret.push(this.convertArgument(arg.elements[p]));
                }
                return ret;
            }
            else if (arg.kind === ts.SyntaxKind.Identifier) {
                return arg.text;
            }
            else if (arg.kind === ts.SyntaxKind.TrueKeyword) {
                return true;
            }
            else if (arg.kind === ts.SyntaxKind.FalseKeyword) {
                return false;
            }
            else if (arg.kind === ts.SyntaxKind.NumericLiteral) {
                return Number(arg.text);
            }
            else if (arg.kind === ts.SyntaxKind.ArrowFunction) {
                return arg.getText();
            }
            throw "Error type not found";
        }
        parseDecorator(dec) {
            var ex = dec.expression;
            var ret = new ParsedDecorator();
            if (ex.expression === undefined) {
                ret.name = ex.text;
            }
            else {
                ret.name = ex.expression.escapedText;
                if (ex.expression !== undefined) {
                    for (var a = 0; a < ex.arguments.length; a++) {
                        ret.parsedParameter.push(this.convertArgument(ex.arguments[a]));
                        ret.parameter.push(ex.arguments[a].getText());
                    }
                }
            }
            return ret;
        }
        parseClass(node) {
            if (node.kind === ts.SyntaxKind.ClassDeclaration) {
                var parsedClass = new ParsedClass();
                parsedClass.parent = this;
                parsedClass.name = node.name.getText();
                parsedClass.node = node;
                this.classes[parsedClass.name] = parsedClass;
                if (node.decorators !== undefined) {
                    var dec = {};
                    for (let x = 0; x < node.decorators.length; x++) {
                        var parsedDec = this.parseDecorator(node.decorators[x]);
                        parsedClass.decorator[parsedDec.name] = parsedDec;
                        if (parsedClass.decorator["$Class"] && parsedDec.parameter.length > 0)
                            parsedClass.fullClassname = parsedDec.parameter[0].replaceAll('"', "");
                    }
                }
                for (var x = 0; x < node["members"].length; x++) {
                    var parsedMem = new ParsedMember();
                    var mem = node["members"][x];
                    if (mem.name === undefined)
                        continue; //Constructor
                    parsedMem.name = mem.name.escapedText;
                    parsedMem.node = node["members"][x];
                    parsedMem.type = (mem.type ? mem.type.getFullText().trim() : undefined);
                    parsedClass.members[parsedMem.name] = parsedMem;
                    var params = [];
                    if (mem.decorators) {
                        for (let i = 0; i < mem.decorators.length; i++) {
                            let parsedDec = this.parseDecorator(mem.decorators[i]);
                            parsedMem.decorator[parsedDec.name] = parsedDec;
                        }
                    }
                }
                if (this.collectProperties) {
                    for (let x = 0; x < this.collectProperties.length; x++) {
                        var col = this.collectProperties[x];
                        if (col.classname === parsedClass.name && parsedClass.members[col.methodname]) {
                            var nd = parsedClass.members[col.methodname].node;
                            this.parseProperties(nd);
                        }
                    }
                }
            }
        }
        parseProperties(node) {
            if (ts.isVariableDeclaration(node)) {
                var name = node.name.getText();
                var value = node.initializer.getText();
                this.add(name, "_new_", value, node.parent.parent);
            }
            if ((ts.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.EqualsToken) ||
                ts.isCallExpression(node)) {
                var node1;
                var node2;
                var left;
                var value;
                if (ts.isBinaryExpression(node)) {
                    node1 = node.left;
                    node2 = node.right;
                    left = node1.getText(); // this.code.substring(node1.pos, node1.end).trim();
                    value = node2.getText(); //this.code.substring(node2.pos, node2.end).trim();
                    if (value.startsWith("new "))
                        this.add(left, "_new_", value, node.parent);
                }
                if (ts.isCallExpression(node)) {
                    node1 = node.expression;
                    node2 = node.arguments;
                    left = node1.getText(); // this.code.substring(node1.pos, node1.end).trim();
                    var params = [];
                    node.arguments.forEach((arg) => { params.push(arg.getText()); });
                    value = params.join(", "); //this.code.substring(node2.pos, node2.end).trim();//
                }
                var lastpos = left.lastIndexOf(".");
                var variable = left;
                var prop = "";
                if (lastpos !== -1) {
                    variable = left.substring(0, lastpos);
                    prop = left.substring(lastpos + 1);
                }
                this.add(variable, prop, value, node.parent);
            }
            node.getChildren().forEach(c => this.parseProperties(c));
        }
        visitNode(node) {
            var _this = this;
            if (node.kind === ts.SyntaxKind.ImportDeclaration) {
                var nd = node;
                var file = nd.moduleSpecifier.text;
                if (nd.importClause && nd.importClause.namedBindings) {
                    var names = nd.importClause.namedBindings.elements;
                    for (var e = 0; e < names.length; e++) {
                        this.imports[names[e].name.escapedText] = file;
                    }
                }
            }
            if (node.kind == ts.SyntaxKind.TypeAliasDeclaration && node["name"].text === "Me") {
                this.parseTypeMeNode(node);
            }
            else if (node.kind === ts.SyntaxKind.ClassDeclaration) {
                this.parseClass(node);
            }
            else if (node && node.kind === ts.SyntaxKind.FunctionDeclaration) { //functions out of class
                this.functions[node["name"].text] = node;
                if (this.collectProperties) {
                    for (let x = 0; x < this.collectProperties.length; x++) {
                        var col = this.collectProperties[x];
                        if (col.classname === undefined && node["name"].text === col.methodname)
                            this.parseProperties(node);
                    }
                }
            }
            else
                node.getChildren().forEach(c => this.visitNode(c));
            //TODO remove this block
            if (node.kind === ts.SyntaxKind.FunctionDeclaration && node["name"].text === "test") {
                this.add(node["name"].text, "", "", undefined);
            }
        }
        /**
        * parse the code
        * @param {string} code - the code
        * @param {string} onlyfunction - only the code in the function is parsed, e.g. "layout()"
        */
        parse(code, collectProperties = undefined) {
            this.data = {};
            this.code = code;
            this.collectProperties = collectProperties;
            this.sourceFile = ts.createSourceFile('dummy.ts', code, ts.ScriptTarget.ES5, true);
            this.visitNode(this.sourceFile);
            //return this.parseold(code,onlyfunction);
        }
        removeNode(node) {
            if (node.parent["statements"]) {
                var pos = node.parent["statements"].indexOf(node);
                if (pos >= 0)
                    node.parent["statements"].splice(pos, 1);
            }
            else if (node.parent.parent["type"] !== undefined) {
                var pos = node.parent.parent["type"]["members"].indexOf(node);
                if (pos >= 0)
                    node.parent.parent["type"]["members"].splice(pos, 1);
            }
            else
                throw Error(node.getFullText() + "could not be removed");
        }
        /**
         * modify a member
         **/
        addOrModifyMember(member, pclass) {
            //member.node
            //var newmember=ts.createProperty
            var newdec = undefined;
            for (var key in member.decorator) {
                var dec = member.decorator[key];
                if (!newdec)
                    newdec = [];
                //ts.createDecorator()
                //member.decorator[key].name;
                var params = undefined;
                if (dec.parameter) {
                    params = [];
                    for (var i = 0; i < dec.parameter.length; i++) {
                        params.push(ts.createIdentifier(dec.parameter[i]));
                    }
                }
                var call = ts.createCall(ts.createIdentifier(dec.name), undefined, params);
                newdec.push(ts.createDecorator(call));
            }
            //var type=ts.createTy
            var newmember = ts.createProperty(newdec, undefined, member.name, undefined, ts.createTypeReferenceNode(member.type, []), undefined);
            var node = undefined;
            for (var key in pclass.members) {
                if (key === member.name)
                    node = pclass.members[key].node;
            }
            if (node === undefined) {
                pclass.node["members"].push(newmember);
            }
            else {
                var pos = pclass.node["members"].indexOf(node);
                pclass.node["members"][pos] = newmember;
            }
            pclass.members[member.name] = member;
            member.node = newmember;
        }
        /**
        * removes the property from code
        * @param {type} property - the property to remove
        * @param {type} [onlyValue] - remove the property only if the value is found
        * @param {string} [variablename] - thpe name of the variable - default=this.variablename
        */
        removePropertyInCode(property, onlyValue = undefined, variablename = undefined) {
            if (this.data[variablename] !== undefined && this.data[variablename][property] !== undefined) {
                var prop = undefined;
                if (onlyValue !== undefined) {
                    for (var x = 0; x < this.data[variablename][property].length; x++) {
                        if (this.data[variablename][property][x].value === onlyValue) {
                            prop = this.data[variablename][property][x];
                        }
                    }
                }
                else
                    prop = this.data[variablename][property][0];
                if (prop == undefined)
                    return;
                this.removeNode(prop.node);
                /*var oldvalue = this.lines[prop.linestart - 1];
                for (let x = prop.linestart;x <= prop.lineend;x++) {
                    this.lines[x - 1] = undefined;
                    if (x > 1 && this.lines[x - 2].endsWith(","))//type Me={ bt2?:Button,
                        this.lines[x - 2] = this.lines[x - 2].substring(0, this.lines[x - 2].length);
                }*/
                //var text = this.parser.linesToString();
                //this.codeEditor.value = text;
                //this.updateParser();
            }
        }
        /**
         * removes the variable from code
         * @param {string} varname - the variable to remove
         */
        removeVariableInCode(varname) {
            var prop = this.data[varname];
            var allprops = [];
            if (varname.startsWith("me.") && this.typeMe[varname.substring(3)] !== undefined)
                allprops.push(this.typeMe[varname.substring(3)]);
            //remove properties
            for (var key in prop) {
                let props = prop[key];
                props.forEach((p) => {
                    allprops.push(p);
                });
            }
            if (varname.startsWith("me.")) {
                let props = this.data.me[varname.substring(3)];
                props === null || props === void 0 ? void 0 : props.forEach((p) => {
                    allprops.push(p);
                });
            }
            for (var x = 0; x < allprops.length; x++) {
                this.removeNode(allprops[x].node);
            }
            //remove lines where used as parameter
            for (var propkey in this.data) {
                var prop = this.data[propkey];
                for (var key in prop) {
                    var props = prop[key];
                    for (var x = 0; x < props.length; x++) {
                        let p = props[x];
                        var params = p.value.split(",");
                        for (var i = 0; i < params.length; i++) {
                            if (params[i] === varname || params[i] === "this." + varname) {
                                this.removeNode(p.node);
                            }
                        }
                    }
                }
            }
        }
        getNodeFromScope(classscope, variablescope = undefined) {
            var _a, _b, _c;
            var scope;
            if (variablescope) {
                scope = (_a = this.data[variablescope.variablename][variablescope.methodname][0]) === null || _a === void 0 ? void 0 : _a.node;
                scope = scope.expression.arguments[0];
            }
            else {
                for (var i = 0; i < classscope.length; i++) {
                    var sc = classscope[i];
                    if (sc.classname) {
                        scope = (_c = (_b = this.classes[sc.classname]) === null || _b === void 0 ? void 0 : _b.members[sc.methodname]) === null || _c === void 0 ? void 0 : _c.node;
                        if (scope)
                            break;
                    }
                    else { //exported function
                        scope = this.functions[sc.methodname];
                    }
                }
            }
            return scope;
        }
        /**
         * gets the next variablename
         * */
        getNextVariableNameForType(type) {
            var varname = type.split(".")[type.split(".").length - 1].toLowerCase();
            for (var counter = 1; counter < 1000; counter++) {
                if (this.data.me === undefined || this.data.me[varname + counter] === undefined)
                    break;
            }
            return varname + counter;
        }
        /**
        * modify the property in code
        * @param variablename - the name of the variable
        * @param  property - the property
        * @param value - the new value
        * @param classscope  - the property would be insert in this block
        * @param isFunction  - true if the property is a function
        * @param [replace]  - if true the old value is deleted
        * @param [before] - the new property is placed before this property
        * @param [variablescope] - if this scope is defined - the new property would be insert in this variable
        */
        setPropertyInCode(variableName, property, value, classscope, isFunction = false, replace = undefined, before = undefined, variablescope = undefined) {
            var scope = this.getNodeFromScope(classscope, variablescope);
            var newExpression = undefined;
            var statements = scope["body"].statements;
            if (property === "new") { //me.panel1=new Panel({});
                let prop = this.data[variableName]["_new_"][0]; //.substring(3)];
                var constr = prop.value;
                value = constr.substring(0, constr.indexOf("(") + 1) + value + constr.substring(constr.lastIndexOf(")"));
                replace = true;
                var left = prop.node.getText();
                left = left.substring(0, left.indexOf("=") - 1);
                property = "_new_";
                newExpression = ts.createExpressionStatement(ts.createAssignment(ts.createIdentifier(left), ts.createIdentifier(value)));
                /*	}else{//var hh=new Panel({})
                        let prop = this.data[variableName][0];
                        var constr = prop[0].value;
                        value = constr.substring(0, constr.indexOf("(") + 1) + value + constr.substring(constr.lastIndexOf(")"));
                        replace = true;
                        isFunction=true;
                        newExpression=ts.createExpressionStatement(ts.createAssignment(ts.createIdentifier("me."+property), ts.createIdentifier(value)));
                    }*/
            }
            else if (isFunction) {
                newExpression = ts.createExpressionStatement(ts.createCall(ts.createIdentifier(variableName + "." + property), undefined, [ts.createIdentifier(value)]));
            }
            else
                newExpression = ts.createExpressionStatement(ts.createAssignment(ts.createIdentifier(variableName + "." + property), ts.createIdentifier(value)));
            if (replace !== false && this.data[variableName] !== undefined && this.data[variableName][property] !== undefined) { //edit existing
                let node = this.data[variableName][property][0].node;
                var pos = node.parent["statements"].indexOf(node);
                node.parent["statements"][pos] = newExpression;
                //if (pos >= 0)
                //  node.parent["statements"].splice(pos, 1);
            }
            else { //insert new
                if (before) {
                    if (before.value === undefined)
                        throw "not implemented";
                    let node = undefined;
                    for (var o = 0; o < this.data[before.variablename][before.property].length; o++) {
                        if (this.data[before.variablename][before.property][o].value === before.value) {
                            node = this.data[before.variablename][before.property][o].node;
                            break;
                        }
                    }
                    if (!node)
                        throw Error("Property not found " + before.variablename + "." + before.property + " value " + before.value);
                    var pos = node.parent["statements"].indexOf(node);
                    if (pos >= 0)
                        node.parent["statements"].splice(pos, 0, newExpression);
                }
                else {
                    var lastprop = undefined;
                    for (let prop in this.data[variableName]) {
                        if (prop === "_new_")
                            continue;
                        var testnode = this.data[variableName][prop][this.data[variableName][prop].length - 1].node;
                        if (testnode.parent === scope["body"])
                            lastprop = testnode;
                    }
                    if (lastprop) {
                        var pos = lastprop.parent["statements"].indexOf(lastprop);
                        if (pos >= 0)
                            lastprop.parent["statements"].splice(pos + 1, 0, newExpression);
                    }
                    else {
                        var pos = statements.length;
                        if (statements[statements.length - 1].getText().startsWith("return "))
                            pos--;
                        statements.splice(pos, 0, newExpression);
                    }
                }
            }
        }
        /**
         * swaps two statements indendified by  functionparameter in a variable.property(parameter1) with variable.property(parameter2)
         **/
        swapPropertyWithParameter(variable, property, parameter1, parameter2) {
            var first = undefined;
            var second = undefined;
            var parent = this.data[variable][property];
            for (var x = 0; x < parent.length; x++) {
                if (parent[x].value.split(",")[0].trim() === parameter1)
                    first = parent[x].node;
                if (parent[x].value.split(",")[0].trim() === parameter2)
                    second = parent[x].node;
            }
            if (!first)
                throw Error("Parameter not found " + parameter1);
            if (!second)
                throw Error("Parameter not found " + parameter2);
            var ifirst = first.parent["statements"].indexOf(first);
            var isecond = second.parent["statements"].indexOf(second);
            first.parent["statements"][ifirst] = second;
            first.parent["statements"][isecond] = first;
        }
        /**
        * adds an Property
        * @param type - name of the type o create
        * @param classscope - the scope (methodname) where the variable should be insert Class.layout
        * @param variablescope - the scope where the variable should be insert e.g. hallo.onclick
        * @returns  the name of the object
        */
        addVariableInCode(fulltype, classscope, variablescope = undefined) {
            let type = fulltype.split(".")[fulltype.split(".").length - 1];
            var varname = this.getNextVariableNameForType(type);
            //var if(scopename)
            var prefix = "me.";
            var node = this.getNodeFromScope(classscope, variablescope);
            var statements = node["body"].statements;
            if (node === undefined)
                throw Error("no scope to insert a variable could be found");
            for (var x = 0; x < statements.length; x++) {
                if (!statements[x].getText().includes("new ") && !statements[x].getText().includes("var "))
                    break;
            }
            var ass = ts.createAssignment(ts.createIdentifier(prefix + varname), ts.createIdentifier("new " + type + "()"));
            statements.splice(x, 0, ts.createStatement(ass));
            this.addTypeMe(varname, type);
            return "me." + varname;
        }
    };
    Parser = __decorate([
        Jassi_10.$Class("jassi.base.Parser"),
        __metadata("design:paramtypes", [])
    ], Parser);
    exports.Parser = Parser;
    async function test() {
        var code = Typescript_2.default.getCode("remote/de/AR.ts");
        var parser = new Parser();
        parser.parse(code, undefined);
        const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
        const resultFile = ts.createSourceFile("dummy.ts", "", ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);
        const result = printer.printNode(ts.EmitHint.Unspecified, parser.sourceFile, resultFile);
        console.log(result);
    }
    exports.test = test;
});
define("jassi/base/PropertyEditorService", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Classes", "remote/jassi/base/Registry", "jassi/ui/PropertyEditors/LoadingEditor"], function (require, exports, Jassi_11, Classes_5, Registry_4, LoadingEditor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.propertyeditor = exports.PropertyEditorService = void 0;
    let PropertyEditorService = class PropertyEditorService {
        /**
        * manage all PropertyEditors
        * @class jassi.ui.PropertyEditorService
        */
        constructor() {
            /** @member {Object.<string,[class]>}
             *  data[type]*/
            this.data = {};
            this.funcRegister = Registry_4.default.onregister("$PropertyEditor", this.register.bind(this));
        }
        reset() {
            this.data = {};
        }
        destroy() {
            Registry_4.default.offregister("$PropertyEditor", this.funcRegister);
        }
        async loadType(type) {
            if (this.data[type] === undefined) {
                var dat = await Registry_4.default.getJSONData("$PropertyEditor");
                for (var x = 0; x < dat.length; x++) {
                    if (dat[x].params[0].indexOf(type) !== -1) {
                        await Classes_5.classes.loadClass(dat[x].classname);
                    }
                }
                if (this.data[type] === undefined)
                    throw "PropertyEditor not found for type:" + type;
            }
            return Classes_5.classes.loadClass(this.data[type]);
        }
        /**
         * creates PropertyEditor for type
         *
         * @param {string} variablename - the name of the variable
         * @param {jassi.ui.Property} property - name of the type
         * @param {jassi.ui.PropertyEditor} propertyEditor - the PropertyEditor instance
         */
        createFor(property, propertyEditor) {
            var sclass = undefined;
            var promise = undefined;
            if (property.editor !== undefined) {
                sclass = property.editor;
            }
            else {
                if (this.data[property.type] === undefined) {
                    promise = this.loadType(property.type);
                }
                else
                    sclass = this.data[property.type][0];
            }
            if (sclass !== undefined) {
                var oclass = Classes_5.classes.getClass(sclass);
                if (oclass)
                    return new (oclass)(property, propertyEditor);
                else
                    return new LoadingEditor_1.LoadingEditor(property, propertyEditor, Classes_5.classes.loadClass(sclass));
            }
            else
                return new LoadingEditor_1.LoadingEditor(property, propertyEditor, promise);
        }
        register(oclass, types) {
            var name = Classes_5.classes.getClassName(oclass);
            for (var x = 0; x < types.length; x++) {
                if (this.data[types[x]] === undefined)
                    this.data[types[x]] = [];
                if (this.data[types[x]].indexOf(name) === -1)
                    this.data[types[x]].push(name);
            }
        }
    };
    PropertyEditorService = __decorate([
        Jassi_11.$Class("jassi.base.PropertyEditorService"),
        __metadata("design:paramtypes", [])
    ], PropertyEditorService);
    exports.PropertyEditorService = PropertyEditorService;
    var propertyeditor = new PropertyEditorService();
    exports.propertyeditor = propertyeditor;
});
define("jassi/base/Tests", ["require", "exports", "remote/jassi/base/Jassi", "jassi/base/Actions", "jassi/util/Typescript", "jassi/ui/Component", "jassi/ui/Container", "jassi/ui/BoxPanel", "jassi/base/Windows", "jassi/ui/HTMLPanel"], function (require, exports, Jassi_12, Actions_1, Typescript_3, Component_1, Container_1, BoxPanel_1, Windows_4, HTMLPanel_1) {
    "use strict";
    var TestAction_1, _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tests = exports.Test = exports.TestAction = void 0;
    let TestAction = TestAction_1 = class TestAction {
        static async testNode(all, container = undefined) {
            //var isRoot=false;
            if (container === undefined) {
                container = new BoxPanel_1.BoxPanel();
                Windows_4.default.add(container, "Tests");
                //	isRoot=true;
            }
            for (var x = 0; x < all.length; x++) {
                var file = all[x];
                if (file.isDirectory()) {
                    await TestAction_1.testNode(file.files, container);
                }
                else {
                    await Typescript_3.default.initService();
                    var text = Typescript_3.default.getCode(file.fullpath);
                    if (text !== undefined) {
                        text = text.toLowerCase();
                        console.log("test " + file.fullpath);
                        if (text.indexOf("export function test(") !== -1 || text.indexOf("export async function test(") !== -1) {
                            var func = (await new Promise((resolve_4, reject_4) => { require([file.fullpath.substring(0, file.fullpath.length - 3)], resolve_4, reject_4); })).test;
                            if (typeof func === "function") {
                                var ret = await func(new Test());
                                if (ret instanceof Component_1.Component) {
                                    $(ret.dom).css({ position: "relative" });
                                    ret.width = 400;
                                    var head = new HTMLPanel_1.HTMLPanel();
                                    head.value = "<b>" + file.fullpath + "</b>";
                                    container.add(head);
                                    container.add(ret);
                                }
                            }
                        }
                    }
                }
            }
            // if(isRoot&&container._components.length>0){
            //  }
        }
    };
    __decorate([
        Actions_1.$Action({
            name: "Test"
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, typeof (_a = typeof Container_1.Container !== "undefined" && Container_1.Container) === "function" ? _a : Object]),
        __metadata("design:returntype", Promise)
    ], TestAction, "testNode", null);
    TestAction = TestAction_1 = __decorate([
        Actions_1.$ActionProvider("jassi.base.FileNode"),
        Jassi_12.$Class("jassi.ui.TestAction")
    ], TestAction);
    exports.TestAction = TestAction;
    let Test = class Test {
        /**
         * fails if the condition is false
         * @parameter condition
         **/
        expectEqual(condition) {
            if (!condition)
                throw new Error("Test fails");
        }
        /**
         * fails if the func does not throw an error
         * @parameter func - the function that should failed
         **/
        expectError(func) {
            try {
                if (func.toString().startsWith("async ")) {
                    var errobj;
                    try {
                        throw new Error("test fails");
                    }
                    catch (err) {
                        errobj = err;
                    }
                    func().then(() => {
                        throw errobj;
                    }).catch((err) => {
                        if (err.message === "test fails")
                            throw errobj;
                        var k = 1; //io
                    });
                    return;
                }
                else {
                    func();
                }
            }
            catch (_a) {
                return; //io
            }
            throw new Error("test fails");
        }
    };
    Test = __decorate([
        Jassi_12.$Class("jassi.base.Test")
    ], Test);
    exports.Test = Test;
    class Tests {
    }
    exports.Tests = Tests;
});
undefined; /*requirejs.config({
    paths: {
        'ace':'lib/ace/src-min-noconflict/ace',
        'ace.lang':'lib/ace/src-min-noconflict/ext-language_tools'
    },
   shim: {
        'ace.lang': ['ace'],
    }
});*/
requirejs.config({
    paths: {
        'ace': '//cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/',
        'ace/ext/language_tools': '//cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/ext-language_tools'
    },
    shim: {
        'ace/ext/language_tools': ['ace/ace'],
    }
});
define("jassi/ext/acelib", ["require", 'ace/ace',
    'ace/ext/language_tools'], function (require, ac) {
    //  var tsmode= require("ace/mode/typescript");
    /*  var WorkerClient = require("ace/worker/worker_client").WorkerClient;
      var createWorker = function (session) {
          var worker = new WorkerClient(["ace"], "jassi/ext/ace_tsmode", "WorkerModule");
          worker.attachToDocument(session.getDocument());

          worker.on("lint", function (results) {
              session.setAnnotations(results.data);
          });

          worker.on("terminate", function () {
              session.clearAnnotations();
          });

          return worker;
      };*/
    return {
        default: ac,
    };
});
define("jassi/ext/contextMenu", ["require"], function () {
    /*
     *contextMenu.js v 1.4.1
     *Author: Sudhanshu Yadav
     *s-yadav.github.com
     *Copyright (c) 2013-2015 Sudhanshu Yadav.
     *Dual licensed under the MIT and GPL licenses
     */
    ;
    (function ($, window, document, undefined) {
        "use strict";
        $.single = (function () {
            var single = $({});
            return function (elm) {
                single[0] = elm;
                return single;
            };
        }());
        $.fn.contextMenu = function (method, selector, option) {
            //parameter fix
            if (!methods[method]) {
                option = selector;
                selector = method;
                method = 'popup';
            }
            //need to check for array object
            else if (selector) {
                if (!((selector instanceof Array) || (typeof selector === 'string') || (selector.nodeType) || (selector.jquery))) {
                    option = selector;
                    selector = null;
                }
            }
            if ((selector instanceof Array) && (method != 'update')) {
                method = 'menu';
            }
            var myoptions = option;
            if ($.inArray(method, ['menu', 'popup', 'close', 'destroy']) > -1) {
                option = iMethods.optionOtimizer(method, option);
                this.each(function () {
                    var $this = $(this);
                    myoptions = $.extend({}, $.fn.contextMenu.defaults, option);
                    if (!myoptions.baseTrigger) {
                        myoptions.baseTrigger = $this;
                    }
                    methods[method].call($this, selector, myoptions);
                });
            }
            else {
                methods[method].call(this, selector, myoptions);
            }
            return this;
        };
        $.fn.contextMenu.defaults = {
            triggerOn: 'click',
            subMenuTriggerOn: 'hover click',
            displayAround: 'cursor',
            mouseClick: 'left',
            verAdjust: 0,
            horAdjust: 0,
            top: 'auto',
            left: 'auto',
            closeOther: true,
            containment: window,
            winEventClose: true,
            position: 'auto',
            closeOnClick: true,
            //callback
            onOpen: function (data, event) { },
            afterOpen: function (data, event) { },
            onClose: function (data, event) { }
        };
        var methods = {
            menu: function (selector, option) {
                selector = iMethods.createMenuList(this, selector, option);
                iMethods.contextMenuBind.call(this, selector, option, 'menu');
            },
            popup: function (selector, option) {
                $(selector).addClass('iw-contextMenu');
                iMethods.contextMenuBind.call(this, selector, option, 'popup');
            },
            update: function (selector, option) {
                var self = this;
                option = option || {};
                this.each(function () {
                    var trgr = $(this), menuData = trgr.data('iw-menuData');
                    //refresh if any new element is added
                    if (!menuData) {
                        self.contextMenu('refresh');
                        menuData = trgr.data('iw-menuData');
                    }
                    var menu = menuData.menu;
                    if (typeof selector === 'object') {
                        for (var i = 0; i < selector.length; i++) {
                            var name = selector[i].name, disable = selector[i].disable, fun = selector[i].fun, icon = selector[i].icon, img = selector[i].img, title = selector[i].title, className = selector[i].className, elm = menu.children('li').filter(function () {
                                return $(this).contents().filter(function () {
                                    return this.nodeType == 3;
                                }).text() == name;
                            }), subMenu = selector[i].subMenu;
                            //toggle disable if provided on update method
                            disable != undefined && (disable ? elm.addClass('iw-mDisable') : elm.removeClass('iw-mDisable'));
                            //bind new function if provided
                            fun && elm.unbind('click.contextMenu').bind('click.contextMenu', fun);
                            //update title
                            title != undefined && elm.attr('title', title);
                            //update class name
                            className != undefined && elm.attr('class', className);
                            var imgIcon = elm.find('.iw-mIcon');
                            if (imgIcon.length)
                                imgIcon.remove();
                            //update image or icon
                            if (img) {
                                elm.prepend('<img src="' + img + '" align="absmiddle" class="iw-mIcon" />');
                            }
                            else if (icon) {
                                elm.prepend('<span align="absmiddle" class="iw-mIcon ' + icon + '" />');
                            }
                            //to change submenus
                            if (subMenu) {
                                elm.contextMenu('update', subMenu);
                            }
                        }
                    }
                    iMethods.onOff(menu);
                    //bind event again if trigger option has changed.
                    var triggerOn = option.triggerOn;
                    if (triggerOn) {
                        trgr.unbind('.contextMenu');
                        //add contextMenu identifier on all events
                        triggerOn = triggerOn.split(" ");
                        var events = [];
                        for (var i = 0, ln = triggerOn.length; i < ln; i++) {
                            events.push(triggerOn[i] + '.contextMenu');
                        }
                        //to bind event
                        trgr.bind(events.join(' '), iMethods.eventHandler);
                    }
                    //set menu data back to trigger element
                    menuData.option = $.extend({}, menuData.option, option);
                    trgr.data('iw-menuData', menuData);
                });
            },
            refresh: function () {
                var menuData = this.filter(function () {
                    return !!$(this).data('iw-menuData');
                }).data('iw-menuData'), newElm = this.filter(function () {
                    return !$(this).data('iw-menuData');
                });
                //to change basetrigger on refresh  
                menuData.option.baseTrigger = this;
                iMethods.contextMenuBind.call(newElm, menuData.menuSelector, menuData.option);
            },
            open: function (sel, data) {
                data = data || {};
                var e = data.event || $.Event('click');
                if (data.top)
                    e.clientY = data.top;
                if (data.left)
                    e.clientX = data.left;
                this.each(function () {
                    iMethods.eventHandler.call(this, e);
                });
            },
            //to force context menu to close
            close: function () {
                var menuData = this.data('iw-menuData');
                if (menuData) {
                    iMethods.closeContextMenu(menuData.option, this, menuData.menu, null);
                }
            },
            //to get value of a key
            value: function (key) {
                var menuData = this.data('iw-menuData');
                if (menuData[key]) {
                    return menuData[key];
                }
                else if (menuData.option) {
                    return menuData.option[key];
                }
                return null;
            },
            destroy: function () {
                var trgr = this, menuId = trgr.data('iw-menuData').menuId, menu = $('.iw-contextMenu[menuId=' + menuId + ']'), menuData = menu.data('iw-menuData');
                //Handle the situation of dynamically added element.
                if (!menuData)
                    return;
                if (menuData.noTrigger == 1) {
                    if (menu.hasClass('iw-created')) {
                        menu.remove();
                    }
                    else {
                        menu.removeClass('iw-contextMenu ' + menuId)
                            .removeAttr('menuId').removeData('iw-menuData');
                        //to destroy submenus
                        menu.find('li.iw-mTrigger').contextMenu('destroy');
                    }
                }
                else {
                    menuData.noTrigger--;
                    menu.data('iw-menuData', menuData);
                }
                trgr.unbind('.contextMenu').removeClass('iw-mTrigger').removeData('iw-menuData');
            }
        };
        var iMethods = {
            contextMenuBind: function (selector, option, method) {
                var trigger = this, menu = $(selector), menuData = menu.data('iw-menuData');
                //fallback
                if (menu.length == 0) {
                    menu = trigger.find(selector);
                    if (menu.length == 0) {
                        return;
                    }
                }
                if (method == 'menu') {
                    iMethods.menuHover(menu);
                }
                //get base trigger
                var baseTrigger = option.baseTrigger;
                if (!menuData) {
                    var menuId;
                    if (!baseTrigger.data('iw-menuData')) {
                        menuId = Math.ceil(Math.random() * 100000);
                        baseTrigger.data('iw-menuData', {
                            'menuId': menuId
                        });
                    }
                    else {
                        menuId = baseTrigger.data('iw-menuData').menuId;
                    }
                    //create clone menu to calculate exact height and width.
                    var cloneMenu = menu.clone();
                    cloneMenu.appendTo('body');
                    menuData = {
                        'menuId': menuId,
                        'menuWidth': cloneMenu.outerWidth(true),
                        'menuHeight': cloneMenu.outerHeight(true),
                        'noTrigger': 1,
                        'trigger': trigger
                    };
                    //to set data on selector
                    menu.data('iw-menuData', menuData).attr('menuId', menuId);
                    //remove clone menu
                    cloneMenu.remove();
                }
                else {
                    menuData.noTrigger++;
                    menu.data('iw-menuData', menuData);
                }
                //to set data on trigger
                trigger.addClass('iw-mTrigger').data('iw-menuData', {
                    'menuId': menuData.menuId,
                    'option': option,
                    'menu': menu,
                    'menuSelector': selector,
                    'method': method
                });
                //hover fix
                var triggerOn = option.triggerOn;
                if (triggerOn.indexOf('hover') != -1) {
                    triggerOn = triggerOn.replace('hover', 'mouseenter');
                    //hover out if display is of context menu is on hover
                    if (baseTrigger.index(trigger) != -1) {
                        baseTrigger.add(menu).bind('mouseleave.contextMenu', function (e) {
                            if ($(e.relatedTarget).closest('.iw-contextMenu').length == 0) {
                                $('.iw-contextMenu[menuId="' + menuData.menuId + '"]').fadeOut(100);
                            }
                        });
                    }
                }
                trigger.delegate('input,a,.needs-click', 'click', function (e) {
                    e.stopImmediatePropagation();
                });
                //add contextMenu identifier on all events
                triggerOn = triggerOn.split(' ');
                var events = [];
                for (var i = 0, ln = triggerOn.length; i < ln; i++) {
                    events.push(triggerOn[i] + '.contextMenu');
                }
                //to bind event
                trigger.bind(events.join(' '), iMethods.eventHandler);
                //to stop bubbling in menu
                menu.bind('click mouseenter', function (e) {
                    e.stopPropagation();
                });
                menu.delegate('li', 'click', function (e) {
                    if (option.closeOnClick && !$.single(this).hasClass('iw-has-submenu'))
                        iMethods.closeContextMenu(option, trigger, menu, e);
                });
            },
            eventHandler: function (e) {
                e.preventDefault();
                var trigger = $(this), trgrData = trigger.data('iw-menuData'), menu = trgrData.menu, menuData = menu.data('iw-menuData'), option = trgrData.option, cntnmnt = option.containment, clbckData = {
                    trigger: trigger,
                    menu: menu
                }, 
                //check conditions
                cntWin = cntnmnt == window, btChck = option.baseTrigger.index(trigger) == -1;
                //to close previous open menu.
                if (!btChck && option.closeOther) {
                    $('.iw-contextMenu').css('display', 'none');
                }
                //to reset already selected menu item
                menu.find('.iw-mSelected').removeClass('iw-mSelected');
                //call open callback
                option.onOpen.call(this, clbckData, e);
                var cObj = $(cntnmnt), cHeight = cObj.innerHeight(), cWidth = cObj.innerWidth(), cTop = 0, cLeft = 0, menuHeight = menuData.menuHeight, menuWidth = menuData.menuWidth, va, ha, left = 0, top = 0, bottomMenu, rightMenu, verAdjust = va = parseInt(option.verAdjust), horAdjust = ha = parseInt(option.horAdjust);
                if (!cntWin) {
                    cTop = cObj.offset().top;
                    cLeft = cObj.offset().left;
                    //to add relative position if no position is defined on containment
                    if (cObj.css('position') == 'static') {
                        cObj.css('position', 'relative');
                    }
                }
                if (option.displayAround == 'cursor') {
                    left = cntWin ? e.clientX : e.clientX + $(window).scrollLeft() - cLeft;
                    top = cntWin ? e.clientY : e.clientY + $(window).scrollTop() - cTop;
                    bottomMenu = top + menuHeight;
                    rightMenu = left + menuWidth;
                    //max height and width of context menu
                    if (bottomMenu > cHeight) {
                        if ((top - menuHeight) < 0) {
                            if ((bottomMenu - cHeight) < (menuHeight - top)) {
                                top = cHeight - menuHeight;
                                va = -1 * va;
                            }
                            else {
                                top = 0;
                                va = 0;
                            }
                        }
                        else {
                            top = top - menuHeight;
                            va = -1 * va;
                        }
                    }
                    if (rightMenu > cWidth) {
                        if ((left - menuWidth) < 0) {
                            if ((rightMenu - cWidth) < (menuWidth - left)) {
                                left = cWidth - menuWidth;
                                ha = -1 * ha;
                            }
                            else {
                                left = 0;
                                ha = 0;
                            }
                        }
                        else {
                            left = left - menuWidth;
                            ha = -1 * ha;
                        }
                    }
                }
                else if (option.displayAround == 'trigger') {
                    var triggerHeight = trigger.outerHeight(true), triggerWidth = trigger.outerWidth(true), triggerLeft = cntWin ? trigger.offset().left - cObj.scrollLeft() : trigger.offset().left - cLeft, triggerTop = cntWin ? trigger.offset().top - cObj.scrollTop() : trigger.offset().top - cTop, leftShift = triggerWidth;
                    left = triggerLeft + triggerWidth;
                    top = triggerTop;
                    bottomMenu = top + menuHeight;
                    rightMenu = left + menuWidth;
                    //max height and width of context menu
                    if (bottomMenu > cHeight) {
                        if ((top - menuHeight) < 0) {
                            if ((bottomMenu - cHeight) < (menuHeight - top)) {
                                top = cHeight - menuHeight;
                                va = -1 * va;
                            }
                            else {
                                top = 0;
                                va = 0;
                            }
                        }
                        else {
                            top = top - menuHeight + triggerHeight;
                            va = -1 * va;
                        }
                    }
                    if (rightMenu > cWidth) {
                        if ((left - menuWidth) < 0) {
                            if ((rightMenu - cWidth) < (menuWidth - left)) {
                                left = cWidth - menuWidth;
                                ha = -1 * ha;
                                leftShift = -triggerWidth;
                            }
                            else {
                                left = 0;
                                ha = 0;
                                leftShift = 0;
                            }
                        }
                        else {
                            left = left - menuWidth - triggerWidth;
                            ha = -1 * ha;
                            leftShift = -triggerWidth;
                        }
                    }
                    //test end
                    if (option.position == 'top') {
                        top = triggerTop - menuHeight;
                        va = verAdjust;
                        left = left - leftShift;
                    }
                    else if (option.position == 'left') {
                        left = triggerLeft - menuWidth;
                        ha = horAdjust;
                    }
                    else if (option.position == 'bottom') {
                        top = triggerTop + triggerHeight;
                        va = verAdjust;
                        left = left - leftShift;
                    }
                    else if (option.position == 'right') {
                        left = triggerLeft + triggerWidth;
                        ha = horAdjust;
                    }
                }
                //applying css property
                var cssObj = {
                    'position': (cntWin || btChck) ? 'fixed' : 'absolute',
                    'display': 'inline-block',
                    'height': '',
                    'width': ''
                };
                //to get position from offset parent
                if (option.left != 'auto') {
                    left = iMethods.getPxSize(option.left, cWidth);
                }
                if (option.top != 'auto') {
                    top = iMethods.getPxSize(option.top, cHeight);
                }
                if (!cntWin) {
                    var oParPos = trigger.offsetParent().offset();
                    if (btChck) {
                        left = left + cLeft - $(window).scrollLeft();
                        top = top + cTop - $(window).scrollTop();
                    }
                    else {
                        left = left - (cLeft - oParPos.left);
                        top = top - (cTop - oParPos.top);
                    }
                }
                cssObj.left = left + ha + 'px';
                cssObj.top = top + va + 'px';
                menu.css(cssObj);
                //to call after open call back
                option.afterOpen.call(this, clbckData, e);
                //to add current menu class
                if (trigger.closest('.iw-contextMenu').length == 0) {
                    $('.iw-curMenu').removeClass('iw-curMenu');
                    menu.addClass('iw-curMenu');
                }
                var dataParm = {
                    trigger: trigger,
                    menu: menu,
                    option: option,
                    method: trgrData.method
                };
                $('html').unbind('click', iMethods.clickEvent).click(dataParm, iMethods.clickEvent);
                $(document).unbind('keydown', iMethods.keyEvent).keydown(dataParm, iMethods.keyEvent);
                if (option.winEventClose) {
                    $(window).bind('scroll resize', dataParm, iMethods.scrollEvent);
                }
            },
            scrollEvent: function (e) {
                iMethods.closeContextMenu(e.data.option, e.data.trigger, e.data.menu, e);
            },
            clickEvent: function (e) {
                var button = e.data.trigger.get(0);
                if ((button !== e.target) && ($(e.target).closest('.iw-contextMenu').length == 0)) {
                    iMethods.closeContextMenu(e.data.option, e.data.trigger, e.data.menu, e);
                }
            },
            keyEvent: function (e) {
                e.preventDefault();
                var menu = e.data.menu, option = e.data.option, keyCode = e.keyCode;
                // handle cursor keys
                if (keyCode == 27) {
                    iMethods.closeContextMenu(option, e.data.trigger, menu, e);
                }
                if (e.data.method == 'menu') {
                    var curMenu = $('.iw-curMenu'), optList = curMenu.children('li:not(.iw-mDisable)'), selected = optList.filter('.iw-mSelected'), index = optList.index(selected), focusOn = function (elm) {
                        iMethods.selectMenu(curMenu, elm);
                        var menuData = elm.data('iw-menuData');
                        if (menuData) {
                            iMethods.eventHandler.call(elm[0], e);
                        }
                    }, first = function () {
                        focusOn(optList.filter(':first'));
                    }, last = function () {
                        focusOn(optList.filter(':last'));
                    }, next = function () {
                        focusOn(optList.filter(':eq(' + (index + 1) + ')'));
                    }, prev = function () {
                        focusOn(optList.filter(':eq(' + (index - 1) + ')'));
                    }, subMenu = function () {
                        var menuData = selected.data('iw-menuData');
                        if (menuData) {
                            iMethods.eventHandler.call(selected[0], e);
                            var selector = menuData.menu;
                            selector.addClass('iw-curMenu');
                            curMenu.removeClass('iw-curMenu');
                            curMenu = selector;
                            optList = curMenu.children('li:not(.iw-mDisable)');
                            selected = optList.filter('.iw-mSelected');
                            first();
                        }
                    }, parMenu = function () {
                        var selector = curMenu.data('iw-menuData').trigger;
                        var parMenu = selector.closest('.iw-contextMenu');
                        if (parMenu.length != 0) {
                            curMenu.removeClass('iw-curMenu').css('display', 'none');
                            parMenu.addClass('iw-curMenu');
                        }
                    };
                    switch (keyCode) {
                        case 13:
                            selected.click();
                            break;
                        case 40:
                            (index == optList.length - 1 || selected.length == 0) ? first() : next();
                            break;
                        case 38:
                            (index == 0 || selected.length == 0) ? last() : prev();
                            break;
                        case 33:
                            first();
                            break;
                        case 34:
                            last();
                            break;
                        case 37:
                            parMenu();
                            break;
                        case 39:
                            subMenu();
                            break;
                    }
                }
            },
            closeContextMenu: function (option, trigger, menu, e) {
                //unbind all events from top DOM
                $(document).unbind('keydown', iMethods.keyEvent);
                $('html').unbind('click', iMethods.clickEvent);
                $(window).unbind('scroll resize', iMethods.scrollEvent);
                $('.iw-contextMenu').css('display', 'none');
                $(document).focus();
                //call close function
                option.onClose.call(this, {
                    trigger: trigger,
                    menu: menu
                }, e);
            },
            getPxSize: function (size, of) {
                if (!isNaN(size)) {
                    return size;
                }
                if (size.indexOf('%') != -1) {
                    return parseInt(size) * of / 100;
                }
                else {
                    return parseInt(size);
                }
            },
            selectMenu: function (menu, elm) {
                //to select the list
                var selected = menu.find('li.iw-mSelected'), submenu = selected.find('.iw-contextMenu');
                if ((submenu.length != 0) && (selected[0] != elm[0])) {
                    submenu.fadeOut(100);
                }
                selected.removeClass('iw-mSelected');
                elm.addClass('iw-mSelected');
            },
            menuHover: function (menu) {
                var lastEventTime = Date.now();
                menu.children('li').bind('mouseenter.contextMenu click.contextMenu', function (e) {
                    //to make curmenu
                    $('.iw-curMenu').removeClass('iw-curMenu');
                    menu.addClass('iw-curMenu');
                    iMethods.selectMenu(menu, $(this));
                });
            },
            createMenuList: function (trgr, selector, option) {
                var baseTrigger = option.baseTrigger, randomNum = Math.floor(Math.random() * 10000);
                if ((typeof selector == 'object') && (!selector.nodeType) && (!selector.jquery)) {
                    var menuList = $('<ul class="iw-contextMenu iw-created iw-cm-menu" id="iw-contextMenu' + randomNum + '"></ul>');
                    $.each(selector, function (index, selObj) {
                        var name = selObj.name, fun = selObj.fun || function () { }, subMenu = selObj.subMenu, img = selObj.img || '', icon = selObj.icon || '', title = selObj.title || "", className = selObj.className || "", disable = selObj.disable, list = $('<li title="' + title + '" class="' + className + '">' + name + '</li>');
                        if (img) {
                            list.prepend('<img src="' + img + '" align="absmiddle" class="iw-mIcon" />');
                        }
                        else if (icon) {
                            list.prepend('<span align="absmiddle" class="' + "iw-mIcon " + icon + '" />');
                        }
                        //to add disable
                        if (disable) {
                            list.addClass('iw-mDisable');
                        }
                        if (!subMenu) {
                            list.bind('click.contextMenu', function (e) {
                                fun.call(this, {
                                    trigger: baseTrigger,
                                    menu: menuList
                                }, e);
                            });
                        }
                        //to create sub menu
                        menuList.append(list);
                        if (subMenu) {
                            list.addClass('iw-has-submenu').append('<div class="iw-cm-arrow-right" />');
                            iMethods.subMenu(list, subMenu, baseTrigger, option);
                        }
                    });
                    if (baseTrigger.index(trgr[0]) == -1) {
                        trgr.append(menuList);
                    }
                    else {
                        var par = option.containment == window ? 'body' : option.containment;
                        $(par).append(menuList);
                    }
                    iMethods.onOff($('#iw-contextMenu' + randomNum));
                    return '#iw-contextMenu' + randomNum;
                }
                else if ($(selector).length != 0) {
                    var element = $(selector);
                    element.removeClass('iw-contextMenuCurrent')
                        .addClass('iw-contextMenu iw-cm-menu iw-contextMenu' + randomNum)
                        .attr('menuId', 'iw-contextMenu' + randomNum)
                        .css('display', 'none');
                    //to create subMenu
                    element.find('ul').each(function (index, element) {
                        var subMenu = $(this), parent = subMenu.parent('li');
                        parent.append('<div class="iw-cm-arrow-right" />');
                        subMenu.addClass('iw-contextMenuCurrent');
                        iMethods.subMenu(parent, '.iw-contextMenuCurrent', baseTrigger, option);
                    });
                    iMethods.onOff($('.iw-contextMenu' + randomNum));
                    return '.iw-contextMenu' + randomNum;
                }
            },
            subMenu: function (trigger, selector, baseTrigger, option) {
                trigger.contextMenu('menu', selector, {
                    triggerOn: option.subMenuTriggerOn,
                    displayAround: 'trigger',
                    position: 'auto',
                    mouseClick: 'left',
                    baseTrigger: baseTrigger,
                    containment: option.containment
                });
            },
            onOff: function (menu) {
                menu.find('.iw-mOverlay').remove();
                menu.find('.iw-mDisable').each(function () {
                    var list = $(this);
                    list.append('<div class="iw-mOverlay"/>');
                    list.find('.iw-mOverlay').bind('click mouseenter', function (event) {
                        event.stopPropagation();
                    });
                });
            },
            optionOtimizer: function (method, option) {
                if (!option) {
                    return;
                }
                if (method == 'menu') {
                    if (!option.mouseClick) {
                        option.mouseClick = 'right';
                    }
                }
                if ((option.mouseClick == 'right') && (option.triggerOn == 'click')) {
                    option.triggerOn = 'contextmenu';
                }
                if ($.inArray(option.triggerOn, ['hover', 'mouseenter', 'mouseover', 'mouseleave', 'mouseout', 'focusin', 'focusout']) != -1) {
                    option.displayAround = 'trigger';
                }
                return option;
            }
        };
    })(jQuery, window, document);
});
undefined;
//Hack for jquery.fancytree.dnd
define("jquery-ui/ui/widgets/draggable", function () {
    return jQuery.ui;
});
define("jquery-ui/ui/widgets/droppable", function () {
    return jQuery.ui;
});
//END Hack
requirejs.config({
    paths: {
        'jquery.fancytree': '//cdn.jsdelivr.net/npm/jquery.fancytree@2.37.0/dist/jquery.fancytree.min',
        "jquery.fancytree.ui-deps": '//cdn.jsdelivr.net/npm/jquery.fancytree@2.37.0/dist/modules/jquery.fancytree.ui-deps',
        'jquery.fancytree.filter': '//cdn.jsdelivr.net/npm/jquery.fancytree@2.37.0/dist/modules/jquery.fancytree.filter',
        'jquery.fancytree.multi': '//cdn.jsdelivr.net/npm/jquery.fancytree@2.37.0/dist/modules/jquery.fancytree.multi',
        'jquery.fancytree.dnd': '//cdn.jsdelivr.net/npm/jquery.fancytree@2.37.0/dist/modules/jquery.fancytree.dnd',
    },
    shim: {
        'jquery.fancytree': ["jquery", "jquery.ui"],
        'jquery.fancytree.dnd': ["jquery", "jquery.ui"],
    }
});
define("jassi/ext/fancytree", ["remote/jassi/base/Jassi", "jquery.fancytree", 'jquery.fancytree.filter', 'jquery.fancytree.multi', 'jquery.fancytree.dnd'], function () {
    //jassi.myRequire("lib/skin-win8/ui.fancytree.min.css");
    jassi.myRequire("//cdn.jsdelivr.net/npm/jquery.fancytree@2.35.0/dist/skin-win8/ui.fancytree.css");
    return { default: "" };
});
requirejs.config({
    paths: {
        'goldenlayout': '//cdnjs.cloudflare.com/ajax/libs/golden-layout/1.5.9/goldenlayout',
    },
    shim: {
        'goldenlayout': ["jquery"]
        //"jquery.ui.contextmenu": ["jquery.ui"]
        // "jquery.contextMenu": ["jquery.ui",'jquery.ui.position'],jquery.ui-contextmenu
    }
});
define("jassi/ext/goldenlayout", ['goldenlayout', "remote/jassi/base/Jassi"], function (GoldenLayout) {
    //jassi.myRequire("lib/goldenlayout-base.css");
    //jassi.myRequire("lib/goldenlayout-light-theme.css");        
    jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/golden-layout/1.5.9/css/goldenlayout-base.css");
    jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/golden-layout/1.5.9/css/goldenlayout-light-theme.css");
    return {
        default: GoldenLayout
    };
});
//polyfill for old ios
var def = [];
if (window.IntersectionObserver === undefined) {
    def = ['//cdn.jsdelivr.net/npm/intersection-observer@0.7.0/intersection-observer.js'];
}
define("jassi/ext/intersection-observer", def, function () {
    return {};
});
requirejs.config({
    paths: {
        //      'jquery.choosen':'lib/chosen/chosen.jquery',
        'jquery.choosen': '//cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.jquery',
    },
    shim: {
        "jquery.choosen": ["jquery"],
    }
});
define("jassi/ext/jquery.choosen", ["remote/jassi/base/Jassi", "jquery.choosen"], function (require) {
    jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.css");
    return {
        default: ""
    };
});
requirejs.config({
    paths: {
        'jquery.contextMenu': '//rawgit.com/s-yadav/contextMenu.js/master/contextMenu',
    },
    shim: {
        "jquery.contextMenu": ["jquery.ui"]
    }
});
define("jassi/ext/jquery.contextmenu", ["remote/jassi/base/Jassi", "jquery.contextMenu"], function (require) {
    jassi.myRequire("//rawgit.com/s-yadav/contextMenu.js/master/contextMenu.css");
    return {
        default: ""
    };
});
requirejs.config({
    paths: {
        'jquery.w2ui': '../../lib/w2ui-1.5.rc1',
    },
    shim: {
        "jquery.w2ui": ["jquery"],
    }
});
define("jassi/ext/jquery.w2ui", ["remote/jassi/base/Jassi", 'jquery.w2ui'], function (require) {
    jassi.myRequire("lib/w2ui-1.5.rc1.css");
    return {
        default: w2ui
    };
});
requirejs.config({
    waitSeconds: 200,
    paths: {
        'jquery': '//cdnjs.cloudflare.com/ajax/libs/jquery/3.5.0/jquery',
        //'jquery': 'lib/jquery',
        'jquery.ui': '//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui',
        //'jquery.ui': 'lib/jquery-ui', 
        'jquery.ui.touch': '//cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min',
        'jquery.doubletap': '//cdnjs.cloudflare.com/ajax/libs/jquery-touch-events/2.0.3/jquery.mobile-events.min',
        'jquery.notify': '//cdnjs.cloudflare.com/ajax/libs/notify/0.4.2/notify.min',
    },
    shim: {
        'jquery.ui': ["jquery"],
        'jquery.notify': ["jquery"],
        'jquery.ui.touch': ["jquery", "jquery.ui"],
        'jquery.doubletap': ["jquery"],
        'jassi/jassi': ['jquery', 'jquery.ui', 'jquery.ui.touch'],
    },
});
define("jassi/ext/jquerylib", [
    "jquery",
    "jquery.ui",
    "jquery.ui.touch",
    "jquery.doubletap",
    "jquery.notify"
], function (require) {
    $.notify.defaults({ position: "bottom right", className: "info" });
    return {
        default: ""
    };
});
requirejs.config({
    paths: {
        //      'jquery.choosen':'lib/chosen/chosen.jquery',
        'js-cookie': '//cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min',
    }
});
define("jassi/ext/js-cookie", ['js-cookie'], function (cookie) {
    return {
        default: cookie
    };
});
requirejs.config({
    paths: {
        'lodash': '//cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min',
    },
});
define("jassi/ext/lodash", ["lodash"], function (lodash) {
    //jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/spectrum/1.8.0/spectrum.min.css");
    return {
        default: lodash
    };
});
//require.config({ paths: { vs: '//cdn.jsdelivr.net/npm/monaco-editor@0.20.0/dev/vs' } });
//require.config({ paths: { vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.21.2/dev/vs' } });
//require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs' } });
let monacopath = "https://cdn.jsdelivr.net/npm/monaco-editor@0.21.2/dev";
require.config({ paths: {
        monacoLib: "jassi/ext/monacoLib",
        vs: monacopath + "/vs"
    }
});
/*
requirejs.config({
    paths: {
        'monacoLib': '//cdn.jsdelivr.net/npm/monaco-editor@0.20.0/dev/vs/editor/editor.main',
        'monacoMain': 'vs/editor/editor.main',
        
        'monacoLib_editorWorkerServiceImpl':"vs/editor/common/services/editorWorkerServiceImpl",
        'monacoLib_editorSimpleWorker':"vs/editor/common/services/editorSimpleWorker",
        'tsWorker':"vs/language/typeScript/tsWorker",

    },
   shim: {
        'monacoMain': ["monacoLib"],
        "monacoLib_editorWorkerServiceImpl": ["monacoLib"],
        "monacoLib_editorSimpleWorker": ["monacoLib"],
        "tsWorker": ["monacoLib"],
    }

});*/
define("jassi/ext/monacoLib", ["require"], function (require, editor) {
    window["module"] = {};
    window["module"].exports = {};
    return {};
});
define("jassi/ext/monaco", ["jassi/ext/monacoLib", "require", 'vs/editor/editor.main', "vs/language/typescript/tsWorker" /*,"monacoLib_editorWorkerServiceImpl","monacoLib_editorSimpleWorker","tsWorker"*/], function (mlib, require, monaco, tsWorker /*,editorWorkerServiceImpl,editorSimpleWorker,tsWorker*/) {
    //get Typescript instance
    window.ts = window["module"].exports;
    delete window["module"];
    var platform_1 = require("vs/base/common/platform");
    platform_1.globals.MonacoEnvironment = {};
    function myfunc() {
        var worker = require(['vs/language/typescript/tsWorker'], function (tsWorker) {
            tsWorker.TypeScriptWorker.prototype.getCompletionsAtPosition = async function (fileName, position, properties) {
                return await this._languageService.getCompletionsAtPosition(fileName, position, properties);
            };
        });
    }
    platform_1.globals.MonacoEnvironment.getWorker = function (workerId, label) {
        var js = "/*editorWorkerService*/self.MonacoEnvironment={baseUrl: '" + monacopath + "/'};importScripts('https://cdn.jsdelivr.net/npm/monaco-editor@0.21.2/dev/vs/base/worker/workerMain.js');/*editorWorkerService*/" + myfunc.toString() + ";myfunc();";
        const blob = new Blob([js], { type: 'application/javascript' });
        var workerUrl = URL.createObjectURL(blob);
        return new Worker(workerUrl, { name: label });
    };
    return {};
});
/*
 //hack to get languageService
    /*var orgLS=ts.createLanguageService;
    
    var funcResolve=undefined;
    var waiter=new Promise((resolve)=>{
        funcResolve=resolve;
    });
    ts.createLanguageService=function(host, documentRegistry, syntaxOnlyOrLanguageServiceMode){
            let ret=orgLS(host, documentRegistry, syntaxOnlyOrLanguageServiceMode);
            funcResolve(ret);
            return ret;
    }
    var ret = {
        getLanguageService:async function(){
            return await waiter;
        }
    }
    //hack monaco allways create a worker which not run as serviceWorker - so we can share the languageservice
    var EditorWorkerHost = require("vs/editor/common/services/editorWorkerServiceImpl").EditorWorkerHost;
    var EditorSimpleWorker = require("vs/editor/common/services/editorSimpleWorker").EditorSimpleWorker;
    var EditorWorkerClient = require("vs/editor/common/services/editorWorkerServiceImpl").EditorWorkerClient;
    class SynchronousWorkerClient {
        constructor(instance) {
            this._instance = instance;
            this._proxyObj = Promise.resolve(this._instance);
        }
        dispose() {
            this._instance.dispose();
        }
        getProxyObject() {
            return this._proxyObj;
        }
    }
    EditorWorkerClient.prototype._getOrCreateWorker = function() {
        if (!this._worker)
            this._worker = new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this), null));
        return this._worker;

    }*/ 
requirejs.config({
    paths: {
        'papaparse': '//cdnjs.cloudflare.com/ajax/libs/PapaParse/4.6.3/papaparse.min',
    },
});
define("jassi/ext/papaparse", ["papaparse"], function (papa) {
    // jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.css");
    return {
        Papa: papa
    };
});
//END Hack
requirejs.config({
    paths: {
        //'jquery.fancytree': '//cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.35.0/jquery.fancytree-all.min',
        'ric': '//cdn.jsdelivr.net/npm/requestidlecallback@0.3.0/index.min',
    },
    shim: {}
});
define("jassi/ext/requestidlecallback", ["ric"], function () {
    //jassi.myRequire("lib/skin-win8/ui.fancytree.min.css");
    //jassi.myRequire("//cdn.jsdelivr.net/npm/jquery.fancytree@2.35.0/dist/skin-win8/ui.fancytree.css");
    return { default: "" };
});
requirejs.config({
    paths: {
        'source.map': "https://unpkg.com/source-map@0.7.3/dist/source-map"
    }
});
//dummy for sourcemap 
define("fs", [], function () {
    return undefined;
});
define("path", [], function () {
    return undefined;
});
define("jassi/ext/sourcemap", ["source.map", "exports"], function (sm, exp) {
    exp = 1;
    // requirejs.undef("fs");
    // requirejs.undef("path");
    return {
        default: sm
    };
});
requirejs.config({
    paths: {
        'spectrum': '//cdnjs.cloudflare.com/ajax/libs/spectrum/1.8.0/spectrum.min',
    },
    shim: {
        "spectrum": ["jquery"],
    }
});
define("jassi/ext/spectrum", ["remote/jassi/base/Jassi", "spectrum"], function (require) {
    jassi.myRequire("//cdnjs.cloudflare.com/ajax/libs/spectrum/1.8.0/spectrum.min.css");
    return {
        default: ""
    };
});
requirejs.config({
    paths: {
        'splitlib': '//cdnjs.cloudflare.com/ajax/libs/split.js/1.6.0/split.min',
    },
});
define("jassi/ext/split", ["splitlib"], function (split) {
    jassi.myRequire("jassi/ext/split.css");
    return {
        default: split
    };
});
//<link href="https://unpkg.com/tabulator-tables@4.6.1/dist/css/tabulator.min.css" rel="stylesheet">
//<script type="text/javascript" src="https://unpkg.com/tabulator-tables@4.6.1/dist/js/tabulator.min.js"></script>
requirejs.config({
    paths: {
        'tabulatorlib': '//unpkg.com/tabulator-tables@4.6.1/dist/js/tabulator'
    },
});
define("jassi/ext/tabulator", ['tabulatorlib'], function (Tabulator) {
    jassi.myRequire("//unpkg.com/tabulator-tables@4.6.1/dist/css/tabulator.min.css");
    window.Tabulator = Tabulator;
    //hack 
    var initializeRow = function (row) {
        var childArray = row.getData()[this.field];
        //hack uw
        if (typeof childArray === "function") {
            childArray = row.getData()[this.field]();
        }
        if (typeof this.field === "function") {
            childArray = this.field(row.getData());
        }
        //end hack uw
        var isArray = Array.isArray(childArray);
        var children = isArray || !isArray && (typeof childArray === 'undefined' ? 'undefined' : _typeof(childArray)) === "object" && childArray !== null;
        if (!children && row.modules.dataTree && row.modules.dataTree.branchEl) {
            row.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);
        }
        if (!children && row.modules.dataTree && row.modules.dataTree.controlEl) {
            row.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);
        }
        row.modules.dataTree = {
            index: 0,
            open: children ? row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0) : false,
            controlEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,
            branchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,
            parent: false,
            children: children
        };
    };
    var generateChildren = function (row) {
        var _this40 = this;
        var children = [];
        var childArray = row.getData()[this.field];
        //hack uw
        if (typeof childArray === "function") {
            childArray = row.getData()[this.field]();
        }
        if (typeof this.field === "function") {
            childArray = this.field(row.getData());
        }
        //end hack uw
        if (!Array.isArray(childArray)) {
            childArray = [childArray];
        }
        childArray.forEach(function (childData) {
            //hack uw
            //var childRow = new Row(childData || {}, _this40.table.rowManager);
            var childRow = new row.__proto__.constructor(childData || {}, _this40.table.rowManager);
            //end hack uw
            childRow.modules.dataTree.index = row.modules.dataTree.index + 1;
            childRow.modules.dataTree.parent = row;
            if (childRow.modules.dataTree.children) {
                childRow.modules.dataTree.open = _this40.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);
            }
            children.push(childRow);
        });
        return children;
    };
    var generateColumnsFromRowData = function (data) {
        var cols = [], row, sorter;
        if (data && data.length) {
            row = data[0];
            for (var key in row) {
                var col = { field: key, title: key };
                var value = row[key];
                //hack uw
                if (typeof value === "function")
                    continue;
                if (Array.isArray(value))
                    continue;
                if (key === "_classname")
                    continue;
                //end hack uw	
                switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
                    case "undefined":
                        sorter = "string";
                        break;
                    case "boolean":
                        sorter = "boolean";
                        break;
                    case "object":
                        if (Array.isArray(value)) {
                            sorter = "array";
                        }
                        else {
                            sorter = "string";
                        }
                        break;
                    default:
                        if (!isNaN(value) && value !== "") {
                            sorter = "number";
                        }
                        else {
                            if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {
                                sorter = "alphanum";
                            }
                            else {
                                sorter = "string";
                            }
                        }
                        break;
                }
                col.sorter = sorter;
                cols.push(col);
            }
            this.table.options.columns = cols;
            this.setColumns(this.table.options.columns);
        }
    };
    window.Tabulator.hackuw = function (table) {
        table.columnManager.__proto__.generateColumnsFromRowData = generateColumnsFromRowData;
        table.modules.dataTree.__proto__.initializeRow = initializeRow;
        table.modules.dataTree.__proto__.generateChildren = generateChildren;
        delete Tabulator.hackuw;
    };
    /*
        return {
            default: Tabulator,
        }*/
});
////GEHT NICHT 
////use requirejs(["https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.4.2/tinymce.min.js"],function(tinymcelib){
var tinyMCEPreInit = {
    suffix: '.min',
    base: '//cdnjs.cloudflare.com/ajax/libs/tinymce/5.4.2',
    query: ''
};
requirejs.config({
    paths: {
        //        'tinymce':'lib/tinymce/tinymce.min',
        //        'tinymce':'//cdnjs.cloudflare.com/ajax/libs/tinymce/5.0.14/tinymce.min'
        'tinymcelib': '//cdnjs.cloudflare.com/ajax/libs/tinymce/5.4.2/tinymce.min'
    }
});
define("jassi/ext/tinymce", ["tinymcelib"], function (require) {
    return {
        default: tinymce
    };
});
define("jassi/security/GroupView", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Property", "remote/jassi/security/Group", "jassi/ui/DBObjectView"], function (require, exports, Jassi_13, Property_1, Group_1, DBObjectView_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.GroupView = void 0;
    let GroupView = class GroupView extends DBObjectView_1.DBObjectView {
        constructor() {
            super();
            //this.me = {}; this is called in objectdialog
            this.layout(this.me);
        }
        get title() {
            return this.value === undefined ? "GroupView" : "GroupView " + this.value.id;
        }
        layout(me) {
        }
    };
    __decorate([
        Property_1.$Property({ isUrlTag: true, id: true, editor: "jassi.ui.PropertyEditors.DBObjectEditor" }),
        __metadata("design:type", typeof (_a = typeof Group_1.Group !== "undefined" && Group_1.Group) === "function" ? _a : Object)
    ], GroupView.prototype, "value", void 0);
    GroupView = __decorate([
        DBObjectView_1.$DBObjectView({ classname: "{{dbfullclassname}}" }),
        Jassi_13.$Class("jassi/security/GroupView"),
        __metadata("design:paramtypes", [])
    ], GroupView);
    exports.GroupView = GroupView;
    async function test() {
        var ret = new GroupView;
        ret["value"] = await Group_1.Group.findOne();
        return ret;
    }
    exports.test = test;
});
define("jassi/security/UserView", ["require", "exports", "jassi/ui/converters/NumberConverter", "jassi/ui/Textbox", "remote/jassi/base/Jassi", "jassi/ui/Property", "remote/jassi/security/User", "jassi/ui/DBObjectView"], function (require, exports, NumberConverter_1, Textbox_1, Jassi_14, Property_2, User_1, DBObjectView_2) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.UserView = void 0;
    let UserView = class UserView extends DBObjectView_2.DBObjectView {
        constructor() {
            super();
            //this.me = {}; this is called in objectdialog
            this.layout(this.me);
        }
        get title() {
            return this.value === undefined ? "User" : "User " + this.value.email;
        }
        layout(me) {
            me.textbox1 = new Textbox_1.Textbox();
            me.textbox2 = new Textbox_1.Textbox();
            this.add(me.textbox1);
            this.add(me.textbox2);
            me.textbox1.bind(me.databinder, "id");
            me.textbox1.width = 40;
            me.textbox1.converter = new NumberConverter_1.NumberConverter();
            me.textbox2.bind(me.databinder, "email");
        }
        createObject() {
            super.createObject();
            this.value.password = Math.random().toString(36).slice(-8); //random password
            $.notify("random password set: " + this.value.password, "info", { position: "right" });
            console.log("random password set: " + this.value.password);
        }
    };
    __decorate([
        Property_2.$Property({ isUrlTag: true, id: true, editor: "jassi.ui.PropertyEditors.DBObjectEditor" }),
        __metadata("design:type", typeof (_a = typeof User_1.User !== "undefined" && User_1.User) === "function" ? _a : Object)
    ], UserView.prototype, "value", void 0);
    UserView = __decorate([
        DBObjectView_2.$DBObjectView({ classname: "jassi.security.User" }),
        Jassi_14.$Class("jassi/UserView"),
        __metadata("design:paramtypes", [])
    ], UserView);
    exports.UserView = UserView;
    async function test() {
        var ret = new UserView();
        ret["value"] = await User_1.User.findOne();
        return ret;
    }
    exports.test = test;
});
define("jassi/template/TemplateDBDialog", ["require", "exports", "jassi/base/Actions", "remote/jassi/base/Jassi", "jassi/ui/OptionDialog", "jassi/ui/FileExplorer", "jassi/ui/Property", "remote/jassi/base/DBObject", "remote/jassi/base/Classes", "remote/jassi/base/Registry"], function (require, exports, Actions_2, Jassi_15, OptionDialog_3, FileExplorer_1, Property_3, DBObject_1, Classes_6, Registry_5) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateDBDialog = exports.TemplateDBDialogProperties = void 0;
    const code = `import { $Class } from "remote/jassi/base/Jassi";
import {Panel} from "jassi/ui/Panel";
import { $Property } from "jassi/ui/Property";
import { {{dbclassname}} } from "{{dbfilename}}";
import { Databinder } from "jassi/ui/Databinder";
import { DBObjectView,  $DBObjectView, DBObjectViewMe } from "jassi/ui/DBObjectView";
import { DBObjectDialog } from "jassi/ui/DBObjectDialog";

type Me = {
}&DBObjectViewMe

@$DBObjectView({classname:"{{fulldbclassname}}"})
@$Class("{{fullclassname}}")
export class {{dialogname}} extends DBObjectView {
    me: Me;
    @$Property({ isUrlTag: true, id: true, editor: "jassi.ui.PropertyEditors.DBObjectEditor" })
    value: {{dbclassname}};
    constructor() {
        super();
        //this.me = {}; this is called in objectdialog
        this.layout(this.me);
    }
    get title() {
        return this.value === undefined ? "{{dialogname}}" : "{{dialogname}} " + this.value.id;
    }
    layout(me: Me) {
    }
}

export async function test(){
	var ret=new {{dialogname}};
	
	ret["value"]=<{{dbclassname}}>await {{dbclassname}}.findOne();
	return ret;
}`;
    let TemplateDBDialogProperties = class TemplateDBDialogProperties {
    };
    __decorate([
        Property_3.$Property({ decription: "name of the dialog" }),
        __metadata("design:type", String)
    ], TemplateDBDialogProperties.prototype, "dialogname", void 0);
    __decorate([
        Property_3.$Property({ type: "classselector", service: "$DBObject" }),
        __metadata("design:type", typeof (_a = typeof DBObject_1.DBObject !== "undefined" && DBObject_1.DBObject) === "function" ? _a : Object)
    ], TemplateDBDialogProperties.prototype, "dbobject", void 0);
    TemplateDBDialogProperties = __decorate([
        Jassi_15.$Class("jassi.ui.TemplateDBDialogProperties")
    ], TemplateDBDialogProperties);
    exports.TemplateDBDialogProperties = TemplateDBDialogProperties;
    let TemplateDBDialog = class TemplateDBDialog {
        static async newFile(all) {
            var props = new TemplateDBDialogProperties();
            var res = await OptionDialog_3.OptionDialog.askProperties("Create new DBDialog:", props, ["ok", "cancel"], undefined, false);
            if (res.button === "ok") {
                var scode = code.replaceAll("{{dialogname}}", props.dialogname);
                var fulldbclassname = Classes_6.classes.getClassName(props.dbobject);
                var shortdbclassname = fulldbclassname.split(".")[fulldbclassname.split(".").length - 1];
                var dbfilename = await Registry_5.default.getJSONData("$Class", fulldbclassname)[0].filename;
                dbfilename = dbfilename.substring(0, dbfilename.length - 3);
                scode = scode.replaceAll("{{fullclassname}}", (all[0].fullpath + "/" + props.dialogname).replaceAll("/", "."));
                scode = scode.replaceAll("{{dbclassname}}", shortdbclassname);
                scode = scode.replaceAll("{{fulldbclassname}}", fulldbclassname);
                scode = scode.replaceAll("{{dbfilename}}", dbfilename);
                FileExplorer_1.FileActions.newFile(all, props.dialogname + ".ts", scode, true);
            }
        }
    };
    TemplateDBDialog.code = code;
    __decorate([
        Actions_2.$Action({
            name: "New/DBDialog",
            isEnabled: function (all) {
                return all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], TemplateDBDialog, "newFile", null);
    TemplateDBDialog = __decorate([
        Actions_2.$ActionProvider("jassi.base.FileNode"),
        Jassi_15.$Class("jassi.ui.TemplateDBDialog")
    ], TemplateDBDialog);
    exports.TemplateDBDialog = TemplateDBDialog;
});
define("jassi/template/TemplateDBObject", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Property", "jassi/base/Actions", "jassi/ui/OptionDialog", "jassi/ui/FileExplorer"], function (require, exports, Jassi_16, Property_4, Actions_3, OptionDialog_4, FileExplorer_2) {
    "use strict";
    var TemplateDBObject_2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateDBObject = exports.TemplateDBObjectProperties = void 0;
    var code = `import {DBObject, $DBObject } from "remote/jassi/base/DBObject";
import jassi, { $Class } from "remote/jassi/base/Jassi";
import { Entity, PrimaryColumn, Column, OneToOne, ManyToMany, ManyToOne, OneToMany } from "jassi/util/DatabaseSchema";
import { $DBObjectQuery } from "remote/jassi/base/DBObjectQuery";


@$DBObject()
@$Class("{{fullclassname}}")

export class {{classname}} extends DBObject {

    {{PrimaryAnnotator}}
    id: number;
  
    constructor() {
        super();
    }
}


export async function test() {
};`;
    let TemplateDBObjectProperties = class TemplateDBObjectProperties {
    };
    __decorate([
        Property_4.$Property({ decription: "name of the db class" }),
        __metadata("design:type", String)
    ], TemplateDBObjectProperties.prototype, "name", void 0);
    __decorate([
        Property_4.$Property({ default: "true", description: "the primary column alue will be automatically generated with an auto-increment value" }),
        __metadata("design:type", String)
    ], TemplateDBObjectProperties.prototype, "autogeneratedid", void 0);
    TemplateDBObjectProperties = __decorate([
        Jassi_16.$Class("jassi.ui.TemplateDBDialogProperties")
    ], TemplateDBObjectProperties);
    exports.TemplateDBObjectProperties = TemplateDBObjectProperties;
    let TemplateDBObject = TemplateDBObject_2 = class TemplateDBObject {
        static async newFile(all) {
            var props = new TemplateDBObjectProperties();
            var res = await OptionDialog_4.OptionDialog.askProperties("Create Database Class:", props, ["ok", "cancel"], undefined, false);
            if (res.button === "ok") {
                var scode = TemplateDBObject_2.code.replaceAll("{{fullclassname}}", all[0].fullpath + "/" + props.name);
                scode = scode.replaceAll("{{classname}}", props.name);
                var anno = "@PrimaryColumn()";
                if (props.autogeneratedid)
                    anno = "@PrimaryGeneratedColumn()";
                scode = scode.replaceAll("{{PrimaryAnnotator}}", anno);
                FileExplorer_2.FileActions.newFile(all, props.name + ".ts", scode, true);
            }
        }
    };
    TemplateDBObject.code = code;
    __decorate([
        Actions_3.$Action({
            name: "New/DBObject",
            isEnabled: function (all) {
                return all[0].isDirectory() && all[0].fullpath.startsWith("remote/");
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], TemplateDBObject, "newFile", null);
    TemplateDBObject = TemplateDBObject_2 = __decorate([
        Actions_3.$ActionProvider("jassi.base.FileNode"),
        Jassi_16.$Class("jassi.ui.TemplateDBObject")
    ], TemplateDBObject);
    exports.TemplateDBObject = TemplateDBObject;
});
define("jassi/template/TemplateEmptyDialog", ["require", "exports", "jassi/base/Actions", "remote/jassi/base/Jassi", "jassi/ui/OptionDialog", "jassi/ui/FileExplorer"], function (require, exports, Actions_4, Jassi_17, OptionDialog_5, FileExplorer_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateEmptyDialog = void 0;
    const code = `import { $Class } from "remote/jassi/base/Jassi";
import {Panel} from "jassi/ui/Panel";

type Me = {
}

@$Class("{{fullclassname}}")
export class {{dialogname}} extends Panel {
    me: Me;
    constructor() {
        super();
        this.me = {};
        this.layout(this.me);
    }
    layout(me: Me) {
	}
}

export async function test(){
	var ret=new {{dialogname}}();
	return ret;
}`;
    let TemplateEmptyDialog = class TemplateEmptyDialog {
        static async newFile(all) {
            var res = await OptionDialog_5.OptionDialog.show("Enter dialog name:", ["ok", "cancel"], undefined, true, "Dialog");
            if (res.button === "ok" && res.text !== all[0].name) {
                var scode = code.replaceAll("{{dialogname}}", res.text);
                scode = scode.replaceAll("{{fullclassname}}", all[0].fullpath + "/" + res.text);
                FileExplorer_3.FileActions.newFile(all, res.text + ".ts", scode, true);
            }
        }
    };
    TemplateEmptyDialog.code = code;
    __decorate([
        Actions_4.$Action({
            name: "New/Dialog",
            isEnabled: function (all) {
                return all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], TemplateEmptyDialog, "newFile", null);
    TemplateEmptyDialog = __decorate([
        Actions_4.$ActionProvider("jassi.base.FileNode"),
        Jassi_17.$Class("jassi.ui.TemplateEmptyDialog")
    ], TemplateEmptyDialog);
    exports.TemplateEmptyDialog = TemplateEmptyDialog;
});
define("jassi/ui/AcePanel", ["require", "exports", "jassi/jassi", "jassi/ext/acelib", "jassi/util/Typescript", "remote/jassi/base/Jassi", "remote/jassi/base/Registry", "jassi/ui/CodePanel", "jassi/base/Debugger"], function (require, exports, jassi_1, acelib_1, Typescript_4, Jassi_18, Registry_6, CodePanel_1) {
    "use strict";
    var AcePanel_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AcePanel = void 0;
    /**
    * wrapper for the Ace-Code editor with Typesccript-Code-Completion an other features
    * @class jassi.ui.CodePanel
    */
    let AcePanel = AcePanel_1 = class AcePanel extends CodePanel_1.CodePanel {
        constructor() {
            super();
            var _this = this;
            var test = $('<div class="CodePanel" style="height: 500px; width: 500px"></div>')[0];
            super.init(test);
            $(this.domWrapper).css("display", "");
            this._editor = acelib_1.default.edit(this._id);
            this.file = "";
            this.checkErrorTask = new Runlater(function () {
                _this._checkCode();
            }, 900);
            this._editor.setOptions({
                enableBasicAutocompletion: true,
                //   maxLines:Infinity,
                useSoftTabs: false,
                autoScrollEditorIntoView: false
                //      enableMultiselect: false,
                //    enableLinking: true
            });
            // this._editor.setAutoScrollEditorIntoView(false);
            this._editor.session.setOption("useWorker", false);
            this._editor.$blockScrolling = Infinity;
            this._editor.jassi = this;
            this._installLangTools();
            var include = /[a-z.]/i;
            this._addEvents();
            this._addCommands();
            //editor.$blockScrolling = Infinity;
        }
        _addEvents() {
            var _this = this;
            this._editor.on('change', (obj, editor) => {
                switch (obj.action) {
                    case 'insert':
                        let lines = obj.lines;
                        let char = lines[0];
                        if ((lines.length === 1) && (char.length === 1) && char === ".") {
                            setTimeout(() => {
                                this._editor.commands.byName.startAutocomplete.exec(this._editor);
                            }, 50);
                        }
                        if (lines.length == 1 && lines[0].length > 1 && lines[0].indexOf(" ") < 0) {
                            //no check after .
                            var idx = _this.positionToNumber(obj.start);
                            var test = _this.value[idx - 1];
                            if (test !== ".") {
                                setTimeout(() => {
                                    _this._doRequiredImports(obj.end, lines);
                                }, 500);
                            }
                        }
                        break;
                }
                _this.checkErrorTask.runlater();
                var lineHeight = this._editor.renderer.lineHeight;
                var editorDiv = document.getElementById(_this._id);
                editorDiv.style.height = lineHeight * _this._editor.getSession().getDocument().getLength() + " px";
                _this._editor.resize();
            });
            _this._editor.on("guttermousedown", function (e) {
                var row = e.getDocumentPosition().row;
                var breakpoints = e.editor.session.getBreakpoints(row, 0);
                var type = "debugpoint";
                if (e.domEvent.ctrlKey)
                    type = "checkpoint";
                var column = _this._editor.session.getLine(row).length;
                if (typeof breakpoints[row] === typeof undefined) {
                    e.editor.session.setBreakpoint(row);
                    _this.callEvent("breakpointChanged", row, column, true, type);
                }
                else {
                    e.editor.session.clearBreakpoint(row, false, undefined);
                    _this.callEvent("breakpointChanged", row, column, false, type);
                }
            });
            this._editor.on("mousemove", function (e) {
                _this._manageTooltip(e);
            });
        }
        /**
         * add commands to Ace Editor
         **/
        _addCommands() {
            var _this = this;
            this._editor.commands.addCommand({
                name: "formatDocument",
                bindKey: { win: "Shift-Alt-f", mac: "Shift-Alt-f" },
                exec: function (editor) {
                    Typescript_4.default.formatDocument(_this.file, _this.value).then((val) => {
                        _this.value = val;
                    });
                }
            });
            this._editor.commands.addCommand({
                name: "goToDeclaration",
                bindKey: { win: "Ctrl-F12", mac: "Ctrl-F12" },
                exec: function (editor) {
                    _this.gotoDeclaration();
                }
            });
        }
        _tooltiprefresh(event) {
            if (this._lastTooltipRefresh === undefined)
                return;
            if (this._lastTooltipRefresh + 400 < Date.now()) {
                var pos = event.getDocumentPosition();
                if (pos.row === 0 || pos.column == 0)
                    return;
                let lpos = this.positionToNumber({
                    column: pos.column + 1,
                    row: pos.row + 1
                }) - 1;
                if (!Typescript_4.default.isInited(this.file))
                    return;
                var p;
                Typescript_4.default.getQuickInfoAtPosition(this.file, lpos, this.value).then((p) => {
                    if (p !== undefined) {
                        var text = "<div style='font-size:12px'>";
                        for (let x = 0; x < p.displayParts.length; x++) {
                            text = text + p.displayParts[x].text;
                        }
                        if (p.documentation !== undefined) {
                            for (let x = 0; x < p.documentation.length; x++) {
                                text = text + "<br>" + p.documentation[x].text;
                            }
                        }
                        text = text + "<br>" + (p.documentation === undefined ? "" : p.documentation) + "<div>";
                        $(AcePanel_1._tooltipdiv).html(text);
                        $(AcePanel_1._tooltipdiv).css({ "background-color": "#f7f4a5", display: "block", position: "absolute", 'top': event.y, 'left': event.x }).fadeIn('fast');
                    }
                });
            }
        }
        /**
         * show tooltip
         */
        _manageTooltip(event) {
            if (AcePanel_1._tooltipdiv === undefined) {
                AcePanel_1._tooltipdiv = $('<div id="tt">hallo</div>')[0];
                document.body.append(AcePanel_1._tooltipdiv);
            }
            if (event !== undefined)
                $(AcePanel_1._tooltipdiv).css({ display: "none", position: "absolute", 'top': event.y, 'left': event.x });
            this._lastTooltipRefresh = Date.now();
            event = event;
            window.setTimeout(this._tooltiprefresh.bind(this), 400, event);
        }
        insert(pos, text) {
            this._editor.session.insert(pos, text);
        }
        /**
         * check if imports are neded and do so
         **/
        _doRequiredImports(pos, name) {
            if (!Typescript_4.default.isInited(this.file))
                return;
            if (this.value.indexOf("import " + name + " ") === -1 && this.value.indexOf("import {" + name + "} ") === -1) {
                let lpos = this.positionToNumber({
                    column: pos.column + 1,
                    row: pos.row + 1
                }) - 1;
                CodePanel_1.CodePanel.getAutoimport(lpos, this.file, this.value).then((data) => {
                    if (data !== undefined) {
                        this._editor.session.insert(data.pos, data.text);
                        Typescript_4.default.setCode(this.file, this.value);
                    }
                });
            }
        }
        /**
         * check for errors or warnings
         */
        _checkCode() {
            if (this.file !== undefined && !this.file.toLowerCase().endsWith(".ts"))
                return;
            var _this = this;
            Typescript_4.default.waitForInited.then(() => {
                if (_this._editor !== undefined && _this._editor.getSession() !== undefined) {
                    _this._editor.getSession().setAnnotations([{
                            row: 1,
                            column: 1,
                            text: "typescript initialization still in progress...",
                            type: "information" // also warning and information
                        }]);
                }
                Typescript_4.default.setCode(_this.file, _this.value).then((tt) => {
                    if (_this.file === undefined)
                        return;
                    Typescript_4.default.getDiagnostics(_this.file, _this.value).then((diag) => {
                        var annotaions = [];
                        var iserror = false;
                        for (var x = 0; x < diag.semantic.length; x++) {
                            // if (diag.semantic[x].file === undefined)
                            //   continue;
                            // if (diag.semantic[x].file === undefined||diag.semantic[x].file.fileName === ("file:///" + _this.file) {
                            var err = _this.numberToPosition(diag.semantic[x].start);
                            annotaions.push({
                                row: err.row - 1,
                                column: err.column - 1,
                                text: diag.semantic[x].messageText["messageText"] === undefined ? diag.semantic[x].messageText : diag.semantic[x].messageText["messageText"],
                                type: "error" // also warning and information
                            });
                            iserror = true;
                            //  }
                        }
                        for (var y = 0; y < diag.suggestion.length; y++) {
                            //if (diag.suggestion[y].file === undefined)
                            //    continue;
                            //   if (diag.suggestion[y].file === undefined||diag.suggestion[y].file.fileName === _this.file) {
                            var err = _this.numberToPosition(diag.suggestion[y].start);
                            annotaions.push({
                                row: err.row - 1,
                                column: err.column - 1,
                                text: diag.suggestion[y].messageText,
                                type: "warning" // also warning and information
                            });
                            //  }
                        }
                        for (var x = 0; x < diag.syntactic.length; x++) {
                            //  if (diag.syntactic[x].file === undefined)
                            //    continue;
                            // if (iag.syntactic[x].file === undefined||diag.syntactic[x].file.fileName === _this.file) {
                            var err = _this.numberToPosition(diag.syntactic[x].start);
                            annotaions.push({
                                row: err.row - 1,
                                column: err.column - 1,
                                text: diag.syntactic[x].messageText["messageText"] === undefined ? diag.syntactic[x].messageText : diag.syntactic[x].messageText["messageText"],
                                type: "error" // also warning and information
                            });
                            iserror = true;
                            //}
                        }
                        _this._editor.getSession().setAnnotations(annotaions);
                        if (iserror) {
                            $(_this.dom).find(".ace_gutter").css("background", "#ffbdb9");
                        }
                        else {
                            $(_this.dom).find(".ace_gutter").css("background", "");
                        }
                    });
                });
            });
        }
        /**
         * initialize the Ace language Tools (only once)
         */
        _installLangTools() {
            var aceLangTools = acelib_1.default.require("ace/ext/language_tools");
            if (aceLangTools.jassi === undefined) {
                aceLangTools.jassi = {
                    constructor: {},
                    getDocTooltip: function (item) {
                        return item.codePanel.getDocTooltip(item);
                        // if (item.jassi !== undefined && item.jassi.getDocTooltip !== undefined)
                        //     return item.jassi.getDocTooltip(item);
                    },
                    getCompletions: function (editor, session, pos, prefix, callback) {
                        return editor.jassi.getCompletions(editor, session, pos, prefix, callback);
                    }
                };
            }
            aceLangTools.setCompleters([aceLangTools.jassi, aceLangTools.keyWordCompleter]);
        }
        /**
        * get the completion entrys for the Ace-Code-Editor
        * @param editor - the editor instance
        * @param session - the editor session
        * @param pos - the current code position
        * @param prefix - the word before the code position
        * @param callback - the function to transfer the completions
        */
        getCompletions(editor, session, pos, prefix, callback) {
            /*   var ret = [];
               var entry = { caption: caption, name: sname, value: sname, score: 10, meta: "object", parent: ob };
               ret.push(entry);
               callback(null, ret);*/
            var ret = [];
            var _this = this;
            var p = _this.positionToNumber({
                column: pos.column + 1,
                row: pos.row + 1
            });
            var code = this.value;
            if (Typescript_4.default.isInited(this.file) !== true) {
                let entry = { caption: "please try later ... loading in progress", name: "loading", value: "empty", score: 10, meta: "object", parent: "otto", codePanel: _this };
                ret.push(entry);
                return;
            }
            if (_this.file.endsWith(".js"))
                return;
            Typescript_4.default.getCompletion(_this.file, p, code, { includeExternalModuleExports: true }).then((data) => {
                if (data !== undefined) {
                    for (let e = 0; e < data.entries.length; e++) {
                        let entr = data.entries[e];
                        var icon = "variableicon";
                        if (entr.kind === "method" || entr.kind === "function")
                            icon = "functionicon";
                        if (entr.kind === "property" || entr.kind === "getter" || entr.kind === "setter")
                            icon = "membericon";
                        if (entr.name.startsWith("$") && entr.kind === "function") {
                            icon = "annotationicon";
                        }
                        if (entr.kind === "class")
                            icon = "classicon";
                        var entry = {
                            caption: entr.name, name: entr.name, value: entr.name,
                            score: 10, meta: entr.kind, codePanel: _this, pos: p, file: _this.file, className: icon, icon: "method"
                        };
                        ret.push(entry);
                    }
                }
                else {
                    let entry = { caption: "empty", name: "empty", value: "empty", score: 10, meta: "object", parent: "otto", codePanel: _this };
                    ret.push(entry);
                }
                callback(null, ret);
            });
        }
        /**
        * get the documentation for a member for the Ace-Code-Editor
        * @param {object} item - the member to describe
        */
        getDocTooltip(item) {
            if (item.file === undefined)
                return "";
            var _id = Registry_6.default.nextID();
            item.docHTML = "<span id='" + _id + "'> please try later ... loading in progress<span>";
            Typescript_4.default.getCompletionEntryDetails(item.file, item.pos, item.name, {}, undefined, {}).then((ret) => {
                if (ret === undefined)
                    return;
                var doc = "<b>";
                if (ret.displayParts !== undefined) {
                    for (var x = 0; x < ret.displayParts.length; x++) {
                        doc = doc + ret.displayParts[x].text; //+ret.tags[x].text;
                    }
                }
                //doc = "<div style='width:50px;word-wrap: break-word'>"+doc + "</div></b><br>";
                doc = "<div style='word-wrap: break-word'>" + doc + "</div></b><br>";
                if (ret.documentation !== undefined) {
                    for (var x = 0; x < ret.documentation.length; x++) {
                        doc = doc + ret.documentation[x].text + "<br>"; //+ret.tags[x].text;
                    }
                }
                doc = doc;
                if (ret.tags !== undefined) {
                    for (var x = 0; x < ret.tags.length; x++) {
                        doc = doc + "<b>" + ret.tags[x].name + " </b> " + (ret.tags[x].text === undefined ? "" : ret.tags[x].text.replaceAll("<", "&#60;").replaceAll(">", "&#62;") + "<br>");
                    }
                }
                doc = doc;
                var html = "<div style='font-size:12px'>" + doc + "<div>"; //this._getDescForMember(item.parent, item.name);
                //window.setTimeout(()=>{
                $("#" + _id)[0].outerHTML = html;
                // },10);
            });
        }
        /**
         * gets a list of all lines with breakpoint
         * @returns {Object.<number, boolean>}
         */
        getBreakpoints() {
            var ret = {};
            var breakpoints = this._editor.session.getBreakpoints(0, 0);
            for (var x = 0; x < breakpoints.length; x++) {
                if (breakpoints[x] !== undefined) {
                    ret[x] = true;
                }
                //	debugger;
            }
            return ret;
        }
        /**
         * component get focus
         * @param {function} handler
         */
        onfocus(handler) {
            this._editor.on("focus", handler);
        }
        /**
         * component lost focus
         * @param {function} handler
         */
        onblur(handler) {
            this._editor.on("blur", handler);
        }
        /**
         * @param - the codetext
         */
        set value(value) {
            var lastcursor = this.cursorPosition;
            this._editor.setValue(value);
            this._editor.clearSelection();
            //force ctrl+z not shows an empty document
            if (this._isInited === undefined) {
                this._isInited = true;
                this._editor.getSession().setUndoManager(new acelib_1.default.UndoManager());
            }
            if (lastcursor !== undefined) {
                //this.cursorPosition = lastcursor;
            }
            var _this = this;
            //asynchron
            window.setTimeout(() => {
                this._checkCode();
            }, 10);
        }
        get value() {
            return this._editor.getValue();
        }
        /**
         * @param {object} position - the current cursor position {row= ,column=}
         */
        set cursorPosition(cursor) {
            this._editor.focus();
            this._editor.gotoLine(cursor.row, cursor.column, true);
            var r = cursor.row;
            if (r > 3)
                r = r - 3;
            var _this = this;
            _this._editor.renderer.scrollToRow(r);
            _this._editor.renderer.scrollCursorIntoView({ row: cursor.row, column: cursor.column }, 0.5);
        }
        get cursorPosition() {
            var ret = this._editor.getCursorPosition();
            ret.row++;
            ret.column++;
            return ret;
        }
        /**
         * returns a single line
         * @param {number} line - the line number
         */
        getLine(line) {
            return this._editor.getSession().getLine(line);
        }
        /**
         * @member {string} - the language of the editor e.g. "ace/mode/javascript"
         */
        set mode(mode) {
            //  alert(mode);
            this._mode = mode;
            this._editor.getSession().setMode("ace/mode/" + mode);
        }
        get mode() {
            return this._mode;
        }
        destroy() {
            this._editor.destroy();
            super.destroy();
        }
        /**
        * undo action
        */
        undo() {
            this._editor.undo();
        }
        /**
         * resize the editor
         * */
        resize() {
            this._editor.resize();
        }
    };
    AcePanel = AcePanel_1 = __decorate([
        Jassi_18.$Class("jassi.ui.AcePanel"),
        __metadata("design:paramtypes", [])
    ], AcePanel);
    exports.AcePanel = AcePanel;
    class Runlater {
        constructor(func, timeout) {
            this.isRunning = false;
            this.func = func;
            this.timeout = timeout;
        }
        _checkRun() {
            var _this = this;
            if (Date.now() > this.timeout + this.lastRun) {
                this.isRunning = false;
                this.func();
            }
            else {
                setTimeout(function () {
                    _this._checkRun();
                }, this.timeout);
            }
        }
        runlater() {
            var _this = this;
            this.lastRun = Date.now();
            if (this.isRunning) {
                return;
            }
            else {
                this.isRunning = true;
                setTimeout(function () {
                    _this._checkRun();
                }, this.timeout);
            }
        }
    }
    jassi_1.default.test = async function () {
        var dlg = new AcePanel();
        dlg.value = "var h;\r\nvar k;\r\nvar k;\r\nvar k;\r\nconsole.debug('ddd');";
        dlg.mode = "javascript";
        //dlg._editor.renderer.setShowGutter(false);		
        //dlg._editor.getSession().addGutterDecoration(1,"error_line");
        //  dlg._editor.getSession().setBreakpoint(1);
        // dlg._editor.getSession().setBreakpoint(2);
        var h = dlg.getBreakpoints();
        return dlg;
    };
});
define("jassi/ui/BoxPanel", ["require", "exports", "jassi/ui/Panel", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/Property", "remote/jassi/base/Classes", "jassi/ext/split"], function (require, exports, Panel_2, Jassi_19, Component_2, Property_5, Classes_7, split_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.BoxPanel = void 0;
    let BoxPanel = class BoxPanel extends Panel_2.Panel {
        /**
        *
        * @param {object} properties - properties to init
        * @param {string} [properties.id] -  connect to existing id (not reqired)
        * @param {boolean} [properties.useSpan] -  use span not div
        *
        */
        constructor(properties = undefined) {
            super(properties);
            $(this.domWrapper).addClass('BoxPanel').removeClass('Panel');
            this.horizontal = false;
            $(this.dom).css("display", "flex");
        }
        /**
         * @member {boolean} - if true then the components are composed horizontally
         **/
        set horizontal(value) {
            this._horizontal = value;
            if (value)
                $(this.dom).css("flex-direction", "row");
            else
                $(this.dom).css("flex-direction", "column");
            this.updateSpliter();
            /*	this._horizontal=value;
                var jj=	$(this.dom).find(".jcomponent");
                if(this._horizontal){
                    $(this.dom).css("display","table");
                    $(this.dom).find(".jcomponent").css("display","table-row");
               }else{
                    $(this.dom).css("display","flex");
                    $(this.dom).find(".jcomponent").css("display","table-cell");
               }*/
        }
        get horizontal() {
            return this._horizontal;
        }
        /**
        * adds a component to the container
        * @param {jassi.ui.Component} component - the component to add
        */
        add(component) {
            /* if(this._horizontal){
                        $(component.domWrapper).css("display","table-row");
             }else{
                        $(component.domWrapper).css("display","table-cell");
             }*/
            super.add(component);
            this.updateSpliter();
        }
        /**
        * adds a component to the container before an other component
        * @param {jassi.ui.Component} component - the component to add
        * @param {jassi.ui.Component} before - the component before then component to add
        */
        addBefore(component, before) {
            /*if(this._horizontal){
                    $(component.domWrapper).css("display","table-row");
               }else{
                    $(component.domWrapper).css("display","table-cell");
               }*/
            super.addBefore(component, before);
            this.updateSpliter();
        }
        /**
         * set the size of splitter e.g. [40,60] the firstcomponent size is 40%
         */
        set spliter(size) {
            this._spliter = size;
            this.updateSpliter();
        }
        get spliter() {
            return this._spliter;
        }
        updateSpliter() {
            if (this._splitcomponent) {
                this._splitcomponent.destroy();
                this._splitcomponent = undefined;
            }
            if (!this._spliter)
                return;
            var comp = [];
            for (var x = 0; x < this._components.length; x++) {
                if (this._components[x]["designDummyFor"])
                    continue;
                $(this._components[x].__dom).css("width", this.horizontal ? "calc(100% - 5px)" : "100%");
                $(this._components[x].__dom).css("height", this.horizontal ? "100%" : "calc(100% - 5px)");
                comp.push(this._components[x].domWrapper);
            }
            this._splitcomponent = split_1.default(comp, {
                sizes: this._spliter,
                gutterSize: 8,
                minSize: [50, 50, 50, 50, 50, 50, 50, 50],
                direction: this.horizontal ? 'horizontal' : 'vertical'
            });
        }
    };
    __decorate([
        Property_5.$Property({ default: true }),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], BoxPanel.prototype, "horizontal", null);
    __decorate([
        Property_5.$Property({ type: "number[]", description: "set the size of splitter e.g. [40,60] the firstcomponent size is 40%" }),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], BoxPanel.prototype, "spliter", null);
    BoxPanel = __decorate([
        Component_2.$UIComponent({ fullPath: "common/BoxPanel", icon: "mdi mdi-view-sequential-outline", editableChildComponents: ["this"] }),
        Jassi_19.$Class("jassi.ui.BoxPanel"),
        Property_5.$Property({ name: "isAbsolute", hide: true, type: "boolean" }),
        __metadata("design:paramtypes", [Object])
    ], BoxPanel);
    exports.BoxPanel = BoxPanel;
    async function test() {
        var HTMLPanel = await Classes_7.classes.loadClass("jassi.ui.HTMLPanel");
        var ret = new BoxPanel();
        var me = {};
        ret["me"] = me;
        ret.horizontal = true;
        me.tb = new HTMLPanel();
        me.tb2 = new HTMLPanel();
        me.tb.value = "l&ouml;&auml;k&ouml;lk &ouml;lsfdk sd&auml;&ouml;flgkdf ";
        me.tb.width = 135;
        me.tb2.value = "löäkölk ölsfdk sdäöflgkdf ";
        ret.add(me.tb);
        ret.add(me.tb2);
        ret.spliter = [40, 60];
        ret.height = "400px";
        ret.width = "400px";
        return ret;
    }
    exports.test = test;
    ;
});
define("jassi/ui/Button", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/Property"], function (require, exports, Jassi_20, Component_3, Property_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Button = void 0;
    let Button = class Button extends Component_3.Component {
        /* get dom(){
             return this.dom;
         }*/
        constructor() {
            super();
            super.init($('<button class="Button" id="dummy" contenteditable=false><span class="element1"></span><span class="element2" > </span></button>')[0]);
        }
        /**
        * register an event if the button is clicked
        * @param {function} handler - the function that is called on change
        */
        onclick(handler, removeOldHandler = true) {
            if (removeOldHandler)
                $("#" + this._id).prop("onclick", null).off("click");
            $("#" + this._id).click(function (ob) {
                handler(ob);
            });
        }
        /**
        * @member {string} - the icon of the button
        */
        set icon(icon) {
            var img;
            if (icon === null || icon === void 0 ? void 0 : icon.startsWith("mdi")) {
                img = $('<span >')[0];
                $(img).removeClass();
                $(img).addClass(icon);
            }
            else {
                img = $('<img vspace="0" hspace="0"  border="0"  src="" alt="">')[0];
                $(img).attr("src", icon);
            }
            var dompic = $(this.dom).find(".element1")[0];
            if (dompic.children.length === 1)
                dompic.removeChild(dompic.children[0]);
            dompic.appendChild(img);
        }
        get icon() {
            var dompic = $(this.dom).find(".element1")[0];
            if (dompic.children.length === 1)
                return "";
            return ($(this.dom).find(".element1")).attr("class");
        }
        /**
         * @member {string} - the caption of the button
         */
        set text(value) {
            $(this.dom).find(".element2").html(value);
        }
        get text() {
            return $(this.dom).find(".element2").text();
        }
        toggle(setDown = undefined) {
            if (setDown === undefined) {
                $(this.dom).toggleClass("down");
                return $(this.dom).hasClass("down");
            }
            else {
                if (setDown && !$(this.dom).hasClass("down"))
                    $(this.dom).toggleClass("down");
                if (!setDown && $(this.dom).hasClass("down"))
                    $(this.dom).toggleClass("down");
                return $(this.dom).hasClass("down");
            }
        }
    };
    __decorate([
        Property_6.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Boolean]),
        __metadata("design:returntype", void 0)
    ], Button.prototype, "onclick", null);
    __decorate([
        Property_6.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Button.prototype, "icon", null);
    __decorate([
        Property_6.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Button.prototype, "text", null);
    Button = __decorate([
        Component_3.$UIComponent({ fullPath: "common/Button", icon: "mdi mdi-gesture-tap-button", initialize: { text: "button" } }),
        Jassi_20.$Class("jassi.ui.Button"),
        __metadata("design:paramtypes", [])
    ], Button);
    exports.Button = Button;
});
define("jassi/ui/CSSProperties", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Property"], function (require, exports, Jassi_21, Property_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CSSProperties = exports.loadFontIfNedded = void 0;
    var systemFonts = ["Arial", "Helvetica Neue", "Courier New", "Times New Roman", "Comic Sans MS", "Impact"];
    var api = 'https://fonts.googleapis.com/css?family=';
    /**
     * loads googlefonts if needed
     **/
    function loadFontIfNedded(font) {
        if (systemFonts.indexOf(font) === -1) {
            var sfont = font.replaceAll(" ", "+");
            if (!document.getElementById("-->" + api + sfont)) { //"-->https://fonts.googleapis.com/css?family=Aclonica">
                Jassi_21.default.myRequire(api + sfont);
            }
        }
    }
    exports.loadFontIfNedded = loadFontIfNedded;
    let CSSProperties = class CSSProperties {
        static applyTo(properties, component) {
            var prop = {};
            for (let key in properties) {
                var newKey = key.replaceAll("_", "-");
                prop[newKey] = properties[key];
                if (newKey === "font-family") {
                    loadFontIfNedded(prop[newKey]);
                }
            }
            $(component.dom).css(prop);
            return prop;
        }
    };
    __decorate([
        Property_7.$Property({ type: "color" }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "background_color", void 0);
    __decorate([
        Property_7.$Property(),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "background_image", void 0);
    __decorate([
        Property_7.$Property({ type: "color" }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "border_color", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "border_style", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["thin", "medium", "thick", "2px", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "border_width", void 0);
    __decorate([
        Property_7.$Property({ type: "color" }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "color", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["auto", "default", "none", "context-menu", "help", "pointer", "progress", "wait", "cell", "crosshair", "text", "vertical-text", "alias", "copy", "move", "no-drop", "not-allowed", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "cursor", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["blur(5px)", "brightness(0.4)", "contrast(200%)", "drop-shadow(16px 16px 20px blue)", "grayscale(50%)", "hue-rotate(90deg)", "invert(75%)", "opacity(25%)", "saturate(30%)", "sepia(60%)", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "filter", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["left", "right", "none", "inline-start", "inline-end", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "float", void 0);
    __decorate([
        Property_7.$Property({ type: "font" }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "font_family", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["12px", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "larger", "smaller", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "font_size", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["normal", "small-caps", "small-caps slashed-zero", "common-ligatures tabular-nums", "no-common-ligatures proportional-nums", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "font_variant", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["normal", "bold", "lighter", "bolder", "100", "900", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "font_weight", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["normal", "1px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "letter_spacing", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["normal", "32px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "line_height", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "margin_bottom", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "margin_left", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "margin_right", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "margin_top", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["visible", "hidden", "clip", "scroll", "auto", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "overflow", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "padding_bottom", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "padding_left", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "padding_right", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "padding_top", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["static", "relative", "absolute", "sticky", "fixed", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "position", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["start", "end", "left", "right", "center", "justify", "match-parent", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_align", void 0);
    __decorate([
        Property_7.$Property({ type: "color" }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_decoration_color", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["none", "underline", "overline", "line-through", "blink", "spelling-error", "grammar-error", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_decoration_line", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["solid", "double", "dotted", "dashed", "wavy", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_decoration_style", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["3px"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_decoration_thickness", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["none", "capitalize", "uppercase", "lowercase", "full-width", "full-size-kana", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "text_transform", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["baseline", "sub", "super", "text-top", "text-bottom", "middle", "top", "bottom", "3px", "inherit", "initial", "unset"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "vertical_align", void 0);
    __decorate([
        Property_7.$Property({ chooseFrom: ["1", "2", "auto"] }),
        __metadata("design:type", String)
    ], CSSProperties.prototype, "z_index", void 0);
    CSSProperties = __decorate([
        Jassi_21.$Class("jassi.ui.CSSProperties")
    ], CSSProperties);
    exports.CSSProperties = CSSProperties;
});
define("jassi/ui/Checkbox", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/Property"], function (require, exports, Jassi_22, Component_4, Property_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Checkbox = void 0;
    let Checkbox = class Checkbox extends Component_4.Component {
        /* get dom(){
             return this.dom;
         }*/
        constructor() {
            super();
            super.init($('<div><input type="checkbox"><span class="checkboxtext" style="width:100%"></span></div>')[0]);
            this.checkbox = this.dom.firstChild;
            //             $(this.domWrapper).append($('<span class="checkboxtext"></span>'));
        }
        onclick(handler) {
            $(this.checkbox).click(function () {
                handler();
            });
        }
        /**
         * @member {string} - the caption of the button
         */
        set value(value) {
            if (value === "true")
                value = true;
            if (value === "false")
                value = false;
            $(this.checkbox).prop("checked", value);
        }
        get value() {
            return $(this.checkbox).prop("checked");
        }
        /**
        * @member {string} - the caption of the button
        */
        set text(value) {
            $(this.domWrapper).find(".checkboxtext").html(value);
        }
        get text() {
            return $(this.domWrapper).find(".checkboxtext").html();
        }
    };
    __decorate([
        Property_8.$Property({ type: "boolean" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Checkbox.prototype, "value", null);
    __decorate([
        Property_8.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Checkbox.prototype, "text", null);
    Checkbox = __decorate([
        Component_4.$UIComponent({ fullPath: "common/Ceckbox", icon: "mdi mdi-checkbox-marked-outline" }),
        Jassi_22.$Class("jassi.ui.Checkbox"),
        __metadata("design:paramtypes", [])
    ], Checkbox);
    exports.Checkbox = Checkbox;
});
//@class({longname:"jassi.ui.Checkbox"})
define("jassi/ui/CodeEditor", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/VariablePanel", "jassi/ui/DockingContainer", "jassi/ui/ErrorPanel", "jassi/ui/Button", "remote/jassi/base/Registry", "remote/jassi/base/Server", "jassi/util/Reloader", "remote/jassi/base/Classes", "jassi/ui/Component", "jassi/ui/Property", "jassi/base/Tests", "jassi/ui/AcePanel", "jassi/util/Typescript", "jassi/ui/MonacoPanel"], function (require, exports, Jassi_23, Panel_3, VariablePanel_1, DockingContainer_1, ErrorPanel_1, Button_1, Registry_7, Server_3, Reloader_2, Classes_8, Component_5, Property_9, Tests_1, AcePanel_2, Typescript_5, MonacoPanel_1) {
    "use strict";
    var CodeEditor_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.CodeEditor = void 0;
    /**
     * Panel for editing sources
     * @class jassi.ui.CodeEditor
     */
    let CodeEditor = CodeEditor_1 = class CodeEditor extends Panel_3.Panel {
        constructor() {
            super();
            this.maximize();
            this._main = new DockingContainer_1.DockingContainer();
            this._codeView = new Panel_3.Panel();
            this._codeToolbar = new Panel_3.Panel();
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                this._codePanel = new AcePanel_2.AcePanel();
            }
            else {
                this._codePanel = new MonacoPanel_1.MonacoPanel();
                // this._codePanel = new AcePanel(); 
            }
            this._errors = new ErrorPanel_1.ErrorPanel();
            this._file = "";
            this._variables = new VariablePanel_1.VariablePanel();
            this._design = new Panel_3.Panel();
            this._init();
            this.editMode = true;
        }
        _init() {
            var _this = this;
            this._codePanel.width = "100%";
            this._codePanel.mode = "typescript";
            /*  this._codePanel.getDocTooltip = function (item) {
                  return _this.getDocTooltip(item);
              }*/
            this._codeToolbar["horizontal"] = false;
            this._codeToolbar.height = "30";
            this._codeView["horizontal"] = true;
            this._codeView.add(this._codeToolbar);
            this._codeView.add(this._codePanel);
            this._codePanel.height = "calc(100% - 31px)";
            this._codePanel.width = "100%";
            this._main.width = "calc(100% - 1px)";
            this._main.height = "99%";
            var lasttop = this._main.dom.offsetTop;
            var lasttop2 = 0;
            this._main.onresize = function () {
                setTimeout(function () {
                    _this._codePanel.resize();
                }, 1000);
                /*     if(_this._main.dom.offsetTop!==lasttop){//resize to height
                        lasttop=_this._main.dom.offsetTop;
                        var i="calc(100% - "+(lasttop+1)+"px)";
                        _this._main.height=i;
                    }*/
                //TODO _this._designView.resize();
            };
            var save = new Button_1.Button();
            save.tooltip = "Save(Ctrl+S)";
            save.icon = "mdi mdi-content-save mdi-18px";
            save.onclick(function () {
                _this.save();
            });
            this._codeToolbar.add(save);
            var run = new Button_1.Button();
            run.icon = "mdi mdi-car-hatchback mdi-18px";
            run.tooltip = "Run(F4)";
            run.onclick(function () {
                _this.evalCode();
            });
            this._codeToolbar.add(run);
            var undo = new Button_1.Button();
            undo.icon = "mdi mdi-undo mdi-18px";
            undo.tooltip = "Undo (Strg+Z)";
            undo.onclick(function () {
                _this._codePanel.undo();
            });
            this._codeToolbar.add(undo);
            var goto = new Button_1.Button();
            goto.icon = "mdi mdi-ray-start-arrow mdi-18px";
            goto.tooltip = "Goto";
            goto.onclick(function () {
                _this.gotoDeclaration();
            });
            Jassi_23.default["$CodeEditor"] = CodeEditor_1;
            $(goto.dom).attr("ondrop", "event.preventDefault();jassi.$CodeEditor.search(event.dataTransfer.getData('text'));");
            $(goto.dom).attr("ondragover", "event.preventDefault();");
            this._codeToolbar.add(goto);
            var test = new Button_1.Button();
            test.icon = "mdi mdi-bug mdi-18px";
            test.tooltip = "Test";
            test.onclick(function () {
                var kk = _this._main.layout;
            });
            this._codeToolbar.add(test);
            super.add(this._main);
            this._installView();
            this.registerKeys();
            this._codePanel.onBreakpointChanged(function (line, column, enable, type) {
                Jassi_23.default.debugger.breakpointChanged(_this._file, line, column, enable, type);
            });
            this._variables.createTable();
            //   this._codePanel.setCompleter(this);
        }
        _installView() {
            this._main.add(this._codeView, "Code..", "code");
            this._main.add(this._variables, "Variables", "variables");
            this._main.add(this._design, "Design", "design");
            this._main.add(this._errors, "Errors", "errors");
            this._main.layout = '{"settings":{"hasHeaders":true,"constrainDragToContainer":true,"reorderEnabled":true,"selectionEnabled":false,"popoutWholeStack":false,"blockedPopoutsThrowError":true,"closePopoutsOnUnload":true,"showPopoutIcon":false,"showMaximiseIcon":true,"showCloseIcon":true,"responsiveMode":"onload"},"dimensions":{"borderWidth":5,"minItemHeight":10,"minItemWidth":10,"headerHeight":20,"dragProxyWidth":300,"dragProxyHeight":200},"labels":{"close":"close","maximise":"maximise","minimise":"minimise","popout":"open in new window","popin":"pop in","tabDropdown":"additional tabs"},"content":[{"type":"column","isClosable":true,"reorderEnabled":true,"title":"","width":100,"content":[{"type":"stack","width":33.333333333333336,"height":80.34682080924856,"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"content":[{"title":"Code..","type":"component","componentName":"code","componentState":{"title":"Code..","name":"code"},"isClosable":true,"reorderEnabled":true},{"title":"Design","type":"component","componentName":"design","componentState":{"title":"Design","name":"design"},"isClosable":true,"reorderEnabled":true}]},{"type":"row","isClosable":true,"reorderEnabled":true,"title":"","height":19.653179190751445,"content":[{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"height":50,"width":50,"content":[{"title":"Errors","type":"component","componentName":"errors","componentState":{"title":"Errors","name":"errors"},"isClosable":true,"reorderEnabled":true}]},{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"width":50,"content":[{"title":"Variables","type":"component","componentName":"variables","componentState":{"title":"Variables","name":"variables"},"isClosable":true,"reorderEnabled":true}]}]}]}],"isClosable":true,"reorderEnabled":true,"title":"","openPopouts":[],"maximisedItemId":null}';
        }
        /**
        * save the code to server
        */
        save() {
            var code = this._codePanel.value;
            var _this = this;
            new Server_3.Server().saveFile(this._file, code).then(function () {
                var f = _this._file.replace(".ts", "");
                new Reloader_2.Reloader().reloadJS(f);
                if (code.indexOf("jassi.register(") > -1) {
                    Registry_7.default.reload();
                }
            });
        }
        /**
         * goto to the declariation on cursor
         */
        async gotoDeclaration() {
            this._codePanel.gotoDeclaration();
        }
        /**
         * search text in classes at the given text
         * @param {string} text - the text to search
         * @returns {jassi.ui.CodeEditor} - the editor instance
         */
        static async search(text) {
            //TODO ask typescript service
            /* var found = undefined;
             text = text.replaceAll("\r\n", "\n");
             var content = undefined;
             //Fast search
             for (var file in classes.getCache()) {
                 var fname = file.replaceAll(".", "/");
                 var cl = classes.getCache()[file];
                 var code = cl.toString().replaceAll("\r\n", "\n");
                 if (code.indexOf(text) > -1) {
                     found = fname + ".js";
                     content = code;
                     break;
                 }
             }
             if (found === undefined) {
                 //Deep search (slow)
                 var files = registry.getAllFilesForService("classes");
                 if (files !== undefined) {
                     for (var x = 0; x < files.length; x++) {
                         let code:string = await new Server().loadFile(files[x]);
                         code = code.replaceAll("\r\n", "\n");
                         if (code.indexOf(text) > -1) {
                             found = files[x];
                             content = code;
                         }
                     }
                 }
             }
             if (found !== undefined) {
                 var line = code.substring(0, content.indexOf(text)).split("\n").length + 1;
                 router.navigate("#do=jassi.ui.CodeEditor&file=" + found + "&line=" + line.toString());
                 //                return await jassi.ui.CodeEditor.open(found+":"+line.toString()+":0");
             }*/
            return undefined;
        }
        /**
         * manage shortcuts
         */
        registerKeys() {
            var _this = this;
            $(this._codePanel.dom).keydown(function (evt) {
                if (evt.keyCode === 115 && evt.shiftKey) { //F4
                    // var thiss=this._this._id;
                    // var editor = ace.edit(this._this._id);
                    _this.evalCode(true);
                    evt.preventDefault();
                    return false;
                }
                else if (evt.keyCode === 115) { //F4
                    _this.evalCode(false);
                    evt.preventDefault();
                    return false;
                }
                if (evt.keyCode === 116) { //F5
                    evt.preventDefault();
                    return false;
                }
                if ((String.fromCharCode(evt.which).toLowerCase() === 's' && evt.ctrlKey) /* && (evt.which == 19)*/) { //Str+s
                    _this.save();
                    evt.preventDefault();
                    return false;
                }
            });
        }
        /**
         * extract lines from code
         * @param {string} code - the code
         * @returns {[string]} - all lines
         */
        _codeToLines(code) {
            var lines = code.split("\n");
            for (var x = 0; x < lines.length; x++) {
                while (lines[x].startsWith("/") || lines[x].startsWith(" ")
                    || lines[x].startsWith("*") || lines[x].startsWith("\t")) {
                    lines[x] = lines[x].substring(1);
                }
            }
            return lines;
        }
        _evalToCursorReached() {
            if (this.__evalToCursorReached !== true)
                this._main.show('code');
            this.__evalToCursorReached = true;
        }
        /**
         * add variables to variabelpanel
         * @param Object<string,object> variables ["name"]=value
         */
        addVariables(variables) {
            this._variables.addAll(variables);
        }
        async _evalCodeOnLoad(data) {
            var code = this._codePanel.value;
            var lines = code.split("\n");
            var _this = this;
            var breakpoints = _this._codePanel.getBreakpoints();
            var filename = _this._file.replace(".ts", "$temp.ts");
            await Jassi_23.default.debugger.removeBreakpointsForFile(filename);
            for (var line in breakpoints) {
                if (breakpoints[line]) {
                    var row = lines[line].length;
                    await Jassi_23.default.debugger.breakpointChanged(filename, line, row, true, "debugpoint");
                }
            }
            if (data.test !== undefined) {
                var ret = await data.test(new Tests_1.Test());
                // Promise.resolve(ret).then(async function(ret) {
                if (ret !== undefined) {
                    if (ret.layout !== undefined)
                        _this.variables.addVariable("this", ret);
                    else {
                        //get variablename from return
                        var sfunc = data.test.toString();
                        var pos = sfunc.lastIndexOf("return ");
                        var pose = sfunc.indexOf(";", pos);
                        var retvar = sfunc.substring(pos + 7, pose).trim();
                        _this.variables.addVariable(retvar, ret);
                    }
                    _this.variables.addVariable("me", ret.me);
                    _this.variables.updateCache();
                    if (ret instanceof Component_5.Component && ret["reporttype"] === undefined) {
                        require(["jassi/ui/designer/ComponentDesigner"], function () {
                            var ComponentDesigner = Classes_8.classes.getClass("jassi.ui.designer.ComponentDesigner");
                            if (!((_this._design) instanceof ComponentDesigner)) {
                                _this._design = new ComponentDesigner();
                                _this._main.add(_this._design, "Design", "design");
                                _this._design["codeEditor"] = _this;
                            }
                            _this._design["designedComponent"] = ret;
                        });
                    }
                    else if (ret["reporttype"] !== undefined) {
                        require(["jassi_report/designer/ReportDesigner"], function () {
                            var ReportDesigner = Classes_8.classes.getClass("jassi_report.designer.ReportDesigner");
                            if (!((_this._design) instanceof ReportDesigner)) {
                                _this._design = new ReportDesigner();
                                _this._main.add(_this._design, "Design", "design");
                                _this._design["codeEditor"] = _this;
                            }
                            _this._design["designedComponent"] = ret;
                            /*   require(["jassi_report/ReportDesign"], function() {
                                   var rd = classes.getClass("jassi_report.ReportDesign");
                                   let rep = rd["fromJSON"](ret);
                                   
                                   _this._design["designedComponent"] = rep;
                               });*/
                        });
                    }
                }
                //  });
            }
        }
        async saveTempFile(file, code) {
            //@ts-ignore 
            var tss = await new Promise((resolve_5, reject_5) => { require(["jassi/util/Typescript"], resolve_5, reject_5); });
            var settings = Typescript_5.Typescript.compilerSettings;
            settings["inlineSourceMap"] = true;
            settings["inlineSources"] = true;
            var files = await tss.default.transpile(file + ".ts", code);
            var codets = -1;
            var codemap = -1;
            var codejs = -1;
            for (var x = 0; x < files.fileNames.length; x++) {
                if (files.fileNames[x].endsWith(".ts")) {
                    codets = x;
                }
                if (files.fileNames[x].endsWith(".js.map")) {
                    codemap = x;
                }
                if (files.fileNames[x].endsWith(".js")) {
                    codejs = x;
                }
            }
            /*  var all = JSON.parse(files.contents[codemap]);
              all["sourcesContent"] = [files.contents[codets]];
              files.contents[codemap] = JSON.stringify(all);
              var b64 = btoa(unescape(encodeURIComponent(files.contents[codemap])));
              var pos = files.contents[codejs].indexOf("//" + "# sourceMappingURL=");
              files.contents[codejs] = files.contents[codejs].substring(0, pos);
              files.contents[codejs] = files.contents[codejs] + "//" + "# sourceMappingURL=data:application/json;charset=utf8;base64," + b64;
              */
            const channel = new MessageChannel();
            var ret = new Promise((res, rej) => {
                channel.port1.onmessage = (evt) => {
                    channel.port1.close();
                    res(evt);
                };
            });
            navigator.serviceWorker.controller.postMessage({
                type: 'SAVE_FILE',
                filename: files.fileNames[codejs],
                code: files.contents[codejs]
            }, [channel.port2]);
            var test = await ret;
        }
        /**
         * execute the current code
         * @param {boolean} toCursor -  if true the variables were inspected on cursor position,
         *                              if false at the end of the layout() function or at the end of the code
         */
        async evalCode(toCursor = undefined) {
            this.__evalToCursorReached = false;
            this._variables.clear();
            //this._variables.add("this",this);
            var code = this._codePanel.value;
            var lines = code.split("\n");
            var _this = this;
            window["test"] = undefined;
            code = "";
            for (var x = 0; x < lines.length; x++) {
                code = code + lines[x] + "\n";
            }
            code = code;
            var _this = this;
            var tmp = new Date().getTime();
            var jsfile = _this._file.replace(".ts", "") + "$temp";
            //await new Server().saveFile("tmp/" + _this._file, code);
            //only local - no TS File in Debugger
            await this.saveTempFile(jsfile, code);
            try {
                requirejs.undef("js/" + jsfile + ".js");
            }
            catch (ex) { }
            ;
            var onload = function (data) {
                _this._evalCodeOnLoad(data).catch((err) => {
                    throw err;
                });
            };
            //await new Promise(resolve => setTimeout(resolve, 1000));
            //if this is the first save for the tmpfile then it fails - I dont know why, give it a second try
            require(["js/" + jsfile + ".js"], onload, /*error*/ function (err) {
                //console.log("reload");
                window.setTimeout(function () {
                    require(["js/" + jsfile + ".js"], onload, function (err) {
                        throw err;
                    });
                }, 20);
            });
        }
        /**
         * switch view
         * @member {string} view - "design" or "code"
         */
        set viewmode(view) {
            this._main.show(view);
        }
        /**
        * get all known instances for type
        * @param {type} type - the type we are interested
        * @returns {[string]}
        */
        getVariablesForType(type) {
            return this._variables.getVariablesForType(type);
        }
        /**
         * gets the name of the variabel that holds the object
         * @param {object} ob - the
         */
        getVariableFromObject(ob) {
            return this._variables.getVariableFromObject(ob);
        }
        /**
         * gets the name object of the given variabel
         * @param {string} ob - the name of the variable
         */
        getObjectFromVariable(varname) {
            return this._variables.getObjectFromVariable(varname);
        }
        /**
          * renames a variable in design
          * @param {string} oldName
          * @param {string} newName
          */
        renameVariable(oldName, newName) {
            this._variables.renameVariable(oldName, newName);
            if (this._design !== undefined && this._design["_componentExplorer"] !== undefined)
                this._design["_componentExplorer"].update();
        }
        /**
         * @member { jassi.ui.VariablePanel} - the variable
         */
        set variables(value) {
            this._variables = value;
        }
        get variables() {
            return this._variables;
        }
        /**
         * @member {string} - the code
         */
        set value(value) {
            this._codePanel.file = this._file;
            this._codePanel.value = value;
        }
        get value() {
            return this._codePanel.value;
        }
        setCursorPorition(position) {
            this.cursorPosition = this._codePanel.numberToPosition(position);
        }
        /**
        * @param {object} position - the current cursor position {row= ,column=}
        */
        set cursorPosition(cursor) {
            this._codePanel.cursorPosition = cursor;
        }
        get cursorPosition() {
            return this._codePanel.cursorPosition;
        }
        /**
         * @member {string} - title of the component
         */
        get title() {
            var s = this.file.split("/");
            return s[s.length - 1];
        }
        /**
        * @member {string} - the url to edit
        */
        set file(value) {
            this._file = value;
            this.openFile(value);
        }
        get file() {
            return this._file;
        }
        /**
        * goes to the line number
        * @param {object} value - the line number
        */
        set line(value) {
            this._line = Number(value);
            this.cursorPosition = { row: this._line, column: 1 };
            var _this = this;
            setTimeout(function () {
                _this.cursorPosition = { row: this._line, column: 1 };
            }, 300);
            /*setTimeout(function() {
                _this.cursorPosition = { row: value, column: 0 };
            }, 1000);//start takes one second....*/
        }
        get line() {
            return this.cursorPosition.row;
        }
        /**
         * open the file
         */
        async openFile(_file) {
            this._file = _file;
            var content = await new Server_3.Server().loadFile(this._file);
            this._codePanel.file = _file;
            this._codePanel.value = content;
            this._codePanel.width = "100%";
            //  this._codePanel.height="100%";
            this._main.update();
            if (this._line)
                this.line = this._line;
        }
        destroy() {
            this._codeView.destroy();
            this._codeToolbar.destroy();
            this._codePanel.destroy();
            this._errors.destroy();
            this._variables.destroy();
            this._design.destroy();
            //this._main.destroy();
            super.destroy();
        }
        /**
        * undo action
        */
        undo() {
            this._codePanel.undo();
        }
    };
    __decorate([
        Property_9.$Property({ isUrlTag: true, id: true }),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], CodeEditor.prototype, "file", null);
    __decorate([
        Property_9.$Property({ isUrlTag: true }),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], CodeEditor.prototype, "line", null);
    CodeEditor = CodeEditor_1 = __decorate([
        Jassi_23.$Class("jassi.ui.CodeEditor"),
        __metadata("design:paramtypes", [])
    ], CodeEditor);
    exports.CodeEditor = CodeEditor;
    async function test() {
        var editor = new CodeEditor();
        var url = "demo/DialogKunde.ts";
        editor.height = 500;
        await editor.openFile(url);
        return editor;
    }
    exports.test = test;
    ;
});
define("jassi/ui/Property", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry", "remote/jassi/base/Classes"], function (require, exports, Jassi_24, Registry_8, Classes_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Property = exports.$Property = void 0;
    function $Property(property = undefined) {
        return function (target, propertyKey, descriptor) {
            //debugger;
            var test = Classes_9.classes.getClassName(target);
            if (propertyKey === undefined)
                Registry_8.default.registerMember("$Property", target.prototype, "new", property); //allow registerMember in class definition
            else
                Registry_8.default.registerMember("$Property", target, propertyKey, property);
        };
    }
    exports.$Property = $Property;
    let Property = class Property {
        /**
         * Property for PropertyEditor
         * @class jassi.ui.EditorProperty
         */
        constructor(name = undefined, type = undefined) {
            this.name = name;
            this.type = type;
        }
    };
    Property = __decorate([
        Jassi_24.$Class("jassi.ui.Property"),
        __metadata("design:paramtypes", [Object, Object])
    ], Property);
    exports.Property = Property;
});
define("jassi/ui/InvisibleComponent", ["require", "exports", "jassi/ui/Component", "remote/jassi/base/Jassi", "jassi/ui/Property"], function (require, exports, Component_6, Jassi_25, Property_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvisibleComponent = void 0;
    /**
     * invivisible Component
     **/
    let InvisibleComponent = class InvisibleComponent extends Component_6.Component {
        constructor(properties = undefined) {
            super(properties);
        }
    };
    InvisibleComponent = __decorate([
        Jassi_25.$Class("jassi.ui.InvisibleComponent")
        /*@$Property({name:"label",hide:true})
        @$Property({name:"icon",hide:true})
        @$Property({name:"tooltip",hide:true})
        @$Property({name:"x",hide:true})
        @$Property({name:"y",hide:true})
        @$Property({name:"width",hide:true})
        @$Property({name:"height",hide:true})
        @$Property({name:"contextMenu",hide:true})
        @$Property({name:"invisible",hide:true})
        @$Property({name:"hidden",hide:true})
        @$Property({name:"styles",hide:true})*/
        ,
        Property_10.$Property({ hideBaseClassProperties: true }),
        __metadata("design:paramtypes", [Object])
    ], InvisibleComponent);
    exports.InvisibleComponent = InvisibleComponent;
});
define("jassi/ui/CodeEditorInvisibleComponents", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "remote/jassi/base/Registry", "jassi/ui/InvisibleComponent", "jassi/ui/Button", "remote/jassi/base/Classes", "jassi/ui/Image"], function (require, exports, Jassi_26, Panel_4, Registry_9, InvisibleComponent_1, Button_2, Classes_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeEditorInvisibleComponents = void 0;
    let CodeEditorInvisibleComponents = class CodeEditorInvisibleComponents extends Panel_4.Panel {
        constructor(codeeditor) {
            super();
            super.init($('<span class="Panel" style="border:1px solid #ccc;"/>')[0]);
            /**
           * @member {jassi.ui.CodeEditor} - the parent CodeEditor
           * */
            this.codeeditor = codeeditor;
            this.layout();
        }
        layout() {
            this.update();
        }
        async update() {
            var _this = this;
            while (_this._components.length > 0) {
                _this.remove(_this._components[0]);
            }
            var elements = _this.codeeditor.getVariablesForType(InvisibleComponent_1.InvisibleComponent);
            for (var x = 0; x < elements.length; x++) {
                var img = new Button_2.Button();
                var name = elements[x];
                img.tooltip = name;
                //                    img.height=24;
                //  img.width=24;
                img.text = name.startsWith("me.") ? name.substring(3) : name;
                var ob = _this.codeeditor.getObjectFromVariable(name);
                img.dom["ob"] = ob;
                img.onclick(function (evt) {
                    _this.codeeditor._design._propertyEditor.value = evt.currentTarget.ob;
                    var ac = evt.currentTarget.ob.extensionCalled;
                    if (ac !== undefined) {
                        evt.currentTarget.ob.extensionCalled({ componentDesignerInvisibleComponentClicked: { codeEditor: _this.codeeditor, designButton: img } });
                    }
                });
                var cn = Classes_10.classes.getClassName(ob);
                //search icon
                var regdata = await Registry_9.default.getJSONData("$UIComponent");
                regdata.forEach(function (val) {
                    if (val.classname === cn) {
                        img.icon = val.params[0].icon;
                    }
                });
                _this.add(img);
            }
            /* if(entries===undefined)
                  return;
              for(var key in entries){
                  var entry=entries[key].data;
                  var img=new jassi.ui.Image();
                  var name=entry[1].split("/");
                  name=name[name.length-1];
                  img.tooltip=name;
                  img.src=entry[2];
                  img.height=24;
                  img.width=24;
                  img.createFromType=entry[0];
                  _this._makeDraggable(img);
                  _this.add(img);
              }*/
        }
        /**
         * install the draggable
         * @param {jassi.ui.Component} component
         */
        _makeDraggable(component) {
            var helper = new (Classes_10.classes.getClass(component.createFromType))();
            $("#jassitemp")[0].removeChild(helper.domWrapper);
            $(component.dom).draggable({
                cancel: "false", revert: "invalid",
                appendTo: "body",
                helper: function (event) {
                    return $(helper.dom);
                }
                /*   drag:function(event,ui){
                       var mouse=event.target._this.dom.style.cursor;
                       if(mouse==="e-resize"||mouse==="s-resize"||mouse==="se-resize")
                           return false;
                       else
                           return true;
                   }*/
            });
        }
        destroy() {
            super.destroy();
        }
    };
    CodeEditorInvisibleComponents = __decorate([
        Jassi_26.$Class("jassi.ui.CodeEditorInvisibleComponents"),
        __metadata("design:paramtypes", [Object])
    ], CodeEditorInvisibleComponents);
    exports.CodeEditorInvisibleComponents = CodeEditorInvisibleComponents;
});
define("jassi/ui/Component", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Property", "remote/jassi/base/Registry", "remote/jassi/base/Classes", "jassi/ui/CSSProperties"], function (require, exports, Jassi_27, Property_11, Registry_10, Classes_11, CSSProperties_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Component = exports.ComponentCreateProperties = exports.$UIComponent = exports.UIComponentProperties = void 0;
    class UIComponentProperties {
    }
    exports.UIComponentProperties = UIComponentProperties;
    function $UIComponent(properties) {
        return function (pclass) {
            Registry_10.default.register("$UIComponent", pclass, properties);
        };
    }
    exports.$UIComponent = $UIComponent;
    class ComponentCreateProperties {
    }
    exports.ComponentCreateProperties = ComponentCreateProperties;
    let Component = class Component {
        /*  get domWrapper():Element{
              return this._domWrapper;
          }
          set domWrapper(element:Element){
              if(element===undefined){
                  debugger;
              }
              this._domWrapper=element;
          }*/
        /**
         * base class for each Component
         * @class jassi.ui.Component
         * @param {object} properties - properties to init
         * @param {string} [properties.id] -  connect to existing id (not reqired)
         *
         */
        constructor(properties = undefined) {
            if (properties === undefined || properties.id === undefined) {
            }
            else {
                this._id = properties.id;
                this.__dom = document.getElementById(properties.id);
                this.dom._this = this;
            }
        }
        /**
         * adds an event
         * @param {type} name - the name of the event
         * @param {function} func - callfunction for the event
         */
        addEvent(name, func) {
            var events = this._eventHandler[name];
            if (events === undefined) {
                events = [];
                this._eventHandler[name] = events;
            }
            events.push(func);
        }
        /**
         * call the event
         * @param {name} name - the name of the event
         * @param {object} param 1- parameter for the event
         * @param {object} param 2- parameter for the event
         * @param {object} param 3- parameter for the event
         * @param {object} param 4- parameter for the event
         */
        callEvent(name, param1, param2 = undefined, param3 = undefined, param4 = undefined) {
            var ret = [];
            var events = this._eventHandler[name];
            if (events === undefined)
                return;
            for (var x = 0; x < events.length; x++) {
                ret.push(events[x](param1, param2, param3, param4));
            }
            return ret;
        }
        /**
         * @member {dom} - the dom element
         */
        get dom() {
            return this.__dom;
        }
        set dom(value) {
            var domalt = this.__dom;
            this.__dom = value;
            /** @member {dom} - the dom-element*/
            this.$ = $(value);
            /** @member {numer}  - the id of the element */
            $(this.dom).addClass("jinlinecomponent");
            $(this.dom).addClass("jresizeable");
            if (domalt !== undefined) {
                $(domalt).removeClass("jinlinecomponent");
                $(domalt).removeClass("jresizeable");
            }
            this.dom._this = this;
        }
        static cloneAttributes(target, source) {
            [...source.attributes].forEach(attr => { target.setAttribute(attr.nodeName === "id" ? 'data-id' : attr.nodeName, attr.nodeValue); });
        }
        static replaceWrapper(old, newWrapper) {
            //Component.cloneAttributes(newWrapper,old.domWrapper);
            var cls = $(old.domWrapper).attr("class");
            //var st=$(old.domWrapper).attr("style");
            var id = $(old.domWrapper).attr("id"); //old.domWrapper._id;
            $(newWrapper).attr("id", id);
            $(newWrapper).attr("class", cls);
            //$(newWrapper).attr("style",st);
            while (old.domWrapper.children.length > 0) {
                newWrapper.appendChild(old.domWrapper.children[0]);
            }
            if (old.domWrapper.parentNode != null)
                old.domWrapper.parentNode.replaceChild(newWrapper, old.domWrapper);
            old.domWrapper = newWrapper;
            old.domWrapper._this = old;
            old.domWrapper._id = id;
        }
        /**
         * inits the component
         * @param {dom} dom - init the dom element
         * @paran {object} properties - properties to init
        */
        init(dom, properties = undefined) {
            //is already attached
            if (this.domWrapper !== undefined) {
                if (this.domWrapper.parentNode !== undefined)
                    this.domWrapper.parentNode.removeChild(this.domWrapper);
                this.domWrapper._this = undefined;
            }
            if (this.dom !== undefined) {
                this.__dom._this = undefined;
            }
            //allready watched?
            if (Jassi_27.default.componentSpy !== undefined) {
                Jassi_27.default.componentSpy.unwatch(this);
            }
            this.dom = dom;
            this._id = Registry_10.default.nextID();
            $(this.dom).attr("id", this._id);
            /** @member {Object.<string,function>} - all event handlers*/
            this._eventHandler = {};
            //add _this to the dom element
            var lid = Registry_10.default.nextID();
            var st = 'style="display: inline"';
            if (this instanceof Classes_11.classes.getClass("jassi.ui.Container")) {
                st = "";
            }
            if (properties !== undefined && properties.noWrapper === true) {
                this.domWrapper = this.dom;
                this.domWrapper._id = this._id;
                $(this.domWrapper).addClass("jcomponent");
            }
            else {
                /** @member {dom} - the dom element for label*/
                this.domWrapper = $('<div id="' + lid + '" class ="jcomponent"' + st + '></div>')[0];
                this.domWrapper._this = this;
                this.domWrapper._id = lid;
                this.domWrapper.appendChild(dom);
            }
            //append temporary so new elements must not added immediately
            if (document.getElementById("jassitemp") === null) {
                var temp = $('<template id="jassitemp"></template>')[0];
                $(document.body).append(temp);
            }
            //for profilling save code pos
            if (Jassi_27.default.componentSpy !== undefined) {
                Jassi_27.default.componentSpy.watch(this);
            }
            $("#jassitemp")[0].appendChild(this.domWrapper);
        }
        set label(value) {
            if (value === undefined) {
                var lab = $(this.domWrapper).find(".jlabel");
                if (lab.length === 1)
                    this.domWrapper.removeChild(lab[0]);
            }
            else {
                //CHECK children(0)-> first() 
                if ($(this.domWrapper).find(".jlabel").length === 0) {
                    let lab = $('<label class="jlabel" for="' + this._id + '"></label>')[0]; //
                    $(this.domWrapper).prepend(lab);
                }
                $(this.domWrapper).children(":first").html(value);
            }
        }
        /**
         * @member {string} - the label over the component
         */
        get label() {
            //CHECK children(0)-> first()
            if ($(this.domWrapper).first().attr('class') === undefined || !$(this.domWrapper).first().attr('class').startsWith("jlabel")) {
                return "";
            }
            return $(this.domWrapper).children(":first").text();
        }
        get tooltip() {
            return $(this.dom).attr("title");
        }
        /**
        * @member {string} - tooltip for the component
        */
        set tooltip(value) {
            $(this.domWrapper).attr("title", value);
            $(this.domWrapper).tooltip();
        }
        get x() {
            return Number($(this.domWrapper).css("left").replace("px", ""));
        }
        /**
         * @member {number} - the left absolute position
         */
        set x(value) {
            $(this.domWrapper).css("left", value);
            $(this.domWrapper).css("position", "absolute");
        }
        get y() {
            return Number($(this.domWrapper).css("top").replace("px", ""));
        }
        /**
         * @member {number|string} - the top absolute position
         */
        set y(value) {
            $(this.domWrapper).css("top", value);
            $(this.domWrapper).css("position", "absolute");
        }
        /**
         * @member {boolean} - component is hidden
         */
        get hidden() {
            return $(this.__dom).is(":hidden");
        }
        set hidden(value) {
            if (value) {
                this["old_display"] = $(this.__dom).css('display');
                $(this.__dom).css('display', 'none');
            }
            else if ($(this.__dom).css('display') === "none") {
                if (this["old_display"] !== undefined)
                    $(this.__dom).css('display', this["old_display"]);
                else
                    $(this.__dom).removeAttr('display');
            }
        }
        /**
         * @member {string|number} - the height of the component
         * e.g. 50 or "100%"
         */
        set height1(value) {
            //  if($.isNumeric(value))
            if (value === undefined)
                value = "";
            if (typeof (value) === "string" && value.indexOf("%") > -1)
                $(this.dom).css("height", "100%");
            else
                $(this.dom).css("height", value);
            $(this.domWrapper).css("height", value);
        }
        get height1() {
            return $(this.domWrapper).css("height").replace("px", "");
        }
        /**
         * @member {string|number} - the width of the component
         * e.g. 50 or "100%"
         */
        set width1(value) {
            //  if($.isNumeric(value))
            if (value === undefined)
                value = "";
            if (typeof (value) === "string" && value.indexOf("%") > -1 && $(this.domWrapper).is("div"))
                $(this.dom).css("width", "100%");
            else
                $(this.dom).css("width", value);
            $(this.domWrapper).css("width", value);
        }
        get width1() {
            return $(this.domWrapper).css("width").replace("px", "");
        }
        /**
        * @member {string|number} - the width of the component
        * e.g. 50 or "100%"
        */
        set width(value) {
            //  if($.isNumeric(value))
            if (value === undefined)
                value = "";
            if (typeof (value) === "string" && value.indexOf("%") > -1 && $(this.domWrapper).css("display") !== "inline") { //&&$(this.domWrapper).is("div"))7
                $(this.dom).css("width", "100%");
                $(this.domWrapper).css("width", value);
            }
            else {
                $(this.dom).css("width", value);
                $(this.domWrapper).css("width", "");
            }
            //  
        }
        get width() {
            if ($(this.domWrapper).css("width") !== undefined)
                return $(this.domWrapper).css("width");
            return $(this.dom).css("width").replace("px", "");
        }
        /**
         * @member {string|number} - the height of the component
         * e.g. 50 or "100%"
         */
        set height(value) {
            //  if($.isNumeric(value))
            if (value === undefined)
                value = "";
            if (typeof (value) === "string" && value.indexOf("%") > -1) {
                $(this.dom).css("height", "100%");
                $(this.domWrapper).css("height", value);
            }
            else {
                $(this.dom).css("height", value);
                $(this.domWrapper).css("height", "");
            }
            //$(this.domWrapper).css("height",value);
        }
        get height() {
            if ($(this.domWrapper).css("height") !== undefined)
                return $(this.domWrapper).css("height");
            if ($(this.dom).css("height") !== undefined)
                return undefined;
            return $(this.dom).css("height").replace("px", "");
        }
        /**
        * sets CSS Properties
        */
        css(properties, removeOldProperties = true) {
            var prop = CSSProperties_1.CSSProperties.applyTo(properties, this);
            //if css-properties are already set and now a properties is deleted
            if (this["_lastCssChange"]) {
                for (let key in this["_lastCssChange"]) {
                    if (prop[key] === undefined) {
                        $(this.dom).css(key, "");
                    }
                }
            }
            this["_lastCssChange"] = prop;
        }
        /**
         * maximize the component
         */
        maximize() {
            // $(this.dom).addClass("jmaximized");
            $(this.dom).css("width", "calc(100% - 2px)");
            $(this.dom).css("height", "calc(100% - 2px)");
        }
        get styles() {
            return this._styles;
        }
        set styles(styles) {
            this._styles = styles;
            var newstyles = [];
            styles.forEach((st) => {
                newstyles.push(st.styleid);
            });
            //removeOld
            var classes = $(this.dom).attr("class").split(" ");
            classes.forEach((cl) => {
                if (cl.startsWith("jassistyle") && newstyles.indexOf(cl) === -1) {
                    $(this.dom).removeClass(cl);
                }
            });
            newstyles.forEach((st) => {
                if (classes.indexOf(st) === -1)
                    $(this.dom).addClass(st);
            });
        }
        get contextMenu() {
            return this._contextMenu;
        }
        /**
         * @member {jassi.ui.ContextMenu} - the contextmenu of the component
         **/
        set contextMenu(value) {
            if (this._contextMenu !== undefined)
                this._contextMenu.unregisterComponent(this);
            if (value !== undefined) {
                var ContextMenu = Classes_11.classes.getClass("jassi.ui.ContextMenu");
                if (value instanceof ContextMenu === false) {
                    throw "value is not of type jassi.ui.ContextMenu";
                }
                this._contextMenu = value;
                value.registerComponent(this);
            }
            else
                this._contextMenu = undefined;
        }
        destroy() {
            if (this.contextMenu !== undefined) {
                this.contextMenu.destroy();
            }
            if (Jassi_27.default.componentSpy !== undefined) {
                Jassi_27.default.componentSpy.unwatch(this);
            }
            if (this._parent !== undefined) {
                this._parent.remove(this);
            }
            if (this.domWrapper !== undefined && this.domWrapper.parentNode !== undefined && this.domWrapper.parentNode !== null)
                this.domWrapper.parentNode.removeChild(this.domWrapper);
            if (this.__dom !== undefined) {
                $(this.__dom).remove();
                this.__dom._this = undefined;
                this.__dom = undefined;
            }
            if (this.domWrapper !== undefined) {
                $(this.domWrapper).remove();
                this.domWrapper._this = undefined;
                this.domWrapper = undefined;
            }
            if (this.designDummies) {
                this.designDummies.forEach((dummy) => { dummy.destroy(); });
            }
            this.events = [];
            this.$ = undefined;
        }
        extensionCalled(action) {
        }
    };
    __decorate([
        Property_11.$Property({ description: "adds a label above the component" }),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Component.prototype, "label", null);
    __decorate([
        Property_11.$Property({ description: "tooltip are displayed on mouse over" }),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Component.prototype, "tooltip", null);
    __decorate([
        Property_11.$Property({}),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], Component.prototype, "x", null);
    __decorate([
        Property_11.$Property(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], Component.prototype, "y", null);
    __decorate([
        Property_11.$Property(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], Component.prototype, "hidden", null);
    __decorate([
        Property_11.$Property({ type: "string" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Component.prototype, "width", null);
    __decorate([
        Property_11.$Property({ type: "string" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Component.prototype, "height", null);
    __decorate([
        Property_11.$Property({ type: "json", componentType: "jassi.ui.CSSProperties" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_a = typeof CSSProperties_1.CSSProperties !== "undefined" && CSSProperties_1.CSSProperties) === "function" ? _a : Object, Boolean]),
        __metadata("design:returntype", void 0)
    ], Component.prototype, "css", null);
    __decorate([
        Property_11.$Property({ type: "componentselector", componentType: "[jassi.ui.Style]" }),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], Component.prototype, "styles", null);
    __decorate([
        Property_11.$Property({ type: "componentselector", componentType: "jassi.ui.ContextMenu" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Component.prototype, "contextMenu", null);
    Component = __decorate([
        Jassi_27.$Class("jassi.ui.Component"),
        __metadata("design:paramtypes", [ComponentCreateProperties])
    ], Component);
    exports.Component = Component;
});
define("jassi/ui/DesignDummy", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Image", "jassi/ui/MenuItem"], function (require, exports, Jassi_28, Image_1, MenuItem_1) {
    "use strict";
    var DesignDummy_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DesignDummy = void 0;
    let DesignDummy = DesignDummy_1 = class DesignDummy extends Image_1.Image {
        constructor() {
            super();
        }
        static createIfNeeded(designDummyFor, type, editorselectthis = undefined, oclass = undefined) {
            var icon = "mdi mdi-card-plus-outline";
            if (type === "beforeComponent")
                icon = "mdi mdi-card-plus";
            if (designDummyFor["designDummies"]) {
                for (var x = 0; x < designDummyFor["designDummies"].length; x++) {
                    var du = designDummyFor["designDummies"][x];
                    if (du.type === type)
                        return du;
                }
            }
            var designDummy;
            if (oclass === undefined)
                designDummy = new DesignDummy_1();
            else
                designDummy = new oclass();
            designDummy.designDummyFor = designDummyFor;
            designDummy.type = type;
            designDummy._parent = designDummyFor;
            designDummy.editorselectthis = editorselectthis;
            $(designDummy.domWrapper).removeClass("jcomponent");
            $(designDummy.domWrapper).addClass("jdesigndummy");
            $(designDummy.domWrapper).css("width", "16px");
            if (oclass === MenuItem_1.MenuItem) {
                designDummy.icon = icon;
            }
            else
                designDummy.src = icon;
            if (type === "atEnd")
                designDummyFor.add(designDummy);
            if (type === "beforeComponent")
                $(designDummyFor.domWrapper).prepend(designDummy.domWrapper);
            if (!designDummyFor["designDummies"])
                designDummyFor["designDummies"] = [];
            designDummyFor["designDummies"].push(designDummy);
            return designDummy;
            //
        }
        static destroyIfNeeded(designDummyFor, type) {
            if (designDummyFor["designDummies"]) {
                designDummyFor["designDummies"].forEach((dummy) => {
                    if (dummy["type"] === type) {
                        if (type === "atEnd")
                            designDummyFor.remove(dummy);
                        if (type === "beforeComponent")
                            designDummyFor.domWrapper.removeChild(dummy.domWrapper);
                        //(<Container>designDummyFor).remove(dummy); // comp.domWrapper.removeChild(comp["_designDummyPre"].domWrapper);
                        dummy.destroy();
                        /*dummy.domWrapper.parentNode.removeChild(dummy.domWrapper)
                        var pos=designDummyFor["designDummies"].indexOf(dummy);
                        if(pos>=0)
                            designDummyFor["designDummies"].splice(pos, 1);*/
                    }
                });
            }
        }
    };
    DesignDummy = DesignDummy_1 = __decorate([
        Jassi_28.$Class("jassi.ui.DesignDummy"),
        __metadata("design:paramtypes", [])
    ], DesignDummy);
    exports.DesignDummy = DesignDummy;
});
define("jassi/ui/Panel", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Container", "jassi/ui/Component", "jassi/ui/Property", "jassi/ui/DesignDummy"], function (require, exports, Jassi_29, Container_2, Component_7, Property_12, DesignDummy_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Panel = void 0;
    let PanelCreateProperties = class PanelCreateProperties extends Component_7.ComponentCreateProperties {
    };
    __decorate([
        Property_12.$Property({ default: false }),
        __metadata("design:type", Boolean)
    ], PanelCreateProperties.prototype, "useSpan", void 0);
    PanelCreateProperties = __decorate([
        Jassi_29.$Class("jassi.ui.PanelCreateProperties")
    ], PanelCreateProperties);
    let Panel = 
    //@$Property({ name: "new/useSpan", type: "boolean", default: false })
    class Panel extends Container_2.Container {
        /**
        *
        * @param {object} properties - properties to init
        * @param {string} [properties.id] -  connect to existing id (not reqired)
        * @param {boolean} [properties.useSpan] -  use span not div
        *
        */
        constructor(properties = undefined) {
            var addStyle = "";
            var tag = properties !== undefined && properties.useSpan === true ? "span" : "div";
            if (properties != undefined && properties.id === "body") {
                super();
                this.dom = document.body;
                this.domWrapper = this.dom;
                /** @member {numer}  - the id of the element */
                this._id = "body";
                this.dom.id = "body";
                //super.init($('<div class="Panel" style="border:1px solid #ccc;"/>')[0]);
                //            $(document.body).append(this.domWrapper); 
            }
            else {
                super(properties);
                if (properties === undefined || properties.id === undefined) {
                    //super.init($('<div class="Panel"/>')[0]);
                    super.init($('<' + tag + ' class="Panel" style="border:1px solid #ccc;"/>')[0]);
                }
            }
            this._designMode = false;
            this.isAbsolute = false;
        }
        /**
         * @param {boolean} the elements are ordered absolute
         **/
        set isAbsolute(value) {
            this._isAbsolute = value;
            if (value)
                $(this.dom).addClass("jabsolutelayout");
            else
                $(this.dom).removeClass("jabsolutelayout");
            if (this._designMode !== undefined)
                this._setDesignMode(this._designMode);
            if (this._designMode && this._activeComponentDesigner) {
                this._activeComponentDesigner.editDialog(true);
            }
        }
        get isAbsolute() {
            return this._isAbsolute;
        }
        max() {
            if (this._id == "body") {
                $(this.domWrapper).css("width", "100%");
                $(this.domWrapper).css("height", "calc(100vh - 2px)");
            }
            else {
                $(this.domWrapper).css("width", "100%");
                $(this.domWrapper).css("height", "100%");
            }
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                this._activeComponentDesigner = action.componentDesignerSetDesignMode.componentDesigner;
                return this._setDesignMode(action.componentDesignerSetDesignMode.enable);
            }
            super.extensionCalled(action);
        }
        /**
        * adds a component to the container
        * @param {jassi.ui.Component} component - the component to add
        */
        add(component) {
            //     $(component.domWrapper).css({position:(this.isAbsolute ? "absolute" : "relative")});
            return super.add(component);
        }
        /**
         * adds a component to the container before an other component
         * @param {jassi.ui.Component} component - the component to add
         * @param {jassi.ui.Component} before - the component before then component to add
         */
        addBefore(component, before) {
            //   $(component.domWrapper).css({position:(this.isAbsolute ? "absolute" : "relative")});
            return super.addBefore(component, before);
        }
        /**
         * activates or deactivates designmode
         * @param {boolean} enable - true if activate designMode
         */
        _setDesignMode(enable) {
            this._designMode = enable;
            if (enable) { //dummy in containers at the end
                if (this.isAbsolute === false) {
                    DesignDummy_2.DesignDummy.createIfNeeded(this, "atEnd", (this["_editorselectthis"] ? this["_editorselectthis"] : this));
                    /*            if (this._designDummy === undefined && this.isAbsolute === false) {
                                    this._designDummy = new Image();
                                    this._designDummy._parent=this;
                                    console.log(this._designDummy._id);
                                    $(this._designDummy.domWrapper).removeClass("jcomponent");
                                    $(this._designDummy.domWrapper).addClass("jdesigndummy");
                                    $(this._designDummy.domWrapper).css("width","16px");
                                    this._designDummy["designDummyFor"] = "atEnd";
                                    this._designDummy["src"] = "res/add-component.ico";
                                    this._designDummy["_editorselectthis"]=(this["_editorselectthis"]?this["_editorselectthis"]:this);
                                    //$(this.domWrapper).append(this._designDummy.domWrapper);
                                    this.domWrapper.appendChild(this._designDummy.domWrapper);
                                } else if (this._designDummy !== undefined && this.isAbsolute === true) {
                                    this.remove(this._designDummy);
                                    this._designDummy.destroy();
                                    this._designDummy = undefined;
                                }*/
                }
                else {
                    DesignDummy_2.DesignDummy.destroyIfNeeded(this, "atEnd");
                    /* if (this._designDummy !== undefined) {
                         this.remove(this._designDummy);
                         this._designDummy = undefined;
                     }*/
                }
            }
            else {
                DesignDummy_2.DesignDummy.destroyIfNeeded(this, "atEnd");
            }
            if (enable) { //dummy in containers at the end
                if (this.isAbsolute === false) {
                    for (var x = 0; x < this._components.length; x++) {
                        var comp = this._components[x];
                        if (comp instanceof Container_2.Container && !$(comp.dom).hasClass("jdisableaddcomponents")) {
                            DesignDummy_2.DesignDummy.createIfNeeded(comp, "beforeComponent", (this["_editorselectthis"] ? this["_editorselectthis"] : this));
                        }
                    }
                }
            }
            else {
                for (var x = 0; x < this._components.length; x++) {
                    var comp = this._components[x];
                    DesignDummy_2.DesignDummy.destroyIfNeeded(comp, "beforeComponent");
                }
            }
        }
        destroy() {
            super.destroy();
            if (this._designDummy)
                this._designDummy.destroy();
            this._activeComponentDesigner = undefined;
        }
    };
    __decorate([
        Property_12.$Property(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], Panel.prototype, "isAbsolute", null);
    Panel = __decorate([
        Component_7.$UIComponent({ fullPath: "common/Panel", icon: "mdi mdi-checkbox-blank-outline", editableChildComponents: ["this"] }),
        Jassi_29.$Class("jassi.ui.Panel"),
        Property_12.$Property({ name: "new", type: "json", componentType: "jassi.ui.PanelCreateProperties" })
        //@$Property({ name: "new/useSpan", type: "boolean", default: false })
        ,
        __metadata("design:paramtypes", [PanelCreateProperties])
    ], Panel);
    exports.Panel = Panel;
});
define("jassi/ui/CodePanel", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/util/Typescript", "jassi/base/Router"], function (require, exports, Jassi_30, Panel_5, Typescript_6, Router_1) {
    "use strict";
    var CodePanel_2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodePanel = void 0;
    let CodePanel = CodePanel_2 = class CodePanel extends Panel_5.Panel {
        resize() {
        }
        undo() {
        }
        /**
         * breakpoint changed
         * @param {function} handler - function(line,enabled,type)
         */
        onBreakpointChanged(handler) {
            this.addEvent("breakpointChanged", handler);
        }
        /**
        * gets a list of all lines with breakpoint
        * @returns {Object.<number, boolean>}
        */
        getBreakpoints() {
            return undefined;
        }
        numberToPosition(pos) {
            return CodePanel_2.numberToPosition(this.file, pos, this.value);
            /*var ret = typescript.getLineAndCharacterOfPosition(this.file, pos);
            return {
                row: ret.line,
                column: ret.character
            };*/
        }
        static numberToPosition(file, pos, code) {
            if (code !== undefined)
                Typescript_6.default.setCode(file, code);
            var ret = Typescript_6.default.getLineAndCharacterOfPosition(file, pos);
            return {
                row: ret.line,
                column: ret.character
            };
        }
        positionToNumber(pos) {
            Typescript_6.default.setCode(this.file, this.value);
            var ret = Typescript_6.default.getPositionOfLineAndCharacter(this.file, {
                line: pos.row,
                character: pos.column
            });
            return ret;
        }
        static async getAutoimport(lpos, file, code) {
            //var lpos = this.positionToNumber(this.cursorPosition);
            //@ts-ignore
            var change = await Typescript_6.default.getCodeFixesAtPosition(file, code, lpos, lpos, [2304]);
            if (change === undefined)
                return;
            for (let x = 0; x < change.length; x++) {
                if (change[x].changes[0].textChanges[0].newText === "const ") {
                    change.splice(x, 1);
                }
            }
            if (change.length > 0) {
                var entr = change[0].changes[0].textChanges[0];
                let insertPos = CodePanel_2.numberToPosition(file, entr.span.start, code);
                insertPos.row = insertPos.row - 1;
                //Bug duplicate insert {Kunde,Kunde}
                if (entr.newText.indexOf(",") > -1) {
                    var thisline = code.substring(1 + code.lastIndexOf("{", entr.span.start), code.indexOf("}", entr.span.start));
                    thisline = "*" + thisline.replaceAll(" ", "*").replaceAll("}", "*").replaceAll(",", "*") + "*";
                    var cl = entr.newText.split(",")[0];
                    if (thisline.indexOf("*" + cl + "*") > 0) {
                        return;
                    }
                }
                //relative to absolute
                var words = entr.newText.split("\"");
                var oldPath = words[1];
                var path = file.split("/");
                path.splice(-1, 1); //remove last
                if (oldPath !== undefined && oldPath.startsWith(".")) { //convert relative to absolute
                    if (oldPath.startsWith("./"))
                        oldPath = oldPath.substring(2);
                    while (oldPath.startsWith("../")) {
                        oldPath = oldPath.substring(3);
                        path.splice(-1, 1);
                    }
                    var newPath = "";
                    for (let x = 0; x < path.length; x++) {
                        newPath = newPath + path[x] + "/";
                    }
                    newPath = newPath + oldPath;
                    return {
                        text: words[0] + "\"" + newPath + "\"" + words[2],
                        pos: insertPos
                    };
                    //  this.insert(this.positionToNumber(insertPos), words[0] + "\"" + newPath + "\"" + words[2]);
                }
                else {
                    return {
                        text: entr.newText,
                        pos: insertPos
                    };
                    //this.insert(this.positionToNumber(insertPos), entr.newText);
                }
                // typescript.setCode(this.file, this.value);
            }
            return undefined;
        }
        /**
             * goes to the declaration under cursor
             */
        gotoDeclaration() {
            var pos = this.positionToNumber(this.cursorPosition);
            var test = this.numberToPosition(pos);
            if (!Typescript_6.default.isInited(this.file)) {
                $.notify("please try later ... loading in progress", "info", { position: "bottom right" });
                return;
            }
            Typescript_6.default.getDefinitionAtPosition(this.file, pos).then((def) => {
                var _a;
                if (def !== undefined && def.length > 0) {
                    var entr = def[0];
                    var file = (_a = entr.fileName) === null || _a === void 0 ? void 0 : _a.replace("file:///", "");
                    var p = entr.textSpan.start;
                    var newPos = CodePanel_2.numberToPosition(file, p, undefined);
                    var line = newPos.row;
                    Router_1.router.navigate("#do=jassi.ui.CodeEditor&file=" + file + "&line=" + line);
                }
            });
        }
    };
    CodePanel = CodePanel_2 = __decorate([
        Jassi_30.$Class("jassi.ui.AcePanel")
    ], CodePanel);
    exports.CodePanel = CodePanel;
});
define("jassi/ui/ComponentDescriptor", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Property", "remote/jassi/base/Classes", "remote/jassi/base/Registry"], function (require, exports, Jassi_31, Property_13, Classes_12, Registry_11) {
    "use strict";
    var ComponentDescriptor_3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentDescriptor = void 0;
    let ComponentDescriptor = ComponentDescriptor_3 = class ComponentDescriptor {
        /**
        * describes a Component
        * @class jassi.ui.EditorProperty
        */
        constructor() {
            /** @member {[jassi.ui.Property]}  - all property fields which should visible in PropertyEditor*/
            this.fields = [];
            /** @member {[jassi.ui.Property]}  - all property fields which acts are editable*/
            this.editableComponents = [];
        }
        /**
         * describes a class
         * @param {class}  type - the type of the class
         * @param {boolean}  nocache - an uncached version
         * @returns {jassi.ui.ComponentDescriptor} - which describes the component
         */
        static describe(type, nocache = undefined) {
            var _a;
            if (ComponentDescriptor_3.cache === undefined) {
                ComponentDescriptor_3.cache = {};
            }
            var cache = ComponentDescriptor_3.cache[type];
            var allFields = [];
            var isDescribeComponentOverided = undefined;
            if (cache === undefined || nocache === true) {
                var family = [];
                cache = new ComponentDescriptor_3();
                cache.fields = [];
                var hideBaseClassProperties = false;
                do {
                    family.push(type);
                    var sclass = Classes_12.classes.getClassName(type);
                    if (Registry_11.default.getMemberData("$Property") === undefined)
                        return cache;
                    var props = Registry_11.default.getMemberData("$Property")[sclass];
                    if (props !== undefined) {
                        var info = Registry_11.default.getMemberData("design:type")[sclass];
                        for (var key in props) {
                            var data = props[key];
                            for (let x = 0; x < data.length; x++) {
                                if ((_a = data[x][0]) === null || _a === void 0 ? void 0 : _a.hideBaseClassProperties) {
                                    hideBaseClassProperties = data[x][0].hideBaseClassProperties;
                                    continue;
                                }
                                var prop = new Property_13.Property(key);
                                Object.assign(prop, data[x][0]);
                                if (prop.type === undefined) {
                                    if (info !== undefined && info[key] !== undefined) {
                                        var tp = info[key][0][0];
                                        if (tp.name === "String")
                                            prop.type = "string";
                                        else if (tp.name === "Number")
                                            prop.type = "number";
                                        else if (tp.name === "Boolean")
                                            prop.type = "boolean";
                                        else if (tp.name === "Function")
                                            prop.type = "function";
                                        else
                                            prop.type = Classes_12.classes.getClassName(tp);
                                    }
                                }
                                if (prop.type === undefined && prop.hide !== true)
                                    throw "Property Type not found:" + sclass + "." + key;
                                if (cache.fields !== undefined && allFields.indexOf(prop.name) === -1) {
                                    cache.fields.push(prop);
                                    allFields.push(prop.name);
                                }
                            }
                        }
                    }
                    type = type.__proto__;
                } while (type !== null && type.name !== "" && !hideBaseClassProperties);
                //Hidden fields
                if (cache.fields !== undefined) {
                    for (let c = 0; c < cache.fields.length; c++) {
                        if (cache.fields[c].hide === true) {
                            cache.fields.splice(c--, 1);
                        }
                    }
                }
            }
            return cache;
        }
        /**
         * get the ids of all editable Components by the designer
         * @param {jassi.ui.Component} component - the component to inspect
         * @param {boolean} idFromLabel - if true not the id but the id form label is returned
         * @param {flag} - undocumented-used for recursation
         **/
        static getEditableComponents(component, idFromLabel, includeFrozenContainer, flag) {
            var ret = "";
            var sclass = Classes_12.classes.getClassName(component);
            var props = Registry_11.default.getData("$UIComponent")[sclass];
            if (!props) {
                props = props = Registry_11.default.getData("$ReportComponent")[sclass];
            }
            if (!props === undefined)
                return ret;
            var prop = props.params[0];
            if (includeFrozenContainer === false && prop.editableChildComponents.length === 0 && flag === "child")
                ret = "";
            else
                ret = "#" + ((idFromLabel === true) ? component.domWrapper._id : component._id);
            //TODO implement child container
            if (flag === "child" && prop.editableChildComponents.length === 0)
                return ret;
            if (component["_components"] !== undefined) {
                for (var x = 0; x < component["_components"].length; x++) {
                    var t = ComponentDescriptor_3.getEditableComponents(component["_components"][x], idFromLabel, includeFrozenContainer, "child");
                    if (t !== "") {
                        ret = ret + (ret === "" ? "" : ",") + t;
                    }
                }
            }
            return ret;
        }
        /** calc editableComponents
         * @param {object} ob - the object to resolve
         * @returns {Object.<string,jassi.ui.Component> - <name,component>
         **/
        resolveEditableComponents(ob) {
            var ret = {};
            var sclass = Classes_12.classes.getClassName(ob);
            if (Registry_11.default.getData("$UIComponent", sclass) !== undefined && Registry_11.default.getData("$UIComponent", sclass)[0] !== undefined) {
                var props = Registry_11.default.getData("$UIComponent", sclass)[0].params[0];
                this.editableComponents = props.editableChildComponents;
            }
            if (Registry_11.default.getData("$ReportComponent", sclass) !== undefined && Registry_11.default.getData("$ReportComponent", sclass)[0] !== undefined) {
                var props = Registry_11.default.getData("$ReportComponent", sclass)[0].params[0];
                this.editableComponents = props.editableChildComponents;
            }
            if (this.editableComponents !== undefined) {
                for (var x = 0; x < this.editableComponents.length; x++) {
                    var field = this.editableComponents[x];
                    var members = field.split(".");
                    var retob = ob;
                    for (var m = 0; m < members.length; m++) {
                        if (members[m] === "this")
                            retob = retob;
                        else
                            retob = retob[members[m]];
                    }
                    ret[field] = retob;
                }
            }
            return ret;
        }
        /**
         * remove a field
         * @param {string} field - the name of the field to remove
         */
        removeField(field) {
            for (var x = 0; x < this.fields.length; x++) {
                if (this.fields[x].name === field) {
                    this.fields.splice(x, 1);
                    x = x - 1;
                }
            }
        }
    };
    ComponentDescriptor = ComponentDescriptor_3 = __decorate([
        Jassi_31.$Class("jassi.ui.ComponentDescriptor"),
        __metadata("design:paramtypes", [])
    ], ComponentDescriptor);
    exports.ComponentDescriptor = ComponentDescriptor;
});
define("jassi/ui/ComponentExplorer", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Tree", "jassi/ui/ComponentDescriptor", "jassi/ui/ContextMenu", "jassi/ui/CodeEditor", "jassi/ui/PropertyEditor"], function (require, exports, Jassi_32, Panel_6, Tree_1, ComponentDescriptor_4, ContextMenu_1, CodeEditor_2, PropertyEditor_1) {
    "use strict";
    var _a, _b;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentExplorer = void 0;
    let ComponentExplorer = class ComponentExplorer extends Panel_6.Panel {
        /**
        * edit object properties
        */
        constructor(codeEditor, propertyEditor) {
            super();
            /** @member {jassi.ui.CodeEditor} - the parent CodeEditor */
            this.codeEditor = codeEditor;
            this.tree = new Tree_1.Tree();
            this.tree.height = "100%";
            this.contextMenu = new ContextMenu_1.ContextMenu();
            this.add(this.contextMenu);
            this.layout();
            this.propertyEditor = propertyEditor;
        }
        /**
         * @member {jassi.ui.Component}  - the rendered object
         */
        set value(value) {
            this._value = value;
            this.tree.items = value;
            this.tree.expandAll();
        }
        get value() {
            return this._value;
        }
        /**
         * get the displayname of the item
         * must be override
         * @param {object} item
         */
        getComponentName(item) {
            return item;
        }
        /**
         * get the child components
         * must be override
         * @param {object} item
         */
        getComponentChilds(item) {
            if (item === this.value)
                return item._components;
            var comps = ComponentDescriptor_4.ComponentDescriptor.describe(item.constructor).resolveEditableComponents(item);
            var ret = [];
            for (var name in comps) {
                var comp = comps[name];
                var complist = comp._components;
                if (name !== "this" && this.getComponentName(comp) !== undefined) {
                    if (ret.indexOf(comp) === -1)
                        ret.push(comp);
                }
                if (complist !== undefined) {
                    for (var y = 0; y < complist.length; y++) {
                        if (this.getComponentName(complist[y]) !== undefined) {
                            if (ret.indexOf(complist[y]) === -1)
                                ret.push(complist[y]);
                        }
                    }
                }
            }
            return ret;
        }
        layout() {
            var _this = this;
            this.tree.width = "100%";
            this.tree.height = "100%";
            this.tree.propChilds = function (item) {
                return _this.getComponentChilds(item);
            };
            this.tree.propDisplay = function (item) {
                return _this.getComponentName(item);
            };
            this.contextMenu.getActions = async function (data) {
                var ret = [];
                var parent = data[0]._parent;
                if (parent !== undefined && parent._components !== undefined) {
                    var hasDummy = (parent._components[parent._components.length - 1]["designDummyFor"] !== undefined ? 1 : 0);
                    if ((parent._components.length > 1 + hasDummy) && parent._components.indexOf(data[0]) !== 0) {
                        var ac = {
                            call: function () {
                                _this.propertyEditor.swapComponents(parent._components[parent._components.indexOf(data[0]) + -1], data[0]);
                                _this.tree.items = _this.tree.items;
                                _this.tree.value = data[0];
                            },
                            name: "move up"
                        };
                        ret.push(ac);
                    }
                    if (parent._components.length > 1 + hasDummy &&
                        parent._components.indexOf(data[0]) + hasDummy + 1 < parent._components.length) {
                        var ac = {
                            call: function () {
                                _this.propertyEditor.swapComponents(data[0], parent._components[parent._components.indexOf(data[0]) + 1]);
                                _this.tree.items = _this.tree.items;
                                _this.tree.value = data[0];
                            },
                            name: "move down"
                        };
                        ret.push(ac);
                    }
                }
                return ret;
            };
            this.tree.contextMenu = this.contextMenu;
            this.add(this.tree);
        }
        update() {
            this.value = this.value;
        }
        onclick(handler) {
            this.tree.addEvent("click", handler);
        }
        destroy() {
            this._value = undefined;
            super.destroy();
        }
    };
    ComponentExplorer = __decorate([
        Jassi_32.$Class("jassi.ui.ComponentExplorer"),
        __metadata("design:paramtypes", [typeof (_a = typeof CodeEditor_2.CodeEditor !== "undefined" && CodeEditor_2.CodeEditor) === "function" ? _a : Object, typeof (_b = typeof PropertyEditor_1.PropertyEditor !== "undefined" && PropertyEditor_1.PropertyEditor) === "function" ? _b : Object])
    ], ComponentExplorer);
    exports.ComponentExplorer = ComponentExplorer;
    Jassi_32.default.test = async function () {
        var dlg = new Jassi_32.default.ui.ComponentExplorer();
        dlg.getComponentName = function (item) {
            return "hallo";
        };
        dlg.value = dlg;
        return dlg;
    };
});
define("jassi/ui/ComponentPalette", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Image", "remote/jassi/base/Registry", "remote/jassi/base/Classes"], function (require, exports, Jassi_33, Panel_7, Image_2, Registry_12, Classes_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentPalette = void 0;
    let ComponentPalette = class ComponentPalette extends Panel_7.Panel {
        constructor() {
            super();
            this.layout();
        }
        layout() {
        }
        /**
         * @member {string} - the service where the palette-items are registred
         **/
        set service(value) {
            var _this = this;
            this._service = value;
            while (this._components.length > 0) {
                this.remove(this._components[0]);
            }
            Registry_12.default.getJSONData(this._service).then((jdata) => {
                for (var x = 0; x < jdata.length; x++) {
                    var mdata = jdata[x];
                    var data = mdata.params[0];
                    if (data.fullPath === undefined || data.fullPath === "undefined")
                        continue;
                    var img = new Image_2.Image();
                    var name = data.fullPath.split("/");
                    var sname = name[name.length - 1];
                    img.tooltip = sname;
                    img.src = data.icon === undefined ? "mdi mdi-chart-tree mdi-18px" : data.icon + (data.icon.startsWith("mdi") ? " mdi-18px" : "");
                    img.height = 24;
                    img.width = 24;
                    img["createFromType"] = mdata.classname;
                    img["createFromParam"] = data.initialize;
                    _this._makeDraggable(img);
                    _this.add(img);
                }
            });
            /*registry.loadAllFilesForService(this._service).then(function(){
                registry.getData(_this._service).forEach(function(mdata){
                    var data:UIComponentProperties=mdata.params[0];
                    var img=new Image();
                    var name=data.fullPath.split("/");
                    var sname=name[name.length-1];
                    img.tooltip=sname;
                    img.src=data.icon===undefined?"res/unknowncomponent.png":data.icon;
                    img.height=24;
                    img.width=24;
                    img["createFromType"]=classes.getClassName(mdata.oclass);
                    img["createFromParam"]=data.initialize;
                    _this._makeDraggable(img);
                    _this.add(img);
                });
           });*/
        }
        get service() {
            return this._service;
        }
        /**
         * install the draggable
         * @param {jassi.ui.Image} component
         */
        _makeDraggable(component) {
            var helper = undefined;
            $(component.dom).draggable({
                cancel: "false", revert: "invalid",
                appendTo: "body",
                helper: function (event) {
                    if (helper === undefined) {
                        var cl = Classes_13.classes.getClass(component.createFromType);
                        if (cl === undefined) {
                            Classes_13.classes.loadClass(component.createFromType); //for later
                            cl = Panel_7.Panel;
                        }
                        helper = new cl();
                        var img = new Image_2.Image();
                        img.src = component.src;
                        img.height = 24;
                        img.width = 24;
                        img.x = component.x;
                        img.y = component.y;
                        helper._position = img;
                        component._helper = helper;
                        if (component.createFromParam !== undefined) {
                            $.extend(helper, component.createFromParam);
                        }
                        $("#jassitemp")[0].removeChild(helper.domWrapper);
                        $("#jassitemp")[0].removeChild(helper._position.domWrapper);
                    }
                    return helper._position.dom; //$(helper.dom);
                }
            });
        }
        destroy() {
            for (var x = 0; x < this._components.length; x++) {
                var comp = this._components[x];
                $(comp.dom).draggable("destroy");
                if (comp["_helper"] !== undefined)
                    comp["_helper"].destroy();
            }
            super.destroy();
        }
    };
    ComponentPalette = __decorate([
        Jassi_33.$Class("jassi.ui.ComponentPalette"),
        __metadata("design:paramtypes", [])
    ], ComponentPalette);
    exports.ComponentPalette = ComponentPalette;
});
define("jassi/ui/Select", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/DataComponent", "jassi/ui/Property", "remote/jassi/base/Classes", "jassi/ext/jquery.choosen"], function (require, exports, Jassi_34, Component_8, DataComponent_1, Property_14, Classes_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Select = void 0;
    /*
    declare global {
        interface JQuery {
            chosen: any;
        }
    }
    */
    let SelectCreateProperties = class SelectCreateProperties extends Component_8.ComponentCreateProperties {
    };
    __decorate([
        Property_14.$Property({ default: false }),
        __metadata("design:type", Boolean)
    ], SelectCreateProperties.prototype, "multiple", void 0);
    __decorate([
        Property_14.$Property({ default: false }),
        __metadata("design:type", Boolean)
    ], SelectCreateProperties.prototype, "allowDeselect", void 0);
    __decorate([
        Property_14.$Property({ default: "" }),
        __metadata("design:type", String)
    ], SelectCreateProperties.prototype, "placeholder", void 0);
    SelectCreateProperties = __decorate([
        Jassi_34.$Class("jassi.ui.SelectCreateProperties")
    ], SelectCreateProperties);
    let Select = class Select extends DataComponent_1.DataComponent {
        constructor(properties = undefined) {
            super();
            super.init($('<select class="Select"><option value=""></option></select>')[0]);
            var _this = this;
            if (properties !== undefined && properties.multiple === true)
                $('#' + this._id).prop("multiple", true);
            var single = false;
            if (properties !== undefined && properties.allowDeselect !== undefined)
                single = properties.allowDeselect;
            var placeholder = "Select...";
            if (properties !== undefined && properties.placeholder !== undefined)
                placeholder = properties.placeholder;
            $('#' + this._id).chosen({
                width: "100px",
                placeholder_text_single: placeholder,
                allow_single_deselect: single
            });
            this.domSelect = this.dom;
            if (this.domWrapper.children.length == 1) { //mobile device
                this.dom = this.domSelect;
            }
            else
                this.dom = this.domWrapper.children[1];
            $(this.domSelect).attr("id", "");
            $(this.dom).attr("id", this._id);
            $(this.domSelect).chosen().change(function (e) {
                if (_this._select !== undefined)
                    _this._select.value = _this.value;
                //e.data = _this.value;
                //handler(e);
            });
            // this.layout();
        }
        refresh() {
            $(this.domSelect).trigger("chosen:updated");
            //	 $('#'+this._id).data("placeholder","Select...").chosen({
            //	 	width: "100px"
            //	 });
        }
        /**
         * called if value has changed
         * @param {function} handler - the function which is executed
         */
        onchange(handler) {
            var _this = this;
            $(this.domSelect).chosen().change(function (e) {
                e.data = _this.value;
                handler(e);
            });
        }
        /**
         * if the value is changed then the value of _component is also changed (_component.value)
         */
        set selectComponent(_component) {
            this._select = _component;
        }
        get selectComponent() {
            return this._select; //$(this.dom).text();
        }
        /**
         * @member {string|function}  - property or function to get the displaystring for the object
         **/
        set display(value) {
            this._display = value;
            if (this.items !== undefined)
                this.items = this.items;
        }
        get display() {
            return this._display;
        }
        set items(value) {
            this._items = value;
            this.options = { undefined: undefined };
            if (this.domSelect === undefined)
                return;
            console.log("dekt.memoryleak");
            /* slow
            while (this.domSelect.firstChild) {
                $(this.domSelect.firstChild).remove();
    
            }
            this.domSelect.appendChild($('<option value=""></option>')[0]);
            for (var x = 0;x < value.length;x++) {
                var ob = value[x];
                var val = undefined;
                if (typeof (this.display) === "function")
                    val = this.display(ob);
                else if (this.display !== undefined)
                    val = ob[this.display];
                else
                    val = ob;
                this.options[x.toString()] = ob;
                var it = $('<option value="' + x + '">' + val + '</option>')[0];
                this.domSelect.appendChild(it);
            }
            this.refresh();
    */
            var html = '<option value=""></option>';
            for (var x = 0; x < value.length; x++) {
                var ob = value[x];
                var val = undefined;
                if (typeof (this.display) === "function")
                    val = this.display(ob);
                else if (this.display !== undefined)
                    val = ob[this.display];
                else
                    val = ob;
                this.options[x.toString()] = ob;
                html += '<option value="' + x + '">' + val + '</option>';
                //this.domSelect.appendChild(it);
            }
            this.domSelect.innerHTML = html;
            this.refresh();
            /*   for(var x=0;x<value.length;x++){
                   delete value[x].recid;
               }*/
        }
        get items() {
            //  if(w2ui[this._id]===undefined)
            return this._items;
            //   return w2ui[this._id].records;//$(this.dom).text();
        }
        /**
         * @member {object} sel - the selected object
         */
        set value(sel) {
            var found = false;
            if ($(this.domSelect).chosen().prop("multiple")) {
                var keys = [];
                if (sel) {
                    sel.forEach((se) => {
                        for (var key in this.options) {
                            if (this.options[key] === se) {
                                keys.push(key);
                                found = true;
                                break;
                            }
                        }
                        $(this.domSelect).val(keys).trigger("chosen:updated");
                    });
                }
            }
            else {
                for (var key in this.options) {
                    if (this.options[key] === sel) {
                        $(this.domSelect).val(key).trigger("chosen:updated");
                        found = true;
                        break;
                    }
                }
            }
            if (!found)
                $(this.domSelect).val("").trigger("chosen:updated");
            // refresh()
        }
        get value() {
            if (this.options === undefined)
                return undefined;
            var val = $(this.domSelect).chosen().val();
            if ($(this.domSelect).chosen().prop("multiple")) {
                var opts = [];
                val.forEach((e) => {
                    if (e !== "") //placeholder for empty
                        opts.push(this.options[e]);
                });
                return opts;
            }
            return this.options[val];
        }
        /**
         * @member {string|number} - the width of the component
         * e.g. 50 or "100%"
         */
        /* set width(value){ //the Code
             super.width=value;
         
              
              if(this.domWrapper.children.length>1){
                 var val=$(this.domWrapper).css("width");
                 $(this.domWrapper.children[1]).css("width",val);
              }
         }*/
        /**
         * binds a component to a databinder
         * @param {Databinder} databinder - the databinder to bind
         * @param {string} property - the property to bind
        
        bind(databinder,property){
            this._databinder=databinder;
            databinder.add(property,this,"onselect");
            databinder.checkAutocommit(this);
        } */
        destroy() {
            //	$(this.domSelect).chosen('destroy');
            $(this.domSelect).chosen("destroy"); //.search_choices;
            $('#' + this._id).remove(); //.search_choices;
            $(this.domSelect).remove();
            $(this.dom).remove();
            this.domSelect = undefined;
            super.destroy();
        }
    };
    __decorate([
        Property_14.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Select.prototype, "onchange", null);
    __decorate([
        Property_14.$Property({ type: "string" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Select.prototype, "display", null);
    Select = __decorate([
        Component_8.$UIComponent({ fullPath: "common/Select", icon: "mdi mdi-form-dropdown" }),
        Jassi_34.$Class("jassi.ui.Select"),
        Property_14.$Property({ name: "new", type: "json", componentType: "jassi.ui.SelectCreateProperties" }),
        __metadata("design:paramtypes", [SelectCreateProperties])
    ], Select);
    exports.Select = Select;
    async function test() {
        var Panel = Classes_14.classes.getClass("jassi.ui.Panel");
        var Button = Classes_14.classes.getClass("jassi.ui.Button");
        var me = {};
        var pan = new Panel();
        var bt = new Button();
        var bt2 = new Button();
        me.sel = new Select({
            "multiple": false,
            "placeholder": "Hallo",
            "allowDeselect": false
        });
        bt.text = "wer";
        bt.onclick(function (event) {
            //	bt.text=me.sel.value.vorname;	
            me.sel.value = me.sel.items[1];
        });
        bt.height = 15;
        pan.width = 500;
        me.sel.display = "nachname";
        me.sel.items = [{ name: "Achim", nachname: "<b>Wenzel</b>" },
            { name: "Anne", nachname: "Meier" }];
        var h = me.sel.items;
        me.sel.width = 195;
        me.sel.height = 25;
        me.sel.onchange(function (event) {
            alert(event.data.nachname);
        });
        //	$('#'+sel._id).data("placeholder","Select2...").chosen({width: "200px"});
        pan.add(me.sel);
        pan.add(bt);
        pan.add(bt2);
        return pan;
    }
    exports.test = test;
});
define("jassi/ui/ComponentSpy", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Table", "jassi/ui/HTMLPanel", "jassi/ui/Button", "jassi/ui/BoxPanel", "jassi/ui/Select", "remote/jassi/base/Classes"], function (require, exports, Jassi_35, Panel_8, Table_1, HTMLPanel_2, Button_3, BoxPanel_2, Select_1, Classes_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentSpy = void 0;
    class Me {
    }
    let ComponentSpy = class ComponentSpy extends Panel_8.Panel {
        constructor() {
            super();
            this.ids = {};
            this.labelids = {};
            this.layout();
        }
        layout() {
            var me = this.me = {};
            me.IDText = new HTMLPanel_2.HTMLPanel();
            var _this = this;
            me.boxpanel1 = new BoxPanel_2.BoxPanel();
            me.IDUpdate = new Button_3.Button();
            me.IDClear = new Button_3.Button();
            me.IDTable = new Table_1.Table();
            me.IDTest = new Button_3.Button();
            this.add(me.boxpanel1);
            this.add(me.IDTable);
            this.add(me.IDText);
            me.boxpanel1.add(me.IDUpdate);
            me.boxpanel1.add(me.IDClear);
            me.boxpanel1.add(me.IDTest);
            me.boxpanel1.horizontal = false;
            me.IDClear.text = "clear";
            me.IDUpdate.text = "update";
            me.IDUpdate.onclick(function (event) {
                _this.update();
            });
            me.IDClear.onclick(function (event) {
                _this.clear();
            });
            me.IDTest.onclick(function (event) {
                var sel = new Select_1.Select();
                sel.destroy();
            });
            me.IDUpdate.text = "Update";
            me.IDTable.width = "100%";
            me.IDTable.height = "400";
            me.IDTable.onchange(function (ob) {
                me.IDText.value = ob.data.stack.replaceAll("\n", "<br>");
            });
        }
        update() {
            var data = [];
            for (var k in Jassi_35.default.componentSpy.ids) {
                data.push(Jassi_35.default.componentSpy.ids[k]);
            }
            this.me.IDTable.items = data;
        }
        clear() {
            Jassi_35.default.componentSpy.ids = {};
            Jassi_35.default.componentSpy.labelids = {};
            this.update();
        }
        watch(component) {
            var ob = {
                type: Classes_15.classes.getClassName(component),
                id: component._id,
                labelid: component.domWrapper === undefined ? 0 : component.domWrapper._id,
                stack: new Error().stack
            };
            this.ids[ob.id] = ob;
            this.labelids[ob.labelid] = ob;
        }
        stack(id) {
            var test = this.ids[id];
            if (test === undefined)
                test = this.labelids[id];
            if (test !== undefined)
                return test.stack;
            else
                return "empty";
        }
        unwatch(component) {
            var ob = this.ids[component._id];
            if (ob !== undefined) {
                delete this.ids[ob.id];
                delete this.labelids[ob.labelid];
            }
        }
        list() {
            var test = ["jj", "kkk"];
            return test;
        }
        destroy() {
            super.destroy();
        }
    };
    ComponentSpy = __decorate([
        Jassi_35.$Class("jassi.ui.ComponentSpy"),
        __metadata("design:paramtypes", [])
    ], ComponentSpy);
    exports.ComponentSpy = ComponentSpy;
    Jassi_35.default.test = function () {
        return new ComponentSpy();
    };
    Jassi_35.default.componentSpy = new ComponentSpy();
});
define("jassi/ui/Container", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component"], function (require, exports, Jassi_36, Component_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Container = void 0;
    let Container = class Container extends Component_9.Component {
        /**
         *
         * @param {object} properties - properties to init
         * @param {string} [properties.id] -  connect to existing id (not reqired)
         *
         */
        constructor(properties = undefined) {
            super(properties);
            this._components = [];
        }
        /**
        * inits the component
        * @param {dom} dom - init the dom element
        * @paran {object} properties - properties to init
       */
        init(dom, properties = undefined) {
            super.init(dom, properties);
            $(this.domWrapper).addClass("jcontainer");
        }
        /**
         * adds a component to the container
         * @param {jassi.ui.Component} component - the component to add
         */
        add(component) {
            if (component._parent !== undefined) {
                component._parent.remove(component);
            }
            component._parent = this;
            component.domWrapper._parent = this;
            /* component._parent=this;
             component.domWrapper._parent=this;
             if(component.domWrapper.parentNode!==null&&component.domWrapper.parentNode!==undefined){
                  component.domWrapper.parentNode.removeChild(component.domWrapper);
             }*/
            if (this["designDummyFor"])
                this.designDummies.push(component);
            else
                this._components.push(component);
            this.dom.appendChild(component.domWrapper);
        }
        /**
         * adds a component to the container before an other component
         * @param {jassi.ui.Component} component - the component to add
         * @param {jassi.ui.Component} before - the component before then component to add
         */
        addBefore(component, before) {
            component._parent = this;
            component.domWrapper._parent = this;
            var index = this._components.indexOf(before);
            if (component.domWrapper.parentNode !== null && component.domWrapper.parentNode !== undefined) {
                component.domWrapper.parentNode.removeChild(component.domWrapper);
            }
            if (component["designDummyFor"])
                this.designDummies.push(component);
            else
                this._components.splice(index, 0, component);
            $(component.domWrapper).insertBefore(before.domWrapper === undefined ? before.dom : before.domWrapper);
        }
        /**
       * remove the component
       * @param {jassi.ui.Component} component - the component to remove
       * @param {boolean} destroy - if true the component would be destroyed
       */
        remove(component, destroy = false) {
            var _a;
            if (destroy)
                component.destroy();
            component._parent = undefined;
            if (component.domWrapper !== undefined)
                component.domWrapper._parent = undefined;
            var pos = this._components.indexOf(component);
            if (pos >= 0)
                this._components.splice(pos, 1);
            let posd = (_a = this.designDummies) === null || _a === void 0 ? void 0 : _a.indexOf(component);
            if (posd >= 0)
                this.designDummies.splice(posd, 1);
            try {
                this.dom.removeChild(component.domWrapper);
            }
            catch (ex) {
            }
        }
        /**
       * remove all component
       * @param {boolean} destroy - if true the component would be destroyed
       */
        removeAll(destroy = undefined) {
            while (this._components.length > 0) {
                this.remove(this._components[0], destroy);
            }
        }
        destroy() {
            var tmp = [].concat(this._components);
            for (var k = 0; k < tmp.length; k++) {
                tmp[k].destroy();
            }
            this._components = [];
            super.destroy();
        }
    };
    Container = __decorate([
        Jassi_36.$Class("jassi.ui.Container"),
        __metadata("design:paramtypes", [Object])
    ], Container);
    exports.Container = Container;
});
define("jassi/ui/ContextMenu", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Menu", "jassi/ui/InvisibleComponent", "jassi/ui/Component", "remote/jassi/base/Registry", "remote/jassi/base/Classes", "jassi/ui/Property", "jassi/base/Actions", "jassi/ui/MenuItem", "jassi/ext/jquery.contextmenu"], function (require, exports, Jassi_37, Menu_1, InvisibleComponent_2, Component_10, Registry_13, Classes_16, Property_15, Actions_5, MenuItem_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.ContextMenu = void 0;
    //https://github.com/s-yadav/contextMenu.js/
    let ContextMenu = class ContextMenu extends InvisibleComponent_2.InvisibleComponent {
        constructor() {
            super();
            super.init($('<span class="InvisibleComponent"></span>')[0]);
            var _this = this;
            this.menu = new Menu_1.Menu({ noUpdate: true });
            this.menu._mainMenu = this;
            //this.menu._parent=this;
            $(this.dom).append(this.menu.dom);
            $(this.menu.dom).contextMenu("menu", "#" + this.menu._id, { triggerOn: 'dummyevent' });
            this.contextComponents = [];
            //this.menu._parent=this;
            $(this.menu.dom).addClass("jcontainer");
            this._components = [this.menu]; //neede for getEditablecontextComponents
            this.onbeforeshow(function () {
                return _this._updateClassActions();
            });
        }
        /**
         * @member - the objects for the includeClassActions @ActionProvider if  is enabled
         **/
        set value(value) {
            this._value = value;
        }
        get value() {
            return this._value;
        }
        /**
         * could be override to provide Context-actions
         * exsample:
         * cmen.getActions=async function(objects:[]){
         *		return [{name:"hallo",call:ob=>{}]
         *	};
         **/
        async getActions(data) {
            return [];
        }
        //		static async  getActionsFor(oclass:new (...args: any[]) => any):Promise<{name:string,icon?:string,call:(objects:any[])}[]>{
        /*	registerActions(func:{(any[]):Promise<{name:string,icon?:string,call:(objects:any[])}[]}>){
                this._getActions=func;
            }*/
        _removeClassActions(menu) {
            for (var y = 0; y < menu._components.length; y++) {
                var test = menu._components[y];
                if (test["_classaction"] == true) {
                    menu.remove(test);
                    test.destroy();
                    y--;
                }
                if (test._components !== undefined) {
                    this._removeClassActions(test);
                }
            }
        }
        _setDesignMode(enable) {
            var h = 9;
        }
        async _updateClassActions() {
            //remove classActions
            this._removeClassActions(this.menu);
            var _this = this;
            var actions = await this.getActions(this.value);
            if (this.value === undefined || this.includeClassActions !== true || this.value.length <= 0)
                actions = actions; //do nothing
            else {
                var a = await Actions_5.Actions.getActionsFor(this.value); //Class Actions
                for (var x = 0; x < a.length; x++) {
                    actions.push(a[x]);
                }
            }
            actions.forEach(action => {
                var path = action.name.split("/"); //childmenus
                var parent = this.menu;
                for (var i = 0; i < path.length; i++) {
                    if (i === path.length - 1) {
                        var men = new MenuItem_2.MenuItem();
                        men["_classaction"] = true;
                        men.text = path[i];
                        men.icon = action.icon;
                        men.onclick(() => action.call(_this.value));
                        parent.add(men);
                    }
                    else {
                        var name = path[i];
                        var found = undefined;
                        parent._components.forEach((men) => {
                            if (men.text === name)
                                found = men.items;
                        });
                        if (found === undefined) {
                            var men = new MenuItem_2.MenuItem();
                            men["_classaction"] = true;
                            men.text = name;
                            parent.add(men);
                            parent = men.items;
                        }
                        else {
                            parent = found;
                        }
                    }
                }
            });
        }
        _menueChanged() {
        }
        getMainMenu() {
            return this;
        }
        /**
         * register an event if the contextmenu is showing
         * @param {function} handler - the function that is called on change
         * @returns {boolean} - false if the contextmenu should not been shown
         */
        onbeforeshow(handler) {
            this.addEvent("beforeshow", handler);
        }
        async _callContextmenu(evt) {
            if (evt.preventDefault !== undefined)
                evt.preventDefault();
            var cancel = this.callEvent("beforeshow", evt);
            if (cancel !== undefined) {
                for (var x = 0; x < cancel.length; x++) {
                    if (cancel[x] !== undefined && cancel[x].then !== undefined)
                        cancel[x] = await cancel[x];
                    if (cancel[x] === false)
                        return;
                }
            }
            //$(_this.menu.dom).contextMenu("menu","#"+_this.menu._id);//,{triggerOn:'contextmenu'});
            //$(_this.menu.dom).contextMenu('open',evt);
            this.show({ left: evt.originalEvent.clientX, top: evt.originalEvent.clientY });
        }
        /**
         * register the contextMenu (right click) on the component
         * @member {jassi.ui.Component} - the component which gets the contextmenu
         **/
        registerComponent(component) {
            this.contextComponents.push(component);
            var _this = this;
            $(component.dom).contextmenu(function (evt) {
                _this._callContextmenu(evt);
            });
        }
        /**
         * unregister the contextMenu (right click) on the component
         * @member {jassi.ui.Component} - the component which gets the contextmenu
         **/
        unregisterComponent(component) {
            //$(component.dom).contextmenu(function(ob){});//now we always can destroy
            $(component.dom).off("contextmenu");
            //$(component.dom).contextmenu("destroy");
            var pos = this.contextComponents.indexOf(component);
            if (pos >= 0)
                this.contextComponents.splice(pos, 1);
        }
        /**
         * shows the contextMenu
         */
        show(event) {
            //@ts-ignore
            if (this.domWrapper.parentNode.getAttribute('id') === "jassitemp" && this.contextComponents.length > 0) {
                //the contextmenu is not added to a container to we add the contextmenu to the contextComponent
                this.contextComponents[0].domWrapper.appendChild(this.domWrapper);
            }
            var _this = this;
            window.setTimeout(function () {
                $(_this.menu.dom).menu();
                $(_this.menu.dom).menu("destroy");
                $(_this.menu.dom).contextMenu("menu", "#" + _this.menu._id, { triggerOn: 'dummyevent' });
                $(_this.menu.dom).contextMenu('open', event);
            }, 10);
        }
        close() {
            $(this.menu.dom).contextMenu('close', event);
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                return this.menu.extensionCalled(action);
            }
            if (action.componentDesignerInvisibleComponentClicked) {
                var design = action.componentDesignerInvisibleComponentClicked.designButton.dom;
                //return this.show({ top: $(design).offset().top + 30, left: $(design).offset().left + 5 });
                return this.show(design); //{ top: $(design).offset().top, left: $(design).offset().left });
            }
            super.extensionCalled(action);
        }
        destroy() {
            this._value = undefined;
            while (this.contextComponents.length > 0) {
                this.unregisterComponent(this.contextComponents[0]);
            }
            $(this.menu.dom).contextMenu("menu", "#" + this.menu._id);
            $(this.menu.dom).contextMenu("destroy");
            this.menu.destroy();
            super.destroy();
        }
    };
    __decorate([
        Property_15.$Property(),
        __metadata("design:type", Boolean)
    ], ContextMenu.prototype, "includeClassActions", void 0);
    __decorate([
        Property_15.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "onbeforeshow", null);
    ContextMenu = __decorate([
        Component_10.$UIComponent({ fullPath: "common/ContextMenu", icon: "mdi mdi-dots-vertical", editableChildComponents: ["menu"] }),
        Jassi_37.$Class("jassi.ui.ContextMenu"),
        __metadata("design:paramtypes", [])
    ], ContextMenu);
    exports.ContextMenu = ContextMenu;
    async function test() {
        var Panel = Classes_16.classes.getClass("jassi.ui.Panel");
        var Button = Classes_16.classes.getClass("jassi.ui.Button");
        var MenuItem = Classes_16.classes.getClass("jassi.ui.MenuItem");
        var FileNode = Classes_16.classes.getClass("jassi.base.FileNode");
        var bt = new Button();
        var cmen = new ContextMenu();
        var men = new MenuItem();
        //var pan=new Panel();
        men.text = "static Menu";
        men.onclick(() => { alert("ok"); });
        cmen.includeClassActions = true;
        cmen.menu.add(men);
        var nd = new FileNode();
        nd.name = "File";
        cmen.value = [nd];
        cmen.getActions = async function (objects) {
            var all = objects;
            return [{
                    name: "getActions-Action",
                    call: function (ob) {
                        alert(ob[0]["name"]);
                    }
                }];
        };
        bt.contextMenu = cmen;
        bt.text = "hallo";
        //pan.add(bt);
        //bt.domWrapper.appendChild(cmen.domWrapper);
        //pan.add(cmen);
        return bt;
    }
    exports.test = test;
    Jassi_37.default.test = async function () {
        var Tree = Classes_16.classes.getClass("jassi.ui.Tree");
        var tree = new Tree();
        tree.width = "100%";
        tree.height = "300px";
        //https://github.com/s-yadav/contextMenu.js
        var menuid = Registry_13.default.nextID();
        var _menu = $('<ul id=' + menuid + '' + ` class="contextMenu" style="display: none;">
	         <li><img src="images/create.png" class="iw-mIcon" /><select style="width:100%" class="Select"><option value="dd">ddd</option><option value="dd">ddd</option></select></li>
	    	<li title="create button" onclick="doCreate()">
	        <img src="images/create.png" class="iw-mIcon" />Create</li>
		    <li class="iw-has-submenu iw-mTrigger" title="update button2">
		        <img src="images/update.png" class="iw-mIcon" />Update2
		        <ul>
		            <li onclick="doMerge()">Merge</li>
		            <li><span> Hoho</span></li>
		            <li>Replace
		                <ul>
		                    <li>Replace Top 100</li>
		                    <li>Replace All</li>
		                </ul>
		            </li>
		        </ul>
		    </li>
			<li onclick="doDelete()">
		        <img src="images/delete.png" class="iw-mIcon" />Delete
		        <ul>
		            <li>Sooft Delete</li>
		            <li>Hard Delete</li>
		        </ul>
		    </li>
		    <li class="iw-mDisable">Disabled</li>
		</ul>`)[0];
        $(tree.dom)[0].appendChild(_menu);
        $(tree.dom).contextmenu(function (evt) {
            window.setTimeout(function () {
                $(_menu).menu();
                $(_menu).menu("destroy");
                $(_menu).contextMenu("menu", "#" + menuid, { triggerOn: 'contextmenu2' });
                $(_menu).contextMenu('open', { left: evt.originalEvent.clientX, top: evt.originalEvent.clientY });
            }, 10);
            evt.preventDefault();
            //_this.show({left:evt.originalEvent.clientX,top:evt.originalEvent.clientY});
        });
        return tree;
    };
});
define("jassi/ui/DBObjectDialog", ["require", "exports", "jassi/ui/Table", "remote/jassi/base/Jassi", "jassi/ui/Panel", "remote/jassi/base/Registry", "remote/jassi/base/Classes", "jassi/ui/BoxPanel"], function (require, exports, Table_2, Jassi_38, Panel_9, Registry_14, Classes_17, BoxPanel_3) {
    "use strict";
    var DBObjectDialog_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.DBObjectDialog = void 0;
    let DBObjectDialog = DBObjectDialog_1 = class DBObjectDialog extends Panel_9.Panel {
        constructor() {
            super();
            this.me = {};
            this.layout(this.me);
        }
        layout(me) {
            me.splitpanel1 = new BoxPanel_3.BoxPanel();
            me.IDDBView = new Panel_9.Panel();
            me.table1 = new Table_2.Table();
            me.table1.height = "calc(100% - 300px)";
            me.table1.width = "calc(100% - 50px)";
            me.splitpanel1.add(me.IDDBView);
            me.splitpanel1.spliter = [70, 30];
            me.splitpanel1.height = "100%";
            me.splitpanel1.horizontal = false;
            //	me.splitpanel1.width=910;
            me.splitpanel1.add(me.table1);
            this.add(me.splitpanel1);
            //    me.table1.height = "150";
        }
        /**
         * set the DBObject-classname to show in this dialog
         **/
        set dbclassname(classname) {
            this._dbclassname = classname;
            this.update();
        }
        get dbclassname() {
            return this._dbclassname;
        }
        async update() {
            //DBTable
            var cl = await Classes_17.classes.loadClass(this._dbclassname);
            var _this = this;
            //@ts-ignore
            this.data = await cl.find();
            this.me.table1.items = this.data;
            //DBView
            var data = await Registry_14.default.getJSONData("$DBObjectView");
            for (var x = 0; x < data.length; x++) {
                var param = data[x].params[0];
                if (param.classname === this.dbclassname) {
                    var cl = await Classes_17.classes.loadClass(data[x].classname);
                    this.me.IDDBView.removeAll();
                    this.view = new cl();
                    this.me.IDDBView.add(this.view);
                    //@ts-ignore
                    this.view.value = this.data.length > 0 ? this.data[0] : undefined;
                    this.view.onrefreshed(() => {
                        _this.me.table1.update();
                    });
                    this.view.onsaved((obj) => {
                        var all = _this.me.table1.items;
                        if (all.indexOf(obj) === -1) {
                            all.push(obj);
                            _this.me.table1.items = _this.me.table1.items;
                            _this.me.table1.value = obj;
                            _this.me.table1.update();
                        }
                        else
                            _this.me.table1.update();
                    });
                    this.view.ondeleted((obj) => {
                        var all = _this.me.table1.items;
                        var pos = all.indexOf(obj);
                        if (pos >= 0)
                            all.splice(pos, 1);
                        _this.me.table1.items = all;
                        //select prev element
                        while (pos !== 0 && pos > all.length - 1) {
                            pos--;
                        }
                        if (pos >= 0) {
                            _this.me.table1.value = all[pos];
                            _this.view.value = all[pos];
                        }
                        _this.me.table1.update();
                    });
                    this.me.table1.selectComponent = this.view;
                }
            }
        }
        static async createFor(classname) {
            var ret = new DBObjectDialog_1();
            ret.height = 400;
            ret.dbclassname = classname;
            /*	setimeout(()=>{
             //	ret.height="100%";
             //	ret.me.splitpanel1.refresh();
             },1000);*/
            return ret;
        }
    };
    DBObjectDialog = DBObjectDialog_1 = __decorate([
        Jassi_38.$Class("jassi.ui.DBObjectDialog"),
        __metadata("design:paramtypes", [])
    ], DBObjectDialog);
    exports.DBObjectDialog = DBObjectDialog;
    async function test() {
        //var ret = await DBObjectDialog.createFor("jassi.security.User");
        var ret = await DBObjectDialog.createFor("northwind.Customer");
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/DBObjectExplorer", ["require", "exports", "jassi/ui/ContextMenu", "jassi/ui/Tree", "remote/jassi/base/Jassi", "jassi/base/Actions", "jassi/ui/Panel", "remote/jassi/base/Registry", "jassi/base/Router", "jassi/ui/DBObjectDialog", "jassi/base/Windows"], function (require, exports, ContextMenu_2, Tree_2, Jassi_39, Actions_6, Panel_10, Registry_15, Router_2, DBObjectDialog_2, Windows_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.DBObjectExplorer = exports.DBObjectActions = exports.DBFileActions = exports.DBObjectNode = void 0;
    let DBObjectNode = class DBObjectNode {
    };
    DBObjectNode = __decorate([
        Jassi_39.$Class("jassi.ui.DBObjectNode")
    ], DBObjectNode);
    exports.DBObjectNode = DBObjectNode;
    let DBFileActions = class DBFileActions {
        static async ViewData(all) {
            var entrys = await Registry_15.default.getJSONData("$DBObject");
            for (var x = 0; x < entrys.length; x++) {
                if (all[0].fullpath === entrys[x].filename) {
                    var h = new DBObjectNode();
                    h.name = entrys[x].classname;
                    h.filename = entrys[x].filename;
                    DBObjectActions.ViewData([h]);
                }
            }
        }
    };
    __decorate([
        Actions_6.$Action({
            name: "View Data",
            isEnabled: async function (all) {
                if (all[0].isDirectory())
                    return false;
                //console.log("TODO make isEnabled this async")
                var entrys = await Registry_15.default.getJSONData("$DBObject");
                for (var x = 0; x < entrys.length; x++) {
                    if (all[0].fullpath === entrys[x].filename)
                        return true;
                }
                return false;
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], DBFileActions, "ViewData", null);
    DBFileActions = __decorate([
        Actions_6.$ActionProvider("jassi.base.FileNode"),
        Jassi_39.$Class("jassi.ui.DBFileActions")
    ], DBFileActions);
    exports.DBFileActions = DBFileActions;
    let DBObjectActions = class DBObjectActions {
        static async ViewData(all) {
            var ret = new DBObjectDialog_2.DBObjectDialog();
            ret.dbclassname = all[0].name;
            ret.height = "100%";
            Windows_5.default.add(ret, all[0].name);
        }
        static async OpenCode(all) {
            Router_2.router.navigate("#do=jassi.ui.CodeEditor&file=" + all[0].filename);
        }
    };
    __decorate([
        Actions_6.$Action({ name: "View Data" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], DBObjectActions, "ViewData", null);
    __decorate([
        Actions_6.$Action({ name: "Open Code" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], DBObjectActions, "OpenCode", null);
    DBObjectActions = __decorate([
        Actions_6.$ActionProvider("jassi.ui.DBObjectNode"),
        Jassi_39.$Class("jassi.ui.DBObjectActions")
    ], DBObjectActions);
    exports.DBObjectActions = DBObjectActions;
    let DBObjectExplorer = class DBObjectExplorer extends Panel_10.Panel {
        constructor() {
            super();
            this.me = {};
            this.layout(this.me);
        }
        layout(me) {
            me.tree = new Tree_2.Tree();
            me.contextmenu = new ContextMenu_2.ContextMenu();
            this.add(me.contextmenu);
            this.add(me.tree);
            me.tree.width = "100%";
            me.tree.height = "100%";
            me.tree.propDisplay = "name";
            me.tree.contextMenu = me.contextmenu;
            me.tree.onclick(function (event /*, data?:Fancytree.EventData*/) {
                var node = event.data;
                DBObjectActions.OpenCode([node]);
            });
            me.contextmenu.includeClassActions = true;
            this.update();
        }
        async update() {
            var entrys = await Registry_15.default.getJSONData("$DBObject");
            var all = [];
            entrys.forEach((entry) => {
                var h = new DBObjectNode();
                ;
                h.name = entry.classname;
                h.filename = entry.filename;
                all.push(h);
            });
            this.me.tree.items = all;
        }
    };
    DBObjectExplorer = __decorate([
        Jassi_39.$Class("jassi.ui.DBObjectExplorer"),
        __metadata("design:paramtypes", [])
    ], DBObjectExplorer);
    exports.DBObjectExplorer = DBObjectExplorer;
    async function test() {
        var ret = new DBObjectExplorer();
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/DBObjectView", ["require", "exports", "jassi/ui/Button", "jassi/ui/BoxPanel", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Databinder", "jassi/ui/Component", "remote/jassi/base/Registry", "remote/jassi/base/Classes", "jassi/ui/Property"], function (require, exports, Button_4, BoxPanel_4, Jassi_40, Panel_11, Databinder_1, Component_11, Registry_16, Classes_18, Property_16) {
    "use strict";
    var DBObjectView_3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.DBObjectView = exports.$DBObjectView = exports.DBObjectViewProperties = void 0;
    class DBObjectViewProperties {
    }
    exports.DBObjectViewProperties = DBObjectViewProperties;
    function $DBObjectView(properties) {
        return function (pclass) {
            Registry_16.default.register("$DBObjectView", pclass, properties);
        };
    }
    exports.$DBObjectView = $DBObjectView;
    let DBObjectView = DBObjectView_3 = class DBObjectView extends Panel_11.Panel {
        constructor() {
            super();
            this.me = {};
            //everytime call super.layout
            DBObjectView_3.prototype.layout.bind(this)(this.me);
            // this.layout(this.me);
        }
        _setDesignMode(enable) {
            //no Icons to add Components in designer
        }
        /**
         * create a new object
         */
        createObject() {
            var clname = Registry_16.default.getData("$DBObjectView", Classes_18.classes.getClassName(this))[0].params[0].classname;
            var cl = Classes_18.classes.getClass(clname);
            this["value"] = new cl();
            this.callEvent("created", this["value"]);
            return this["value"];
        }
        /**
        * register an event if the object is created
        * @param {function} handler - the function that is called
        */
        oncreated(handler) {
            this.addEvent("deleted", handler);
        }
        /**
         * saves the object
         */
        saveObject() {
            var ob = this.me.databinder.fromForm();
            ob.save().then((obj) => {
                this["value"] = obj;
                this.callEvent("saved", obj);
            });
        }
        /**
         * register an event if the object is saved
         * @param {function} handler - the function that is called
         */
        onsaved(handler) {
            this.addEvent("saved", handler);
        }
        /**
         * refresh the object
         */
        refreshObject() {
            this.me.databinder.toForm(this["value"]);
            this.callEvent("refreshed", this["value"]);
        }
        /**
         * register an event if the object is refreshed
         * @param {function} handler - the function that is called
         */
        onrefreshed(handler) {
            this.addEvent("refreshed", handler);
        }
        /**
         * deletes Object
         **/
        deleteObject() {
            var ob = this.me.databinder.fromForm();
            ob.remove();
            //set obj to null
            var clname = Registry_16.default.getData("$DBObjectView", Classes_18.classes.getClassName(this))[0].params[0].classname;
            var cl = Classes_18.classes.getClass(clname);
            this["value"] = new cl();
            this.callEvent("deleted", ob);
        }
        /**
         * register an event if the object is deleted
         * @param {function} handler - the function that is called
         */
        ondeleted(handler) {
            this.addEvent("deleted", handler);
        }
        layout(me) {
            var _this = this;
            me.toolbar = new BoxPanel_4.BoxPanel();
            me.save = new Button_4.Button();
            me.remove = new Button_4.Button();
            me.refresh = new Button_4.Button();
            me.create = new Button_4.Button();
            me.databinder = new Databinder_1.Databinder();
            me.main = new Panel_11.Panel();
            me.databinder.definePropertyFor(this, "value");
            this.add(me.toolbar);
            this.add(me.main);
            me.main.width = "100%";
            me.main.height = "100%";
            me.main.css({ position: "relative" });
            //$(me.main.dom).css("background-color","coral");
            me.toolbar.add(me.create);
            me.toolbar.add(me.save);
            me.toolbar.horizontal = true;
            me.toolbar.add(me.refresh);
            me.toolbar.add(me.remove);
            me.save.text = "";
            me.save.tooltip = "save";
            me.save.icon = "mdi mdi-content-save";
            me.save.onclick(function (event) {
                _this.saveObject();
            });
            me.remove.text = "";
            me.remove.icon = "mdi mdi-delete";
            me.remove.onclick(function (event) {
                _this.deleteObject();
            });
            me.remove.tooltip = "remove";
            me.refresh.text = "";
            me.refresh.icon = "mdi mdi-refresh";
            me.refresh.onclick(function (event) {
                _this.refreshObject();
            });
            me.refresh.tooltip = "refresh";
            me.create.text = "";
            me.create.icon = "mdi mdi-tooltip-plus-outline";
            me.create.onclick(function (event) {
                _this.createObject();
                //me.binder.toForm();
            });
            me.create.tooltip = "new";
        }
    };
    __decorate([
        Property_16.$Property({ default: "function(obj?/*: DBObject*/){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], DBObjectView.prototype, "oncreated", null);
    __decorate([
        Property_16.$Property({ default: "function(obj?/*: DBObject*/){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], DBObjectView.prototype, "onsaved", null);
    __decorate([
        Property_16.$Property({ default: "function(obj?/*: DBObject*/){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], DBObjectView.prototype, "onrefreshed", null);
    __decorate([
        Property_16.$Property({ default: "function(obj?/*: DBObject*/){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], DBObjectView.prototype, "ondeleted", null);
    DBObjectView = DBObjectView_3 = __decorate([
        Component_11.$UIComponent({ editableChildComponents: ["this", "me.main", "me.toolbar", "me.save", "me.remove", "me.refresh"] }),
        Jassi_40.$Class("jassi/ui/DBObjectView"),
        __metadata("design:paramtypes", [])
    ], DBObjectView);
    exports.DBObjectView = DBObjectView;
    async function test() {
        var ret = new DBObjectView();
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/DataComponent", ["require", "exports", "jassi/ui/Component", "jassi/ui/Property", "remote/jassi/base/Jassi"], function (require, exports, Component_12, Property_17, Jassi_41) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataComponent = void 0;
    var tmpDatabinder = undefined;
    let DataComponent = class DataComponent extends Component_12.Component {
        /**
        * base class for each Component
        * @class jassi.ui.Component
         * @param {object} properties - properties to init
         * @param {string} [properties.id] -  connect to existing id (not reqired)
         *
         */
        constructor(properties = undefined) {
            super(properties);
            this._autocommit = false;
        }
        /**
         * @member {bool} autocommit -  if true the databinder will update the value on every change
         *                              if false the databinder will update the value on databinder.toForm
         */
        get autocommit() {
            return this._autocommit;
        }
        set autocommit(value) {
            this._autocommit = value;
            if (this._databinder !== undefined)
                this._databinder.checkAutocommit(this);
        }
        /**
         * binds a component to a databinder
         * @param {jassi.ui.Databinder} databinder - the databinder to bind
         * @param {string} property - the property to bind
         */
        bind(databinder, property) {
            this._databinder = databinder;
            databinder.add(property, this, "onchange");
            databinder.checkAutocommit(this);
        }
        destroy() {
            if (this._databinder !== undefined) {
                this._databinder.remove(this);
                this._databinder = undefined;
            }
            super.destroy();
        }
    };
    __decorate([
        Property_17.$Property(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DataComponent.prototype, "autocommit", null);
    __decorate([
        Property_17.$Property({ type: "databinder" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], DataComponent.prototype, "bind", null);
    DataComponent = __decorate([
        Jassi_41.$Class("jassi.ui.DataComponent"),
        __metadata("design:paramtypes", [Object])
    ], DataComponent);
    exports.DataComponent = DataComponent;
});
define("jassi/ui/DatabaseDesigner", ["require", "exports", "jassi/ui/BoxPanel", "jassi/ui/Button", "jassi/ui/Databinder", "jassi/ui/Select", "jassi/ui/Table", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/base/DatabaseSchema", "jassi/ui/OptionDialog"], function (require, exports, BoxPanel_5, Button_5, Databinder_2, Select_2, Table_3, Jassi_42, Panel_12, DatabaseSchema_2, OptionDialog_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.DatabaseDesigner = void 0;
    var ttt = 1;
    let DatabaseDesigner = class DatabaseDesigner extends Panel_12.Panel {
        constructor() {
            super();
            this.allTypes = { values: [""] };
            this.posibleRelations = { values: [""] };
            this.me = {};
            this.layout(this.me);
        }
        layout(me) {
            me.newclass = new Button_5.Button();
            me.boxpanel1 = new BoxPanel_5.BoxPanel();
            me.save = new Button_5.Button();
            me.boxpanel2 = new BoxPanel_5.BoxPanel(false);
            me.newfield = new Button_5.Button();
            me.boxpanel1.horizontal = true;
            var _this = this;
            var xxx = 0;
            var params = { values: ["hall", "du"] };
            me.table = new Table_3.Table({
                autoColumns: false,
                columns: [
                    //@ts-ignore
                    { title: "name", field: "name", editor: "input", editable: true },
                    //@ts-ignore
                    { title: "type", field: "type", editor: "select", editorParams: this.allTypes },
                    //@ts-ignore
                    { title: "nullable", field: "nullable", editor: "tick", editorParams: { tristate: false } },
                    //@ts-ignore
                    { title: "relationinfo", field: "relationinfo", editor: "select",
                        editorParams: this.posibleRelations,
                        cellEditing: function (cell) {
                            _this.updatePossibleRelations(cell);
                        } }
                ]
            });
            me.select = new Select_2.Select();
            me.databinder = new Databinder_2.Databinder();
            this.add(me.databinder);
            me.table.width = 565;
            me.table.height = "300";
            me.table.onchange(function (event, data) {
            });
            me.select.display = "name";
            me.select.selectComponent = me.databinder;
            me.select.onchange(function (event) {
                _this.update();
            });
            me.select.width = 210;
            this.readSchema();
            this.width = 719;
            this.height = 386;
            this.add(me.boxpanel1);
            this.add(me.boxpanel2);
            me.newclass.text = "Create DBClass";
            me.newclass.onclick(function (event) {
                _this.newClass();
            });
            me.newclass.icon = "mdi mdi-note-plus-outline";
            me.newclass.tooltip = "new DBClass";
            me.newclass.width = "150";
            me.boxpanel1.add(me.select);
            me.boxpanel1.width = 365;
            me.boxpanel1.add(me.newclass);
            me.boxpanel1.add(me.save);
            me.save.text = "Save all Classes";
            me.save.onclick(function (event) {
                _this.saveAll();
            });
            me.save.width = 150;
            me.save.icon = "mdi mdi-content-save";
            me.save.width = 180;
            me.boxpanel2.height = 115;
            me.boxpanel2.horizontal = true;
            me.boxpanel2.width = 50;
            me.newfield.text = "Create Field";
            me.newfield.icon = "mdi mdi-playlist-plus";
            me.newfield.onclick(function (event) {
                _this.currentClass.fields.push(new DatabaseSchema_2.DatabaseField());
                me.table.items = _this.currentClass.fields;
            });
            me.newfield.width = "140";
            me.boxpanel2.add(me.table);
            me.boxpanel2.add(me.newfield);
        }
        async saveAll() {
            try {
                var text = await this.currentSchema.updateSchema(true);
                if (text !== "") {
                    if ((await OptionDialog_6.OptionDialog.show("Do you won't this changes?<br/>" + text.replaceAll("\n", "<br/>"), ["Yes", "Cancel"])).button === "Yes") {
                        this.currentSchema.updateSchema(false);
                    }
                }
                else {
                    alert("no changes detected");
                }
            }
            catch (err) {
                alert(err.message);
            }
        }
        async newClass() {
            var sub = this.currentClass.name.substring(0, this.currentClass.name.lastIndexOf("."));
            var res = await OptionDialog_6.OptionDialog.show("Enter classname", ["OK", "Cancel"], undefined, true, sub + ".MyOb");
            if (res.button === "OK") {
                this.currentClass = new DatabaseSchema_2.DatabaseClass();
                this.currentClass.name = res.text;
                var f = new DatabaseSchema_2.DatabaseField();
                f.name = "id";
                f.type = "int";
                f.relation = "PrimaryColumn";
                this.currentClass.fields = [f];
                this.currentSchema.databaseClasses.push(this.currentClass);
                this.me.select.items = this.currentSchema.databaseClasses;
                this.me.select.value = this.currentClass;
                this.update();
            }
        }
        updatePossibleRelations(cell) {
            var _this = this;
            var tp = cell.getData();
            this.posibleRelations.values = tp.getPossibleRelations();
        }
        updateTypes() {
            var _this = this;
            this.allTypes.values = [];
            DatabaseSchema_2.DatabaseSchema.basicdatatypes.forEach((e) => {
                _this.allTypes.values.push(e);
            });
            this.currentSchema.databaseClasses.forEach((cl) => {
                _this.allTypes.values.push(cl.name);
                _this.allTypes.values.push(cl.name + "[]");
            });
        }
        update() {
            this.currentClass = this.me.select.value;
            this.me.table.items = this.currentClass.fields;
            this.updateTypes();
        }
        async readSchema() {
            this.currentSchema = new DatabaseSchema_2.DatabaseSchema();
            await this.currentSchema.loadSchemaFromCode();
            this.me.select.items = this.currentSchema.databaseClasses;
            this.me.select.value = this.currentSchema.databaseClasses[0];
            this.update();
        }
    };
    DatabaseDesigner = __decorate([
        Jassi_42.$Class("jassi/ui/DatabaseDesigner"),
        __metadata("design:paramtypes", [])
    ], DatabaseDesigner);
    exports.DatabaseDesigner = DatabaseDesigner;
    async function test() {
        var ret = new DatabaseDesigner();
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/Databinder", ["require", "exports", "jassi/ui/InvisibleComponent", "jassi/ui/Component", "remote/jassi/base/Jassi"], function (require, exports, InvisibleComponent_3, Component_13, Jassi_43) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Databinder = void 0;
    let Databinder = class Databinder extends InvisibleComponent_3.InvisibleComponent {
        constructor() {
            super();
            super.init($('<span class="InvisibleComponent"></span>')[0]);
            /** @member {[jassi.ui.Component]} components - all binded components*/
            this.components = [];
            /** @member {[string]} properties - all binded properties*/
            this._properties = [];
            /** @member [[function]] getter - all functions to get the component value*/
            this._getter = [];
            /** @member [[function]] setter - all functions to set the component value*/
            this._setter = [];
            /** @member {[function]} onChange - changeHandler for all components used for autocommit*/
            this._onChange = [];
            /** @member {[function]} autocommit - autocommitHandler for all components*/
            this._autocommit = [];
            /** @member [{object}] userObject - the object to bind*/
            this.userObject = undefined;
        }
        /**
        * binds the component to the property of the userObject
        * @param {string} property - the name of the property to bind
        * @param {jassi.ui.Component} component - the component to bind
        * @param {string} [onChange] - functionname to register the  changehandler - if missing no autocommit is possible
        * @param {function} [getter] - function to get the value of the component - if missing .value is used
        * @param {function} [setter] - function to put the value of the component - if missing .value is used
        */
        add(property, component, onChange = undefined, getter = undefined, setter = undefined) {
            this.remove(component);
            this.components.push(component);
            this._properties.push(property);
            if (getter === undefined) {
                this._getter.push(function (component) {
                    return component["value"];
                });
            }
            else
                this._getter.push(getter);
            if (setter === undefined) {
                this._setter.push(function (component, value) {
                    component["value"] = value;
                });
            }
            else
                this._setter.push(setter);
            if (onChange === undefined) {
                this._onChange.push(component["onChange"]);
            }
            else
                this._onChange.push(onChange);
            if (this.userObject !== undefined) {
                var pos = this._properties.indexOf(property);
                let setter = this._setter[pos];
                setter(component, this.userObject[property]);
            }
            this._autocommit.push(undefined);
        }
        remove(component) {
            for (var x = 0; x < this.components.length; x++) {
                if (this.components[x] === component) {
                    this.components.splice(x, 1);
                    this._properties.splice(x, 1);
                    this._getter.splice(x, 1);
                    this._setter.splice(x, 1);
                    this._onChange.splice(x, 1);
                    this._autocommit.splice(x, 1);
                }
            }
        }
        /**
         * defines getter and setter and connect this to the databinder
         * @param {object} object - the object where we define the property
         * @param {string} propertyname - the name of the property
         **/
        definePropertyFor(object, propertyname) {
            var _this = this;
            Object.defineProperty(object, propertyname, {
                get: function () { return _this.value; },
                set: function (newValue) {
                    if (newValue !== undefined && newValue.then !== undefined) {
                        newValue.then(function (ob2) {
                            _this.value = ob2;
                        });
                    }
                    else
                        _this.value = newValue;
                },
                enumerable: true,
                configurable: true
            });
        }
        /**
         * @member {object} value - the binded userobject - call toForm on set
         */
        get value() {
            // this.fromForm();
            return this.userObject;
        }
        set value(obj) {
            var _this = this;
            if (obj !== undefined && obj.then !== undefined) {
                obj.then(function (ob2) {
                    _this.toForm(ob2);
                });
            }
            else
                this.toForm(obj);
        }
        /**
         * binds the object to all added components
         * @param {object} obj - the object to bind
         */
        toForm(obj) {
            this.userObject = obj;
            for (var x = 0; x < this.components.length; x++) {
                var comp = this.components[x];
                var prop = this._properties[x];
                var sfunc = this._setter[x];
                var sget = this._getter[x];
                var oldValue = sget(comp);
                if (prop === "this") {
                    if (oldValue !== this.userObject) {
                        sfunc(comp, this.userObject);
                    }
                }
                else {
                    if (this.userObject === undefined) {
                        if (oldValue !== undefined)
                            sfunc(comp, undefined);
                    }
                    else {
                        if (oldValue !== this.userObject[prop]) {
                            sfunc(comp, this.userObject[prop]);
                        }
                    }
                }
                //var sfunc=this.setter[x];
                //this._toForm(prop,comp);
            }
        }
        /**
         * gets the objectproperties from all added components
         * @return {object}
         */
        fromForm() {
            if (this.userObject === undefined)
                return undefined;
            for (var x = 0; x < this.components.length; x++) {
                this._fromForm(x);
            }
            return this.userObject;
        }
        /**
         * get objectproperty
         * @param {number} x - the numer of the component
         */
        _fromForm(x) {
            var comp = this.components[x];
            var prop = this._properties[x];
            var sfunc = this._getter[x];
            var test = sfunc(comp);
            if (test !== undefined) {
                if (prop === "this") {
                    var val = test;
                    this.value = test;
                }
                else {
                    if (comp["converter"] !== undefined) {
                        test = comp["converter"].stringToObject(test);
                    }
                    this.userObject[prop] = test;
                }
            }
        }
        /**
         * register the autocommit handler if needed
         * @param {jassi.ui.DataComponent} component
         */
        checkAutocommit(component) {
            if (component.autocommit !== true)
                return;
            var pos = this.components.indexOf(component);
            if (this._autocommit[pos] !== undefined)
                return;
            var onchange = this._onChange[pos];
            if (onchange === undefined)
                return;
            var _this = this;
            this._autocommit[pos] = function () {
                pos = _this.components.indexOf(component);
                _this._fromForm(pos);
            };
            component[onchange](this._autocommit[pos]);
        }
        destroy() {
            this.components = [];
            this._properties = [];
            this._getter = [];
            this._setter = [];
            this._onChange = [];
            this._autocommit = [];
            this.userObject = undefined;
            super.destroy();
        }
    };
    Databinder = __decorate([
        Component_13.$UIComponent({ fullPath: "common/Databinder", icon: "mdi mdi-connection" }),
        Jassi_43.$Class("jassi.ui.Databinder"),
        __metadata("design:paramtypes", [])
    ], Databinder);
    exports.Databinder = Databinder;
});
// return CodeEditor.constructor;
define("jassi/ui/DockingContainer", ["require", "exports", "jassi/ext/goldenlayout", "remote/jassi/base/Jassi", "jassi/ui/Container", "jassi/ui/Button", "jassi/ui/Textbox"], function (require, exports, goldenlayout_2, Jassi_44, Container_3, Button_6, Textbox_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DockingContainer = void 0;
    //goldenlayout custom version - fixed leak s.u.
    let DockingContainer = class DockingContainer extends Container_3.Container {
        /**
    * a container where the components could be docked
    * @class jassi.ui.DockingContainer
    */
        constructor(id = undefined) {
            super(id);
            super.init($('<div class="DockingContainer"/>')[0]);
            this.maximize();
            var _this = this;
            this._registeredcomponents = {};
            this._init();
            this._lastSize = -1;
            this._intersectionObserver = new IntersectionObserver(entries => {
                if (entries[0].intersectionRatio <= 0) {
                    return;
                }
                if (_this._lastSize !== _this.dom.offsetWidth * _this.dom.offsetHeight) {
                    _this._lastSize = _this.dom.offsetWidth * _this.dom.offsetHeight;
                    _this._myLayout.updateSize();
                }
            }, { rootMargin: `0px 0px 0px 0px` });
            this._intersectionObserver.observe(_this.dom);
        }
        static clearMemoryleak(container) {
            if (container === undefined) {
                //initialize to clean this code line $( document ).mouseup( lm.utils.fnBind( this._hideAdditionalTabsDropdown, this ) );
                if (goldenlayout_2.default.__lm.utils.fnBind.inited === undefined) {
                    goldenlayout_2.default.__lm.utils.fnBind = function (fn, context, boundArgs) {
                        var func = Function.prototype.bind.apply(fn, [context].concat(boundArgs || []));
                        func.orgFunc = fn;
                        func.orgOb = context;
                        return func;
                    };
                    goldenlayout_2.default.__lm.utils.fnBind.inited = true;
                }
                return;
            }
            container.off("destroy");
            //memory leak golden layout
            container.tab._dragListener._oDocument.unbind('mouseup touchend', container.tab._dragListener._fUp);
            container.tab._dragListener._fUp = undefined;
            container.tab._dragListener._oDocument.off('mousemove touchmove', container.tab._dragListener._fMove);
            container.tab._dragListener._oDocument.off('mouseup touchend', container.tab._dragListener._fUp);
            //uw hack in goldenlayout.js memory leak
            //change: $( document ).mouseup( lm.utils.fnBind( this._hideAdditionalTabsDropdown, this ) );
            //in    : this._uweiMouseUp=lm.utils.fnBind( this._hideAdditionalTabsDropdown, this );
            //        $( document ).mouseup(this._uweiMouseUp );
            $(document).off("mouseup", container.tab.header._uweiMouseUp);
            container.tab.header.activeContentItem = undefined;
            $(container.tab.header.element).off("destroy");
            $(container.tab.header.element).off("mouseup");
            $(container.tab.header.element).remove();
            $(container.tab.element).remove();
            $(container.element).remove();
        }
        /**
         * add a component to the container
         * @param {jassi.ui.Component} component - the component to add
         * @param {string} title - the caption of the window
         * @param {string} name - the name of the window
         */
        add(component, title = "", name = undefined) {
            var exists = this._find(this._myLayout.root, name);
            component._parent = this;
            component.maximize();
            component.domWrapper._parent = this;
            if (name === undefined)
                name = title;
            this._registeredcomponents[name] = component;
            if (exists !== undefined) {
                console.warn("check memory leak");
                var old = exists.element[0].children[0].children[0];
                exists.element[0].children[0].replaceChild(component.domWrapper, old);
                old._this._parent = undefined;
                old._this.domWrapper._parent = undefined;
                return;
            }
            this._components.push(component);
            //delete from old parent
            if (component.domWrapper.parentNode !== null && component.domWrapper.parentNode !== undefined) {
                component.domWrapper.parentNode.removeChild(component.domWrapper);
            }
            var config = {
                title: title,
                type: 'component',
                componentName: name,
                componentState: { title: title, name: name }
            };
            this._registerGL(name);
            var center = this._myLayout.root.contentItems[0];
            center.addChild(config);
        }
        /**
         * called on resizing could be redefined
         */
        onresize() {
        }
        /**
         * register a component to Golden layout
         * @param {String} name - the name of the component
         */
        _registerGL(name) {
            var _this = this;
            //save the component
            this._myLayout.registerComponent(name, function (container, state) {
                var component = _this._registeredcomponents[name];
                container.on('resize', function () {
                    _this.onresize();
                });
                container.on("destroy", function (data) {
                    container.off("resize");
                    container.off("destroy");
                    //memory leak golden layout
                    container.tab._dragListener._oDocument.unbind('mouseup touchend', container.tab._dragListener._fUp);
                    container.tab._dragListener._fUp = undefined;
                    container.tab._dragListener._oDocument.off('mousemove touchmove', container.tab._dragListener._fMove);
                    container.tab._dragListener._oDocument.off('mouseup touchend', container.tab._dragListener._fUp);
                    if (_this._noDestroyChilds !== true) {
                        if (component._this !== undefined)
                            component._this.destroy();
                        delete _this._registeredcomponents[name];
                    }
                    delete _this._myLayout._components[name];
                    //uw hack in goldenlayout.js memory leak
                    //change: $( document ).mouseup( lm.utils.fnBind( this._hideAdditionalTabsDropdown, this ) );
                    //in    : this._uweiMouseUp=lm.utils.fnBind( this._hideAdditionalTabsDropdown, this );
                    //        $( document ).mouseup(this._uweiMouseUp );
                    var kk = container.tab.header._hideAdditionalTabsDropdown.bound === container.tab.header._uweiMouseUp;
                    //$(document).off("mouseup", container.tab.header._uweiMouseUp);
                    // container.tab.header.activeContentItem = undefined;
                    $(container.tab.header.element).off("destroy");
                    $(container.tab.header.element).off("mouseup");
                    $(container.tab.header.element).remove();
                    $(container.tab.element).remove();
                    $(container.element).remove();
                    delete component._container;
                });
                if (component.dom !== undefined)
                    component = component.dom;
                component._container = container;
                container.getElement()[0].appendChild(component); //html( '<h2>' + state.text + '</h2>');
            });
        }
        /**
         * remove a component from the container
         * @param {jassi.ui.Component} component - the component to add
         */
        remove(component) {
            component._parent = undefined;
            component.domWrapper._parent = undefined;
            var pos = this._components.indexOf(component);
            if (pos >= 0)
                this._components.splice(pos, 1);
            var container = component.dom._container;
            //   container.getElement()[0].removeChild(component.dom);
            //            this.dom.removeChild(component.domWrapper);
            console.warn("TODO call close tab?");
        }
        _init() {
            var config = {
                settings: {
                    showPopoutIcon: false,
                },
                content: [{
                        type: 'row',
                        isClosable: false,
                        content: []
                    }],
            };
            this._myLayout = new goldenlayout_2.default(config, this.dom);
            //	this._myLayout.on( 'selectionChanged', function(evt){
            //	    debugger;
            //	});
            var _this = this;
            this._myLayout.init();
            var thislayout = this._myLayout;
            this._windowResizer = function () {
                _this.update();
                window.setTimeout(function () {
                    _this.update();
                }, 100);
            };
            $(window).resize(this._windowResizer);
            /* this._parentResizer=function(){
                 //   alert("now");
                   var h = $(_this.dom.parent).height();
                   var w = $(_this.dom.parent).weigth();
                   _this.width=w;
                   _this.height=h;
               }
             $(this.dom.parent).resize(this._parentResizer);*/
            var func = function () {
                _this._myLayout.update();
                //     window.setTimeout(func,500);
            };
            // var thislayout=this._myLayout;
            //    window.setTimeout(func,500);
            /* var test=this.dom.parent;
                  $(this.dom.parent).resize(function(){
                 var h = $(_this.dom.parent).height();
                 var w = $(_this.dom.parent).weigth();
                 _this.width=w;
                 _this.height=h;
             });*/
            // $(this.dom.firstChild).css("height","100%");
            //   $(this.dom.firstChild).css("width","100%");
        }
        /**
         * activate the window
         * @param {string} name - the name of the window
         */
        show(name) {
            var m = this._find(this._myLayout.root, name);
            if (m.parent.header !== undefined)
                m.parent.header.parent.setActiveContentItem(m);
        }
        /**
         * update the layout (size)
         */
        update() {
            this._myLayout.updateSize();
        }
        /**
         * finds a child in the config
         */
        _find(parent, name) {
            if (parent.contentItems === undefined)
                return undefined;
            for (var x = 0; x < parent.contentItems.length; x++) {
                if (parent.contentItems[x].config.componentName === name)
                    return parent.contentItems[x];
                var test = this._find(parent.contentItems[x], name);
                if (test !== undefined)
                    return test;
            }
            return undefined;
        }
        /** @member {String} - the layout of the windows */
        get layout() {
            return JSON.stringify(this._myLayout.toConfig());
        }
        set layoutold(value) {
            var fc = this.dom.firstChild;
            while (fc) {
                this.dom.removeChild(fc);
                fc = this.dom.firstChild;
            }
            var config = JSON.parse(value);
            this._myLayout = new goldenlayout_2.default(config, this.dom);
            for (var name in this._registeredcomponents)
                this._registerGL(name);
            this._myLayout.init();
            this.update();
        }
        set layout(value) {
            for (var x = 0; x < this._components.length; x++) {
                var component = this._components[x];
                var container = component.dom["_container"];
                if (container.getElement()[0].children.length > 0)
                    container.getElement()[0].removeChild(container.getElement()[0].firstChild);
            }
            /* var fc = this.dom.firstChild;
    
             while( fc ) {
                 this.dom.removeChild( fc );
                 fc = this.dom.firstChild;
             }*/
            this._noDestroyChilds = true;
            this._myLayout.destroy();
            delete this._noDestroyChilds;
            var config = JSON.parse(value);
            this._myLayout = new goldenlayout_2.default(config, this.dom);
            for (var name in this._registeredcomponents)
                this._registerGL(name);
            this._myLayout.init();
            this.update();
            this.addSelectionEvent(this._myLayout.root);
        }
        addSelectionEvent(element) {
            if (element.contentItems !== undefined) {
                element.on("activeContentItemChanged", function (evt) {
                    console.log(evt.componentName);
                });
                for (let x = 0; x < element.contentItems.length; x++) {
                    this.addSelectionEvent(element.contentItems[x]);
                }
            }
        }
        destroy() {
            $(window).off("resize", this._windowResizer);
            //  $(this.dom.parent).off("resize",this._parentResizer);
            this._windowResizer = undefined;
            // this._parentResizer=undefined;
            this._intersectionObserver.unobserve(this.dom);
            this._intersectionObserver = undefined;
            this._myLayout.destroy();
            this._myLayout = undefined;
            this._registeredcomponents = {};
            super.destroy();
        }
    };
    DockingContainer = __decorate([
        Jassi_44.$Class("jassi.ui.DockingContainer"),
        __metadata("design:paramtypes", [Object])
    ], DockingContainer);
    exports.DockingContainer = DockingContainer;
    Jassi_44.default.test = function () {
        var dock = new DockingContainer();
        var bt = new Button_6.Button();
        dock.add(bt, "Hallo", "Hallo");
        var text = new Textbox_2.Textbox();
        dock.add(text, "Hallo2", "Hallo2");
        // jassi.windows.add(dock,"dock");
        dock.layout = '{"settings":{"hasHeaders":true,"constrainDragToContainer":true,"reorderEnabled":true,"selectionEnabled":false,"popoutWholeStack":false,"blockedPopoutsThrowError":true,"closePopoutsOnUnload":true,"showPopoutIcon":false,"showMaximiseIcon":true,"showCloseIcon":true,"responsiveMode":"onload"},"dimensions":{"borderWidth":5,"minItemHeight":10,"minItemWidth":10,"headerHeight":20,"dragProxyWidth":300,"dragProxyHeight":200},"labels":{"close":"close","maximise":"maximise","minimise":"minimise","popout":"open in new window","popin":"pop in","tabDropdown":"additional tabs"},"content":[{"type":"column","isClosable":true,"reorderEnabled":true,"title":"","content":[{"type":"stack","width":100,"height":80.99041533546327,"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"content":[{"title":"Hallo","type":"component","componentName":"Hallo","componentState":{"title":"Hallo","name":"Hallo"},"isClosable":true,"reorderEnabled":true}]},{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"height":19.00958466453674,"content":[{"title":"Hallo2","type":"component","componentName":"Hallo2","componentState":{"title":"Hallo2","name":"Hallo2"},"isClosable":true,"reorderEnabled":true}]}]}],"isClosable":true,"reorderEnabled":true,"title":"","openPopouts":[],"maximisedItemId":null}';
        bt.onclick(function () {
            text.value = dock.layout;
            //  dock.layout=state;
            //var config=JSON.parse(state);
            //dock._myLayout = new GoldenLayout( config,dock.dom );
            //dock._myLayout.init();
        });
        return dock;
    };
});
define("jassi/ui/ErrorPanel", ["require", "exports", "jassi/ui/Panel", "jassi/base/Errors", "remote/jassi/base/Jassi", "jassi/ui/Button", "jassi/util/TSSourceMap", "jassi/base/Router"], function (require, exports, Panel_13, Errors_2, Jassi_45, Button_7, TSSourceMap_2, Router_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.ErrorPanel = void 0;
    let ErrorPanel = class ErrorPanel extends Panel_13.Panel {
        /**
     * shows errors
     * @class jassi.ui.ErrorPanel
     */
        constructor() {
            super();
            this.layout();
        }
        layout() {
            var _this = this;
            this.IDClear = new Button_7.Button();
            this.IDClear.tooltip = "Clear log";
            this.IDClear.icon = "mdi mdi-delete";
            this.IDClear.onclick(function () {
                _this.clear();
                Jassi_45.default.errors.items = [];
            });
            this.IDClear.width = 35;
            this.IDSearch = new Button_7.Button();
            this.IDSearch.tooltip = "search errors";
            this.IDSearch.icon = "mdi mdi-file-search-outline";
            this.IDSearch.onclick(function () {
                _this.search();
            });
            this.IDToolbar = new Panel_13.Panel();
            this.IDToolbar.width = "99%";
            this.IDToolbar.add(this.IDClear);
            this.IDToolbar.add(this.IDSearch);
            this.IDToolbar.height = 20;
            super.add(this.IDToolbar);
            var value = $('<span><font  size="2"><span class="errorpanel"></span></font></span>')[0];
            this.dom.appendChild(value);
            this._container = $(this.dom).find(".errorpanel")[0];
            this.registerError();
            //old Errors
            for (var x = 0; x < Jassi_45.default.errors.items.length; x++) {
                this.addError(Jassi_45.default.errors.items[x]);
            }
            if (window["jassi_debug"] === undefined)
                window["jassi_debug"] = { variables: [] };
        }
        /**
         * search Errors in code
         **/
        async search() {
            var typescript = (await new Promise((resolve_6, reject_6) => { require(["jassi/util/Typescript"], resolve_6, reject_6); })).default;
            await typescript.initService();
            var all = typescript.getDiagnosticsForAll();
            for (var x = 0; x < all.length; x++) {
                var diag = all[x];
                var s = diag.file.fileName;
                var pos = typescript.getLineAndCharacterOfPosition(diag.file.fileName, diag.start);
                var href = window.location.origin;
                var err = {
                    errorMsg: diag.messageText,
                    errorObj: {
                        stack: href + "/" + diag.file.fileName + ":" + pos.line + ":" + pos.character
                    }
                };
                Errors_2.Errors.errors.addError(err);
            }
        }
        /**
         * adds a new error
         * @param {object} error - the error
         */
        async addError(error) {
            var msg = "";
            if (error.infoMsg !== undefined) {
                msg = error.infoMsg + "<br>";
            }
            else {
                var sstack = "";
                if (error.error) {
                    sstack = error.error.message.replaceAll(":", "") + "(" + error.filename + ":" + error.lineno + ":" + error.colno + ")\n";
                    if (error.error.stack !== undefined)
                        sstack = sstack + error.error.stack;
                }
                if (error.reason !== undefined) {
                    sstack = error.reason.message + ":::\n";
                    if (error.reason.stack !== undefined)
                        sstack = sstack + error.reason.stack;
                }
                var stack = sstack.split('\n');
                msg = "";
                for (var i = 0; i < stack.length; i++) {
                    var line = stack[i];
                    if (line.split(":").length < 4)
                        continue; //edge and chrome insert message in stack->ignore
                    var poshttp = line.indexOf("http");
                    var url = await this._convertURL(line.substring(poshttp, line.length));
                    line = line.replace("\n", "");
                    var ident = (i === 0 ? "0" : "20");
                    msg = msg + '<div style="text-indent:' + ident + 'px;">' + line.substring(0, poshttp) +
                        '<a href="#" onclick="jassi.ErrorPanel.prototype.onsrclink(this);">' +
                        url + '</a>' + (line.endsWith(")") ? ")" : "") + '</div>';
                }
            }
            var value = $('<span>' + msg + '</span>');
            $(this._container).prepend(value);
            //  this.dom.appendChild(value);
        }
        async _convertURL(url) {
            //eliminate ?
            var lpos = url.indexOf("?");
            if (lpos > 0)
                url = url.substring(0, lpos) + url.substring(url.indexOf(":", lpos));
            var href = window.location.href;
            href = href.substring(0, window.location.href.lastIndexOf("/"));
            url = url.replace("$temp", "");
            url = url.replace(href + "/", "");
            if (url.endsWith(")"))
                url = url.substring(0, url.length - 1);
            var wurl = window.location.href.split("/app.html")[0];
            url = url.replace(wurl, "");
            if (!url.startsWith("/"))
                url = "/" + url;
            if (url.startsWith("/js") && url.indexOf(".js") > -1) {
                var aurl = url.substring(1).split(":");
                var newline = await new TSSourceMap_2.TSSourceMap().getLineFromJS(aurl[0], Number(aurl[1]), Number(aurl[2]));
                url = aurl[0].substring(3).replace(".js", ".ts") + ":" + newline + ":" + aurl[2];
                if (url.startsWith("tmp/"))
                    url = url.substring(4);
            }
            return url;
        }
        /**
         * deletes all errors
         */
        clear() {
            while (this._container.firstChild) {
                this._container.removeChild(this._container.firstChild);
            }
        }
        registerError() {
            var _this = this;
            Jassi_45.default.errors.onerror(function (err) {
                _this.addError(err);
            }, this._id);
        }
        unregisterError() {
            Jassi_45.default.errors.offerror(this._id);
        }
        destroy() {
            this.unregisterError();
            super.destroy();
            //this._container
        }
    };
    ErrorPanel = __decorate([
        Jassi_45.$Class("jassi.ui.ErrorPanel"),
        __metadata("design:paramtypes", [])
    ], ErrorPanel);
    exports.ErrorPanel = ErrorPanel;
    function test() {
        var ret = new ErrorPanel();
        return ret;
    }
    exports.test = test;
    ;
    ErrorPanel.prototype["onsrclink"] = function (param) {
        var data = param.text.split(":");
        if (data[1] === "")
            return;
        Router_3.router.navigate("#do=jassi.ui.CodeEditor&file=" + data[0] + "&line=" + data[1]);
        // jassi.ui.CodeEditor.open(param.text);
    };
    Jassi_45.default.ErrorPanel = ErrorPanel;
});
define("jassi/ui/FileExplorer", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Tree", "jassi/ui/Panel", "jassi/ui/Textbox", "remote/jassi/base/Server", "jassi/base/Router", "jassi/base/Actions", "jassi/ui/OptionDialog", "jassi/util/Typescript", "jassi/ui/ContextMenu"], function (require, exports, Jassi_46, Tree_3, Panel_14, Textbox_3, Server_4, Router_4, Actions_7, OptionDialog_7, Typescript_7, ContextMenu_3) {
    "use strict";
    var FileExplorer_4;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.FileExplorer = exports.FileActions = void 0;
    //drag from Desktop https://www.html5rocks.com/de/tutorials/file/dndfiles/
    let FileActions = class FileActions {
        static async newFile(all, fileName = undefined, code = "", open = false) {
            if (all.length === 0 || !all[0].isDirectory())
                return;
            var path = all[0].fullpath;
            if (fileName === undefined) {
                var res = await OptionDialog_7.OptionDialog.show("Enter file name:", ["ok", "cancel"], undefined, true, ".ts");
                if (res.button === "ok" && res.text !== all[0].name) {
                    fileName = res.text;
                }
                else
                    return;
            }
            console.log("create " + fileName);
            var key = FileExplorer.instance.tree.getKeyFromItem(all[0]);
            var newfile = path + "/" + fileName;
            var ret = await new Server_4.Server().createFile(newfile, code);
            var newkey = path + "|" + fileName;
            if (ret !== "") {
                alert(ret);
                return;
            }
            await FileExplorer.instance.refresh();
            FileExplorer.instance.tree.activateKey(newkey);
            if (open)
                Router_4.router.navigate("#do=jassi.ui.CodeEditor&file=" + newkey.replaceAll("|", "/"));
        }
        static async download(all) {
            if (all.length === 0 || !all[0].isDirectory())
                return;
            var path = all[0].fullpath;
            var url = "/zip?path=client/" + path;
            if (all[0].name === "client" && all[0].fullpath === "")
                url = "/zip?path=client";
            if (all[0].name === "server" && all[0].fullpath === "")
                url = "/zip?path=server";
            var link = document.createElement('a');
            document.body.appendChild(link);
            link.href = url;
            link.click();
            link.remove();
        }
        static async newFolder(all) {
            if (all.length === 0 || !all[0].isDirectory())
                return;
            var path = all[0].fullpath;
            var res = await OptionDialog_7.OptionDialog.show("Enter file name:", ["ok", "cancel"], undefined, true, "");
            if (res.button === "ok" && res.text !== all[0].name) {
                console.log("create Folder" + res.text);
                var key = FileExplorer.instance.tree.getKeyFromItem(all[0]);
                var newfile = path + "/" + res.text;
                var ret = await new Server_4.Server().createFolder(newfile);
                var newkey = path + "|" + res.text;
                if (ret !== "") {
                    alert(ret);
                    return;
                }
                await FileExplorer.instance.refresh();
                FileExplorer.instance.tree.activateKey(newkey);
            }
        }
        static async dodelete(all) {
            var s = "";
            all.forEach((node) => {
                s = s + "" + node.fullpath + "<br/>";
            });
            var res = await OptionDialog_7.OptionDialog.show("Delete this?<br/>" + s, ["ok", "cancel"], undefined, true);
            if (res.button === "ok" && res.text !== all[0].name) {
                var ret = await new Server_4.Server().delete(all[0].fullpath);
                if (ret !== "") {
                    alert(ret);
                    return;
                }
                var key = FileExplorer.instance.tree.getKeyFromItem(all[0].parent);
                await FileExplorer.instance.refresh();
                FileExplorer.instance.tree.activateKey(key);
            }
        }
        static async rename(all) {
            if (all.length !== 1)
                alert("only one file could be renamed");
            else {
                var res = await OptionDialog_7.OptionDialog.show("Enter new name:", ["ok", "cancel"], undefined, true, all[0].name);
                if (res.button === "ok" && res.text !== all[0].name) {
                    console.log("rename " + all[0].name + " to " + res.text);
                    var key = FileExplorer.instance.tree.getKeyFromItem(all[0]);
                    var path = all[0].parent !== undefined ? all[0].parent.fullpath : "";
                    var newfile = path + "/" + res.text;
                    var ret = await new Server_4.Server().rename(all[0].fullpath, newfile);
                    var newkey = key.replace(all[0].name, res.text);
                    if (ret !== "") {
                        alert(ret);
                        return;
                    }
                    if (!all[0].isDirectory())
                        Typescript_7.default.renameFile(all[0].fullpath, newfile);
                    await FileExplorer.instance.refresh();
                    FileExplorer.instance.tree.activateKey(newkey);
                }
            }
        }
        static async refresh(all) {
            var key = FileExplorer.instance.tree.getKeyFromItem(all[0]);
            await FileExplorer.instance.refresh();
            FileExplorer.instance.tree.activateKey(key);
        }
        static async open(all) {
            var node = all[0];
            if (node.isDirectory())
                return;
            Router_4.router.navigate("#do=jassi.ui.CodeEditor&file=" + node.fullpath);
        }
    };
    __decorate([
        Actions_7.$Action({
            name: "New/File",
            isEnabled: function (all) {
                return all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, String, String, Boolean]),
        __metadata("design:returntype", Promise)
    ], FileActions, "newFile", null);
    __decorate([
        Actions_7.$Action({
            name: "Download",
            isEnabled: function (all) {
                return all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "download", null);
    __decorate([
        Actions_7.$Action({
            name: "New/Folder",
            isEnabled: function (all) {
                return all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "newFolder", null);
    __decorate([
        Actions_7.$Action({ name: "Delete" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "dodelete", null);
    __decorate([
        Actions_7.$Action({ name: "Rename" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "rename", null);
    __decorate([
        Actions_7.$Action({ name: "Refresh" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "refresh", null);
    __decorate([
        Actions_7.$Action({
            name: "Open",
            isEnabled: function (all) {
                return !all[0].isDirectory();
            }
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", Promise)
    ], FileActions, "open", null);
    FileActions = __decorate([
        Actions_7.$ActionProvider("jassi.base.FileNode"),
        Jassi_46.$Class("jassi.ui.FileActions")
    ], FileActions);
    exports.FileActions = FileActions;
    let FileExplorer = FileExplorer_4 = class FileExplorer extends Panel_14.Panel {
        constructor() {
            super();
            FileExplorer_4.instance = this;
            //this.maximize();
            $(this.dom).css("width", "calc(100% - 8px)");
            $(this.dom).css("height", "calc(100% - 25px)"); //why 25????
            this.tree = new Tree_3.Tree();
            this.search = new Textbox_3.Textbox();
            this.layout();
        }
        async refresh() {
            let root = (await new Server_4.Server().dir());
            root.fullpath = "";
            root.name = "client";
            var keys = this.tree.getExpandedKeys();
            this.tree.items = [root];
            keys.push("client");
            await this.tree.expandKeys(keys);
        }
        async layout() {
            var _this = this;
            this.tree.width = "100%";
            this.tree.height = "100%";
            super.add(this.search);
            super.add(this.tree);
            this.tree.propDisplay = "name";
            this.tree.propChilds = "files";
            let context = new ContextMenu_3.ContextMenu();
            this.tree.contextMenu = context;
            context.includeClassActions = true;
            this.refresh();
            this.add(this.tree);
            // this._files.files;
            this.tree.onclick(function (evt) {
                if (evt.data !== undefined) {
                    FileActions.open([evt.data]);
                }
            });
            $("#" + this._id).css("flow", "visible");
            this.search.onkeydown(function (evt) {
                window.setTimeout(() => {
                    _this.tree.filter(_this.search.value);
                    if (evt.code === "Enter") {
                        //_this.tree.
                    }
                }, 100);
            });
        }
    };
    FileExplorer.instance = undefined;
    FileExplorer = FileExplorer_4 = __decorate([
        Jassi_46.$Class("jassi.ui.FileExplorer"),
        __metadata("design:paramtypes", [])
    ], FileExplorer);
    exports.FileExplorer = FileExplorer;
    function test() {
        return new FileExplorer();
    }
    exports.test = test;
});
define("jassi/ui/HTMLEditorPanel", ["require", "exports", "jassi/ui/Panel", "jassi/ui/HTMLPanel", "jassi/ui/Button", "remote/jassi/base/Jassi", "jassi/ext/tinymce", "remote/jassi/base/Registry"], function (require, exports, Panel_15, HTMLPanel_3, Button_8, Jassi_47, tinymce_1, Registry_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTMLEditorPanel = void 0;
    class Me {
    }
    let HTMLEditorPanel = class HTMLEditorPanel extends Panel_15.Panel {
        constructor(id = undefined) {
            super();
            this.layout();
        }
        async layout() {
            var me = this.me = {};
            me.IDHtml = new HTMLPanel_3.HTMLPanel();
            me.IDChange = new Button_8.Button();
            this.add(me.IDHtml);
            this.add(me.IDChange);
            //me.IDHtml.text="Hallo";
            var randclass = "ed" + Registry_17.default.nextID();
            $(me.IDHtml.dom).addClass(randclass);
            me.IDChange.text = "OK";
            me.IDChange.onclick(function (event) {
            });
            /*	 $(randclass).tinymce({
                 //	script_url : '../js/tinymce/tinymce.min.js',
                         statusbar: false,
                            //toolbar: true,
                            menubar: false
                 });*/
            // tinymce.activeEditor.destroy();
            var editor = await tinymce_1.default.init({
                statusbar: false,
                //toolbar: true,
                menubar: false,
                selector: '.' + randclass,
            });
            // editor.setContent("Hallo");
            //tinymce.activeEditor.remove();
            //tinymce.execCommand('mceRemoveControl', true, '');
            // me.IDHtml.height="calc(100% - 50px)";
        }
        set value(val) {
            var el = this.dom.children[0];
            if (el === undefined) {
                el = document.createTextNode(val);
                this.dom.appendChild(el);
            }
            else
                $(el).html(val);
        }
        get value() {
            var el = this.dom.children[0];
            if (el === undefined)
                return "";
            return $(el).html();
        }
    };
    HTMLEditorPanel = __decorate([
        Jassi_47.$Class("jassi.ui.HTMLEditorPanel"),
        __metadata("design:paramtypes", [Object])
    ], HTMLEditorPanel);
    exports.HTMLEditorPanel = HTMLEditorPanel;
    Jassi_47.default.test = async function () {
        var dlg = new HTMLEditorPanel();
        //	dlg.value=jassi.db.load("de.Kunde",9);	
        return dlg;
    };
});
// return CodeEditor.constructor;
define("jassi/ui/HTMLPanel", ["require", "exports", "jassi/ui/Component", "remote/jassi/base/Jassi", "jassi/ui/Property"], function (require, exports, Component_14, Jassi_48, Property_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTMLPanel = void 0;
    var bugtinymce = undefined;
    let HTMLPanel = class HTMLPanel extends Component_14.Component {
        /*[
            'undo redo | bold italic underline | fontsizeselect', //fontselect
            'forecolor backcolor | numlist bullist outdent indent'
        ];*/
        constructor(id = undefined) {
            super();
            this.toolbar = ['undo redo | bold italic underline', 'forecolor backcolor | fontsizeselect  '];
            super.init($('<div class="HTMLPanel"><div class="HTMLPanelContent"> </div></div>')[0]);
            //  super.init($('<div class="HTMLPanel"></div>')[0]);
            var el = this.dom.children[0];
            this._designMode = false;
            this.newlineafter = false;
            // $(this.__dom).css("min-width", "10px");
        }
        get newlineafter() {
            return $(this.dom).css("display") === "inline-block";
        }
        set newlineafter(value) {
            $(this.dom).css("display", value ? "" : "inline-block");
            $(this.dom.children[0]).css("display", value ? "" : "inline-block");
        }
        /**
         * @member {string} code - htmlcode of the component
         **/
        set value(code) {
            var el = this.dom.children[0];
            if (el === undefined) {
                el = document.createTextNode(code);
                this.dom.appendChild(el);
            }
            else
                $(el).html(code);
        }
        get value() {
            var el = this.dom.children[0];
            if (el === undefined)
                return "";
            var ret = $(el).html();
            return ret;
        }
        /**
         * @member {boolean} - the component could be edited
         */
        set editAllowed(value) {
            /*	this._editAllowed=value;
                if(enable){
                    requirejs(["tinymce"],function(){
                        _this._tcm=tinymce.init({
                            
                                //menubar: false,
                                //statusbar: false,
                                //toolbar: false,
                                selector: '#'+_this._id,//'.HTMLPanel',
                                inline: true,
                                setup:function(ed) {
                                    
                                   ed.on('blur', function(e) {
                                        if($("#"+ed.id)[0]===undefined)
                                            return;
                                       var html=$("#"+ed.id)[0]._this;
                                       var text= ed.getContent();
                                       text='"'+text.substring(31,text.length-7).replaceAll("\"","\\\"")+'"';
                                       _this.value=text;
                                   });
                               }
                            });
                        });
                }else{
                    console.log("dest");
                    tinymce.editors[_this._id].destroy();
                }*/
        }
        get editAllowed() {
            return this._editAllowed;
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                return this._setDesignMode(action.componentDesignerSetDesignMode.enable, action.componentDesignerSetDesignMode.componentDesigner);
            }
            super.extensionCalled(action);
        }
        /**
         * activates or deactivates designmode
         * @param {boolean} enable - true if activate designMode
         * @param {jassi.ui.ComponentDesigner} editor - editor instance
         */
        _setDesignMode(enable, editor) {
            var _this = this;
            this._designMode = enable;
            if (enable) {
                console.log("activate tiny");
                requirejs(["jassi/ext/tinymce"], function (tinymcelib) {
                    if (!bugtinymce) { //https://stackoverflow.com/questions/20008384/tinymce-how-do-i-prevent-br-data-mce-bogus-1-text-in-editor
                        const tinymceBind = window["tinymce"].DOM.bind;
                        window["tinymce"].DOM.bind = (target, name, func, scope) => {
                            // TODO This is only necessary until https://github.com/tinymce/tinymce/issues/4355 is fixed
                            if (name === 'mouseup' && func.toString().includes('throttle()')) {
                                return func;
                            }
                            else {
                                return tinymceBind(target, name, func, scope);
                            }
                        };
                    }
                    var tinymce = window["tinymce"]; //oder tinymcelib.default
                    var config = {
                        //	                valid_elements: 'strong,em,span[style],a[href],ul,ol,li',
                        //  valid_styles: {
                        //    '*': 'font-size,font-family,color,text-decoration,text-align'
                        //  },
                        menubar: false,
                        //statusbar: false,
                        selector: '#' + _this._id,
                        inline: true,
                        setup: function (ed) {
                            ed.on('change', function (e) {
                                var text = _this.dom.firstElementChild.innerHTML;
                                console.log(text);
                                if (text === '<br data-mce-bogus="1">')
                                    text = "";
                                editor._propertyEditor.setPropertyInCode("value", '"' + text.replaceAll('"', "'") + '"', true);
                            });
                            ed.on('blur', function (e) {
                                if (_this._designMode === false)
                                    return;
                                //editor.editDialog(false);
                                if ($("#" + ed.id)[0] === undefined)
                                    return;
                                editor._draganddropper.enableDraggable(true);
                                //editor.editDialog(true);
                            });
                        }
                    };
                    if (_this["toolbar"])
                        config["toolbar"] = _this["toolbar"];
                    var sic = _this.value;
                    _this._tcm = tinymce.init(config); //changes the text to <br> if empty - why?
                    if (sic === "" && _this.value !== sic)
                        _this.value = "";
                    //_this.value=sic;
                    $(_this.dom).doubletap(function (e) {
                        if (_this._designMode === false)
                            return;
                        var sic = editor._draganddropper.draggableComponents;
                        editor._draganddropper.enableDraggable(false);
                        //	editor._draganddropper.uninstall();
                        //editor._resizer.uninstall();
                        /*   var sel = _this._id;
                           if (tinymce !== undefined && tinymce.editors[sel] !== undefined) {
                               //$(e.currentTarget.parentNode._this.domWrapper).draggable('disable');
                               tinymce.editors[sel].fire('focus');
                           }*/
                    });
                });
            } //else
            //	tinymce.editors[_this._id].destroy();
        }
        destroy() {
            super.destroy();
        }
    };
    __decorate([
        Property_18.$Property({ description: "line break after element", default: false }),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Object])
    ], HTMLPanel.prototype, "newlineafter", null);
    __decorate([
        Property_18.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], HTMLPanel.prototype, "value", null);
    HTMLPanel = __decorate([
        Component_14.$UIComponent({ fullPath: "common/HTMLPanel", icon: "mdi mdi-cloud-tags" /*, initialize: { value: "text" } */ }),
        Jassi_48.$Class("jassi.ui.HTMLPanel"),
        __metadata("design:paramtypes", [Object])
    ], HTMLPanel);
    exports.HTMLPanel = HTMLPanel;
});
define("jassi/ui/Image", ["require", "exports", "jassi/ui/Component", "jassi/ui/Property", "remote/jassi/base/Jassi"], function (require, exports, Component_15, Property_19, Jassi_49) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Image = void 0;
    let Image = class Image extends Component_15.Component {
        /* get dom(){
             return this.dom;
         }*/
        constructor() {
            super();
            //  var img=$('<div >')[0];
            //super.init($('<img vspace="0" hspace="0"  border="0"  src="" alt="">')[0]);
            super.init($('<span><img vspace="0" hspace="0"  border="0"  src="" alt=""></span>')[0]);
        }
        onclick(handler) {
            $("#" + this._id).click(function () {
                handler();
            });
        }
        /**
        * @member {string} - link to image
        */
        set src(icon) {
            $(this.dom).removeClass();
            $(this.dom.children[0]).attr("src", "");
            if (icon === null || icon === void 0 ? void 0 : icon.startsWith("mdi ")) {
                $(this.dom).addClass(icon);
            }
            else {
                $(this.dom.children[0]).attr("src", icon);
            }
        }
        get src() {
            var ret = $(this.dom).attr("src");
            if (ret === "")
                return $(this.dom).attr('class');
            else
                return ret;
            //            return $(this.dom).attr("src");
        }
    };
    __decorate([
        Property_19.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Image.prototype, "src", null);
    Image = __decorate([
        Component_15.$UIComponent({ fullPath: "default/Image", icon: "mdi mdi-file-image" }) //
        ,
        Jassi_49.$Class("jassi.ui.Image"),
        __metadata("design:paramtypes", [])
    ], Image);
    exports.Image = Image;
});
define("jassi/ui/Menu", ["require", "exports", "jassi/jassi", "jassi/ui/Container", "jassi/ui/Property", "jassi/ui/MenuItem", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/DesignDummy"], function (require, exports, jassi_2, Container_4, Property_20, MenuItem_3, Jassi_50, Component_16, DesignDummy_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Menu = void 0;
    /*declare global {
        interface JQuery {
                //menu: any;
        }
    }*/
    let Menu = class Menu extends Container_4.Container {
        constructor(options = undefined) {
            super();
            this._isRoot = true;
            super.init($('<ul ' + ` style="Menu"></ul>`)[0]);
            if (options !== undefined && options.noUpdate === true) {
                this._noUpdate = true;
            }
            else
                $(this.dom).menu();
            this._text = "";
            this._icon = "";
        }
        _sample() {
            super.init($('<ul ' + ` class="Menu">
<li>  <div><img  src="res/car.ico" />Save</div></li>
<li title="create button" onclick="doCreate()"><div><img  src="res/car.ico" />Create</div>
    <ul class="Menu" style="visibility:hidden">
    <li title="add new" onclick="doCreate()"><div><img  src="res/add-component.ico" /></div></li>
    </ul>
</li>
<li title="update button2"> <div> <img src="res/tree.ico" />Update2</div>
    <ul style="Menu">
      <li> <div><img   src="res/car.ico" />Hoho</div></li>
     <li title="add new" onclick="doCreate()"><div><img  src="res/add-component.ico" /></div></li>
      </ul>
</li>
<li title="add new" onclick="doCreate()"><div><img  src="res/add-component.ico" /></div></li>
</ul>`)[0]);
        }
        _menueChanged() {
            if (this._isRoot && this._noUpdate !== true) {
                $(this.dom).menu();
                $(this.dom).menu("destroy");
                $(this.dom).menu();
            }
            if (this._parent !== undefined && this._parent._menueChanged !== undefined)
                this._parent._menueChanged();
        }
        getMainMenu() {
            if (this._parent !== undefined && this._parent.getMainMenu !== undefined)
                return this._parent.getMainMenu();
            if (this._mainMenu !== undefined)
                return this._mainMenu;
            return this;
        }
        /**
        * adds a component to the container before an other component
        * @param {jassi.ui.Component} component - the component to add
        * @param {jassi.ui.Component} before - the component before then component to add
        */
        addBefore(component, before) {
            super.addBefore(component, before);
            this._menueChanged();
        }
        /**
          * adds a component to the container
          * @param {jassi.ui.Menu} component - the component to add
          */
        add(component) {
            if (this._designDummy !== undefined && this._components[this._components.length - 1] === this._designDummy)
                super.addBefore(component, this._designDummy);
            else
                super.add(component);
            this._menueChanged();
        }
        onclick(handler) {
            $("#" + this._id).click(function (ob) {
                handler(ob);
            });
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                return this._setDesignMode(action.componentDesignerSetDesignMode.enable);
            }
            super.extensionCalled(action);
        }
        /**
        * activates or deactivates designmode
        * @param {boolean} enable - true if activate designMode
        */
        _setDesignMode(enable) {
            this._designMode = enable;
            if (enable) { //dummy at the end
                DesignDummy_3.DesignDummy.createIfNeeded(this, "atEnd", undefined, MenuItem_3.MenuItem);
                /*            if(this._designDummy===undefined){
                                this._designDummy=new MenuItem();
                                this._designDummy.icon="res/add-component.ico";
                                $(this._designDummy.domWrapper).removeClass("jcomponent");
                                this._designDummy.designDummyFor="atEnd";
                                this.add(this._designDummy);
                            }else if(this._designDummy!==undefined&& this["isAbsolute"]===true){//TODO isAbsolute relevant?
                                this.remove(this._designDummy);
                                this._designDummy=undefined;
                            }*/
            }
            else {
                DesignDummy_3.DesignDummy.destroyIfNeeded(this, "atEnd");
                /* if(this._designDummy!==undefined){
                    this.remove(this._designDummy);
                    this._designDummy=undefined;
                }*/
            }
        }
        destroy() {
            $(this.dom).menu();
            $(this.dom).menu("destroy");
            super.destroy();
        }
    };
    __decorate([
        Property_20.$Property({ name: "onclick", type: "function", default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Menu.prototype, "onclick", null);
    Menu = __decorate([
        Component_16.$UIComponent({ fullPath: "common/Menu", icon: "mdi mdi-menu", initialize: { text: "menu" } }),
        Jassi_50.$Class("jassi.ui.Menu"),
        __metadata("design:paramtypes", [Object])
    ], Menu);
    exports.Menu = Menu;
    jassi_2.default.test = async function () {
        // kk.o=0;
        var menu = new Menu();
        menu.width = 200;
        /*	var save=new jassi.ui.Menu();
            var save2=new jassi.ui.Menu();
        
            menu.add(save);
            save.onclick(function(){
                alert("ok");
            });
            save.text="dd";
            menu.add(save2);
            save2.text="pppq";
            save2.icon="res/button";
            save2.onclick(function(event){
                
            });*/
        return menu;
    };
});
define("jassi/ui/MenuItem", ["require", "exports", "jassi/jassi", "jassi/ui/Component", "jassi/ui/Menu", "jassi/ui/Property", "remote/jassi/base/Jassi", "jassi/ui/Container"], function (require, exports, jassi_3, Component_17, Menu_2, Property_21, Jassi_51, Container_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MenuItem = void 0;
    //jassi.myRequire("lib/contextMenu.css");
    let MenuItem = class MenuItem extends Container_5.Container {
        constructor() {
            super();
            super.init($('<li style="white-space: nowrap"><div><img class="menuitemicon" src="res/dummy.ico"/><span class="menuitemtext">.</span></div></li>')[0], { noWrapper: true });
            $(this.dom).addClass("designerNoResizable");
            this._text = "";
            this._icon = "";
            this.items = new Menu_2.Menu();
            $(this.items.dom).menu("destroy");
            this.items._parent = this;
            this._components = [this.items]; //neede for getEditableComponents
            delete this.items._isRoot;
        }
        onclick(handler) {
            var _this = this;
            $("#" + this._id).click(function (ob) {
                handler(ob);
                //_this.this.items._parent.close();
            });
        }
        /**
        * @member {string} - the icon of the button
        */
        set icon(icon) {
            this._icon = icon;
            if (icon === "")
                icon = "res/dummy.ico";
            $(this.dom).find(".menuitemicon").attr("src", icon);
        }
        get icon() {
            var ret = $(this.dom).find(".menuitemicon").attr("src");
            if (ret === "res/dummy.ico")
                ret = "";
            return ret;
        }
        /**
         * @member {string} - the caption of the button
         */
        set text(value) {
            //<li><div><img  src="res/car.ico" /><span>Save</span></div></li>
            this._text = value;
            var h;
            $(this.dom).find(".menuitemtext")[0].innerText = value;
        }
        get text() {
            return $(this.dom).find(".menuitemtext")[0].innerText;
        }
        destroy() {
            super.destroy();
            this.items.destroy;
        }
        getMainMenu() {
            if (this._parent !== undefined && this._parent.getMainMenu !== undefined)
                return this._parent.getMainMenu();
            if (this._mainMenu !== undefined)
                return this._mainMenu;
            return undefined;
        }
        _menueChanged() {
            if (this.items._components.length > 0 && this.items.dom.parentNode !== this.dom) {
                this.items.dom.parentNode.removeChild(this.items.dom);
                this.dom.appendChild(this.items.dom);
                $(this.items.dom).addClass("jcontainer"); //for drop-target
            }
            if (this.items._components.length > 0)
                $(this.dom).addClass("iw-has-submenu");
            else
                $(this.dom).removeClass("iw-has-submenu");
            if (this._parent !== undefined && this._parent._menueChanged !== undefined)
                this._parent._menueChanged();
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                this._designMode = action.componentDesignerSetDesignMode.enable;
                return this.items.extensionCalled(action); //setDesignMode(enable);
            }
            if (action.componentDesignerComponentCreated) {
                var x = 0;
                var test = this.getMainMenu();
                if (test !== undefined) {
                    //$(test.menu.dom).css("display","inline-block");//
                    test._menueChanged();
                }
                return;
                //var design=codeeditor._design.dom;
                //component.show({top:$(design).offset().top+30,left:$(design).offset().left+5});
            }
            super.extensionCalled(action);
        }
    };
    __decorate([
        Property_21.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MenuItem.prototype, "onclick", null);
    __decorate([
        Property_21.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MenuItem.prototype, "icon", null);
    __decorate([
        Property_21.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MenuItem.prototype, "text", null);
    MenuItem = __decorate([
        Component_17.$UIComponent({ fullPath: "common/MenuItem", icon: "mdi mdi-menu-open", initialize: { text: "menu" }, editableChildComponents: ["items"] }),
        Jassi_51.$Class("jassi.ui.MenuItem"),
        __metadata("design:paramtypes", [])
    ], MenuItem);
    exports.MenuItem = MenuItem;
    jassi_3.default.test = async function () {
        // kk.o=0;
        var menu = new Menu_2.Menu();
        var save = new MenuItem();
        var save2 = new MenuItem();
        menu.width = 200;
        menu.add(save);
        save.onclick(function () {
            alert("ok");
        });
        save.text = "dd";
        menu.add(save2);
        save2.text = "pppq";
        save2.icon = "res/button";
        save2.onclick(function (event) {
        });
        return menu;
    };
});
define("jassi/ui/MonacoPanel", ["require", "exports", "remote/jassi/base/Jassi", "jassi/base/Router", "jassi/util/Typescript", "remote/jassi/base/Server", "jassi/ui/CodePanel", "jassi/base/Debugger", "jassi/ext/monaco"], function (require, exports, Jassi_52, Router_5, Typescript_8, Server_5, CodePanel_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.MonacoPanel = void 0;
    var inited = false;
    function __init(editor) {
        if (inited)
            return;
        //auto import 
        const cs = editor._commandService;
        var CommandsRegistry = require("vs/platform/commands/common/commands").CommandsRegistry;
        CommandsRegistry.registerCommand("autoimport", (o1, model, pos) => {
            var file = model.uri.path.substring(1);
            var p = Typescript_8.default.getPositionOfLineAndCharacter(file, {
                line: pos.lineNumber, character: pos.column
            });
            setTimeout(() => {
                CodePanel_3.CodePanel.getAutoimport(p, file, undefined).then((data) => {
                    if (data !== undefined) {
                        model.pushEditOperations([], [{
                                range: monaco.Range.fromPositions({ column: data.pos.column, lineNumber: data.pos.row }),
                                text: data.text
                            }], () => null);
                    }
                });
            }, 100);
        });
        //implement go to definition
        const editorService = editor["_codeEditorService"];
        const openEditorBase = editorService.openCodeEditor.bind(editorService);
        editorService.openCodeEditor = async (input, source) => {
            const result = await openEditorBase(input, source);
            if (result === null) {
                var file = input.resource.path.substring(1);
                var line = input.options.selection.startLineNumber;
                Router_5.router.navigate("#do=jassi.ui.CodeEditor&file=" + file + "&line=" + line);
            }
            return result; // always return the base result
        };
        //completion for autonimport
        monaco.languages.registerCompletionItemProvider('typescript', {
            provideCompletionItems: async function (model, position) {
                var textUntilPosition = model.getValueInRange({ startLineNumber: 1, startColumn: 1, endLineNumber: position.lineNumber, endColumn: position.column });
                var word = model.getWordUntilPosition(position);
                var range = {
                    startLineNumber: position.lineNumber,
                    endLineNumber: position.lineNumber,
                    startColumn: word.startColumn,
                    endColumn: word.endColumn
                };
                var file = model.uri.path.substring(1);
                var pos = Typescript_8.default.getPositionOfLineAndCharacter(file, { line: position.lineNumber, character: position.column });
                var all = await Typescript_8.default.getCompletion(file, pos, undefined, { includeExternalModuleExports: true });
                var sug = [];
                for (var x = 0; x < all.entries.length; x++) {
                    var it = all.entries[x];
                    if (it.kindModifiers === "export" && it.hasAction === true) {
                        var item = {
                            label: it.name,
                            kind: it.kind,
                            documentation: "import from " + it.source,
                            insertText: it.name,
                            range: range,
                            command: {
                                arguments: [model, position],
                                id: "autoimport",
                                title: "autoimport"
                            }
                        };
                        sug.push(item);
                    }
                }
                return {
                    suggestions: sug
                };
            }
        });
        inited = true;
    }
    /**
    * wrapper for the Ace-Code editor with Typesccript-Code-Completion an other features
    * @class jassi.ui.CodePanel
    */
    let MonacoPanel = class MonacoPanel extends CodePanel_3.CodePanel {
        constructor() {
            super();
            var _this = this;
            // super.init($('<div style="width: 800px; height: 600px; border: 1px solid grey"></div>')[0]);
            var test = $('<div class="MonacoPanel" style="height: 100px; width: 100px"></div>')[0];
            super.init(test);
            $(this.domWrapper).css("overflow", "hidden");
            $(this.domWrapper).css("display", "");
            /* _this._editor.on("guttermousedown", function(e) {
     
                 var row = e.getDocumentPosition().row;
                 var breakpoints = e.editor.session.getBreakpoints(row, 0);
                 var type = "debugpoint";
                 if (e.domEvent.ctrlKey)
                     type = "checkpoint";
                 var column = _this._editor.session.getLine(row).length;
                 if (typeof breakpoints[row] === typeof undefined) {
                     e.editor.session.setBreakpoint(row);
                     _this.callEvent("breakpointChanged", row, column, true, type);
                 } else {
                     e.editor.session.clearBreakpoint(row, false, undefined);
                     _this.callEvent("breakpointChanged", row, column, false, type);
                 }
             });*/
            this._editor = monaco.editor.create(this.dom, {
                //value:  monaco.editor.getModels()[0], //['class A{b:B;};\nclass B{a:A;};\nfunction x() {', '\tconsole.log("Hello world!");', '}'].join('\n'),
                language: 'typescript',
                theme: "vs-light",
                glyphMargin: true,
                fontSize: 12,
                automaticLayout: true
            });
            __init(this._editor);
            this._editor.onMouseDown(function (e) {
                _this._mouseDown(e);
            });
            //this._editor.setModel(monaco.editor.getModels() [1]);
        }
        getBreakpointDecoration(line) {
            var decs = this._editor.getLineDecorations(line);
            for (var x = 0; x < decs.length; x++) {
                if (decs[x].options.glyphMarginClassName === "jbreackpoint")
                    return decs[x];
            }
            return undefined;
        }
        _mouseDown(e) {
            if (e.target.type === 2) {
                var line = e.target.position.lineNumber;
                var column = this._editor.getModel().getLineContent(line - 1).length;
                var type = "debugpoint";
                var dec = this.getBreakpointDecoration(line);
                if (dec) {
                    this._editor.deltaDecorations([dec.id], []);
                    this.callEvent("breakpointChanged", line - 1, column, false, type);
                }
                else {
                    this.callEvent("breakpointChanged", line - 1, column, true, type);
                    var decorations = this._editor.deltaDecorations([], [
                        {
                            range: new monaco.Range(line, 1, line, 1),
                            options: {
                                isWholeLine: true,
                                className: 'jbreackpointclass',
                                glyphMarginClassName: 'jbreackpoint'
                            }
                        }
                    ]);
                }
            }
        }
        /**
         * gets a list of all lines with breakpoint
         * @returns {Object.<number, boolean>}
         */
        getBreakpoints() {
            var ret = {};
            var decs = this._editor.getModel().getLineCount();
            for (var x = 1; x <= this._editor.getModel().getLineCount(); x++) {
                if (this.getBreakpointDecoration(x)) {
                    ret[x - 1] = true;
                }
            }
            return ret;
        }
        /**
         * breakpoint changed
         * @param {function} handler - function(line,enabled,type)
         */
        onBreakpointChanged(handler) {
            this.addEvent("breakpointChanged", handler);
        }
        /**
         * component get focus
         * @param {function} handler
         */
        onfocus(handler) {
            //   this._editor.on("focus", handler);
        }
        /**
         * component lost focus
         * @param {function} handler
         */
        onblur(handler) {
            // this._editor.on("blur", handler);
        }
        /**
         * @param - the codetext
         */
        set value(value) {
            var lastcursor = this.cursorPosition;
            if (this.file) {
                var ffile = monaco.Uri.from({ path: "/" + this.file, scheme: 'file' });
                var mod = monaco.editor.getModel(ffile);
                if (!mod) {
                    mod = monaco.editor.createModel(value, "typescript", ffile);
                    this._editor.setModel(mod);
                    this._editor.setValue(value);
                }
                else if (mod !== this._editor.getModel()) {
                    this._editor.setModel(mod);
                    this._editor.setValue(value);
                }
                else {
                    this._editor.getModel().pushEditOperations([], [{
                            range: this._editor.getModel().getFullModelRange(),
                            text: value
                        }], () => null);
                }
            }
            else
                this._editor.setValue(value);
        }
        get value() {
            return this._editor.getValue();
        }
        /**
         * @param {object} position - the current cursor position {row= ,column=}
         */
        set cursorPosition(cursor) {
            this._editor.focus();
            try {
                this._editor.revealLine(cursor.row);
                //this._editor.setPosition({ column: cursor.column, lineNumber: cursor.row });
            }
            catch (_a) {
            }
        }
        get cursorPosition() {
            var pos = this._editor.getPosition();
            return {
                row: pos.lineNumber,
                column: pos.column
            };
        }
        destroy() {
            //this._editor.destroy();
            super.destroy();
        }
        /**
        * undo action
        */
        undo() {
            //@ts-ignore
            this._editor.getModel().undo();
        }
        /**
         * resize the editor
         * */
        resize() {
            //
            //   this._editor.resize();
        }
        /**
       * @member {string} - the language of the editor e.g. "ace/mode/javascript"
       */
        set mode(mode) {
            //  alert(mode);
            this._mode = mode;
            //  this._editor.getSession().setMode("ace/mode/" + mode);
        }
        get mode() {
            return this._mode;
        }
        async loadsample() {
            var code = await new Server_5.Server().loadFile("a/Dialog.ts");
            this.file = "a/Dialog.ts";
            this.value = code;
        }
    };
    MonacoPanel = __decorate([
        Jassi_52.$Class("jassi.ui.MonacoPanel"),
        __metadata("design:paramtypes", [])
    ], MonacoPanel);
    exports.MonacoPanel = MonacoPanel;
    async function test() {
        var dlg = new MonacoPanel();
        var code = await new Server_5.Server().loadFile("a/Dialog.ts");
        dlg.file = "a/Dialog.ts";
        dlg.value = code;
        dlg.width = "800";
        dlg.height = "800";
        //@ts-ignore
        dlg._editor.layout();
        //    dlg.value = "var h;\r\nvar k;\r\nvar k;\r\nvar k;\r\nconsole.debug('ddd');";
        //  dlg.mode = "javascript";
        //dlg._editor.renderer.setShowGutter(false);		
        //dlg._editor.getSession().addGutterDecoration(1,"error_line");
        //  dlg._editor.getSession().setBreakpoint(1);
        // dlg._editor.getSession().setBreakpoint(2);
        return dlg;
    }
    exports.test = test;
});
define("jassi/ui/ObjectChooser", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Table", "jassi/ui/Panel", "jassi/ui/Button", "jassi/ui/Textbox", "jassi/ui/Property", "jassi/ui/Component", "remote/jassi/base/Classes"], function (require, exports, Jassi_53, Table_4, Panel_16, Button_9, Textbox_4, Property_22, Component_18, Classes_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.ObjectChooser = void 0;
    /*
    https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/
    */
    class Me {
    }
    let ObjectChooser = class ObjectChooser extends Button_9.Button {
        constructor() {
            super();
            /**
            * @member {number} - the height of the dialog
            */
            this.dialogHeight = 300;
            /**
            * @member {number} - the width of the dialog
            */
            this.dialogWidth = 450;
            this.layout();
        }
        get title() {
            return "Select";
        }
        layout() {
            var me = this.me = {};
            var _this = this;
            this.autocommit = true;
            this.text = "";
            this.onclick(function (event) {
                if (_this.value !== undefined) {
                    me.IDTable.value = _this.value;
                }
                var dlg = $(me.IDPanel.dom).dialog({
                    width: _this.dialogWidth,
                    height: _this.dialogHeight,
                    modal: true
                    /*beforeClose: function(event, ui) {
                       
                    } */
                });
                _this.callEvent("showDialog", event);
            });
            this.icon = "mdi mdi-glasses";
            me.IDPanel = new Panel_16.Panel();
            me.IDCancel = new Button_9.Button();
            var _this = this;
            me.IDSearch = new Textbox_4.Textbox();
            me.IDOK = new Button_9.Button();
            me.IDTable = new Table_4.Table();
            me.IDPanel.add(me.IDSearch);
            me.IDPanel.add(me.IDOK);
            me.IDPanel.add(me.IDCancel);
            me.IDPanel.add(me.IDTable);
            me.IDOK.width = 55;
            me.IDOK.text = "OK";
            me.IDOK.onclick(function (event) {
                _this.ok();
            });
            me.IDSearch.width = 170;
            me.IDSearch.oninput(function (event) {
                me.IDTable.search("all", me.IDSearch.value, true);
            });
            $(me.IDTable.dom).doubletap(function (data) {
                _this.ok();
            });
            me.IDSearch.onkeydown(function (event) {
                if (event.keyCode == 13) {
                    _this.ok();
                    return false;
                }
                if (event.keyCode == 27) {
                    _this.cancel();
                    return false;
                }
            });
            me.IDSearch.height = 15;
            me.IDTable.width = "100%";
            me.IDTable.height = "calc(100% - 100px)";
            setTimeout(() => { me.IDSearch.focus(); }, 200);
            setTimeout(() => { me.IDSearch.focus(); }, 1000);
            me.IDCancel.onclick(function (event) {
                _this.cancel();
            });
            me.IDCancel.text = "Cancel";
            me.IDPanel.height = "100%";
            me.IDPanel.width = "100%";
        }
        ok() {
            var me = this.me;
            $(me.IDPanel.dom).dialog("destroy");
            this.value = me.IDTable.value;
            this.callEvent("change", event);
        }
        cancel() {
            var me = this.me;
            $(me.IDPanel.dom).dialog("destroy");
        }
        /**
         * @member {object} value - selection of the component
         */
        set value(value) {
            this._value = value;
        }
        get value() {
            return this._value;
        }
        async loadObjects(classname) {
            var cl = await Classes_19.classes.loadClass(classname);
            return await cl.find();
        }
        //@$Property()
        /**
         * @member {string} items - the items to select
         */
        set items(value) {
            var _this = this;
            if (value !== undefined && typeof (value) === "string") {
                this.loadObjects(value).then((data) => {
                    _this.me.IDTable.items = data;
                });
            }
            else
                _this.me.IDTable.items = value;
        }
        get items() {
            return this._items;
        }
        /**
        * called if value has changed
        * @param {function} handler - the function which is executed
        */
        onchange(handler) {
            this.addEvent("change", handler);
        }
        /**
         * @member {bool} autocommit -  if true the databinder will update the value on every change
         *                              if false the databinder will update the value on databinder.toForm
         */
        get autocommit() {
            return this._autocommit;
        }
        set autocommit(value) {
            this._autocommit = value;
            if (this._databinder !== undefined)
                this._databinder.checkAutocommit(this);
        }
        /**
         * binds a component to a databinder
         * @param {jassi.ui.Databinder} databinder - the databinder to bind
         * @param {string} property - the property to bind
         */
        bind(databinder, property) {
            this._databinder = databinder;
            databinder.add(property, this, "onchange");
            databinder.checkAutocommit(this);
        }
        destroy() {
            this._value = undefined;
            this.me.IDPanel.destroy();
            super.destroy();
        }
    };
    __decorate([
        Property_22.$Property({ default: 450 }),
        __metadata("design:type", Number)
    ], ObjectChooser.prototype, "dialogHeight", void 0);
    __decorate([
        Property_22.$Property({ default: 300 }),
        __metadata("design:type", Number)
    ], ObjectChooser.prototype, "dialogWidth", void 0);
    __decorate([
        Property_22.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ObjectChooser.prototype, "onchange", null);
    __decorate([
        Property_22.$Property({ default: true }),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ObjectChooser.prototype, "autocommit", null);
    __decorate([
        Property_22.$Property({ type: "databinder" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], ObjectChooser.prototype, "bind", null);
    ObjectChooser = __decorate([
        Component_18.$UIComponent({ fullPath: "common/ObjectChooser", icon: "mdi mdi-glasses" }),
        Jassi_53.$Class("jassi.ui.ObjectChooser"),
        __metadata("design:paramtypes", [])
    ], ObjectChooser);
    exports.ObjectChooser = ObjectChooser;
    async function test() {
        // kk.o=0;
        var Kunde = (await new Promise((resolve_7, reject_7) => { require(["remote/de/Kunde"], resolve_7, reject_7); })).Kunde;
        var dlg = new ObjectChooser();
        dlg.items = "de.Kunde";
        dlg.value = (await Kunde.find({ id: 1 }))[0];
        //	var kunden=await jassi.db.load("de.Kunde");
        //	dlg.value=kunden[4];
        //	dlg.me.IDTable.items=kunden;
        return dlg;
    }
    exports.test = test;
});
define("jassi/ui/OptionDialog", ["require", "exports", "jassi/ui/Panel", "jassi/ui/BoxPanel", "jassi/ui/HTMLPanel", "jassi/ui/Button", "remote/jassi/base/Jassi", "jassi/ui/Property", "jassi/ui/Textbox", "jassi/ui/PropertyEditor"], function (require, exports, Panel_17, BoxPanel_6, HTMLPanel_4, Button_10, Jassi_54, Property_23, Textbox_5, PropertyEditor_2) {
    "use strict";
    var OptionDialog_8;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.OptionDialog = void 0;
    class Me {
    }
    let OptionDialog = OptionDialog_8 = class OptionDialog extends Panel_17.Panel {
        /**
        *
        * @param {object} properties - properties to init
        * @param {string} [properties.id] -  connect to existing id (not reqired)
        * @param {boolean} [properties.useSpan] -  use span not div
        *
        */
        constructor(properties = undefined) {
            super(properties);
            this.parentComponent = undefined;
            this.text = "";
            this.options = [];
            this.selectedOption = "cancel";
            /* @member {string} - the text for the Dialog*/
        }
        layout() {
            var me = this.me = {};
            var _this = this;
            me.boxpanel1 = new BoxPanel_6.BoxPanel();
            me.htmlpanel1 = new HTMLPanel_4.HTMLPanel();
            me.buttons = new BoxPanel_6.BoxPanel();
            me.buttons.horizontal = true;
            me.htmlpanel1.value = this.text;
            this.add(me.boxpanel1);
            this.add(me.buttons);
            me.htmlpanel1.value = "";
            me.boxpanel1.add(me.htmlpanel1);
            me.boxpanel1.width = "100%";
            me.boxpanel1.height = "calc(100% - 50px)";
            me.inputText = new Textbox_5.Textbox();
            me.boxpanel1.add(me.inputText);
            me.propertyEditor = new PropertyEditor_2.PropertyEditor(undefined);
            me.propertyEditor.width = "100%";
            me.propertyEditor.height = "100%";
            me.boxpanel1.add(me.propertyEditor);
            for (var x = 0; x < this.options.length; x++) {
                var button = new Button_10.Button();
                me.buttons.add(button);
                button.onclick(function (evt) {
                    _this.selectedOption = evt.currentTarget._this.text;
                    $(_this.dom).dialog("close");
                });
                button.text = this.options[x];
            }
        }
        /**
        * ask for properties in propertygrid
        * @param text - the text to be displayed
        * @param  properties - the properties which should be filled, marked by @$Property
        * @param  options - the options e.g ["ok","Cancel"]
        * @param parent - the parent component
        * @param modal - display the dialog modal
        */
        static async askProperties(text, properties, options, parent = undefined, modal = false) {
            return await OptionDialog_8._show(text, options, parent, modal, undefined, properties);
        }
        /**
        * @param text - the text to be displayed
        * @param  options - the options
        * @param parent - the parent component
        * @param modal - display the dialog modal
        * @param  inputDefaultText - if the user should input something
        *
        */
        static async show(text, options, parent = undefined, modal = false, inputDefaultText = undefined) {
            return await OptionDialog_8._show(text, options, parent, modal, inputDefaultText);
        }
        static async _show(text, options, parent, modal, inputDefaultText = undefined, properties = undefined) {
            var promise = new Promise(function (resolve, reject) {
                var ret = new OptionDialog_8();
                var config = {};
                ret.options = options;
                ret.layout();
                ret.me.htmlpanel1.value = text;
                if (inputDefaultText === undefined) {
                    ret.me.boxpanel1.remove(ret.me.inputText);
                    ret.me.inputText.destroy();
                }
                else {
                    ret.me.inputText.value = inputDefaultText;
                }
                if (properties === undefined) {
                    ret.me.boxpanel1.remove(ret.me.propertyEditor);
                    ret.me.propertyEditor.destroy();
                }
                else {
                    ret.me.propertyEditor.value = properties;
                    config.width = "400";
                    config.height = "400";
                }
                config.beforeClose = function (event, ui) {
                    resolve({ button: ret.selectedOption, text: ret.me.inputText.value, properties: properties });
                };
                if (modal)
                    config.modal = modal;
                if (parent !== undefined)
                    config.appendTo = "#" + parent._id;
                var dlg = $(ret.dom).dialog(config);
            });
            return await promise;
        }
    };
    __decorate([
        Property_23.$Property(),
        __metadata("design:type", String)
    ], OptionDialog.prototype, "text", void 0);
    OptionDialog = OptionDialog_8 = __decorate([
        Jassi_54.$Class("jassi.ui.OptionDialog"),
        __metadata("design:paramtypes", [Object])
    ], OptionDialog);
    exports.OptionDialog = OptionDialog;
    let Testprop = class Testprop {
    };
    __decorate([
        Property_23.$Property(),
        __metadata("design:type", Boolean)
    ], Testprop.prototype, "visible", void 0);
    __decorate([
        Property_23.$Property(),
        __metadata("design:type", String)
    ], Testprop.prototype, "text", void 0);
    Testprop = __decorate([
        Jassi_54.$Class("jassi.ui.OptionDialogTestProp")
    ], Testprop);
    async function test() {
        var tet = await OptionDialog.show("Should I ask?", ["yes", "no"], undefined, false);
        if (tet.button === "yes") {
            var age = await OptionDialog.show("Whats yout age?", ["ok", "cancel"], undefined, false, "18");
            if (age.button === "ok")
                console.log(age.text);
            var prop = new Testprop();
            var ret2 = await OptionDialog.askProperties("Please fill:", prop, ["ok", "cancel"]);
        }
        //var ret=new jassi.ui.Dialog();
        //return ret;
    }
    exports.test = test;
    ;
});
define("jassi/ui/PDFViewer", ["require", "exports", "jassi/ui/Button", "jassi_report/ext/pdfjs", "jassi/ui/Component", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/BoxPanel"], function (require, exports, Button_11, pdfjs_1, Component_19, Jassi_55, Panel_18, BoxPanel_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.PDFViewer = void 0;
    class Canavas extends Component_19.Component {
        constructor() {
            super();
            super.init($('<canvas type="pdfviewer"></canvas>')[0]);
        }
    }
    let PDFViewer = class PDFViewer extends Panel_18.Panel {
        constructor() {
            super();
            this._page = 1;
            //super.init(undefined);//$('<canvas type="pdfviewer"></canvas>')[0]);
            this.pdfjsLib = pdfjs_1.default;
            this.pdfDoc = null;
            this.pageNum = 1;
            this.pageRendering = false;
            this.pageNumPending = null;
            this.scale = 0.8;
            this.me = {};
            this.layout(this.me);
        }
        layout(me) {
            me.toolbar = new BoxPanel_7.BoxPanel();
            me.canavasPanel = new Canavas();
            me.plus = new Button_11.Button();
            me.minus = new Button_11.Button();
            var _this = this;
            me.download = new Button_11.Button();
            //me.canavasPanel.height="90%";
            //	me.canavasPanel.width="90%";
            //	var cn=$('<canvas type="pdfviewer"></canvas>')[0]
            this.canvas = me.canavasPanel.dom;
            //this.dom.appendChild(cn);
            //this.canvas = cn;
            this.ctx = this.canvas.getContext('2d');
            this.add(me.toolbar);
            this.add(me.canavasPanel);
            me.toolbar.add(me.plus);
            me.toolbar.horizontal = true;
            me.toolbar.add(me.download);
            me.toolbar.add(me.minus);
            me.plus.text = "+";
            me.plus.onclick(function (event) {
                _this.scale = _this.scale * 1.4;
                _this.renderPage(_this._page);
            });
            me.minus.text = "-";
            me.minus.onclick(function (event) {
                _this.scale = _this.scale / 1.4;
                _this.renderPage(_this._page);
            });
            me.download.text = "download";
            me.download.onclick(function (event) {
                _this.report.open();
            });
        }
        renderPage(num) {
            // The workerSrc property shall be specified.
            this.pageRendering = true;
            // Using promise to fetch the page
            var _this = this;
            this.pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({ scale: _this.scale });
                _this.canvas.height = viewport.height;
                _this.canvas.width = viewport.width;
                _this.width = viewport.width;
                _this.height = viewport.height;
                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: _this.ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);
                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    _this.pageRendering = false;
                    if (_this.pageNumPending !== null) {
                        // New page rendering is pending
                        _this.renderPage(_this.pageNumPending);
                        _this.pageNumPending = null;
                    }
                });
            });
        }
        queueRenderPage(num) {
            if (this.pageRendering) {
                this.pageNumPending = num;
            }
            else {
                this.renderPage(num);
            }
        }
        /**
         * Displays previous page.
         */
        onPrevPage() {
            if (this.pageNum <= 1) {
                return;
            }
            this.pageNum--;
            this.queueRenderPage(this.pageNum);
        }
        /**
         * Displays next page.
         */
        onNextPage() {
            if (this.pageNum >= this.pdfDoc.numPages) {
                return;
            }
            this.pageNum++;
            this.queueRenderPage(this.pageNum);
        }
        /**
         * @member {data} - the caption of the button
         */
        set value(value) {
            this._data = value;
            var pdfData = atob(this._data);
            var loadingTask = this.pdfjsLib.getDocument({ data: pdfData });
            var _this = this;
            loadingTask.promise.then(function (pdf) {
                _this.pdfDoc = pdf;
                _this.queueRenderPage(_this._page);
            }, function (e) {
                var g = e;
            });
        }
        get value() {
            return this._data;
            //return  $(this.checkbox).prop("checked");
        }
        /**
         * @member {number} - the current page number
         */
        set page(value) {
            this._page = value;
        }
        get page() {
            return this._page;
            //return  $(this.checkbox).prop("checked");
        }
    };
    PDFViewer = __decorate([
        Jassi_55.$Class("jassi.ui.PDFViewer"),
        __metadata("design:paramtypes", [])
    ], PDFViewer);
    exports.PDFViewer = PDFViewer;
    async function test() {
        var ret = new PDFViewer();
        //testdocument
        var data = 'JVBERi0xLjcKCjEgMCBvYmogICUgZW50cnkgcG9pbnQKPDwKICAvVHlwZSAvQ2F0YWxvZwog' +
            'IC9QYWdlcyAyIDAgUgo+PgplbmRvYmoKCjIgMCBvYmoKPDwKICAvVHlwZSAvUGFnZXMKICAv' +
            'TWVkaWFCb3ggWyAwIDAgMjAwIDIwMCBdCiAgL0NvdW50IDEKICAvS2lkcyBbIDMgMCBSIF0K' +
            'Pj4KZW5kb2JqCgozIDAgb2JqCjw8CiAgL1R5cGUgL1BhZ2UKICAvUGFyZW50IDIgMCBSCiAg' +
            'L1Jlc291cmNlcyA8PAogICAgL0ZvbnQgPDwKICAgICAgL0YxIDQgMCBSIAogICAgPj4KICA+' +
            'PgogIC9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKCjQgMCBvYmoKPDwKICAvVHlwZSAvRm9u' +
            'dAogIC9TdWJ0eXBlIC9UeXBlMQogIC9CYXNlRm9udCAvVGltZXMtUm9tYW4KPj4KZW5kb2Jq' +
            'Cgo1IDAgb2JqICAlIHBhZ2UgY29udGVudAo8PAogIC9MZW5ndGggNDQKPj4Kc3RyZWFtCkJU' +
            'CjcwIDUwIFRECi9GMSAxMiBUZgooSGVsbG8sIHdvcmxkISkgVGoKRVQKZW5kc3RyZWFtCmVu' +
            'ZG9iagoKeHJlZgowIDYKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDEwIDAwMDAwIG4g' +
            'CjAwMDAwMDAwNzkgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAw' +
            'MDAwIG4gCjAwMDAwMDAzODAgMDAwMDAgbiAKdHJhaWxlcgo8PAogIC9TaXplIDYKICAvUm9v' +
            'dCAxIDAgUgo+PgpzdGFydHhyZWYKNDkyCiUlRU9G';
        ret.value = data;
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/PropertyEditor", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Image", "jassi/base/Parser", "jassi/ui/ComponentDescriptor", "jassi/ui/PropertyEditors/NameEditor", "jassi/base/PropertyEditorService", "jassi/ui/Property", "jassi/base/PropertyEditorService"], function (require, exports, Jassi_56, Panel_19, Image_3, Parser_2, ComponentDescriptor_5, NameEditor_1, PropertyEditorService_1, Property_24) {
    "use strict";
    var PropertyEditor_3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.TestProperties = exports.PropertyEditor = void 0;
    let PropertyEditor = PropertyEditor_3 = class PropertyEditor extends Panel_19.Panel {
        /**
        * edit object properties
        */
        constructor(codeEditor) {
            super();
            this.readPropertyValueFromDesign = false;
            this.codeChanges = {};
            this.table = new Panel_19.Panel();
            this.table.init($('<table style="font-size:11px"><tr><th class="propertyeditorheader">Name</th><th class="propertyeditorheader">Value</th></tr><tr class="propertyeditorrow"><td >a1</td><td>b1</td></tr></table>')[0]);
            this.add(this.table);
            this.table.width = "98%";
            $(".propertyeditorheader").resizable({ handles: "e" });
            //            $( ".propertyeditorheader" ).css("height","8px");
            //$(this.dom).css("height","");
            this.clear();
            this.layout();
            /**
             * @member {jassi.ui.CodeEditor} - the parent CodeEditor
             * if undefined - no code changes would be done
             * */
            this.codeEditor = codeEditor;
            /** @member {jassi.base.Parser} - the code-parser*/
            this.parser = new Parser_2.Parser();
            /** @member {string} - the name of the variable in code*/
            this.variablename = "";
            /** @member {jassi.ui.PropertyEditor} - parent propertyeditor*/
            this.parentPropertyEditor;
            /** @member {[jassi.ui.PropertyEditor]} - if multiselect - the propertyeditors of the other elements*/
            this._multiselectEditors;
        }
        /**
         * adds a new property
         * @param {string} name  - the name of the property
         * @param {jassi.ui.PropertyEditors.Editor} editor - the propertyeditor to render the property
         * @param {string} description - the the description is tooltip over the name
         */
        addProperty(name, editor, description) {
            var component = editor.getComponent();
            var row = $('<tr nowrap class="propertyeditorrow"><td  style="fontsize:11px" nowrap title="' + description + '">' + name + '</td></tr>')[0];
            var but = new Image_3.Image();
            but.src = "mdi mdi-delete-forever-outline";
            var _this = this;
            but.onclick(function () {
                _this.removePropertyInDesign(name);
                _this.removePropertyInCode(name);
                _this.updateParser();
                _this.value = _this.value;
            });
            // $(row.children[0]).attr("title", description);
            $(row.children[0]).tooltip();
            // $(row.children[0]).css("font-size", "11px");
            $(row.children[0]).prepend(but.dom);
            //$(component.dom).css("font-size", "11px");
            this.table.dom.appendChild(row);
            row["_components"] = [editor, but];
            component.width = "100%";
            try {
                row.appendChild(component.dom);
            }
            catch (_a) {
                //Why
                //debugger;
            }
        }
        /**
         * register an event if the property has changed
         * @param {function} handler - the function that is called on change
         */
        oncodeChanged(handler) {
            this.addEvent("codeChanged", handler);
        }
        /**
         * register an event if the property has changed
         * @param {function} handler - the function that is called on change
         */
        onpropertyChanged(handler) {
            this.addEvent("propertyChanged", handler);
        }
        /**
         * delete all properties
         */
        clear() {
            var trs = $(this.dom).find(".propertyeditorrow");
            for (var x = 0; x < trs.length; x++) {
                var row = trs[x];
                if (row["_components"] !== undefined) {
                    for (var c = 0; c < row["_components"].length; c++) {
                        row["_components"][c]["__destroyed"] = true;
                        row["_components"][c].destroy();
                    }
                }
                $(row).remove();
            }
        }
        /**
       * if parentPropertyEditor is defined then the value of the property must be substituted
       * @param {jassi.ui.PropertyEditor propertyEditor
       * @param {[opject} props
       * @param {string} propname the propertyName
       */
        /* _getParentEditorValue(propertyEditor,ob,propname){
             
         }*/
        /**
         * if parentPropertyEditor is defined then the properties are defined there
         * @param {jassi.ui.PropertyEditor propertyEditor
         * @param {[opject} props
         * @param {string} propname the propertyName
        
        _addParentEditorProperties(propertyEditor, props, propname) {
            if (propertyEditor.parentPropertyEditor !== undefined)
                this._addParentEditorProperties(propertyEditor.parentPropertyEditor, props, propertyEditor.variablename + "/" + propname);
            else {
                var ret;
                if (this.showThisProperties !== undefined) {
                    ret = Tools.copyObject(this.showThisProperties);
                } else
                    ret = ComponentDescriptor.describe(propertyEditor.value.constructor, true).fields;
                for (var x = 0;x < ret.length;x++) {
                    if (ret[x].name.startsWith(propname + "/")) {
                        var test = ret[x].name.substring((propname + "/").length);
                        if (test.indexOf("/") < 0) {
                            ret[x].name = test;
                            props.push(ret[x]);
                        }
                    }
    
                }
            }
        } */
        /**
         * get all known instances for type
         * @param {type} type - the type we are interested
         * @returns {[string]}
         */
        getVariablesForType(type) {
            if (this.codeEditor === undefined)
                return undefined;
            return this.codeEditor.getVariablesForType(type);
        }
        /**
         * get the variablename of an object
         * @param {object} ob - the object to search
         * @returns {string}
         */
        getVariableFromObject(ob) {
            if (this.codeEditor === undefined)
                return undefined;
            return this.codeEditor.getVariableFromObject(ob);
        }
        /**
          * gets the name object of the given variabel
          * @param {string} ob - the name of the variable
         *  @returns {string}
         */
        getObjectFromVariable(ob) {
            if (this.codeEditor === undefined)
                return undefined;
            return this.codeEditor.getObjectFromVariable(ob);
        }
        /**
         * @member {object}  - the rendered object
         */
        set value(value) {
            if (value !== this._value && this.parentPropertyEditor === undefined)
                this.codeChanges = {};
            if (value !== undefined || (value === null || value === void 0 ? void 0 : value.dom) !== undefined) {
                if (!$(value.dom).is(":focus"))
                    $(value.dom).focus();
            }
            if (value !== undefined && this.value !== undefined && this.value.constructor === value.constructor) {
                this._value = value;
                if (this.codeEditor)
                    this.variablename = this.codeEditor.getVariableFromObject(this._value);
                this.update();
                return;
            }
            this._multiselectEditors = [];
            if (value !== undefined && value.length > 1) {
                for (var x = 1; x < value.length; x++) {
                    var multi = new PropertyEditor_3(this.codeEditor);
                    multi.codeEditor = this.codeEditor;
                    multi.parentPropertyEditor = this.parentPropertyEditor;
                    multi.value = value[x];
                    multi.parser = this.parser;
                    if (multi.codeEditor !== undefined)
                        this.variablename = this.codeEditor.getVariableFromObject(value[x]);
                    this._multiselectEditors.push(multi);
                }
                this._value = value[0];
            }
            else
                this._value = value;
            if (value === []) {
                this._value = undefined;
                return;
            }
            if (this.codeEditor !== undefined && this.parentPropertyEditor === undefined)
                this.variablename = this.codeEditor.getVariableFromObject(this._value);
            var _this = this;
            this._initValue();
            _this.update();
        }
        swapComponents(first, second) {
            //swap Design
            if (first._parent !== second._parent)
                throw "swaped components must have the same parent";
            var parent = first._parent;
            var ifirst = parent._components.indexOf(first);
            var isecond = parent._components.indexOf(second);
            var dummy = $("<div/>");
            parent._components[ifirst] = second;
            parent._components[isecond] = first;
            $(first.domWrapper).replaceWith(dummy);
            $(second.domWrapper).replaceWith($(first.domWrapper));
            dummy.replaceWith($(second.domWrapper));
            //swap Code
            var firstname = this.getVariableFromObject(first);
            var secondname = this.getVariableFromObject(second);
            var parentname = this.getVariableFromObject(parent);
            this.parser.swapPropertyWithParameter(parentname, "add", firstname, secondname);
            this.codeEditor.value = this.parser.getModifiedCode();
            this.updateParser();
        }
        _initValue() {
            var _a;
            var props = [];
            /* if (this.parentPropertyEditor !== undefined)
                 this._addParentEditorProperties(this.parentPropertyEditor, props, this.variablename);
             else*/ {
                if (this.showThisProperties !== undefined)
                    props = this.showThisProperties;
                else {
                    if (!this._value)
                        props = [];
                    else
                        props = (_a = ComponentDescriptor_5.ComponentDescriptor.describe(this._value.constructor)) === null || _a === void 0 ? void 0 : _a.fields;
                    if (!props)
                        props = [];
                }
            }
            //TODO cache this
            var _this = this;
            _this.properties = {};
            /*for (var x = 0; x < props.length; x++) {
                _this.properties[props[x].name] = { name: props[x].name, component: undefined, description: props[x].description };
            }*/
            var allProperties = [];
            if (_this._multiselectEditors.length === 0) {
                var hasvarname = _this.getVariableFromObject(_this._value);
                if (hasvarname !== undefined) {
                    var nameEditor = new NameEditor_1.NameEditor("name", _this);
                    //_this.addProperty("name", nameEditor, "the name of the component");
                    //allProperties.push({name:"name",editor:nameEditor,description:"the name of the component"});
                    _this.properties["name"] = {
                        name: "name", editor: nameEditor,
                        description: "the name of the component", "component": nameEditor.getComponent()
                    };
                    //nameEditor.ob = _this._value;
                }
            }
            for (var x = 0; x < props.length; x++) {
                if (props[x].name.indexOf("/") > -1) {
                }
                else {
                    _this.properties[props[x].name] = { isVisible: props[x].isVisible, name: props[x].name, component: undefined, description: props[x].description };
                    var editor = PropertyEditorService_1.propertyeditor.createFor(props[x], _this);
                    if (editor === undefined) {
                        console.log("Editor not found for " + _this.variablename);
                        continue;
                    }
                    var sname = editor.property.name;
                    editor.onedit(function (event) {
                        _this.callEvent("propertyChanged", event);
                    });
                    //editor.ob = _this._value;
                    if (_this.properties[editor.property.name] === undefined) {
                        console.log("Property not found " + editor.property);
                        continue;
                    }
                    _this.properties[editor.property.name].editor = editor;
                    if (editor !== undefined && _this.properties[editor.property.name] !== undefined) {
                        _this.properties[editor.property.name].component = editor.getComponent();
                    }
                }
            }
            for (var key in _this.properties) {
                var prop = _this.properties[key];
                var doAdd = true;
                for (var m = 0; m < _this._multiselectEditors.length; m++) {
                    var test = _this._multiselectEditors[m].properties[prop.name];
                    if (test === undefined)
                        doAdd = false;
                }
                if (doAdd) {
                    if (prop.component !== undefined)
                        //_this.addProperty(prop.name, prop.editor, prop.description);
                        allProperties.push({ name: prop.name, editor: prop.editor, description: prop.description, isVisible: prop.isVisible });
                }
            }
            _this.clear();
            for (let p = 0; p < allProperties.length; p++) {
                let prop = allProperties[p];
                _this.addProperty(prop.name, prop.editor, prop.description);
            }
            // });
        }
        /**
         * updates values
         */
        update() {
            for (var key in this.properties) {
                var prop = this.properties[key];
                if (prop.editor === undefined) {
                    console.warn("PropertyEditor for " + key + " not found");
                    continue;
                }
                //sometimes the component is already deleted e.g.resize
                if (prop.editor["__destroyed"] !== true) {
                    if (prop.isVisible) {
                        var isVisible = prop.isVisible(this.value);
                        if (isVisible) {
                            $(prop.editor.component.dom.parentNode).css('display', '');
                        }
                        else {
                            $(prop.editor.component.dom.parentNode).css('display', 'none');
                        }
                    }
                    prop.editor.ob = this.value;
                }
            }
        }
        get value() {
            return this._value;
        }
        /**
         * gets the value of the property
         * @param {string} property
         * @param {boolean} [noDefaultValue] - returns no default value of the property
         * @returns {object}
         */
        getPropertyValue(property, noDefaultValue = undefined) {
            if (this.readPropertyValueFromDesign) {
                let ret = this._value[property.name];
                if (ret === undefined && !noDefaultValue)
                    ret = property.default;
                return ret;
            }
            var ret = undefined;
            if (this.codeEditor === undefined) { //read property
                var r = this.codeChanges[property.name];
                if (r === undefined) {
                    if (this.parentPropertyEditor === undefined && this._value[property.name])
                        return this._value[property.name];
                    if (noDefaultValue !== true)
                        return property.default;
                    return r;
                }
                return r;
            }
            if (property.name === "new" && this.variablename.startsWith("me.")) {
                var prop = this.parser.data["me"][this.variablename.substring(3)];
                if (prop === undefined)
                    return undefined;
                var constr = prop[0].value;
                if (constr.startsWith("typedeclaration:") && prop.length > 1)
                    constr = prop[1].value;
                ret = constr.substring(constr.indexOf("(") + 1, constr.lastIndexOf(")"));
                if (ret === "")
                    ret = undefined;
            }
            else {
                ret = this.parser.getPropertyValue(this.variablename, property.name);
                if (this.codeEditor === undefined && ret === undefined && this._value !== undefined) {
                    ret = this._value[property.name];
                    if (typeof (ret) === "function") {
                        ret = undefined;
                    }
                }
                if (ret === undefined && noDefaultValue !== true)
                    ret = property.default;
            }
            if (this._multiselectEditors !== undefined) {
                for (var m = 0; m < this._multiselectEditors.length; m++) {
                    this._multiselectEditors[m].updateParser();
                    var test = this._multiselectEditors[m].getPropertyValue(property, noDefaultValue);
                    if (test !== ret) {
                        return undefined;
                    }
                }
            }
            return ret;
        }
        updateCodeEditor() {
            this.codeEditor.evalCode();
        }
        /**
         * update the parser
         */
        updateParser() {
            var _a;
            if (this.codeEditor === undefined)
                return;
            if (this.parentPropertyEditor !== undefined) {
                this.parentPropertyEditor.updateParser();
            }
            else {
                var text = this.codeEditor.value;
                var val = this.codeEditor.getObjectFromVariable("this");
                if (text)
                    this.parser.parse(text, [{ classname: (_a = val === null || val === void 0 ? void 0 : val.constructor) === null || _a === void 0 ? void 0 : _a.name, methodname: "layout" }, { classname: undefined, methodname: "test" }]);
            }
        }
        /**
         * adds an required file to the code
         */
        addImportIfNeeded(name, file) {
            if (this.codeEditor === undefined)
                return;
            this.parser.addImportIfNeeded(name, file);
            this.codeEditor.value = this.parser.getModifiedCode();
            this.updateParser();
        }
        /**
         * gets the next variablename
         * */
        getNextVariableNameForType(type) {
            return this.parser.getNextVariableNameForType(type);
        }
        /**
         * adds an Property
         * @param type - name of the type o create
         * @param scopename - the scope {variable: ,methodname:} to add the variable - if missing layout()
         * @returns  the name of the object
         */
        addVariableInCode(type, scopename) {
            var _a;
            var val = this.codeEditor.getObjectFromVariable("this");
            var ret = this.parser.addVariableInCode(type, [{ classname: (_a = val === null || val === void 0 ? void 0 : val.constructor) === null || _a === void 0 ? void 0 : _a.name, methodname: "layout" }, { classname: undefined, methodname: "test" }], scopename);
            this.codeEditor.value = this.parser.getModifiedCode();
            this.updateParser();
            this.callEvent("codeChanged", {});
            return ret;
        }
        /**
         * modify the property in code
         * @param {string} property - the property
         * @param {string} value - the new value
         * @param {boolean} [replace]  - if true the old value is deleted
         * @param {string} [variablename] - the name of the variable - default=this.variablename
         * @param {object} [before] - {variablename,property,value=undefined}
         * @param {object} scope - the scope {variable: ,methodname:} the scope - if missing layout()
        */
        setPropertyInCode(property, value, replace = undefined, variableName = undefined, before = undefined, scopename = undefined) {
            var _a;
            if (this.codeEditor === undefined) {
                this.codeChanges[property] = value;
                this.callEvent("codeChanged", {});
                return;
            }
            if (this.codeEditor === undefined || this.parentPropertyEditor !== undefined) {
                this.callEvent("codeChanged", {});
                return;
            }
            if (variableName === undefined && this._multiselectEditors !== undefined) {
                for (var m = 0; m < this._multiselectEditors.length; m++) {
                    this._multiselectEditors[m].updateParser();
                    this._multiselectEditors[m].setPropertyInCode(property, value, replace, variableName, before);
                }
                if (this._multiselectEditors.length > 0)
                    this.updateParser();
            }
            var prop;
            if (variableName === undefined) {
                variableName = this.variablename;
                prop = this._value[property];
            }
            else {
                prop = this.codeEditor.getObjectFromVariable(variableName)[property];
            }
            var isFunction = (typeof (prop) === "function");
            var val = this.codeEditor.getObjectFromVariable("this");
            this.parser.setPropertyInCode(variableName, property, value, [{ classname: (_a = val === null || val === void 0 ? void 0 : val.constructor) === null || _a === void 0 ? void 0 : _a.name, methodname: "layout" }, { classname: undefined, methodname: "test" }], isFunction, replace, before, scopename);
            //correct spaces
            if (value && value.indexOf("\n") > -1) {
                this.codeEditor.value = this.parser.getModifiedCode();
                this.updateParser();
            }
            this.codeEditor.value = this.parser.getModifiedCode();
            this.updateParser();
            this.callEvent("codeChanged", {});
        }
        /**
        * modify the property in design
        * @param {string} property - the property
        * @param {string} value - the new value
        */
        setPropertyInDesign(property, value) {
            if (this._multiselectEditors) {
                for (var m = 0; m < this._multiselectEditors.length; m++) {
                    this._multiselectEditors[m].setPropertyInDesign(property, value);
                }
            }
            if (property === "new" && this.variablename.startsWith("me.")) {
                this.codeEditor.evalCode();
                //  var test=this.codeEditor.getObjectFromVariable(this.variablename);
                //  this.value=this.codeEditor.getObjectFromVariable(this.variablename);
                return;
            }
            //var ob = this.codeEditor._variables.evalExpression(value);
            if (typeof (this._value[property]) === "function")
                this._value[property](value);
            else
                this._value[property] = value;
        }
        /**
         * goto source position
         * @param position - in Code
         */
        gotoCodePosition(position) {
            if (this.parentPropertyEditor !== undefined)
                return this.parentPropertyEditor.gotoCodePosition(position);
            this.codeEditor.viewmode = "code";
            this.codeEditor.setCursorPorition(position);
        }
        /**
         * goto source line
         * @param {number} line - line in Code
         */
        gotoCodeLine(line) {
            if (this.parentPropertyEditor !== undefined)
                return this.parentPropertyEditor.gotoCodeLine(line);
            this.codeEditor.viewmode = "code";
            this.codeEditor.cursorPosition = { row: line, column: 200 };
        }
        /**
         * renames a variable in code
         */
        renameVariableInCode(oldName, newName) {
            var code = this.codeEditor.value;
            if (this.codeEditor === undefined)
                return;
            var found = true;
            if (oldName.startsWith("me."))
                oldName = oldName.substring(3);
            if (newName.startsWith("me."))
                newName = newName.substring(3);
            if (oldName.startsWith("this."))
                oldName = oldName.substring(5);
            if (newName.startsWith("this."))
                newName = newName.substring(5);
            var reg = new RegExp("\\W" + oldName + "\\W");
            while (found == true) {
                found = false;
                code = code.replace(reg, function replacer(match, offset, string) {
                    // p1 is nondigits, p2 digits, and p3 non-alphanumerics
                    found = true;
                    return match.substring(0, 1) + newName + match.substring(match.length - 1, match.length);
                });
            }
            this.codeEditor.value = code;
            this.updateParser();
            this.callEvent("codeChanged", {});
        }
        /**
         * renames a variable in design
         */
        renameVariableInDesign(oldName, newName) {
            this.codeEditor.renameVariable(oldName, newName);
        }
        /**
        * removes the variable from design
        * @param  varname - the variable to remove
        */
        removeVariableInDesign(varname) {
            //TODO this und var?
            if (varname.startsWith("me.")) {
                var vname = varname.substring(3);
                var me = this.codeEditor.getObjectFromVariable("me");
                delete me[vname];
            }
        }
        /**
         * removes the variable from code
         * @param {string} varname - the variable to remove
         */
        removeVariableInCode(varname) {
            if (this.codeEditor === undefined) {
                this.callEvent("codeChanged", {});
                return;
            }
            this.parser.removeVariableInCode(varname);
            this.codeEditor.value = this.parser.getModifiedCode();
            this.updateParser();
            this.callEvent("codeChanged", {});
        }
        /**
        * removes the property from code
        * @param {type} property - the property to remove
        * @param {type} [onlyValue] - remove the property only if the value is found
        * @param {string} [variablename] - the name of the variable - default=this.variablename
        */
        removePropertyInCode(property, onlyValue = undefined, variablename = undefined) {
            if (this.codeEditor === undefined) {
                delete this.codeChanges[property];
                this.callEvent("codeChanged", {});
                return;
            }
            if (this.codeEditor === undefined) {
                delete this._value[property];
                this.callEvent("codeChanged", {});
                return;
            }
            for (var m = 0; m < this._multiselectEditors.length; m++) {
                this._multiselectEditors[m].updateParser();
                this._multiselectEditors[m].removePropertyInCode(property, onlyValue, variablename);
            }
            if (variablename === undefined)
                variablename = this.variablename;
            this.updateParser();
            ; //notwendig?
            this.parser.removePropertyInCode(property, onlyValue, variablename);
            var text = this.parser.getModifiedCode();
            this.codeEditor.value = text;
            this.updateParser();
            this.callEvent("codeChanged", {});
        }
        /**
        * removes the property in design
        */
        removePropertyInDesign(property) {
            for (var m = 0; m < this._multiselectEditors.length; m++) {
                this._multiselectEditors[m].removePropertyInDesign(property);
            }
            if (typeof (this._value[property]) === "function")
                this._value[property](undefined);
            else {
                try {
                    this._value[property] = undefined;
                }
                catch (_a) {
                }
                delete this._value[property];
            }
        }
        layout(me = undefined) {
        }
        destroy() {
            this._value = undefined;
            this.clear();
            super.destroy();
        }
    };
    PropertyEditor = PropertyEditor_3 = __decorate([
        Jassi_56.$Class("jassi.ui.PropertyEditor"),
        __metadata("design:paramtypes", [Object])
    ], PropertyEditor);
    exports.PropertyEditor = PropertyEditor;
    let TestProperties = class TestProperties {
    };
    __decorate([
        Property_24.$Property({ decription: "name of the dialog", }),
        __metadata("design:type", String)
    ], TestProperties.prototype, "dialogname", void 0);
    TestProperties = __decorate([
        Jassi_56.$Class("jassi.ui.PropertyEditorTestProperties")
    ], TestProperties);
    exports.TestProperties = TestProperties;
    function test() {
        var ret = new PropertyEditor(undefined);
        ret.value = new TestProperties();
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/Repeater", ["require", "exports", "jassi/ui/Panel", "jassi/ui/Databinder", "jassi/ui/Component", "jassi/ui/Property", "remote/jassi/base/Jassi"], function (require, exports, Panel_20, Databinder_3, Component_20, Property_25, Jassi_57) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Repeater = void 0;
    class DesignPanel extends Panel_20.Panel {
    }
    let Repeater = class Repeater extends Panel_20.Panel {
        /**
        *
        * @param {object} properties - properties to init
        * @param {string} [properties.id] -  connect to existing id (not reqired)
        * @param {boolean} [properties.useSpan] -  use span not div
        *
        */
        constructor(properties = undefined) {
            super();
            this._autocommit = false;
            this.design = new DesignPanel();
            this.add(this.design);
            this.design.width = "100%";
            this.design.height = "100%";
            $(this.design.domWrapper).addClass("designerNoDraggable");
            $(this.design.dom).addClass("designerNoSelectable");
            $(this.design.dom).addClass("designerNoResizable");
        }
        createRepeatingComponent(func) {
            this._createRepeatingComponent = func;
            func.bind(this);
            if (this._value !== undefined)
                this.update();
        }
        _copyMeFromParent(me, parent, override = true) {
            if (parent === undefined)
                return;
            if (parent.me !== undefined) {
                for (var key in parent.me) {
                    if (override === true || me[key] === undefined) {
                        me[key] = parent.me[key];
                    }
                }
                return;
            }
            this._copyMeFromParent(me, parent._parent);
        }
        update() {
            if (this._createRepeatingComponent === undefined)
                return;
            if (this._designMode === true) {
                if (this.design._parent !== this) {
                    this.removeAll();
                    this.add(this.design);
                }
                if (this._isCreated !== true) {
                    this.design.databinder = new Databinder_3.Databinder();
                    this.me = {};
                    this._copyMeFromParent(this.me, this._parent);
                    this._createRepeatingComponent(this.me);
                    var comp = this._componentDesigner.designedComponent;
                    if (comp["me"] !== undefined) {
                        this._copyMeFromParent(comp["me"], this, false); //me from Dialog
                        this._componentDesigner._codeEditor.variables.addVariable("me", comp["me"]);
                        this._componentDesigner._codeEditor.variables.updateCache();
                    }
                    this._isCreated = true;
                }
                if (this.value === undefined || this.value === null || this.value.length < 0)
                    this.design.databinder.value = undefined;
                else
                    this.design.databinder.value = this.value[0];
                this.design.extensionCalled({
                    componentDesignerSetDesignMode: {
                        enable: this._designMode,
                        componentDesigner: undefined
                    }
                });
                //this.design._setDesignMode(this._designMode);
            }
            else {
                this.remove(this.design); //no destroy the design
                this.removeAll(true);
                if (this.value === undefined)
                    return;
                var sic = this.design;
                for (var x = 0; x < this.value.length; x++) {
                    this.design = new DesignPanel();
                    var ob = this.value[x];
                    this.design.databinder = new Databinder_3.Databinder();
                    this.design.databinder.value = ob;
                    this.design.me = {};
                    this._copyMeFromParent(this.design.me, this._parent);
                    this._createRepeatingComponent(this.design.me);
                    this.add(this.design);
                    this.add(this.design.databinder);
                }
                this.design = sic;
            }
        }
        /**
         * adds a component to the container
         * @param {jassi.ui.Component} component - the component to add
         */
        add(component) {
            super.add(component);
        }
        _dummy(func) {
            //dummy
        }
        /**
         *  @member {array} value - the array which objects used to create the repeating components
         */
        set value(val) {
            this._value = val;
            this.update();
        }
        get value() {
            return this._value;
        }
        extensionCalled(action) {
            if (action.componentDesignerSetDesignMode) {
                this._setDesignMode(action.componentDesignerSetDesignMode.enable, action.componentDesignerSetDesignMode.componentDesigner);
            }
        }
        /**
         * activates or deactivates designmode
         * @param {boolean} enable - true if activate designMode
         */
        _setDesignMode(enable, designer = undefined) {
            this._componentDesigner = designer;
            if (this._designMode !== enable) {
                this._designMode = enable;
                this.update();
            }
            else
                this._designMode = enable;
            //	super.setDesignMode(enable);
        }
        /**
         * binds a component to a databinder
         * @param {jassi.ui.Databinder} databinder - the databinder to bind
         * @param {string} property - the property to bind
         */
        bind(databinder, property) {
            this._databinder = databinder;
            databinder.add(property, this, "_dummy");
        }
        destroy() {
            this._value = undefined;
            this.design.destroy();
            super.destroy();
        }
    };
    __decorate([
        Property_25.$Property({ type: "databinder" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], Repeater.prototype, "bind", null);
    Repeater = __decorate([
        Component_20.$UIComponent({ fullPath: "common/Repeater", icon: "mdi mdi-locker-multiple", editableChildComponents: ["this", "design"] }),
        Jassi_57.$Class("jassi.ui.Repeater"),
        __metadata("design:paramtypes", [Object])
    ], Repeater);
    exports.Repeater = Repeater;
});
define("jassi/ui/SearchExplorer", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Tree", "jassi/ui/Panel", "jassi/ui/Textbox", "jassi/util/Typescript", "jassi/base/Router"], function (require, exports, Jassi_58, Tree_4, Panel_21, Textbox_6, Typescript_9, Router_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.SearchExplorer = void 0;
    let SearchExplorer = class SearchExplorer extends Panel_21.Panel {
        constructor() {
            super();
            //@member - maximal hits which are found 
            this.maximalFounds = 100;
            //this.maximize();
            $(this.dom).css("width", "calc(100% - 2px)");
            $(this.dom).css("height", "calc(100% - 2px)");
            this.tree = new Tree_4.Tree();
            this.search = new Textbox_6.Textbox();
            this.layout();
        }
        async doSearch() {
            var Typescript = (await new Promise((resolve_8, reject_8) => { require(["jassi/util/Typescript"], resolve_8, reject_8); })).Typescript;
            var all = [];
            var files = []; // [{name:"Hallo",lines:[{ name:"Treffer1",pos:1},{name:"treffer2" ,pos:2}]}];
            var toFind = this.search.value.toLocaleLowerCase();
            var count = 0;
            var filenames = Typescript_9.default.getFiles();
            for (var f = 0; f < filenames.length; f++) {
                var file = filenames[f];
                var code = Typescript_9.default.getCode(file);
                if (code) {
                    var text = code.toLowerCase();
                    var pos = text.indexOf(toFind);
                    var foundedFile = { name: file, lines: [] };
                    while (pos !== -1) {
                        count++;
                        if (count > this.maximalFounds) {
                            break;
                        }
                        var startline = text.lastIndexOf("\n", pos);
                        var endline = text.indexOf("\n", pos);
                        var line = text.substring(startline, endline);
                        foundedFile.lines.push({ name: line, pos: pos, file: file });
                        pos = text.indexOf(toFind, pos + 1);
                    }
                    if (foundedFile.lines.length > 0)
                        files.push(foundedFile);
                    if (count > this.maximalFounds) {
                        break;
                    }
                }
            }
            this.tree.items = files;
            this.tree.expandAll();
        }
        async layout() {
            var _this = this;
            this.tree.width = "100%";
            this.tree.height = "100%";
            super.add(this.search);
            super.add(this.tree);
            this.tree.propDisplay = "name";
            this.tree.propChilds = "lines";
            this.tree.onclick(function (evt) {
                if (evt.data !== undefined && evt.data.file !== undefined) {
                    var pos = evt.data.pos;
                    var file = evt.data.file;
                    new Promise((resolve_9, reject_9) => { require(["jassi/util/Typescript"], resolve_9, reject_9); }).then(Typescript => {
                        var text = Typescript_9.default.getCode(file);
                        var line = text.substring(0, pos).split("\n").length;
                        Router_6.router.navigate("#do=jassi.ui.CodeEditor&file=" + file + "&line=" + line);
                    });
                }
            });
            $("#" + this._id).css("flow", "visible");
            this.search.onkeydown(function (evt) {
                window.setTimeout(() => {
                    //	if(evt.code==="Enter"){
                    _this.doSearch();
                    //	}
                }, 100);
            });
            this.search.height = 15;
        }
    };
    SearchExplorer = __decorate([
        Jassi_58.$Class("jassi.ui.SearchExplorer"),
        __metadata("design:paramtypes", [])
    ], SearchExplorer);
    exports.SearchExplorer = SearchExplorer;
    function test() {
        return new SearchExplorer();
    }
    exports.test = test;
});
define("jassi/ui/Style", ["require", "exports", "jassi/ui/InvisibleComponent", "jassi/ui/Component", "remote/jassi/base/Jassi", "jassi/ui/Property", "jassi/ui/CSSProperties"], function (require, exports, InvisibleComponent_4, Component_21, Jassi_59, Property_26, CSSProperties_2) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test2 = exports.test = exports.Style = void 0;
    let Style = 
    /**
     * on ore mors Style can be assigned to component
     * the style is appended to the head
     **/
    class Style extends InvisibleComponent_4.InvisibleComponent {
        constructor() {
            super();
            super.init($('<span class="InvisibleComponent"></span>')[0]);
        }
        get styleid() {
            return "jassistyle" + this._id;
        }
        /**
        * sets CSS Properties
        */
        css(properties, removeOldProperties = true) {
            //never!super.css(properties,removeOldProperties);
            var style = document.getElementById(this.styleid);
            if (!document.getElementById(this.styleid)) {
                style = $('<style id=' + this.styleid + '></style>')[0];
                document.head.appendChild(style);
            }
            var prop = {};
            var sstyle = "\t." + this.styleid + "{\n";
            for (let key in properties) {
                var newKey = key.replaceAll("_", "-");
                prop[newKey] = properties[key];
                sstyle = sstyle + "\t\t" + newKey + ":" + properties[key] + ";\n";
            }
            sstyle = sstyle + "\t}\n";
            style.innerHTML = sstyle;
        }
        destroy() {
            super.destroy();
            if (document.getElementById(this.styleid)) {
                document.head.removeChild(document.getElementById(this.styleid));
            }
        }
    };
    __decorate([
        Property_26.$Property({ type: "json", componentType: "jassi.ui.CSSProperties" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_a = typeof CSSProperties_2.CSSProperties !== "undefined" && CSSProperties_2.CSSProperties) === "function" ? _a : Object, Boolean]),
        __metadata("design:returntype", void 0)
    ], Style.prototype, "css", null);
    Style = __decorate([
        Component_21.$UIComponent({ fullPath: "common/Style", icon: "mdi mdi-virus" }),
        Jassi_59.$Class("jassi.ui.Style")
        /**
         * on ore mors Style can be assigned to component
         * the style is appended to the head
         **/
        ,
        __metadata("design:paramtypes", [])
    ], Style);
    exports.Style = Style;
    function test() {
        var css = {
            filter: "drop-shadow(16px 16px 20px blue)"
        };
        Jassi_59.default.includeCSS("mytest2id", {
            ".Panel": css,
            ".jinlinecomponent": {
                color: "red"
            }
        });
        setTimeout(() => {
            Jassi_59.default.includeCSS("mytest2id", undefined); //remove
        }, 400);
        // includeCSS("mytest2id",undefined);
    }
    exports.test = test;
    function test2() {
        var st = new Style();
        st.css({
            color: "red"
        });
        st.destroy();
    }
    exports.test2 = test2;
});
define("jassi/ui/Table", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/DataComponent", "jassi/ui/Property", "jassi/ui/Component", "jassi/ui/Textbox", "jassi/ext/tabulator"], function (require, exports, Jassi_60, DataComponent_2, Property_27, Component_22, Textbox_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Table = void 0;
    let TableEditorProperties = class TableEditorProperties {
        cellDblClick() { }
    };
    __decorate([
        Property_27.$Property({ default: undefined }),
        __metadata("design:type", Number)
    ], TableEditorProperties.prototype, "paginationSize", void 0);
    __decorate([
        Property_27.$Property({ default: true }),
        __metadata("design:type", Boolean)
    ], TableEditorProperties.prototype, "headerSort", void 0);
    __decorate([
        Property_27.$Property({ default: "fitDataStretch", chooseFrom: ['fitData', 'fitColumns', 'fitDataFill', 'fitDataStretch'] }),
        __metadata("design:type", String)
    ], TableEditorProperties.prototype, "layout", void 0);
    __decorate([
        Property_27.$Property({ default: undefined }),
        __metadata("design:type", String)
    ], TableEditorProperties.prototype, "dataTreeChildField", void 0);
    __decorate([
        Property_27.$Property({ default: false }),
        __metadata("design:type", Boolean)
    ], TableEditorProperties.prototype, "movableColumns", void 0);
    __decorate([
        Property_27.$Property({ default: "function(event:any,group:any){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TableEditorProperties.prototype, "cellDblClick", null);
    TableEditorProperties = __decorate([
        Jassi_60.$Class("jassi.ui.TableEditorProperties")
    ], TableEditorProperties);
    let Table = 
    /*
    @$Property({ name: "new/paginationSize", type: "number", default: undefined })
    @$Property({ name: "new/headerSort", type: "boolean", default: true })
    @$Property({ name: "new/layout", type: "string", default: "fitDataStretch", chooseFrom: ['fitData', 'fitColumns', 'fitDataFill', 'fitDataStretch'] })
    @$Property({ name: "new/dataTreeChildField", type: "string", default: undefined })
    @$Property({ name: "new/movableColumns", type: "boolean", default: false })
    @$Property({ name: "new/cellDblClick", type: "function", default: "function(event:any,group:any){\n\t\n}" })
    */
    class Table extends DataComponent_2.DataComponent {
        constructor(properties) {
            super();
            super.init($('<div class="Table"></div>')[0]);
            var _this = this;
            if (properties === undefined)
                properties = {};
            if (properties.autoColumns === undefined)
                properties.autoColumns = true;
            if (properties.dataTreeChildFunction !== undefined) {
                //@ts-ignore
                properties.dataTreeChildField = properties.dataTreeChildFunction;
                delete properties.dataTreeChildFunction;
            }
            if (properties.dataTreeChildField !== undefined)
                properties.dataTree = true;
            if (properties.paginationSize !== undefined && properties.pagination == undefined)
                properties.pagination = "local";
            // if(properties.layoutColumnsOnNewData===undefined)
            //     properties.layoutColumnsOnNewData=true;
            if (properties.selectable === undefined)
                properties.selectable = 1;
            // if (properties.autoResize === undefined)//error ResizeObserver loop limit exceeded 
            //    properties.autoResize = false;
            if (properties.layout === undefined)
                properties.layout = "fitDataStretch"; //"fitDataFill";////"fitColumns";
            var rowClick = properties.rowClick;
            properties.rowClick = function (e, row) {
                _this._onselect(e, row);
                if (rowClick !== undefined) {
                    rowClick(e, row);
                }
            };
            var contextClick = properties.cellContext;
            properties.cellContext = function (e, row) {
                _this._oncontext(e, row);
                if (contextClick !== undefined) {
                    contextClick(e, row);
                }
                return undefined;
            };
            this.table = new Tabulator("[id='" + this._id + "']", properties);
            if (Tabulator["hackuw"] !== undefined) {
                Tabulator["hackuw"](this.table);
            }
            this.layout();
        }
        ;
        layout() {
            this._selectHandler = [];
        }
        async update() {
            await this.table.updateData(this.items);
        }
        _oncontext(event, row) {
            if (this.contextMenu !== undefined) {
                this.contextMenu.value = [row.getData()];
                event.data = [row.getData()];
                this.contextMenu.show(event);
            }
        }
        _onselect(event, row) {
            var selection = [];
            var aids = undefined;
            if (this.selectComponent === undefined && this._eventHandler["select"] === undefined)
                return;
            event.data = row.getData();
            if (this._select !== undefined)
                this._select.value = event.data;
            this.callEvent("select", event);
        }
        /**
         * register an event if an item is selected
         * @param {function} handler - the function that is called on change
         */
        onchange(handler) {
            this.addEvent("select", handler);
        }
        get showSearchbox() {
            return this._searchbox !== undefined;
        }
        set showSearchbox(enable) {
            let _this = this;
            if (!enable) {
                if (this._searchbox !== undefined) {
                    this._searchbox.destroy();
                    delete this._searchbox;
                }
            }
            else {
                this._searchbox = new Textbox_7.Textbox();
                this._searchbox.placeholder = "search table...";
                this._searchbox.onkeydown(() => {
                    window.setTimeout(() => {
                        var text = _this._searchbox.value;
                        _this.table.setFilter(data => {
                            for (var key in data) {
                                if (data[key] !== undefined && data[key] !== null && data[key].toString().toLowerCase().indexOf(text) >= 0) {
                                    return true;
                                }
                            }
                            return false;
                        });
                    }, 100);
                });
                $(this.domWrapper).prepend(this._searchbox.domWrapper);
            }
        }
        /**
          * if the value is changed then the value of _component is also changed (_component.value)
          */
        set selectComponent(_component) {
            this._select = _component;
        }
        get selectComponent() {
            return this._select; //$(this.dom).text();
        }
        /**
         * set the items of the table
         */
        set items(value) {
            this._items = value;
            if (value !== undefined)
                this.table.setData(value);
        }
        get items() {
            return this._items;
        }
        /**
         * @member {object} sel - the selected object
         */
        set value(sel) {
            if (this.items === undefined)
                return;
            var pos = this.items.indexOf(sel);
            //@ts-ignore
            this.table.deselectRow(this.table.getSelectedRows());
            if (pos === -1)
                return;
            //@ts-ignore
            this.table.selectRow(this.table.getRows()[pos]);
            this.table.scrollToRow(this.table.getRows()[pos]);
        }
        get value() {
            var ret = this.table.getSelectedRows();
            if (ret.length === 0) {
                return undefined;
            }
            return ret[0].getData();
            /*var aids = w2ui[this._id].getSelection();
            if (aids.length === 0)
                return undefined;
            var obs = w2ui[this._id].records;
            var selection = [];
            for (var x = 0; x < obs.length; x++) {
                for (var y = 0; y < aids.length; y++) {
                    if (obs[x].id === aids[y]) {
                        var test = obs[x]._originalObject;
                        if (test !== undefined)//extract proxy
                            selection.push(obs[x]._originalObject);
                        else
                            selection.push(obs[x]);
                    }
                }
            }
            return selection.length === 1 ? selection[0] : selection;*/
        }
        /**
        * @member {string|number} - the height of the component
        * e.g. 50 or "100%"
        */
        set height(value) {
            //@ts-ignore
            this.table.setHeight(value);
            //super.height=value;
        }
        get height() {
            return super.height;
        }
        /**
         * Searches records in the grid
         * @param {string} field - name of the search field
         * @param {string} value - value of the search field
         * @param {boolean} [doSelect] - if true the first entry is selected
         */
        search(field, value, doSelect) {
        }
        destroy() {
            // this.tree = undefined;
            if (this._searchbox !== undefined)
                this._searchbox.destroy();
            super.destroy();
        }
        set columns(value) {
            this.table.setColumns(value);
            this.update();
        }
        get columns() {
            return this.table.getColumnDefinitions();
        }
    };
    __decorate([
        Property_27.$Property({ default: "function(event?: JQueryEventObject, data?:Tabulator.RowComponent){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], Table.prototype, "onchange", null);
    __decorate([
        Property_27.$Property(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], Table.prototype, "showSearchbox", null);
    __decorate([
        Property_27.$Property({ type: "string" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Table.prototype, "height", null);
    Table = __decorate([
        Component_22.$UIComponent({ fullPath: "common/Table", icon: "mdi mdi-grid" }),
        Jassi_60.$Class("jassi.ui.Table"),
        Property_27.$Property({ name: "new", type: "json", componentType: "jassi.ui.TableEditorProperties" })
        /*
        @$Property({ name: "new/paginationSize", type: "number", default: undefined })
        @$Property({ name: "new/headerSort", type: "boolean", default: true })
        @$Property({ name: "new/layout", type: "string", default: "fitDataStretch", chooseFrom: ['fitData', 'fitColumns', 'fitDataFill', 'fitDataStretch'] })
        @$Property({ name: "new/dataTreeChildField", type: "string", default: undefined })
        @$Property({ name: "new/movableColumns", type: "boolean", default: false })
        @$Property({ name: "new/cellDblClick", type: "function", default: "function(event:any,group:any){\n\t\n}" })
        */
        ,
        __metadata("design:paramtypes", [Object])
    ], Table);
    exports.Table = Table;
    async function test() {
        var tab = new Table({});
        tab.width = 400;
        var tabledata = [
            { id: 1, name: "Oli Bob", age: "12", col: "red", dob: "" },
            { id: 2, name: "Mary May", age: "1", col: "blue", dob: "14/05/1982" },
            { id: 3, name: "Christine Lobowski", age: "42", col: "green", dob: "22/05/1982" },
            { id: 4, name: "Brendon Philips", age: "125", col: "orange", dob: "01/08/1980" },
            { id: 5, name: "Margret Marmajuke", age: "16", col: "yellow", dob: "31/01/1999" },
        ];
        window.setTimeout(() => {
            tab.items = tabledata;
        }, 100);
        //tab.select = {};
        // tab.showSearchbox = true;
        //    var kunden = await jassi.db.load("de.Kunde");
        //   tab.items = kunden;
        return tab;
    }
    exports.test = test;
});
define("jassi/ui/Textbox", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/DataComponent", "jassi/ui/converters/DefaultConverter", "remote/jassi/base/Registry", "jassi/ui/Property"], function (require, exports, Jassi_61, Component_23, DataComponent_3, DefaultConverter_1, Registry_18, Property_28) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Textbox = void 0;
    let Textbox = class Textbox extends DataComponent_3.DataComponent {
        constructor(color = undefined) {
            super();
            super.init($('<input type="text" />')[0]);
            $(this.dom).css("color", color);
            this.converter = undefined;
        }
        /**
         * @member {boolean} disabled - enable or disable the element
         */
        set disabled(value) {
            $(this.dom).prop('disabled', true);
        }
        get disabled() {
            return $(this.dom).prop('disabled');
        }
        /**
         * @member {string} value - value of the component
         */
        set value(value) {
            $(this.dom).val(value);
        }
        get value() {
            var ret = $(this.dom).val();
            if (this.converter !== undefined) {
                ret = this.converter.stringToObject(ret);
            }
            return ret;
        }
        /**
       * called if value has changed
       * @param {function} handler - the function which is executed
       */
        onclick(handler) {
            $("#" + this._id).click(function (e) {
                handler(e);
            });
        }
        /**
         * called if value has changed
         * @param {function} handler - the function which is executed
         */
        onchange(handler) {
            $("#" + this._id).change(function (e) {
                handler(e);
            });
        }
        /**
         * called if a key is pressed down
         * @param {function} handler - the function which is executed
         */
        onkeydown(handler) {
            $(this.dom).keydown(function (e) {
                handler(e);
            });
        }
        /**
         * called if user has something typed
         * @param {function} handler - the function which is executed
         */
        oninput(handler) {
            $("#" + this._id).on("input", function () {
                handler();
            });
        }
        /*
         * <input list="browsers" name="myBrowser" />
<datalist id="browsers">
  <option value="Chrome">
  <option value="Firefox">
</datalist>+>
         */
        set placeholder(text) {
            $(this.dom).attr("placeholder", text);
        }
        get placeholder() {
            return $(this.dom).attr("placeholder");
        }
        /**
        *  @member {string|function} completerDisplay - property or function used to gets the value to display
        */
        set autocompleterDisplay(value) {
            this._autocompleterDisplay = value;
            if (this.autocompleter !== undefined) {
                this.autocompleter = this.autocompleter; //force rendering
            }
        }
        get autocompleterDisplay() {
            return this._autocompleterDisplay;
        }
        fillCompletionList(values) {
            var h;
            console.log("fill");
            var list = $(this.dom).attr("list");
            var html = "";
            var comp = $("#" + list);
            comp[0]._values = values;
            //comp.empty();
            for (var x = 0; x < values.length; x++) {
                var val = values[x];
                if (typeof (this.autocompleterDisplay) === "function") {
                    val = this.autocompleterDisplay(val);
                }
                else if (this.autocompleterDisplay !== undefined) {
                    val = val[this.autocompleterDisplay];
                }
                html += '<option value="' + val + '">';
                //comp.append('<option value="'+val+'">');
            }
            comp[0].innerHTML = html;
        }
        /**
         *  @member {[object]} completer - values used for autocompleting
         */
        set autocompleter(value) {
            var list = $(this.dom).attr("list");
            var _this = this;
            if (!list && typeof (value) === "function") {
                $(this.dom).on("mouseover", (ob) => {
                    if (_this._autocompleter.children.length === 0) {
                        var values = value();
                        _this.fillCompletionList(values);
                    }
                });
            }
            if (list === undefined) {
                list = Registry_18.default.nextID();
                this._autocompleter = $('<datalist id="' + list + '"/>')[0];
                this.domWrapper.appendChild(this._autocompleter);
                $(this.dom).attr("list", list);
            }
            if (typeof (value) === "function") {
            }
            else {
                this.fillCompletionList(value);
            }
            // $(this.dom).val(value);
        }
        get autocompleter() {
            var list = $(this.dom).prop("list");
            if (list === undefined)
                return undefined;
            var comp = $(list)[0];
            if (comp === undefined)
                return undefined;
            return comp._values;
            // return $(this.dom).val();
        }
        /**
         * focus the textbox
         */
        focus() {
            $(this.dom).focus();
        }
        destroy() {
            if (this._autocompleter)
                $(this._autocompleter).remove();
            super.destroy();
        }
    };
    __decorate([
        Property_28.$Property({ type: "classselector", service: "$Converter" }),
        __metadata("design:type", typeof (_a = typeof DefaultConverter_1.DefaultConverter !== "undefined" && DefaultConverter_1.DefaultConverter) === "function" ? _a : Object)
    ], Textbox.prototype, "converter", void 0);
    __decorate([
        Property_28.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Textbox.prototype, "onclick", null);
    __decorate([
        Property_28.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Textbox.prototype, "onchange", null);
    __decorate([
        Property_28.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Textbox.prototype, "onkeydown", null);
    __decorate([
        Property_28.$Property({ default: "function(event){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Textbox.prototype, "oninput", null);
    __decorate([
        Property_28.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Textbox.prototype, "placeholder", null);
    Textbox = __decorate([
        Component_23.$UIComponent({ fullPath: "common/Textbox", icon: "mdi mdi-form-textbox" }),
        Jassi_61.$Class("jassi.ui.Textbox"),
        Property_28.$Property({ name: "new", type: "string" }),
        __metadata("design:paramtypes", [Object])
    ], Textbox);
    exports.Textbox = Textbox;
    function test() {
        var ret = new Textbox();
        //ret.autocompleter=()=>[];
        return ret;
    }
    exports.test = test;
});
// return CodeEditor.constructor;
define("jassi/ui/Tree", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "remote/jassi/base/Registry", "jassi/ui/Property", "jassi/ext/fancytree"], function (require, exports, Jassi_62, Component_24, Registry_19, Property_29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Tree = void 0;
    /*declare global {
        interface JQuery {
            fancytree: any;
        }
    }*/
    let TreeEditorPropertiesMulti = class TreeEditorPropertiesMulti {
    };
    __decorate([
        Property_29.$Property({ default: "", chooseFrom: ["", "sameParent", "sameLevel"], description: "multi selection mode" }),
        __metadata("design:type", String)
    ], TreeEditorPropertiesMulti.prototype, "mode", void 0);
    TreeEditorPropertiesMulti = __decorate([
        Jassi_62.$Class("jassi.ui.TreeEditorPropertiesMulti")
    ], TreeEditorPropertiesMulti);
    let TreeEditorProperties = class TreeEditorProperties {
    };
    __decorate([
        Property_29.$Property({ default: 3, chooseFrom: [1, 2, 3], description: "1=single 2=multi 3=multi_hier" }),
        __metadata("design:type", Number)
    ], TreeEditorProperties.prototype, "selectMode", void 0);
    __decorate([
        Property_29.$Property({ default: false, description: "display a checkbox before the node" }),
        __metadata("design:type", Boolean)
    ], TreeEditorProperties.prototype, "checkbox", void 0);
    __decorate([
        Property_29.$Property({ type: "json", componentType: "jassi.ui.TreeEditorPropertiesMulti" }),
        __metadata("design:type", TreeEditorPropertiesMulti)
    ], TreeEditorProperties.prototype, "multi", void 0);
    TreeEditorProperties = __decorate([
        Jassi_62.$Class("jassi.ui.TreeEditorProperties")
    ], TreeEditorProperties);
    let Tree = 
    /*@$Property({ name: "new/selectMode", type: "number", default: 3, chooseFrom: [1, 2, 3], description: "1=single 2=multi 3=multi_hier" })
    @$Property({ name: "new/checkbox", type: "boolean", default: false, description: "desplay a checkbos before the node" })
    @$Property({ name: "new/multi", type: "json" })
    @$Property({ name: "new/multi/mode", type: "string", default: "", chooseFrom: ["", "sameParent", "sameLevel"], description: "multi selection mode" })
    */
    class Tree extends Component_24.Component {
        constructor(options) {
            super();
            super.init($('<div class="Tree"></div>')[0]);
            this._itemToKey = new Map();
            var _this = this;
            if (options === undefined) {
                options = {};
            }
            //Default Options
            if (options.extensions === undefined) {
                options.extensions = ["filter", "multi", "dnd"];
            }
            if (options.extensions.indexOf("filter") === -1)
                options.extensions.push("filter");
            if (options.extensions.indexOf("multi") === -1)
                options.extensions.push("multi");
            if (options.extensions.indexOf("dnd") === -1)
                options.extensions.push("dnd");
            if (options.filter === undefined)
                options.filter = {};
            if (options.filter.mode === undefined)
                options.filter.mode = "hide";
            if (options.filter.autoExpand === undefined)
                options.filter.autoExpand = true;
            /* if (options.multi === undefined) {
                 options.multi = {};
             }
             if (options.multi.mode === undefined) {
                 options.multi.mode = "sameParent";//"","sameLevel"
             }*/
            var beforeExpand = options.beforeExpand;
            var activate = options.activate;
            var click = options.click;
            /* options.renderTitle=function (event:JQueryEventObject,data:Fancytree.EventData){
                 var h=0;
             });*/
            options.source = [{ title: 'Folder in home folder', key: 'fA100', folder: true, lazy: true }];
            options.icon = false; //we have an own
            options.lazyLoad = function (event, data) {
                TreeNode.loadChilds(event, data);
            };
            /* options.beforeExpand = function(event: JQueryEventObject, data: Fancytree.EventData) {
                  if(data.node.children.length===1&&data.node.children[0].data.dummy===true){
                      var node2 = _this.objectToNode.get(data.node.data.item);
                          node2.populate(data.node);
                  }
                  if (beforeExpand !== undefined)
                      return beforeExpand(event, data);
                  return true;
              };*/
            options.activate = function (event, data) {
                _this._onselect(event, data);
                if (activate !== undefined)
                    activate(event, data);
            };
            options.click = function (event, data) {
                _this._onclick(event, data);
                if (click !== undefined)
                    return click(event, data);
                return true;
            };
            $("#" + this._id).fancytree(options);
            //@ts-ignore
            this.tree = $.ui.fancytree.getTree("#" + this._id);
            $("#" + this._id).find("ul").css("height", "calc(100% - 8px)");
            $("#" + this._id).find("ul").css("weight", "calc(100% - 8px)");
            $("#" + this._id).find("ul").css("overflow", "auto");
        }
        /**
         * @member - get the property for the display of the item or an function to get the display from an item
         */
        set propDisplay(value) {
            this._propDisplay = value;
        }
        get propDisplay() {
            return this._propDisplay;
        }
        /**
         * @member - get the iconproperty of the item or an function to get the icon from an item
         */
        set propIcon(icon) {
            this._propIcon = icon;
        }
        get propIcon() {
            return this._propIcon;
        }
        /**
        * @member - get the childs of the item or an function to get the childs from an item
        */
        set propChilds(child) {
            this._propChilds = child;
        }
        get propChilds() {
            return this._propChilds;
        }
        onselect(handler) {
            this.addEvent("select", handler);
        }
        /**
         * register an event if an item is clicked
         * @param {function} handler - the function that is called on click
         */
        onclick(handler) {
            this.addEvent("click", handler);
        }
        filter(text) {
            // this.expandAll();
            this._readAllNodesIfNeeded().then(() => {
                if (text === "") {
                    this.tree.clearFilter();
                    // this.expandAll();
                }
                else {
                    //@ts-ignore
                    this.tree.filterNodes(text, { leavesOnly: true });
                }
            });
        }
        /**
        * get title from node
        */
        getTitleFromItem(item) {
            var ret = "";
            if (typeof (this.propDisplay) === "function") {
                ret = this.propDisplay(item);
            }
            else
                ret = item[this.propDisplay];
            return ret;
        }
        /**
        * get icon from node
        */
        getIconFromItem(item) {
            if (this.propIcon !== undefined) {
                if (typeof (this.propIcon) === "function") {
                    return this.propIcon(item);
                }
                else
                    return item[this.propIcon];
            }
            return undefined;
        }
        /**
        * get childs from node
        */
        getChildsFromItem(item) {
            var cs = undefined;
            if (typeof (this.propChilds) === "function") {
                cs = this.propChilds(item);
            }
            else
                cs = item[this.propChilds];
            return cs;
        }
        /*private getTreeNodeFromId(id:string):TreeNode{
            //@ts-ignore
            for(var entr of this.objectToNode){
                if(entr[1]._id===id)
                    return entr[1];
                //entries.return;
            }
            return undefined;
        }*/
        _onselect(event, data) {
            var item = this._itemToKey.get(data.node.data);
            event.data = item;
            this.callEvent("select", event, data);
        }
        _onclick(event, data) {
            if (event.originalEvent.target["className"].startsWith("MenuButton")) {
                this._callContextmenu(event.originalEvent);
                return;
            }
            if (event.ctrlKey === true)
                return; //only selection
            event.data = data.node.data.item;
            if (this._select !== undefined)
                this._select.value = data.node.data.item;
            this.callEvent("click", event, data);
        }
        /**
         * selects items
         */
        set selection(values) {
            this.tree.getSelectedNodes().forEach((item) => {
                item.setSelected(false);
            });
            if (values === undefined)
                return;
            this["_selectionIsWaiting"] = values;
            var _this = this;
            for (var v = 0; v < values.length; v++) {
                var item = values[v];
                this._readNodeFromItem(item).then((node) => {
                    node.setSelected(true);
                    delete this["_selectionIsWaiting"];
                });
            }
        }
        get selection() {
            var ret = [];
            if (this["_selectionIsWaiting"] !== undefined)
                return this["_selectionIsWaiting"];
            this.tree.getSelectedNodes().forEach((item) => {
                ret.push(item.data.item);
            });
            return ret;
        }
        async activateKey(key, parent = undefined) {
            var node = await this._readNodeFromKey(key);
            if (node === null)
                return false;
            await node.setActive(true);
            return true;
        }
        async expandLater(promise, expand, node, allreadySeen) {
            return this.expandAll(expand, node, allreadySeen);
        }
        /**
         * expand all nodes
         */
        async expandAll(expand = true, parent = undefined, allreadySeen = undefined) {
            var isRoot = parent === undefined;
            var all = [];
            if (parent === undefined)
                parent = this.tree.rootNode;
            if (expand === undefined)
                expand = true;
            if (allreadySeen === undefined) {
                allreadySeen = [];
            }
            if (parent.hasChildren()) {
                for (var x = 0; x < parent.children.length; x++) {
                    var node = parent.children[x];
                    if (allreadySeen.indexOf(node.data.item) === -1)
                        allreadySeen.push(node.data.item);
                    else
                        continue;
                    if (node.hasChildren() || node.isLazy) {
                        var prom = node.setExpanded(expand);
                        all.push(this.expandLater(prom, expand, node, allreadySeen));
                    }
                }
                await Promise.all(all);
            }
        }
        async expandKeys(keys) {
            var all = [];
            for (var x = 0; x < keys.length; x++) {
                all.push((await this._readNodeFromKey(keys[x])).setExpanded(true));
            }
            await Promise.all(all);
        }
        getExpandedKeys(parent = undefined, expandedNodes = undefined) {
            var isRoot = parent === undefined;
            if (parent === undefined)
                parent = this.tree.getRootNode();
            if (expandedNodes === undefined) {
                expandedNodes = [];
            }
            if (parent.hasChildren()) {
                parent.children.forEach((node) => {
                    if (node.isExpanded()) {
                        expandedNodes.push(node.key);
                        this.getExpandedKeys(node, expandedNodes);
                    }
                });
            }
            return expandedNodes;
        }
        async expandNode(node) {
            node.setActive(true);
            var list = node.getParentList(false, false);
            for (var x = 0; x < list.length; x++) {
                if (!list[x].isExpanded())
                    await list[x].setExpanded(true);
            }
        }
        async _readNodeFromItem(item) {
            var key = this._itemToKey.get(item);
            if (key === undefined)
                this._readAllKeysIfNeeded();
            key = this._itemToKey.get(item);
            return this._readNodeFromKey(key);
        }
        async _readNodeFromKey(key) {
            var nd = this.tree.getNodeByKey(key);
            if (nd === null) {
                var path = "";
                var geskey = "";
                key.split("|").forEach((k) => {
                    geskey = geskey + (geskey === "" ? "" : "|") + k;
                    path = path + "/" + geskey;
                });
                var _this = this;
                await this.tree.loadKeyPath(path, undefined);
            }
            nd = this.tree.getNodeByKey(key);
            return nd;
        }
        /**
         * set the active item
         */
        set value(value) {
            this["_valueIsWaiting"] = value;
            this._readNodeFromItem(value).then((node) => {
                node.setActive(true);
                delete this["_valueIsWaiting"];
            });
        }
        /**
         * get the active item
         **/
        get value() {
            if (this["_valueIsWaiting"] !== undefined) //async setting 
                return this["_valueIsWaiting"];
            var h = this.tree.getActiveNode();
            if (h === null)
                return undefined;
            return h.data.item;
        }
        async _readAllNodesIfNeeded() {
            if (this._allNodesReaded === true)
                return;
            if (this._allNodesReaded === false) {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        if (this._allNodesReaded === true)
                            resolve(undefined);
                        else
                            resolve(this._readAllNodesIfNeeded());
                    }, 50);
                });
            }
            this._allNodesReaded = false;
            this._readAllKeysIfNeeded();
            var allPathes = [];
            var allPathes = [];
            this._itemToKey.forEach((key) => {
                //var key=entry[1];
                var path = "";
                var geskey = "";
                key.split("|").forEach((k) => {
                    geskey = geskey + (geskey === "" ? "" : "|") + k;
                    path = path + "/" + geskey;
                });
                allPathes.push(path);
            });
            var allPromise = [];
            for (var i = 0; i < allPathes.length; i++) {
                //@ts-ignore
                allPromise.push(this.tree.loadKeyPath(allPathes[i], undefined));
            }
            await Promise.all(allPromise);
            this._allNodesReaded = true;
            //    	await Promise.all(allPromise);
            //	await this.tree.loadKeyPath(allPathes,undefined);
        }
        getKeyFromItem(item) {
            var ret = this._itemToKey.get(item);
            if (ret === undefined)
                this._readAllKeysIfNeeded();
            return this._itemToKey.get(item);
        }
        /**
         * read all keys if not allready readed
         **/
        _readAllKeysIfNeeded(item = undefined, path = undefined, allreadySeen = undefined) {
            if (item === undefined && this._allKeysReaded === true)
                return;
            if (item === undefined) {
                this.tree.getRootNode().children.forEach((child) => {
                    this._readAllKeysIfNeeded(child.data.item, "", []);
                });
                return;
            }
            if (allreadySeen.indexOf(item) === -1)
                allreadySeen.push(item);
            else
                return;
            var title = this.getTitleFromItem(item).replaceAll("|", "!");
            var key = path + (path === "" ? "" : "|") + title;
            this._itemToKey.set(item, key);
            var cs = this.getChildsFromItem(item);
            if (cs !== undefined) {
                cs.forEach((c => {
                    this._readAllKeysIfNeeded(c, key, allreadySeen);
                }));
            }
            this._allKeysReaded = true;
        }
        /**
         * @param value - set the data to show in Tree
         **/
        set items(value) {
            this._items = value;
            this._allKeysReaded = undefined;
            this._allNodesReaded = undefined;
            this._itemToKey = new Map();
            if (!Array.isArray(value))
                value = [value];
            var avalue = [];
            for (var x = 0; x < value.length; x++) {
                avalue.push(new TreeNode(this, value[x]));
            }
            this.tree.reload(avalue);
            /*        var root: Fancytree.FancytreeNode = $("#" + this._id).fancytree("getTree").rootNode;
                    root.removeChildren();
                    this.objectToNode = new Map();
                    //this._allNodes={};
                    root.addChildren(avalue);
                    for (var j = 0;j < root.children.length;j++) {
                        avalue[j].fancyNode = root.children[j];
                        this.objectToNode.set(value[j], avalue[j]);
                    }*/
        }
        get items() {
            return this._items;
        }
        /**
         * if the value is changed then the value of _component is also changed (_component.value)
         */
        set selectComponent(_component) {
            this._select = _component;
        }
        get selectComponent() {
            return this._select; //$(this.dom).text();
        }
        _callContextmenu(event) {
            var x = 9;
            //var tree=$(event.target).attr("treeid");
            //tree=$("#"+tree)[0]._this;
            var newevent = {
                originalEvent: event,
                target: $(event.target).prev()[0]
            };
            event.preventDefault();
            if (this.contextMenu !== undefined) {
                this.contextMenu._callContextmenu(newevent);
            }
            //evt.originalEvent.clientY}
            //	tree.contextMenu.show(event);
        }
        /**
         * create the contextmenu
         * @param {object} evt  the click event in the contextmenu
         **/
        _prepareContextmenu(evt) {
            //var node: TreeNode = undefined;
            var node = $.ui.fancytree.getNode(evt.target);
            //node = this._allNodes[evt.target.id];
            if (this._contextMenu !== undefined) {
                if (node.data.item === undefined)
                    return;
                var test = node.data.tree.selection;
                //multiselect and the clicked is within the selection
                if (test !== undefined && test.indexOf(node.data.item) !== -1) {
                    this._contextMenu.value = test;
                }
                else
                    this._contextMenu.value = [node === undefined ? undefined : node.data.item];
            }
        }
        /**
         * @member {jassi.ui.ContextMenu} - the contextmenu of the component
         **/
        set contextMenu(value) {
            super.contextMenu = value;
            var _this = this;
            value.onbeforeshow(function (evt) {
                _this._prepareContextmenu(evt);
            });
        }
        get contextMenu() {
            return super.contextMenu;
        }
        destroy() {
            this._items = undefined;
            super.destroy();
        }
    };
    __decorate([
        Property_29.$Property({ type: "string", description: "the property called to get the name of the item" }),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], Tree.prototype, "propDisplay", null);
    __decorate([
        Property_29.$Property({ default: "function(event?: JQueryEventObject/*, data?:Fancytree.EventData*/){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], Tree.prototype, "onclick", null);
    Tree = __decorate([
        Component_24.$UIComponent({ fullPath: "common/Tree", icon: "mdi mdi-file-tree" }),
        Jassi_62.$Class("jassi.ui.Tree"),
        Property_29.$Property({ name: "new", type: "json", componentType: "jassi.ui.TreeEditorProperties" })
        /*@$Property({ name: "new/selectMode", type: "number", default: 3, chooseFrom: [1, 2, 3], description: "1=single 2=multi 3=multi_hier" })
        @$Property({ name: "new/checkbox", type: "boolean", default: false, description: "desplay a checkbos before the node" })
        @$Property({ name: "new/multi", type: "json" })
        @$Property({ name: "new/multi/mode", type: "string", default: "", chooseFrom: ["", "sameParent", "sameLevel"], description: "multi selection mode" })
        */
        ,
        __metadata("design:paramtypes", [Object])
    ], Tree);
    exports.Tree = Tree;
    class TreeNode {
        //options.source=[ { title: 'Folder in home folder', key: 'fA100', folder: true, lazy: true }];
        constructor(tree, item, parent = undefined) {
            this.tree = tree;
            this.parent = parent;
            this._id = Registry_19.default.nextID();
            this.item = item;
            var title = this.tree.getTitleFromItem(this.item);
            this.key = (parent !== undefined ? parent.key + "|" : "") + (title === undefined ? "" : title).replaceAll("|", "!");
            this.tree._itemToKey.set(item, this.key);
            this.icon = this.tree.getIconFromItem(this.item);
            var cs = this.tree.getChildsFromItem(this.item);
            if (cs !== undefined && cs.length > 0) {
                this.lazy = true;
            }
        }
        get title() {
            var ret = this.tree.getTitleFromItem(this.item);
            var bt = "";
            if (this.tree.contextMenu !== undefined)
                bt = "<span class='MenuButton menu mdi mdi-menu-down' id=900  treeid=" + this.tree._id + "  height='10' width='10' onclick='/*jassi.ui.Tree._callContextmenu(event);*/'>";
            //prevent XSS
            ret = (ret === undefined ? "" : ret).replaceAll("<", "&lt").replaceAll(">", "&gt");
            ret = "<span id=" + this._id + ">" + ret + "</span>";
            return ret + bt;
        }
        static loadChilds(event, data) {
            var node = data.node;
            var deferredResult = jQuery.Deferred();
            var tree = data.node.data.tree;
            var _this = data.node;
            var cs = tree.getChildsFromItem(data.node.data.item);
            var childs = [];
            if (cs !== undefined && cs.length > 0) {
                for (var x = 0; x < cs.length; x++) {
                    var nd = new TreeNode(tree, cs[x], _this);
                    childs.push(nd);
                }
            }
            data.result = childs;
            return;
            /*        fancynode.removeChildren();
                    fancynode.addChildren(childs);
                    for (var j = 0;j < fancynode.children.length;j++) {
                        childs[j].fancyNode = fancynode.children[j];
                        this.tree.objectToNode.set(cs[j], childs[j]);
                    }*/
            // delete this._dummy;
        }
    }
    ;
    async function test() {
        var tree = new Tree({
            checkbox: true
        });
        var s = { name: "Sansa", id: 1 };
        var p = { name: "Peter", id: 2 };
        var u = { name: "Uwe", id: 3, childs: [p, s] };
        var t = { name: "Tom", id: 5 };
        var c = { name: "Christoph", id: 4, childs: [u, t] };
        s.childs = [c];
        tree.propDisplay = "name";
        tree.propChilds = "childs";
        /*tree.propIcon = function(data) {
            if (data.name === "Uwe")
                return "res/car.ico";
        };*/
        tree.items = [c];
        tree.width = "100%";
        tree.height = "100px";
        //  tree._readAllKeysIfNeeded();
        tree.onclick(function (data) {
            console.log("select " + data.data.name);
        });
        tree.selection = [p, s];
        var k = tree.selection;
        tree.value = p;
        //	await tree.tree.loadKeyPath(["/Christoph/Christoph|Uwe/Christoph|Uwe|Peter"],undefined);
        //		var h=tree.tree.getNodeByKey("Christoph|Uwe|Peter");
        //		tree.tree.activateKey("Christoph|Uwe|Peter");
        //["Christoph","Christoph/Uwe/Tom1"],()=>{});
        //	node.setActive(true);
        // var j = tree.value;
        window.setTimeout(async () => {
            var k = tree.selection;
            //		var nod=tree.tree.getNodeByKey("Christoph/Uwe/Tom1");
            // await tree.expandAll(true);
            // await tree.expandAll(false);
            //	var node=tree.tree.getNodeByKey("Christoph/Uwe/Peter");
            //	node.setActive(true);
            //await tree.expandAll();
            // tree.value = p;
            //tree.expandAll(false);
            // tree.value = p;
            //var k=tree.getExpandedKeys();
            // tree.expandKeys(k);
            /* tree.expandAll();
             tree.value = p;
             var l=tree.value;*/
            //  var j = tree.value;
            // alert(tree.value.name);
        }, 4000);
        //    	$(tree.__dom).dialog();
        return tree;
    }
    exports.test = test;
});
define("jassi/ui/Upload", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Component", "jassi/ui/Property"], function (require, exports, Jassi_63, Component_25, Property_30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Upload = void 0;
    let Upload = class Upload extends Component_25.Component {
        /* get dom(){
             return this.dom;
         }*/
        constructor() {
            super();
            super.init($('<input type="file" id="dateien" name="files[]" />')[0]);
            var _this = this;
            $(this.dom).on("change", function (evt) {
                _this.readUpload(evt);
            });
        }
        get accept() {
            return $(this.dom).prop("accept");
        }
        /**
         * which file types are accepted e.g ".txt,.csv"
         **/
        set accept(value) {
            $(this.dom).prop("accept", value);
        }
        get multiple() {
            return $(this.dom).prop("multiple");
        }
        /**
         * multiple files can be uploaded
         **/
        set multiple(value) {
            $(this.dom).prop("multiple", value);
        }
        async readUpload(evt) {
            var files = evt.target["files"];
            var data = {};
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var reader = new FileReader();
                reader.readAsText(file);
                data[file.name] = await file.text();
            }
            this.callEvent("uploaded", data, files, evt);
        }
        ;
        /**
         * register handler to get the uploaded data
         */
        onuploaded(handler) {
            this.addEvent("uploaded", handler);
        }
    };
    __decorate([
        Property_30.$Property(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], Upload.prototype, "accept", null);
    __decorate([
        Property_30.$Property(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], Upload.prototype, "multiple", null);
    __decorate([
        Property_30.$Property({ default: "function(data:{[file:string]:string}){\n\t\n}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function]),
        __metadata("design:returntype", void 0)
    ], Upload.prototype, "onuploaded", null);
    Upload = __decorate([
        Component_25.$UIComponent({ fullPath: "common/Upload", icon: "mdi mdi-cloud-upload-outline" }),
        Jassi_63.$Class("jassi.ui.Upload"),
        __metadata("design:paramtypes", [])
    ], Upload);
    exports.Upload = Upload;
    /*
        // UI-Events erst registrieren wenn das DOM bereit ist!
    document.addEventListener("DOMContentLoaded", function () {
        // Falls neue Eingabe, neuer Aufruf der Auswahlfunktion
        document.getElementById('dateien')
            .addEventListener('change', dateiauswahl, false);
    });*/
    function test() {
        var upload = new Upload();
        upload.multiple = true;
        upload.onuploaded(function (data) {
            debugger;
        });
        //	upload.accept=".txt,.csv";
        return upload;
    }
    exports.test = test;
});
define("jassi/ui/VariablePanel", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Component", "jassi/ui/ComponentDescriptor"], function (require, exports, Jassi_64, Panel_22, Component_26, ComponentDescriptor_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VariablePanel = void 0;
    Jassi_64.default.d = function (id) {
        if (Jassi_64.default.d[id] === true)
            return false;
        Jassi_64.default.d[id] = true;
        return true;
    };
    // console.log(jassi.d(9)?debug:0);
    // console.log(jassi.d(9)?debug:0);
    let VariablePanel = class VariablePanel extends Panel_22.Panel {
        constructor() {
            super();
            /**cache**/
            /**@member {Object.<number, boolean>} **/
            this.debugpoints = {};
        }
        async createTable() {
            var Table = (await new Promise((resolve_10, reject_10) => { require(["jassi/ui/Table"], resolve_10, reject_10); })).Table;
            this.table = new Table({
                dataTreeChildFunction: function (obj) {
                    var ret = [];
                    if (typeof (obj.value) === "string")
                        return ret;
                    for (var v in obj.value) {
                        var oval = obj.value[v];
                        ret.push({ name: v, value: oval });
                    }
                    return ret;
                }
            });
            this.table.width = "calc(100% - 2px)";
            this.table.height = "calc(100% - 2px)";
            super.add(this.table);
        }
        /**
         * VariabelPanel for id
         * @id {number} - the id
         * @returns  {jassi.ui.VariablePanel}
        **/
        static get(id) {
            if ($("#" + id).length === 0) //dummy for Codeeditor has closed
                return { __db: true, add: function () { }, update: function () { } };
            return $("#" + id)[0]._this;
        }
        clear() {
            this.value = [];
            this._cache = [];
        }
        /**
         * add variables to variabelpanel
         * @param Object<string,object> variables ["name"]=value
         */
        addAll(vars) {
            for (var key in vars) {
                this.addVariable(key, vars[key], false);
            }
            this.update();
        }
        /**
         *
         * @param {string} name - name of the variable
         * @param {object} value - the value of the variable
         * @param {boolean} [refresh] - refresh the dialog
         */
        addVariable(name, value, refresh = undefined) {
            var values;
            //@ts-ignore
            if (this.value === undefined || this.value === "")
                values = [];
            else
                values = this.value;
            var found = false;
            for (var x = 0; x < values.length; x++) {
                if (values[x].name === name) {
                    found = true;
                    values[x].value = value;
                    break;
                }
            }
            if (!found)
                values.push({ name: name, value: value });
            if (refresh !== false)
                this.update();
        }
        /**
         * analyze describeComponent(desc) -> desc.editableComponents and publish this
         **/
        updateCache() {
            this._cache = {};
            var vars = this.value;
            for (var x = 0; x < vars.length; x++) {
                var val = vars[x].value;
                var name = vars[x].name;
                this._cache[name] = val;
                if (name === "me" || name === "this") {
                    for (var key in val) {
                        this._cache[name + "." + key] = val[key];
                    }
                }
            }
            var _this = this;
            function update(key, val) {
                if (val instanceof Component_26.Component) {
                    var comps = undefined;
                    try {
                        comps = ComponentDescriptor_6.ComponentDescriptor.describe(val.constructor).resolveEditableComponents(val);
                    }
                    catch (_a) {
                    }
                    var ret = [];
                    for (var name in comps) {
                        var comp = comps[name];
                        var fname = name;
                        if (comps !== undefined && name !== "this") {
                            fname = key + "." + name;
                            _this._cache[fname] = comp;
                            update(fname, comps[name]);
                        }
                        if (comp === undefined)
                            comp = comp;
                        var complist = comp._components;
                        if (complist !== undefined) {
                            for (var o = 0; o < complist.length; o++) {
                                update(fname, complist[o]);
                            }
                        }
                    }
                }
            }
            for (var key in this._cache) {
                val = this._cache[key];
                update(key, val);
            }
        }
        /**
         * get the ids of all editable Components by the designer
         * @param {jassi.ui.Component} component - the component to inspect
         * @param {boolean} idFromLabel - if true not the id but the id form label is returned
         **/
        getEditableComponents(component, idFromLabel = undefined) {
            var ret = "";
            if (this.getVariableFromObject(component) !== undefined)
                ret = "#" + ((idFromLabel === true) ? component.domWrapper._id : component._id);
            if (component._components !== undefined) {
                for (var x = 0; x < component._components.length; x++) {
                    var t = this.getEditableComponents(component._components[x], idFromLabel);
                    if (t !== "") {
                        ret = ret + (ret === "" ? "" : ",") + t;
                    }
                }
            }
            return ret;
        }
        /**
        * get all known instances for type
        * @param {type} type - the type we are interested
        * @returns {[string]}
        */
        getVariablesForType(type) {
            var ret = [];
            var vars = this.value;
            if (type === undefined)
                return ret;
            for (var x = 0; x < vars.length; x++) {
                var val = vars[x].value;
                var name = vars[x].name;
                if (val !== undefined && (val instanceof type))
                    ret.push(name);
            }
            //seach in this
            vars = this._cache["this"];
            for (let y in vars) {
                if (vars[y] instanceof type)
                    ret.push("this." + y);
            }
            //seach in me
            vars = this._cache["me"];
            if (vars !== undefined) {
                for (let z in vars) {
                    if (vars[z] instanceof type)
                        ret.push("me." + z);
                }
            }
            return ret;
        }
        /**
         * gets the name of the variabel that holds the object
         * @param {object} ob - the
         */
        getVariableFromObject(ob) {
            for (var key in this._cache) {
                if (this._cache[key] === ob)
                    return key;
            }
        }
        /**
         * gets the name object of the given variabel
         * @param {string} ob - the name of the variable
         */
        getObjectFromVariable(varname) {
            if (this._cache === undefined)
                return undefined;
            return this._cache[varname];
        }
        /**
          * renames a variable in design
          * @param {string} oldName
          * @param {string} newName
          */
        renameVariable(oldName, newName) {
            if (oldName.startsWith("this.")) {
                oldName = oldName.substring(5);
                if (newName.startsWith("this."))
                    newName = newName.substring(5);
                let vars = this._cache["this"];
                vars[newName] = vars[oldName];
                delete vars[oldName];
            }
            else if (oldName.startsWith("me.")) {
                oldName = oldName.substring(3);
                if (newName.startsWith("me."))
                    newName = newName.substring(3);
                let vars = this._cache["me"];
                vars[newName] = vars[oldName];
                delete vars[oldName];
            }
            else {
                let vars = this.value;
                for (var x = 0; x < vars.length; x++) {
                    var val = vars[x].value;
                    var name = vars[x].name;
                    if (name === oldName) {
                        vars[x].name = newName;
                    }
                }
            }
            this.update();
        }
        /**
         * refreshes Table
         */
        update() {
            this.value = this.value;
            this.updateCache();
        }
        set value(value) {
            this._items = value;
            if (this.table)
                this.table.items = value;
        }
        get value() {
            return this._items; //this.table.items;
        }
        static getMembers(ob, withFunction) {
            if (withFunction === undefined)
                withFunction = false;
            var ret = [];
            for (var k in ob) {
                ret.push(k);
            }
            if (withFunction) {
                var type = ob.__proto__;
                if (ob.constructor !== null) //ob is a class
                    type = ob;
                this._getMembersProto(type, ret, ob);
            }
            return ret;
        }
        static _getMembersProto(proto, ret, ob) {
            if (proto === null)
                return;
            if (proto.constructor.name === "Object")
                return;
            var names = Object.getOwnPropertyNames(proto);
            for (var x = 0; x < names.length; x++) {
                ret.push(names[x]);
            }
            if (proto.__proto__ !== undefined && proto.__proto__ !== null) {
                this._getMembersProto(proto.__proto__, ret, ob);
            }
        }
        /**
        *
        * @param {string} name - the name of the object
        */
        evalExpression(name) {
            var toEval = "_variables_._curCursor=" + name + ";";
            var vals = this.value;
            for (var x = 0; x < vals.length; x++) {
                var v = vals[x];
                var sname = v.name;
                if (sname === "this")
                    sname = "this_this";
                if (sname !== "windows")
                    toEval = "var " + sname + "=_variables_.getObjectFromVariable(\"" + v.name + "\");" + toEval;
            }
            toEval = "var ev=function(){" + toEval + '};ev.bind(_variables_.getObjectFromVariable("this"))();';
            toEval = "var _variables_=$('#" + this._id + "')[0]._this;" + toEval;
            try {
                eval(toEval);
            }
            catch (ex) {
            }
            //this is the real object for .
            return this._curCursor;
        }
        destroy() {
            this.clear();
            this.debugpoints = [];
            this.table.items = [];
            super.destroy();
        }
    };
    VariablePanel = __decorate([
        Jassi_64.$Class("jassi.ui.VariablePanel"),
        __metadata("design:paramtypes", [])
    ], VariablePanel);
    exports.VariablePanel = VariablePanel;
});
define("jassi/ui/PropertyEditors/BooleanEditor", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Checkbox", "jassi/ui/PropertyEditors/Editor"], function (require, exports, Jassi_65, Checkbox_1, Editor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanEditor = void 0;
    let BooleanEditor = class BooleanEditor extends Editor_1.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Checkbox_1.Checkbox();
            var _this = this;
            this.component.onclick(function (param) {
                _this._onclick(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property);
            this.component.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onclick(param) {
            var val = this.component.value;
            this.propertyEditor.setPropertyInCode(this.property.name, val.toString());
            this.propertyEditor.setPropertyInDesign(this.property.name, val);
            super.callEvent("edit", param);
        }
    };
    BooleanEditor = __decorate([
        Editor_1.$PropertyEditor(["boolean"]),
        Jassi_65.$Class("jassi.ui.PropertyEditors.BooleanEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], BooleanEditor);
    exports.BooleanEditor = BooleanEditor;
});
define("jassi/ui/PropertyEditors/ClassSelectorEditor", ["require", "exports", "jassi/ui/Select", "jassi/ui/PropertyEditors/Editor", "jassi/ui/PropertyEditors/JsonEditor", "jassi/util/Tools", "jassi/ui/converters/StringConverter", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Textbox", "remote/jassi/base/Registry", "jassi/ui/ComponentDescriptor", "remote/jassi/base/Classes"], function (require, exports, Select_3, Editor_2, JsonEditor_1, Tools_2, StringConverter_1, Jassi_66, Panel_23, Textbox_8, Registry_20, ComponentDescriptor_7, Classes_20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassSelectorEditor = void 0;
    let ClassSelectorEditor = class ClassSelectorEditor extends Editor_2.Editor {
        /**
         * Checkbox Editor for boolean values
         * used by PropertyEditor
         * @class jassi.ui.PropertyEditors.BooleanEditor
         */
        constructor(property = undefined, propertyEditor = undefined) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Panel_23.Panel();
            this.select = new Select_3.Select();
            this.select.width = "calc(100% - 26px)";
            this.property = Tools_2.Tools.copyObject(property);
            this.jsonEditor = new JsonEditor_1.JsonEditor(this.property, propertyEditor);
            this.jsonEditor.parentPropertyEditor = this;
            this.jsonEditor.component.text = "";
            this.jsonEditor.component.icon = "mdi mdi-glasses";
            this.jsonEditor.component.width = 26;
            this.component.add(this.select);
            this.component.add(this.jsonEditor.getComponent());
            var _this = this;
            this.jsonEditor.onpropertyChanged(function (param) {
                return;
            });
            this.select.onchange(function (sel) {
                var converter = sel.data;
                _this.changeConverter(converter);
            });
            this.initSelect();
            // this.component.onclick(function(param){
            //     _this._onclick(param);
            // });
        }
        changeConverter(converter) {
            var _this = this;
            var testval = _this.propertyEditor.getPropertyValue(_this.property);
            var shortClassname = converter.classname.split(".")[converter.classname.split(".").length - 1];
            if (testval === undefined || !testval.startsWith("new " + shortClassname)) {
                _this.propertyEditor.setPropertyInCode(_this.property.name, "new " + shortClassname + "()");
                var file = converter.classname.replaceAll(".", "/");
                var stype = file.split("/")[file.split("/").length - 1];
                _this.propertyEditor.addImportIfNeeded(stype, file);
                Classes_20.classes.loadClass(converter.classname).then((pclass) => {
                    _this.propertyEditor.setPropertyInDesign(_this.property.name, new pclass());
                });
            }
            _this.property.constructorClass = converter.classname;
            _this.jsonEditor.showThisProperties = ComponentDescriptor_7.ComponentDescriptor.describe(Classes_20.classes.getClass(converter.classname)).fields;
            for (var x = 0; x < _this.jsonEditor.showThisProperties.length; x++) {
                var test = _this.jsonEditor.showThisProperties[x].name;
                if (test.startsWith("new")) {
                    _this.jsonEditor.showThisProperties[x].name = _this.property.name + test.substring(3);
                }
            }
            _this.jsonEditor.ob = {};
            _this.jsonEditor.component.text = "";
        }
        initSelect() {
            var _this = this;
            Registry_20.default.loadAllFilesForService(this.property.service).then(function () {
                var converters = Registry_20.default.getData(_this.property.service);
                var data = [];
                /*data.push({
                       classname:undefined,
                       data:""
                   });*/
                for (var x = 0; x < converters.length; x++) {
                    var con = converters[x];
                    var cname = Classes_20.classes.getClassName(con.oclass);
                    var name = cname;
                    if (con.params[0] && con.params[0].name !== undefined)
                        name = con.params[0].name;
                    data.push({
                        classname: cname,
                        data: name
                    });
                }
                _this.select.items = data;
                _this.select.display = "data";
                _this.ob = _this.ob;
            });
            //	this.select
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            if (this.propertyEditor === undefined)
                return;
            if (this.select.items === undefined)
                return; //list is not inited
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined) {
                for (var x = 0; x < this.select.items.length; x++) {
                    var sel = this.select.items[x];
                    var shortClassname = sel.classname;
                    if (shortClassname !== undefined) {
                        shortClassname = shortClassname.split(".")[shortClassname.split(".").length - 1];
                        if (value.indexOf(shortClassname) > -1) {
                            this.select.value = sel;
                            this.changeConverter(sel);
                            break;
                        }
                    }
                }
            }
            else {
                this.select.value = "";
            }
            super.ob = ob;
            // this.component.value=value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onclick(param) {
            var val = this.component.value;
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            this.propertyEditor.setPropertyInDesign(this.property.name, val);
            super.callEvent("edit", param);
        }
        layout() {
            var me = this.me = {};
            me.pan = new Panel_23.Panel();
            me.tb = new Textbox_8.Textbox();
            me.pan.height = 15;
            me.pan.add(me.tb);
            me.tb.height = 15;
            me.tb.converter = new StringConverter_1.StringConverter();
        }
        destroy() {
            this.select.destroy();
            super.destroy();
        }
    };
    ClassSelectorEditor = __decorate([
        Editor_2.$PropertyEditor(["classselector"]),
        Jassi_66.$Class("jassi.ui.PropertyEditors.ClassSelectorEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], ClassSelectorEditor);
    exports.ClassSelectorEditor = ClassSelectorEditor;
    Jassi_66.default.test = function () {
        ComponentDescriptor_7.ComponentDescriptor.cache = {};
        var t = new ClassSelectorEditor();
        t.layout();
        return t.me.pan;
    };
});
define("jassi/ui/PropertyEditors/ColorEditor", ["require", "exports", "jassi/ui/PropertyEditor", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Textbox", "remote/jassi/base/Jassi", "jassi/ui/Select", "jassi/ui/BoxPanel", "jassi/ext/spectrum"], function (require, exports, PropertyEditor_4, Editor_3, Textbox_9, Jassi_67, Select_4, BoxPanel_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test2 = exports.test = exports.ColorEditor = void 0;
    var colors = ["black", "silver", "gray", "white", "maroon", "red", "purple", "fuchsia", "green", "lime", "olive", "yellow", "navy", "blue", "teal", "aqua", "orange", "aliceblue", "antiquewhite", "aquamarine", "azure", "beige", "bisque", "blanchedalmond", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "gainsboro", "ghostwhite", "gold", "goldenrod", "greenyellow", "grey", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "limegreen", "linen", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "oldlace", "olivedrab", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan", "thistle", "tomato", "turquoise", "violet", "wheat", "whitesmoke", "yellowgreen", "rebeccapurple"];
    let ColorEditor = 
    /**
    * Editor for color
    * used by PropertyEditor
    **/
    class ColorEditor extends Editor_3.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            var _this = this;
            /** @member - the renedering component **/
            this.component = new BoxPanel_8.BoxPanel();
            this.component.horizontal = true;
            this.icon = new Textbox_9.Textbox();
            this.select = new Select_4.Select();
            this.component.add(this.select);
            this.component.add(this.icon);
            this.select.items = colors;
            this.select.display = function (color) {
                return "<span><div style='float:left;width:10px;height:10px;background:" + color + "'></div>" + color + "</span>";
            };
            var spec = $(this.icon.dom)["spectrum"]({
                color: "#f00",
                change: function (color) {
                    var scolor = color.toHexString();
                    var old = _this.select.items;
                    if (old.indexOf(scolor) === -1)
                        old.push(scolor);
                    _this.select.items = old;
                    _this.select.value = scolor;
                    _this._onchange({});
                    //		    _this.paletteChanged(color.toHexString()); // #ff0000
                }
            });
            //correct height
            var bt = $(this.icon.domWrapper).find(".sp-preview");
            bt.css("width", "8px");
            bt.css("height", "8px");
            var bx = $(this.icon.domWrapper).find(".sp-replacer");
            bx.css("height", "10px");
            var bp = $(this.icon.domWrapper).find(".sp-dd");
            bp.css("height", "6px");
            //spec.width="10px";
            //   this.component.dom=font[0];
            this.select.onchange(function (param) {
                _this._onchange(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (!value || value === "")
                value = "";
            else
                value = value.substring(1, value.length - 1);
            $(this.icon.dom)["spectrum"]("set", value);
            var old = this.select.items;
            if (old.indexOf(value) === -1)
                old.push(value);
            this.select.items = old;
            this.select.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        paletteChanged(color) {
            //var val =  "\"" + color + "\"";
            //this.propertyEditor.setPropertyInCode(this.property.name, val);
            //this.propertyEditor.setPropertyInDesign(this.property.name, color);
            this.select.value = color;
            //super.callEvent("edit", color);
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onchange(param) {
            var val = this.select.value;
            val = "\"" + val + "\"";
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            var oval = this.select.value;
            $(this.icon.dom)["spectrum"]("set", oval);
            this.propertyEditor.setPropertyInDesign(this.property.name, oval);
            super.callEvent("edit", param);
        }
    };
    ColorEditor = __decorate([
        Editor_3.$PropertyEditor(["color"]),
        Jassi_67.$Class("jassi.ui.PropertyEditors.ColorEditor")
        /**
        * Editor for color
        * used by PropertyEditor
        **/
        ,
        __metadata("design:paramtypes", [Object, Object])
    ], ColorEditor);
    exports.ColorEditor = ColorEditor;
    function test() {
        var prop = new PropertyEditor_4.PropertyEditor(undefined);
        prop.value = new Textbox_9.Textbox();
        return prop;
    }
    exports.test = test;
    function test2() {
        var panel = new BoxPanel_8.BoxPanel();
        panel.horizontal = false;
        var icon = new Textbox_9.Textbox();
        var textbox = new Textbox_9.Textbox();
        panel.add(textbox);
        panel.add(icon);
        var spec = $(icon.dom)["spectrum"]({
            color: "#f00"
        });
        spec.width = "10px";
        spec.height = "10px";
        return panel;
    }
    exports.test2 = test2;
});
define("jassi/ui/PropertyEditors/ComponentSelectorEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Select", "remote/jassi/base/Classes", "remote/jassi/base/Jassi"], function (require, exports, Editor_4, Select_5, Classes_21, Jassi_68) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.ComponentSelectorEditor = void 0;
    /**
     * select one or more instances of an class
     * used by PropertyEditor
     **/
    let ComponentSelectorEditor = class ComponentSelectorEditor extends Editor_4.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Select_5.Select({
                multiple: (property.componentType.indexOf("[") === 0)
            });
            var _this = this;
            this.component.onchange(function (param) {
                _this._onchange(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var scomponentType = this.property.componentType.replace("[", "").replace("]", "");
            var data = this.propertyEditor.getVariablesForType(Classes_21.classes.getClass(scomponentType));
            this.component.items = data === undefined ? [] : data;
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (this.property.componentType.indexOf("[") === 0 && value) {
                value = value.substring(1, value.length - 1).split(",");
            }
            this.component.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onchange(param) {
            var val = this.component.value;
            if (this.property.componentType.indexOf("[") === 0) {
                let oval = [];
                let code = "";
                for (var x = 0; x < val.length; x++) {
                    code = code + (code === "" ? "" : ",") + val[x];
                    let o = this.propertyEditor.getObjectFromVariable(val[x]);
                    oval.push(o);
                }
                this.propertyEditor.setPropertyInCode(this.property.name, "[" + code + "]");
                this.propertyEditor.setPropertyInDesign(this.property.name, oval);
            }
            else {
                let oval = this.propertyEditor.getObjectFromVariable(val);
                this.propertyEditor.setPropertyInCode(this.property.name, val);
                this.propertyEditor.setPropertyInDesign(this.property.name, oval);
            }
            super.callEvent("edit", param);
        }
    };
    ComponentSelectorEditor = __decorate([
        Editor_4.$PropertyEditor(["componentselector"]),
        Jassi_68.$Class("jassi.ui.PropertyEditors.ComponentSelectorEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], ComponentSelectorEditor);
    exports.ComponentSelectorEditor = ComponentSelectorEditor;
    function test() {
    }
    exports.test = test;
});
define("jassi/ui/PropertyEditors/DBObjectEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/Textbox", "jassi/ui/ObjectChooser", "remote/jassi/base/Classes"], function (require, exports, Editor_5, Jassi_69, Panel_24, Textbox_10, ObjectChooser_1, Classes_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DBObjectEditor = void 0;
    let DBObjectEditor = class DBObjectEditor extends Editor_5.Editor {
        /**
         * Checkbox Editor for boolean values
         * used by PropertyEditor
         * @class jassi.ui.PropertyEditors.BooleanEditor
         */
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Panel_24.Panel( /*{useSpan:true}*/);
            this._textbox = new Textbox_10.Textbox();
            this._objectchooser = new ObjectChooser_1.ObjectChooser();
            this._objectchooser.width = 24;
            this._textbox.width = "calc(100% - 34px)";
            this.component.height = 24;
            this.component.add(this._textbox);
            this.component.add(this._objectchooser);
            var _this = this;
            this._textbox.onchange(function (param) {
                _this._onchange(param);
            });
            this._objectchooser.onclick(function (ob) {
                _this._objectchooser.items = _this.property.componentType;
            }, false);
            this._objectchooser.onchange(function (ob) {
                _this.dbobject = _this._objectchooser.value;
                _this._textbox.value = _this._objectchooser.value.id;
                _this._onchange();
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            //databinder,"prop"
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined) {
                //jassi.db.load("de.Kunde",9);
                if (value.startsWith("jassi.db.load")) {
                    var nr = value.split(",")[1];
                    nr = nr.substring(0, nr.indexOf(")") - 1);
                    this._textbox.value = nr;
                }
            }
            else {
                this._textbox.value = "";
            }
            var _this = this;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        async loadObject(id) {
            var tp = await Classes_22.classes.loadClass(this.property.componentType);
            return await tp["findOne"](parseInt(id));
        }
        /**
        * intern the value changes
        * @param {type} param
        */
        _onchange(param = undefined) {
            var val = this._textbox.value;
            var type = this.property.componentType;
            var sval = "jassi.db.load(\"" + type + "\"," + val + ")";
            var _this = this;
            this.propertyEditor.setPropertyInCode(this.property.name, sval);
            if (val && val !== "" && this.dbobject === undefined) {
                this.loadObject(val).then((ob) => {
                    _this.dbobject = ob;
                    _this.propertyEditor.setPropertyInDesign(_this.property.name, _this.dbobject);
                });
            }
            else
                this.propertyEditor.setPropertyInDesign(this.property.name, this.dbobject);
            /* var _this=this;
             jassi.db.load("de.Kunde",val).then(function(ob){
                 _this.propertyEditor.setPropertyInDesign(_this.property.name,ob);
             });*/
            /*
            var func=this.propertyEditor.value[this.property.name];
            var binder=this.propertyEditor.getObjectFromVariable(sp[1]);
            this.propertyEditor.value[this.property.name](binder,sp[0]);
            //setPropertyInDesign(this.property.name,val);*/
            super.callEvent("edit", param);
        }
    };
    DBObjectEditor = __decorate([
        Editor_5.$PropertyEditor(["dbobject"]),
        Jassi_69.$Class("jassi.ui.PropertyEditors.DBObjectEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], DBObjectEditor);
    exports.DBObjectEditor = DBObjectEditor;
});
define("jassi/ui/PropertyEditors/DatabinderEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Databinder", "remote/jassi/base/Jassi", "jassi/ui/Textbox"], function (require, exports, Editor_6, Databinder_4, Jassi_70, Textbox_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DatabinderEditor = void 0;
    let DatabinderEditor = class DatabinderEditor extends Editor_6.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Textbox_11.Textbox();
            var _this = this;
            this.component.onchange(function (param) {
                _this._onchange(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            //databinder,"prop"
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined) {
                var sp = value.replaceAll('"', "").split(",");
                value = sp[1] + "-" + sp[0];
                this.component.value = value;
            }
            else {
                this.component.value = "";
            }
            //TODO call this on focus
            var binders = this.propertyEditor.getVariablesForType(Databinder_4.Databinder);
            if (binders !== undefined) {
                var comps = [];
                for (var x = 0; x < binders.length; x++) {
                    var binder = this.propertyEditor.getObjectFromVariable(binders[x]);
                    if (binder === undefined)
                        continue;
                    let ob = binder.value;
                    if (ob !== undefined) {
                        for (var m in ob) {
                            comps.push(m + "-" + binders[x]);
                        }
                    }
                }
                this.component.autocompleter = comps;
            }
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
        * intern the value changes
        * @param {type} param
        */
        _onchange(param) {
            var val = this.component.value;
            var sp = val.split("-");
            val = sp[1] + ',"' + sp[0] + '"';
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            var func = this.propertyEditor.value[this.property.name];
            var binder = this.propertyEditor.getObjectFromVariable(sp[1]);
            this.propertyEditor.value[this.property.name](binder, sp[0]);
            //setPropertyInDesign(this.property.name,val);
            super.callEvent("edit", param);
        }
    };
    DatabinderEditor = __decorate([
        Editor_6.$PropertyEditor(["databinder"]),
        Jassi_70.$Class("jassi.ui.PropertyEditors.DatabinderEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], DatabinderEditor);
    exports.DatabinderEditor = DatabinderEditor;
});
define("jassi/ui/PropertyEditors/DefaultEditor", ["require", "exports", "jassi/ui/Textbox", "jassi/ui/PropertyEditors/Editor", "remote/jassi/base/Jassi"], function (require, exports, Textbox_12, Editor_7, Jassi_71) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let DefaultEditor = class DefaultEditor extends Editor_7.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Textbox_12.Textbox();
            var _this = this;
            this.component.onchange(function (param) {
                _this._onchange(param);
            });
            if (property.chooseFrom !== undefined) {
                if (typeof (property.chooseFrom) === "function") {
                    this.component.autocompleter = function () {
                        return property.chooseFrom(_this.ob);
                    };
                }
                else
                    this.component.autocompleter = property.chooseFrom;
            }
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined && this.property.type === "string" && typeof value === 'string' && value.startsWith("\"") && value.endsWith("\"")) {
                value = value.substring(1, value.length - 1);
            }
            else if (value !== undefined && this.property.type === "number[]") {
                if (typeof (value) === "string")
                    value = value.replaceAll("[", "").replaceAll("]", "");
                else {
                    value = value.join(",");
                }
            }
            this.component.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onchange(param) {
            var val = this.component.value;
            if (this.property.type === "string")
                val = "\"" + val + "\"";
            if (this.property.type === "number[]")
                val = (val === "" ? "undefined" : "[" + val + "]");
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            var oval = this.component.value;
            if (this.property.type === "number") {
                oval = Number(oval);
            }
            if (this.property.type === "number[]") {
                if (oval === "")
                    oval = undefined;
                else {
                    var all = oval.split(",");
                    oval = [];
                    for (var x = 0; x < all.length; x++) {
                        oval.push(Number(all[x].trim()));
                    }
                }
            }
            this.propertyEditor.setPropertyInDesign(this.property.name, oval);
            super.callEvent("edit", param);
        }
    };
    DefaultEditor = __decorate([
        Editor_7.$PropertyEditor(["string", "number", "number[]"]),
        Jassi_71.$Class("jassi.ui.PropertyEditors.DefaultEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], DefaultEditor);
});
define("jassi/ui/PropertyEditors/Editor", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry"], function (require, exports, Jassi_72, Registry_21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Editor = exports.$PropertyEditor = void 0;
    function $PropertyEditor(supportedtypes) {
        return function (pclass) {
            Registry_21.default.register("$PropertyEditor", pclass, supportedtypes);
        };
    }
    exports.$PropertyEditor = $PropertyEditor;
    let Editor = class Editor {
        /**
        * Editor for number and string
        * used by PropertyEditor
        * @class jassi.ui.PropertyEditors.DefaultEditor
        */
        constructor(property, propertyEditor) {
            /** @member - the renedering component **/
            this.component = undefined;
            /** @member - the edited object */
            this._ob = undefined;
            /** @member {string} - the name of the variable */
            /** @member {jassi.ui.Property} - the property to edit */
            this.property = property;
            /** @member {jassi.ui.PropertEditor} - the PropertyEditor instance */
            this.propertyEditor = propertyEditor;
            /** @member {Object.<string,function>} - all event handlers*/
            this._eventHandler = {};
        }
        /**
         * adds an event
         * @param {type} name - the name of the event
         * @param {function} func - callfunction for the event
         */
        addEvent(name, func) {
            var events = this._eventHandler[name];
            if (events === undefined) {
                events = [];
                this._eventHandler[name] = events;
            }
            events.push(func);
        }
        /**
         * call the event
         * @param {name} name - the name of the event
         * @param {object} param 1- parameter for the event
         * @param {object} param 2- parameter for the event
         * @param {object} param 3- parameter for the event
         */
        callEvent(name, param1 = undefined, param2 = undefined, param3 = undefined) {
            var events = this._eventHandler[name];
            if (events === undefined)
                return;
            if (name === "edit") {
                if (param1 === undefined)
                    param1 = {};
                param1.property = this.property.name;
            }
            for (var x = 0; x < events.length; x++) {
                events[x](param1, param2, param3);
            }
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            this._ob = ob;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return undefined;
        }
        /**
         * called on value changes
         * @param handler - function(oldValue,newValue)
         */
        onedit(handler) {
            this.addEvent("edit", handler);
        }
        destroy() {
            if (this.component !== undefined) {
                this.component.destroy();
            }
        }
    };
    Editor = __decorate([
        Jassi_72.$Class("jassi.ui.PropertyEditors.Editor"),
        __metadata("design:paramtypes", [Object, Object])
    ], Editor);
    exports.Editor = Editor;
});
define("jassi/ui/PropertyEditors/FontEditor", ["require", "exports", "jassi/ui/PropertyEditor", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Textbox", "remote/jassi/base/Jassi", "jassi/ui/Select", "jassi/ui/CSSProperties"], function (require, exports, PropertyEditor_5, Editor_8, Textbox_13, Jassi_73, Select_6, CSSProperties_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.FontEditor = void 0;
    let systemFonts = ["Arial", "Helvetica Neue", "Courier New", "Times New Roman", "Comic Sans MS", "Impact"];
    let googleFonts = ["Aclonica", "Allan", "Annie Use Your Telescope", "Anonymous Pro", "Allerta Stencil", "Allerta", "Amaranth", "Anton", "Architects Daughter", "Arimo", "Artifika", "Arvo", "Asset", "Astloch", "Bangers", "Bentham", "Bevan", "Bigshot One", "Bowlby One", "Bowlby One SC", "Brawler", "Buda:300", "Cabin", "Calligraffitti", "Candal", "Cantarell", "Cardo", "Carter One", "Caudex", "Cedarville Cursive", "Cherry Cream Soda", "Chewy", "Coda", "Coming Soon", "Copse", "Corben", "Cousine", "Covered By Your Grace", "Crafty Girls", "Crimson Text", "Crushed", "Cuprum", "Damion", "Dancing Script", "Dawning of a New Day", "Didact Gothic", "Droid Sans", "Droid Serif", "EB Garamond", "Expletus Sans", "Fontdiner Swanky", "Forum", "Francois One", "Geo", "Give You Glory", "Goblin One", "Goudy Bookletter 1911", "Gravitas One", "Gruppo", "Hammersmith One", "Holtwood One SC", "Homemade Apple", "Inconsolata", "Indie Flower", "Irish Grover", "Istok Web", "Josefin Sans", "Josefin Slab", "Judson", "Jura", "Just Another Hand", "Just Me Again Down Here", "Kameron", "Kenia", "Kranky", "Kreon", "Kristi", "La Belle Aurore", "Lato", "League Script", "Lekton", "Limelight", "Lobster", "Lobster Two", "Lora", "Love Ya Like A Sister", "Loved by the King", "Luckiest Guy", "Maiden Orange", "Mako", "Maven Pro", "Maven Pro:900", "Meddon", "MedievalSharp", "Megrim", "Merriweather", "Metrophobic", "Michroma", "Miltonian Tattoo", "Miltonian", "Modern Antiqua", "Monofett", "Molengo", "Mountains of Christmas", "Muli:300", "Muli", "Neucha", "Neuton", "News Cycle", "Nixie One", "Nobile", "Nova Cut", "Nova Flat", "Nova Mono", "Nova Oval", "Nova Round", "Nova Script", "Nova Slim", "Nova Square", "Nunito", "Old Standard TT", "Open Sans:300", "Open Sans", "Open Sans:600", "Open Sans:800", "Open Sans Condensed:300", "Orbitron", "Orbitron:500", "Orbitron:700", "Orbitron:900", "Oswald", "Over the Rainbow", "Reenie Beanie", "Pacifico", "Patrick Hand", "Paytone One", "Permanent Marker", "Philosopher", "Play", "Playfair Display", "Podkova", "Press Start 2P", "Puritan", "Quattrocento", "Quattrocento Sans", "Radley", "Raleway:100", "Redressed", "Rock Salt", "Rokkitt", "Ruslan Display", "Schoolbell", "Shadows Into Light", "Shanti", "Sigmar One", "Six Caps", "Slackey", "Smythe", "Sniglet", "Sniglet:800", "Special Elite", "Stardos Stencil", "Sue Elen Francisco", "Sunshiney", "Swanky and Moo Moo", "Syncopate", "Tangerine", "Tenor Sans", "Terminal Dosis Light", "The Girl Next Door", "Tinos", "Ubuntu", "Ultra", "Unkempt", "UnifrakturCook:bold", "UnifrakturMaguntia", "Varela", "Varela Round", "Vibur", "Vollkorn", "VT323", "Waiting for the Sunrise", "Wallpoet", "Walter Turncoat", "Wire One", "Yanone Kaffeesatz", "Yeseva One", "Zeyada"];
    let FontEditor = 
    /**
    * Editor for font
    * used by PropertyEditor
    **/
    class FontEditor extends Editor_8.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Select_6.Select({
                "multiple": false,
                "placeholder": "select a font",
                "allowDeselect": false
            });
            this.component.display = function (item) {
                return '<span style=font-family:"' + item + '>' + item + '</span>';
            };
            var all = [];
            for (let i = 0; i < systemFonts.length; i++) {
                all.push(systemFonts[i]);
            }
            for (let i = 0; i < googleFonts.length; i++) {
                all.push(googleFonts[i]);
                CSSProperties_3.loadFontIfNedded(googleFonts[i]);
            }
            this.component.items = all;
            //   this.component.dom=font[0];
            var _this = this;
            this.component.onchange(function (param) {
                _this._onchange(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined && value.length > 1)
                value = value.substring(1, value.length - 1);
            this.component.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onchange(param) {
            var val = this.component.value;
            val = "\"" + val + "\"";
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            var oval = this.component.value;
            this.propertyEditor.setPropertyInDesign(this.property.name, oval);
            super.callEvent("edit", param);
        }
    };
    FontEditor = __decorate([
        Editor_8.$PropertyEditor(["font"]),
        Jassi_73.$Class("jassi.ui.PropertyEditors.FontEditor")
        /**
        * Editor for font
        * used by PropertyEditor
        **/
        ,
        __metadata("design:paramtypes", [Object, Object])
    ], FontEditor);
    exports.FontEditor = FontEditor;
    function test() {
        var prop = new PropertyEditor_5.PropertyEditor(undefined);
        prop.value = new Textbox_13.Textbox();
        return prop;
    }
    exports.test = test;
});
define("jassi/ui/PropertyEditors/FunctionEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Button", "remote/jassi/base/Jassi"], function (require, exports, Editor_9, Button_12, Jassi_74) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionEditor = void 0;
    let FunctionEditor = class FunctionEditor extends Editor_9.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Button_12.Button();
            var _this = this;
            this.component.onclick(function (param) {
                _this._onclick(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property, true);
            if (value === undefined) {
                this.component.text = "none";
            }
            else
                this.component.text = "function";
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onclick(param) {
            var val = this.component.text;
            if (val !== "function") { //function is still empty
                var value = this.propertyEditor.parser.getPropertyValue(this.propertyEditor.variablename, this.property.name);
                this.propertyEditor.setPropertyInCode(this.property.name, this.property.default);
                this.component.value = "function";
                //  this.propertyEditor.gotoCodeLine(line + 1);
                super.callEvent("edit", param);
            } /* else {//function is already defined so goto
                let line = this.propertyEditor.parser.data[this.propertyEditor.variablename][this.property.name][0].linestart;
                this.propertyEditor.gotoCodeLine(line + 1);
    
            }*/
            var node = this.propertyEditor.parser.data[this.propertyEditor.variablename][this.property.name][0].node;
            var pos = node["expression"].arguments[0].body.pos;
            this.propertyEditor.gotoCodePosition(pos + 2);
        }
    };
    FunctionEditor = __decorate([
        Editor_9.$PropertyEditor(["function"]),
        Jassi_74.$Class("jassi.ui.PropertyEditors.FunctionEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], FunctionEditor);
    exports.FunctionEditor = FunctionEditor;
});
define("jassi/ui/PropertyEditors/HTMLEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "remote/jassi/base/Jassi", "jassi/ui/Textbox", "jassi/ui/ObjectChooser", "jassi/ui/Panel"], function (require, exports, Editor_10, Jassi_75, Textbox_14, ObjectChooser_2, Panel_25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTMLEditor = void 0;
    let HTMLEditor = class HTMLEditor extends Editor_10.Editor {
        /**
         * Checkbox Editor for boolean values
         * used by PropertyEditor
         * @class jassi.ui.PropertyEditors.BooleanEditor
         */
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Panel_25.Panel( /*{useSpan:true}*/);
            this._textbox = new Textbox_14.Textbox();
            this._objectchooser = new ObjectChooser_2.ObjectChooser();
            this._objectchooser.width = 24;
            this._textbox.width = "calc(100% - 28px)";
            this.component.height = 24;
            this.component.add(this._textbox);
            this.component.add(this._objectchooser);
            var _this = this;
            this._textbox.onchange(function (param) {
                _this._onchange('"' + param + '"');
            });
            this._objectchooser.onclick(function (ob) {
                _this._objectchooser.items = _this.property.type;
            });
            this._objectchooser.onchange(function (ob) {
                _this._textbox.value = _this._objectchooser.value.id;
                _this._onchange();
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            //databinder,"prop"
            var value = this.propertyEditor.getPropertyValue(this.property);
            if (value !== undefined && this.property.type === "string" && value.startsWith("\"") && value.endsWith("\"")) {
                value = value.substring(1, value.length - 1);
            }
            this._textbox.value = value;
            var _this = this;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
        * intern the value changes
        * @param {type} param
        */
        _onchange(param = undefined) {
            var val = this._textbox.value;
            var type = this.property.type;
            // var sval="jassi.db.load(\""+type+"\","+val+")";
            this.propertyEditor.setPropertyInCode(this.property.name, val);
            this.propertyEditor.setPropertyInDesign(this.property.name, val);
            /* var _this=this;
             jassi.db.load("de.Kunde",val).then(function(ob){
                 _this.propertyEditor.setPropertyInDesign(_this.property.name,ob);
             });*/
            /*
            var func=this.propertyEditor.value[this.property.name];
            var binder=this.propertyEditor.getObjectFromVariable(sp[1]);
            this.propertyEditor.value[this.property.name](binder,sp[0]);
            //setPropertyInDesign(this.property.name,val);*/
            super.callEvent("edit", param);
        }
    };
    HTMLEditor = __decorate([
        Editor_10.$PropertyEditor(["html"]),
        Jassi_75.$Class("jassi.ui.PropertyEditors.HTMLEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], HTMLEditor);
    exports.HTMLEditor = HTMLEditor;
});
define("jassi/ui/PropertyEditors/JsonEditor", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Button", "jassi/ui/PropertyEditor", "jassi/util/Tools", "remote/jassi/base/Classes", "jassi/ui/Property"], function (require, exports, Jassi_76, Editor_11, Button_13, PropertyEditor_6, Tools_3, Classes_23, Property_31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.JsonEditor = void 0;
    let JsonEditor = class JsonEditor extends Editor_11.Editor {
        /**
         * Editor for number and string
         * used by PropertyEditor
         * @class jassi.ui.PropertyEditors.DefaultEditor
         */
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Button_13.Button();
            var _this = this;
            this.component.onclick(function (param) {
                _this._onclick(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getPropertyValue(this.property);
            //set cache for propertyvalues
            var empty = value === undefined || value.length === 0;
            if (empty) {
                this.component.icon = "mdi mdi-decagram-outline";
            }
            else
                this.component.icon = "mdi mdi-decagram";
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        _getPropertyValue(property) {
        }
        /**
         * register an event if the property has changed
         * @param {function} handler - the function that is called on change
         */
        onpropertyChanged(handler) {
            this.addEvent("propertyChanged", handler);
        }
        makePropertyChangedEvent(propEditor) {
            var _this = this;
            propEditor.onpropertyChanged(function (param) {
                _this.callEvent("propertyChanged", param);
                if (_this.propertyEditor.parentPropertyEditor === undefined) { //only if the last JSON-PropertyEditor Window is closed
                    var space = ""; //_this.propertyEditor.getSpace(_this.property.name);
                    //var str = Tools.objectToJson(propEditor.value, space);
                    var str = Tools_3.Tools.stringObjectToJson(propEditor.codeChanges, space);
                    if (_this.property.constructorClass !== undefined) {
                        var shortClassname = _this.property.constructorClass.split(".")[_this.property.constructorClass.split(".").length - 1];
                        str = "new " + shortClassname + "(" + str + ")";
                    }
                    var line = _this.propertyEditor.setPropertyInCode(_this.property.name, str);
                    //set Property in Design
                    //???Alternativ: 
                    var test = _this._ob; //Tools.stringObjectToObject
                    if (typeof (_this._ob[_this.property.name]) === "function")
                        _this._ob[_this.property.name](propEditor.value);
                    else
                        _this._ob[_this.property.name] = propEditor.value;
                    _this.callEvent("edit", param);
                }
                else
                    propEditor.parentPropertyEditor.callEvent("propertyChanged", param);
                let val = propEditor.value;
                if (!val) {
                    _this.component.icon = "mdi mdi-decagram-outline";
                }
                else {
                    _this.component.icon = "mdi mdi-decagram";
                }
            });
        }
        /**
         * initiate the default values in the PropertyEditor from code
         **/
        setCode(propEditor) {
            var _this = this;
            var av = this.propertyEditor.getPropertyValue(this.property);
            if (av !== undefined) {
                if (_this.propertyEditor.parentPropertyEditor === undefined) {
                    //we convert the ob to a stringobject and initialize the values
                    let textob = Tools_3.Tools.jsonToStringObject(av);
                    propEditor.codeChanges = textob === undefined ? {} : textob;
                }
                else {
                    propEditor.codeChanges = av;
                }
            }
            else {
                if (_this.propertyEditor.parentPropertyEditor === undefined) {
                    propEditor.codeChanges = {};
                }
                else {
                    this.propertyEditor.codeChanges[this.property.name] = {};
                    propEditor.codeChanges = this.propertyEditor.codeChanges[this.property.name];
                }
            }
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onclick(param) {
            var val = this.component.text;
            //if(val!=="function"){//function is still empty
            var propEditor = new PropertyEditor_6.PropertyEditor(undefined);
            propEditor.readPropertyValueFromDesign = this.propertyEditor.readPropertyValueFromDesign;
            propEditor.showThisProperties = this.showThisProperties;
            var _this = this;
            this.setCode(propEditor);
            this.makePropertyChangedEvent(propEditor);
            propEditor.parentPropertyEditor = this.propertyEditor;
            propEditor.variablename = this.property.name;
            var newclass = Classes_23.classes.getClass(this.property.componentType);
            var newvalue = new newclass();
            //only the top-PropertyEditor changed something
            if (this.propertyEditor.parentPropertyEditor === undefined) {
                var code = this.propertyEditor.getPropertyValue(this.property);
                if (this.property.constructorClass !== undefined) {
                    var param = code === undefined ? undefined : code.substring(code.indexOf("(") + 1, code.indexOf(")"));
                    if (param === "")
                        param = undefined;
                    Classes_23.classes.loadClass(this.property.constructorClass).then((oclass) => {
                        let oparam = Tools_3.Tools.jsonToObject(param);
                        var vv = new oclass(param === undefined ? undefined : oparam);
                        propEditor.value = vv;
                    });
                }
                else {
                    let val = undefined;
                    if (code === undefined) {
                        val = {};
                    }
                    else if (typeof (code) === "string") {
                        val = Tools_3.Tools.jsonToObject(code);
                    }
                    else
                        val = code;
                    Object.assign(newvalue, val);
                    val = newvalue;
                    propEditor.value = val;
                }
            }
            else {
                propEditor.showThisProperties = this.propertyEditor.showThisProperties;
                var val = this.propertyEditor.value[this.property.name];
                //if (propEditor.value === undefined) {
                if (val === undefined) {
                    propEditor.value = newvalue;
                    this.propertyEditor.value[this.property.name] = propEditor.value;
                }
                else {
                    Object.assign(newvalue, val);
                    val = newvalue;
                    propEditor.value = val;
                }
            }
            var docheight = $(document).height();
            var docwidth = $(document).width();
            $(propEditor.dom).dialog({
                height: docheight,
                width: "320px",
                beforeClose: function (event, ui) {
                    if (propEditor.variablename === "new") {
                        propEditor.parentPropertyEditor.updateCodeEditor();
                    }
                }
            });
        }
    };
    JsonEditor = __decorate([
        Editor_11.$PropertyEditor(["json"]),
        Jassi_76.$Class("jassi.ui.PropertyEditors.JsonEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], JsonEditor);
    exports.JsonEditor = JsonEditor;
    let TestProperties = class TestProperties {
    };
    __decorate([
        Property_31.$Property({ decription: "name of the dialog" }),
        __metadata("design:type", String)
    ], TestProperties.prototype, "dialogname", void 0);
    __decorate([
        Property_31.$Property({ name: "jo/selectMode", type: "number", default: 3, chooseFrom: [1, 2, 3], description: "1=single 2=multi 3=multi_hier" }),
        Property_31.$Property({ name: "jo", type: "json", componentType: "jassi.ui.PropertyEditorTestProperties2" }),
        __metadata("design:type", Object)
    ], TestProperties.prototype, "jo", void 0);
    TestProperties = __decorate([
        Jassi_76.$Class("jassi.ui.PropertyEditorTestProperties")
    ], TestProperties);
    let TestProperties2 = class TestProperties2 {
    };
    __decorate([
        Property_31.$Property({ decription: "name of the dialog" }),
        __metadata("design:type", String)
    ], TestProperties2.prototype, "name1", void 0);
    __decorate([
        Property_31.$Property({ decription: "name of the dialog" }),
        __metadata("design:type", String)
    ], TestProperties2.prototype, "name2", void 0);
    TestProperties2 = __decorate([
        Jassi_76.$Class("jassi.ui.PropertyEditorTestProperties2")
    ], TestProperties2);
    function test() {
        var ret = new PropertyEditor_6.PropertyEditor(undefined);
        ret.value = new TestProperties();
        return ret;
    }
    exports.test = test;
});
define("jassi/ui/PropertyEditors/LoadingEditor", ["require", "exports", "jassi/ui/Textbox", "jassi/ui/PropertyEditors/Editor"], function (require, exports, Textbox_15, Editor_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoadingEditor = void 0;
    class LoadingEditor extends Editor_12.Editor {
        constructor(property, propertyEditor, waitforclass) {
            super(property, propertyEditor);
            this._property = property;
            this._propertyEditor = propertyEditor;
            /** @member - the renedering component **/
            this.component = new Textbox_15.Textbox();
            let _this = this;
            waitforclass.then((cl) => {
                _this._editor = new cl(_this.property, _this.propertyEditor);
                _this.component.dom.parentNode.replaceChild(_this._editor.getComponent().dom, _this.component.dom);
                _this._editor.ob = _this.ob;
                _this.component = _this._editor.component;
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            if (this._editor)
                this._editor = ob;
            else
                super.ob = ob;
        }
        get ob() {
            if (this._editor)
                return this._editor.ob;
            else
                return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
    }
    exports.LoadingEditor = LoadingEditor;
});
define("jassi/ui/PropertyEditors/NameEditor", ["require", "exports", "jassi/ui/PropertyEditors/Editor", "jassi/ui/Textbox", "remote/jassi/base/Jassi"], function (require, exports, Editor_13, Textbox_16, Jassi_77) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NameEditor = void 0;
    let NameEditor = class NameEditor extends Editor_13.Editor {
        constructor(property, propertyEditor) {
            super(property, propertyEditor);
            /** @member - the renedering component **/
            this.component = new Textbox_16.Textbox();
            var _this = this;
            this.component.onchange(function (param) {
                _this._onchange(param);
            });
        }
        /**
         * @member {object} ob - the object which is edited
         */
        set ob(ob) {
            super.ob = ob;
            var value = this.propertyEditor.getVariableFromObject(ob);
            if (value.startsWith("this."))
                value = value.substring(5);
            if (value.startsWith("me."))
                value = value.substring(3);
            /*            var value=this.propertyEditor.getPropertyValue(this.property);
                        if(value!==undefined&&value.startsWith("\"")&&value.endsWith("\"")&&this.property.type==="string"){
                            value=value.substring(1,value.length-1);
                        }*/
            this.component.value = value;
        }
        get ob() {
            return this._ob;
        }
        /**
       * get the renderer for the PropertyEditor
       * @returns - the UI-component for the editor
       */
        getComponent() {
            return this.component;
        }
        /**
         * intern the value changes
         * @param {type} param
         */
        _onchange(param) {
            var old = this.propertyEditor.getVariableFromObject(this._ob);
            this.propertyEditor.renameVariableInCode(old, this.component.value);
            this.propertyEditor.renameVariableInDesign(old, this.component.value);
            var varname = this.component.value;
            if (old !== undefined && old.startsWith("me."))
                varname = "me." + varname;
            if (old !== undefined && old.startsWith("this."))
                varname = "this." + varname;
            this.propertyEditor.variablename = varname;
            /*  var val=this.component.value;
              if(this.property.type==="string")
                  val="\""+val+"\"";
              this.propertyEditor.setPropertyInCode(this.property.name,val);
              this.propertyEditor.setPropertyInDesign(this.property.name,val);
              super.callEvent("edit",param);*/
        }
    };
    NameEditor = __decorate([
        Editor_13.$PropertyEditor(["*name*"]),
        Jassi_77.$Class("jassi.ui.PropertyEditors.NameEditor"),
        __metadata("design:paramtypes", [Object, Object])
    ], NameEditor);
    exports.NameEditor = NameEditor;
});
define("jassi/ui/converters/DefaultConverter", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry", "jassi/ui/Property"], function (require, exports, Jassi_78, Registry_22, Property_32) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultConverter = exports.$Converter = exports.$ConverterProperties = void 0;
    class $ConverterProperties {
    }
    exports.$ConverterProperties = $ConverterProperties;
    function $Converter(param) {
        return function (pclass) {
            Registry_22.default.register("$Converter", pclass, param);
        };
    }
    exports.$Converter = $Converter;
    let DefaultConverterProperties = class DefaultConverterProperties {
        stringToObject() {
        }
    };
    __decorate([
        Property_32.$Property({ default: "function(ob){}" }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DefaultConverterProperties.prototype, "stringToObject", null);
    DefaultConverterProperties = __decorate([
        Jassi_78.$Class("jassi.ui.converters.DefaultConverterProperties")
    ], DefaultConverterProperties);
    let DefaultConverter = 
    //@$Property({ name: "new/stringToObject", type: "function", default: "function(ob){}" })
    class DefaultConverter {
        constructor() {
        }
        /**
         * converts a string to the object
         * an error can be thrown for validation
         * @param {string} str - the string to convert
         */
        stringToObject(str) {
            return str;
        }
        /**
         * converts an object to string
         * @param {string} obj - the object to convert
         */
        objectToString(obj) {
            return obj.ToString();
        }
    };
    DefaultConverter = __decorate([
        $Converter({ name: "custom" }),
        Jassi_78.$Class("jassi.ui.converters.DefaultConverter"),
        Property_32.$Property({ name: "new", type: "json", componentType: "jassi.ui.converters.DefaultConverterProperties" })
        //@$Property({ name: "new/stringToObject", type: "function", default: "function(ob){}" })
        ,
        __metadata("design:paramtypes", [])
    ], DefaultConverter);
    exports.DefaultConverter = DefaultConverter;
});
define("jassi/ui/converters/NumberConverter", ["require", "exports", "jassi/ui/converters/DefaultConverter", "remote/jassi/base/Jassi", "jassi/ui/Property"], function (require, exports, DefaultConverter_2, Jassi_79, Property_33) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberConverter = void 0;
    let NumberConverter = 
    //@$Property({name:"new/min",type:"number",default:undefined})
    //@$Property({name:"new/max",type:"number",default:undefined})
    class NumberConverter extends DefaultConverter_2.DefaultConverter {
        constructor(param = {}) {
            super();
        }
        /**
         * converts a string to the object
         * an error can be thrown for validation
         * @param {string} str - the string to convert
         */
        stringToObject(str) {
            if (str === undefined || str === "")
                return undefined;
            return Number(str);
        }
        /**
         * converts an object to string
         * @param {string} obj - the object to convert
         */
        objectToString(obj) {
            if (obj === undefined)
                return undefined;
            return obj.ToString();
        }
    };
    NumberConverter = __decorate([
        DefaultConverter_2.$Converter({ name: "number" }),
        Jassi_79.$Class("jassi.ui.converters.NumberConverter"),
        Property_33.$Property({ name: "new", type: "json" })
        //@$Property({name:"new/min",type:"number",default:undefined})
        //@$Property({name:"new/max",type:"number",default:undefined})
        ,
        __metadata("design:paramtypes", [Object])
    ], NumberConverter);
    exports.NumberConverter = NumberConverter;
});
define("jassi/ui/converters/StringConverter", ["require", "exports", "jassi/ui/converters/DefaultConverter", "remote/jassi/base/Jassi", "jassi/ui/Property"], function (require, exports, DefaultConverter_3, Jassi_80, Property_34) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringConverter = void 0;
    let StringConverter = 
    //@$Property({ name: "new/minChars", type: "number", default: undefined })
    //@$Property({ name: "new/maxChars", type: "number", default: undefined })
    class StringConverter extends DefaultConverter_3.DefaultConverter {
        constructor() {
            super();
        }
        /**
         * converts a string to the object
         * an error can be thrown for validation
         * @param {string} str - the string to convert
         */
        stringToObject(str) {
            return str;
        }
        /**
         * converts an object to string
         * @param {string} obj - the object to convert
         */
        objectToString(obj) {
            return obj.ToString();
        }
    };
    StringConverter = __decorate([
        DefaultConverter_3.$Converter({ name: "string" }),
        Jassi_80.$Class("jassi.ui.converters.StringConverter"),
        Property_34.$Property({ name: "new", type: "json" })
        //@$Property({ name: "new/minChars", type: "number", default: undefined })
        //@$Property({ name: "new/maxChars", type: "number", default: undefined })
        ,
        __metadata("design:paramtypes", [])
    ], StringConverter);
    exports.StringConverter = StringConverter;
});
define("jassi/ui/designer/ComponentDesigner", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ui/PropertyEditor", "jassi/ui/ComponentExplorer", "jassi/ui/ComponentPalette", "jassi/ui/helper/Resizer", "jassi/ui/CodeEditorInvisibleComponents", "jassi/ui/Repeater", "jassi/ui/Button", "jassi/ui/helper/DragAndDropper", "remote/jassi/base/Classes", "jassi/ui/Databinder"], function (require, exports, Jassi_81, Panel_26, PropertyEditor_7, ComponentExplorer_1, ComponentPalette_1, Resizer_1, CodeEditorInvisibleComponents_1, Repeater_1, Button_14, DragAndDropper_1, Classes_24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.ComponentDesigner = void 0;
    let ComponentDesigner = class ComponentDesigner extends Panel_26.Panel {
        constructor() {
            super();
            this._codeEditor = undefined;
            this._initDesign();
            this.editMode = true;
            // this.lastSelected=undefined;
        }
        set codeEditor(value) {
            var _this = this;
            this._codeEditor = value;
            this._variables = this._codeEditor._variables;
            this._propertyEditor = new PropertyEditor_7.PropertyEditor(value);
            //   this._propertyEditor=new PropertyEditor(undefined);
            this._errors = this._codeEditor._errors;
            this._componentPalette = new ComponentPalette_1.ComponentPalette();
            this._componentPalette.service = "$UIComponent";
            this._componentExplorer = new ComponentExplorer_1.ComponentExplorer(value, this._propertyEditor);
            this._invisibleComponents = new CodeEditorInvisibleComponents_1.CodeEditorInvisibleComponents(value);
            this.add(this._invisibleComponents);
            this._initComponentExplorer();
            this._installView();
            this._codeEditor._codePanel.onblur(function (evt) {
                _this._propertyEditor.updateParser();
            });
            this.registerKeys();
        }
        get codeEditor() {
            return this._codeEditor;
        }
        _initDesign() {
            var _this = this;
            this._designToolbar = new Panel_26.Panel();
            this._designPlaceholder = new Panel_26.Panel();
            var save = new Button_14.Button();
            save.tooltip = "Save(Ctrl+S)";
            save.icon = "mdi mdi-content-save mdi-18px";
            save.onclick(function () {
                _this.save();
            });
            this._designToolbar.add(save);
            var run = new Button_14.Button();
            run.icon = "mdi mdi-car-hatchback mdi-18px";
            run.tooltip = "Run(F4)";
            run.onclick(function () {
                _this.evalCode();
            });
            this._designToolbar.add(run);
            var undo = new Button_14.Button();
            undo.icon = "mdi mdi-undo mdi-18px";
            undo.tooltip = "Undo (Strg+Z)";
            undo.onclick(function () {
                _this.undo();
            });
            this._designToolbar.add(undo);
            var test = new Button_14.Button();
            test.icon = "mdi mdi-bug mdi-18px";
            test.tooltip = "Test";
            test.onclick(function () {
                //var kk=_this._codeView.layout;
            });
            this._designToolbar.add(test);
            var edit = new Button_14.Button();
            edit.icon = "mdi mdi-run mdi-18px";
            edit.tooltip = "Test Dialog";
            edit.onclick(function () {
                _this.editDialog(!_this.editMode);
                edit.toggle(!_this.editMode);
            });
            this._designToolbar.add(edit);
            var lasso = new Button_14.Button();
            lasso.icon = "mdi mdi-lasso mdi-18px";
            lasso.tooltip = "Select rubberband";
            lasso.onclick(function () {
                var val = lasso.toggle();
                _this._resizer.setLassoMode(val);
                _this._draganddropper.canDrop(!val);
            });
            this._designToolbar.add(lasso);
            var remove = new Button_14.Button();
            remove.icon = "mdi mdi-delete-forever-outline mdi-18px";
            remove.tooltip = "Delete selected Control (ENTF)";
            remove.onclick(function () {
                _this.removeComponent();
            });
            this._designToolbar.add(remove);
            this.add(this._designToolbar);
            $(this._designPlaceholder.domWrapper).css("position", "relative");
            this.add(this._designPlaceholder);
        }
        /**
       * manage shortcuts
       */
        registerKeys() {
            var _this = this;
            $(this._codeEditor._design.dom).attr("tabindex", "1");
            $(this._codeEditor._design.dom).keydown(function (evt) {
                if (evt.keyCode === 115 && evt.shiftKey) { //F4
                    // var thiss=this._this._id;
                    // var editor = ace.edit(this._this._id);
                    _this.evalCode(true);
                    evt.preventDefault();
                    return false;
                }
                else if (evt.keyCode === 115) { //F4
                    _this.evalCode(false);
                    evt.preventDefault();
                    return false;
                }
                if (evt.keyCode === 90 || evt.ctrlKey) { //Ctrl+Z
                    _this.undo();
                }
                if (evt.keyCode === 116) { //F5
                    evt.preventDefault();
                    return false;
                }
                if (evt.keyCode === 46) { //Del
                    _this.removeComponent();
                    evt.preventDefault();
                    return false;
                }
                if ((String.fromCharCode(evt.which).toLowerCase() === 's' && evt.ctrlKey) /* && (evt.which == 19)*/) { //Str+s
                    _this.save();
                    event.preventDefault();
                    return false;
                }
            });
        }
        resize() {
            this._updateInvisibleComponents();
        }
        _installView() {
            this._codeEditor._main.add(this._propertyEditor, "Properties", "properties");
            this._codeEditor._main.add(this._componentExplorer, "Components", "components");
            this._codeEditor._main.add(this._componentPalette, "Palette", "componentPalette");
            this._codeEditor._main.layout = '{"settings":{"hasHeaders":true,"constrainDragToContainer":true,"reorderEnabled":true,"selectionEnabled":false,"popoutWholeStack":false,"blockedPopoutsThrowError":true,"closePopoutsOnUnload":true,"showPopoutIcon":false,"showMaximiseIcon":true,"showCloseIcon":true,"responsiveMode":"onload"},"dimensions":{"borderWidth":5,"minItemHeight":10,"minItemWidth":10,"headerHeight":20,"dragProxyWidth":300,"dragProxyHeight":200},"labels":{"close":"close","maximise":"maximise","minimise":"minimise","popout":"open in new window","popin":"pop in","tabDropdown":"additional tabs"},"content":[{"type":"column","isClosable":true,"reorderEnabled":true,"title":"","content":[{"type":"row","isClosable":true,"reorderEnabled":true,"title":"","height":81.04294066258988,"content":[{"type":"stack","width":80.57491289198606,"height":71.23503465658476,"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"content":[{"title":"Code..","type":"component","componentName":"code","componentState":{"title":"Code..","name":"code"},"isClosable":true,"reorderEnabled":true},{"title":"Design","type":"component","componentName":"design","componentState":{"title":"Design","name":"design"},"isClosable":true,"reorderEnabled":true}]},{"type":"column","isClosable":true,"reorderEnabled":true,"title":"","width":19.42508710801394,"content":[{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"height":19.844357976653697,"content":[{"title":"Palette","type":"component","componentName":"componentPalette","componentState":{"title":"Palette","name":"componentPalette"},"isClosable":true,"reorderEnabled":true}]},{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"height":80.1556420233463,"content":[{"title":"Properties","type":"component","componentName":"properties","componentState":{"title":"Properties","name":"properties"},"isClosable":true,"reorderEnabled":true}]}]}]},{"type":"row","isClosable":true,"reorderEnabled":true,"title":"","height":18.957059337410122,"content":[{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"height":18.957059337410122,"width":77.70034843205575,"content":[{"title":"Variables","type":"component","componentName":"variables","componentState":{"title":"Variables","name":"variables"},"isClosable":true,"reorderEnabled":true},{"title":"Errors","type":"component","componentName":"errors","componentState":{"title":"Errors","name":"errors"},"isClosable":true,"reorderEnabled":true}]},{"type":"stack","header":{},"isClosable":true,"reorderEnabled":true,"title":"","activeItemIndex":0,"width":22.299651567944256,"content":[{"title":"Components","type":"component","componentName":"components","componentState":{"title":"Components","name":"components"},"isClosable":true,"reorderEnabled":true}]}]}]}],"isClosable":true,"reorderEnabled":true,"title":"","openPopouts":[],"maximisedItemId":null}';
        }
        _updateInvisibleComponents() {
            var _this = this;
            this._invisibleComponents.update().then(function () {
                /* var h=_this._invisibleComponents.dom.offsetHeight;
                 h=h+6+31;
                 _this._designPlaceholder.height="calc(100% - "+h+"px)";*/
            });
        }
        _initComponentExplorer() {
            var _this = this;
            this._componentExplorer.onclick(function (data) {
                var ob = data.data;
                _this._propertyEditor.value = ob;
            });
            this._componentExplorer.getComponentName = function (item) {
                var varname = _this._codeEditor.getVariableFromObject(item);
                if (varname === undefined)
                    return;
                if (varname.startsWith("this."))
                    return varname.substring(5);
                return varname;
            };
        }
        /**
         * removes the selected component
         */
        removeComponent() {
            var todel = this._propertyEditor.value;
            var varname = this._codeEditor.getVariableFromObject(todel);
            if (varname !== "this") {
                if (todel.domWrapper._parent !== undefined) {
                    todel.domWrapper._parent.remove(todel);
                }
                this._propertyEditor.removeVariableInCode(varname);
                this._propertyEditor.removeVariableInDesign(varname);
                this._updateInvisibleComponents();
            }
        }
        /**
        * execute the current code
        * @param {boolean} toCursor -  if true the variables were inspected on cursor position,
        *                              if false at the end of the layout() function or at the end of the code
        */
        evalCode(toCursor = undefined) {
            this._codeEditor.evalCode(toCursor);
        }
        /**
        * save the code to server
        */
        save() {
            this._codeEditor.save();
        }
        /**
         * undo action
         */
        undo() {
            this._codeEditor.undo();
        }
        getComponentIDsInDesign(component, collect) {
            collect.push("#" + component._id);
            var childs = component["_components"];
            if (childs !== undefined) {
                for (let x = 0; x < childs.length; x++) {
                    this.getComponentIDsInDesign(childs[x], collect);
                }
            }
        }
        /**
         * dialog edit mode
         * @param {boolean} enable - if true allow resizing and drag and drop
         */
        editDialog(enable) {
            var _this = this;
            this.editMode = enable;
            var component = this._designPlaceholder._components[0];
            //switch designmode
            var comps = $(component.dom).find(".jcomponent");
            for (var c = 0; c < comps.length; c++) {
                if (comps[c]._this["extensionCalled"] !== undefined) {
                    comps[c]._this["extensionCalled"]({
                        componentDesignerSetDesignMode: { enable, componentDesigner: this }
                    });
                    //comps[c]._this["setDesignMode"](enable,this);
                }
            }
            if (component["extensionCalled"] !== undefined) {
                component["extensionCalled"]({
                    componentDesignerSetDesignMode: { enable, componentDesigner: this }
                });
            }
            //if(component["setDesignMode"]!==undefined){
            //        component["setDesignMode"](enable,this);
            //    }
            this._variables.updateCache(); //variables can be added with Repeater.setDesignMode
            if (this._resizer !== undefined) {
                this._resizer.uninstall();
                console.log("uninstall");
            }
            if (this._draganddropper !== undefined) {
                this._draganddropper.uninstall();
            }
            if (enable === true) {
                var _this = this;
                var allcomponents = this._variables.getEditableComponents(component);
                if (this._propertyEditor.codeEditor === undefined) {
                    var ret = [];
                    this.getComponentIDsInDesign(component, ret);
                    allcomponents = ret.join(",");
                }
                else
                    allcomponents = this._variables.getEditableComponents(component);
                //this._installTinyEditor();
                this._draganddropper = new DragAndDropper_1.DragAndDropper();
                this._resizer = new Resizer_1.Resizer();
                this._resizer.draganddropper = this._draganddropper;
                console.log("onselect");
                this._resizer.onelementselected = function (elementIDs, e) {
                    var ret = [];
                    for (var x = 0; x < elementIDs.length; x++) {
                        var ob = $("#" + elementIDs[x])[0]._this;
                        if (ob["editorselectthis"])
                            ob = ob["editorselectthis"];
                        ret.push(ob);
                    }
                    if (ret.length > 0) {
                        _this._propertyEditor.value = ret[0];
                    }
                    //  _this.lastSelected=_this._codeEditor.getVariableFromObject(_this._propertyEditor.value);
                };
                this._resizer.onpropertychanged = function (comp, prop, value) {
                    if (_this._propertyEditor.value !== comp)
                        _this._propertyEditor.value = comp;
                    _this._propertyEditor.setPropertyInCode(prop, value + "", true);
                    _this._propertyEditor.value = _this._propertyEditor.value;
                };
                this._resizer.install(component, allcomponents);
                allcomponents = this._variables.getEditableComponents(component, true);
                this._draganddropper.install(component, allcomponents);
                this._draganddropper.onpropertychanged = function (component, top, left, oldParent, newParent, beforeComponent) {
                    _this.moveComponent(component, top, left, oldParent, newParent, beforeComponent);
                };
                this._draganddropper.onpropertyadded = function (type, component, top, left, newParent, beforeComponent) {
                    _this.createComponent(type, component, top, left, newParent, beforeComponent);
                };
                this._draganddropper.isDragEnabled = function (event, ui) {
                    if (_this._resizer === undefined)
                        return false;
                    return _this._resizer.componentUnderCursor !== undefined;
                };
            }
            else {
            }
            /*  $(".hoho2").selectable({});
              $(".hoho2").selectable("disable");*/
            /*  $(".HTMLPanel").selectable({});
              $(".HTMLPanel").selectable("disable");
              $(".HTMLPanel").draggable({});
              $(".HTMLPanel").draggable("disable");*/
        }
        /**
         * move a component
         * @param {jassi.ui.Component} component - the component to move
         * @param {number} top - the top absolute position
         * @param {number} left - the left absolute position
         * @param {jassi.ui.Container} newParent - the new parent container where the component move to
         * @param {jassi.ui.Component} beforeComponent - insert the component before beforeComponent
         **/
        moveComponent(component, top, left, oldParent, newParent, beforeComponent) {
            var _this = this;
            /*if(beforeComponent!==undefined&&beforeComponent.designDummyFor!==undefined){
                beforeComponent=undefined;
            }*/
            var oldName = _this._codeEditor.getVariableFromObject(oldParent);
            var newName = _this._codeEditor.getVariableFromObject(newParent);
            var compName = _this._codeEditor.getVariableFromObject(component);
            if (top !== undefined) {
                _this._propertyEditor.setPropertyInCode("x", top + "", true);
            }
            else {
                _this._propertyEditor.removePropertyInCode("x");
            }
            if (left !== undefined) {
                _this._propertyEditor.setPropertyInCode("y", left + "", true);
            }
            else {
                _this._propertyEditor.removePropertyInCode("y");
            }
            if (oldParent !== newParent || beforeComponent !== undefined || top === undefined) { //top=undefined ->on relative position at the end call the block
                //get Position
                _this._propertyEditor.removePropertyInCode("add", compName, oldName);
                var before;
                if (beforeComponent !== undefined && beforeComponent.type !== "atEnd") { //designdummy atEnd
                    var on = _this._codeEditor.getVariableFromObject(beforeComponent);
                    var par = _this._codeEditor.getVariableFromObject(beforeComponent._parent);
                    before = { variablename: par, property: "add", value: on };
                }
                _this._propertyEditor.setPropertyInCode("add", compName, false, newName, before);
            }
            /* if(newParent._components.length>1){//correct dummy
                 var dummy=	newParent._components[newParent._components.length-2];
                 if(dummy.designDummyFor!==undefined){
                     //var tmp=newParent._components[newParent._components.length-1];
                     newParent.remove(dummy);//._components[newParent._components.length-1]=newParent._components[newParent._components.length-2];
                     newParent.add(dummy);//._components[newParent._components.length-1]=tmp;
                 }
             }*/
            _this._variables.updateCache();
            _this._propertyEditor.value = _this._propertyEditor.value;
            _this._componentExplorer.value = _this._componentExplorer.value;
        }
        /**
         * create a new component
         * @param {string} type - the type of the new component
         * @param {jassi.ui.Component} component - the component themself
         * @param {number} top - the top absolute position
         * @param {number} left - the left absolute position
         * @param {jassi.ui.Container} newParent - the new parent container where the component is placed
         * @param {jassi.ui.Component} beforeComponent - insert the new component before beforeComponent
         **/
        createComponent(type, component, top, left, newParent, beforeComponent) {
            var _this = this;
            /*if(beforeComponent!==undefined&&beforeComponent.designDummyFor&&beforeComponent.type==="atEnd"){
                beforeComponent=undefined;
            }*/
            var file = type.replaceAll(".", "/");
            var stype = file.split("/")[file.split("/").length - 1];
            _this._propertyEditor.addImportIfNeeded(stype, file);
            var repeater = _this._hasRepeatingContainer(newParent);
            var scope = undefined;
            if (repeater !== undefined) {
                var repeatername = _this._codeEditor.getVariableFromObject(repeater);
                var test = _this._propertyEditor.parser.getPropertyValue(repeatername, "createRepeatingComponent");
                scope = { variablename: repeatername, methodname: "createRepeatingComponent" };
                if (test === undefined) {
                    var vardatabinder = _this._propertyEditor.getNextVariableNameForType("jassi.ui.Databinder");
                    _this._propertyEditor.setPropertyInCode("createRepeatingComponent", "function(" + vardatabinder + "){\n\t\n}", true, repeatername);
                    repeater.createRepeatingComponent(function (databinder) {
                        if (this._designMode !== true)
                            return;
                        _this._variables.addVariable(vardatabinder, databinder);
                        _this._variables.updateCache();
                    });
                    /*var db=new jassi.ui.Databinder();
                    if(repeater.value!==undefined&&repeater.value.length>0)
                        db.value=repeater.value[0];
                    _this._variables.add(vardatabinder,db);
                    _this._variables.updateCache();*/
                }
            }
            var varvalue = new (Classes_24.classes.getClass(type));
            if (this._propertyEditor.codeEditor !== undefined) {
                var varname = _this._propertyEditor.addVariableInCode(type, scope);
                if (varname.startsWith("me.")) {
                    var me = _this._codeEditor.getObjectFromVariable("me");
                    me[varname.substring(3)] = varvalue;
                }
                else if (varname.startsWith("this.")) {
                    var th = _this._codeEditor.getObjectFromVariable("this");
                    th[varname.substring(5)] = varvalue;
                }
                else
                    _this._variables.addVariable(varname, varvalue);
                var newName = _this._codeEditor.getVariableFromObject(newParent);
                var before;
                if (beforeComponent !== undefined && beforeComponent.type !== "atEnd") { //Designdummy atEnd
                    //if(beforeComponent.type==="beforeComponent")
                    //   beforeComponent=beforeComponent.designDummyFor;
                    var on = _this._codeEditor.getVariableFromObject(beforeComponent);
                    var par = _this._codeEditor.getVariableFromObject(beforeComponent._parent);
                    before = { variablename: par, property: "add", value: on };
                }
                _this._propertyEditor.setPropertyInCode("add", varname, false, newName, before, scope);
            }
            if (beforeComponent !== undefined) {
                newParent.addBefore(varvalue, beforeComponent);
            }
            else {
                newParent.add(varvalue);
            }
            /* if(newParent._components.length>1){//correct dummy
                 if(newParent._designDummy){
                     //var tmp=newParent._components[newParent._components.length-1];
                     newParent.dom.removeChild(newParent._designDummy.domWrapper)
                     newParent.dom.append(newParent._designDummy.domWrapper)
                 }
             }*/
            _this._variables.updateCache();
            //set initial properties for the new component
            if (component.createFromParam !== undefined) {
                for (var key in component.createFromParam) {
                    var val = component.createFromParam[key];
                    if (typeof val === 'string')
                        val = '"' + val + '"';
                    _this._propertyEditor.setPropertyInCode(key, val, true, varname);
                }
                $.extend(varvalue, component.createFromParam);
            }
            if (top !== undefined) {
                _this._propertyEditor.setPropertyInCode("x", top + "", true, varname);
                varvalue.x = top;
            }
            if (left !== undefined) {
                _this._propertyEditor.setPropertyInCode("y", left + "", true, varname);
                varvalue.y = left;
            }
            //notify componentdescriptor 
            var ac = varvalue.extensionCalled;
            if (ac !== undefined) {
                varvalue.extensionCalled({ componentDesignerComponentCreated: {
                        newParent: newParent
                    } });
            }
            //include the new element
            _this.editDialog(true);
            _this._propertyEditor.value = varvalue;
            _this._componentExplorer.update();
            //var test=_this._invisibleComponents;
            _this._updateInvisibleComponents();
            return varvalue;
        }
        /**
         * is there a parent that acts a repeating container?
         **/
        _hasRepeatingContainer(component) {
            if (component === undefined)
                return undefined;
            if (this._codeEditor.getVariableFromObject(component) === undefined)
                return undefined;
            if (component instanceof Repeater_1.Repeater) {
                return component;
            }
            return this._hasRepeatingContainer(component._parent);
        }
        /**
         * @member {jassi.ui.Component} - the designed component
         */
        set designedComponent(component) {
            var com = component;
            if (com["isAbsolute"] !== true && com.width === "0" && com.height === "0") {
                component.width = "calc(100% - 1px)";
                component.height = "calc(100% - 1px)";
            }
            if (this._codeEditor.__evalToCursorReached !== true) {
                this._codeEditor._main.show("design");
            }
            if (this._designPlaceholder._components.length > 0)
                this._designPlaceholder.remove(this._designPlaceholder._components[0], true);
            this._designPlaceholder.add(component);
            // 
            this._propertyEditor.updateParser();
            this.editDialog(true);
            this._componentExplorer.value = component;
            $(this.dom).focus();
            this._updateInvisibleComponents();
            //var parser=new jassi.ui.PropertyEditor.Parser();
            //parser.parse(_this.value);
        }
        get designedComponent() {
            return this._designPlaceholder._components[0];
        }
        destroy() {
            if (this._resizer !== undefined) {
                this._resizer.uninstall();
            }
            if (this._draganddropper !== undefined) {
                this._draganddropper.isDragEnabled = undefined;
                this._draganddropper.uninstall();
            }
            this._propertyEditor.destroy();
            this._componentPalette.destroy();
            this._componentExplorer.destroy();
            this._invisibleComponents.destroy();
            super.destroy();
        }
    };
    ComponentDesigner = __decorate([
        Jassi_81.$Class("jassi.ui.designer.ComponentDesigner"),
        __metadata("design:paramtypes", [])
    ], ComponentDesigner);
    exports.ComponentDesigner = ComponentDesigner;
    async function test() {
    }
    exports.test = test;
    ;
});
define("jassi/ui/helper/DragAndDropper", ["require", "exports", "remote/jassi/base/Jassi"], function (require, exports, Jassi_82) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DragAndDropper = void 0;
    let DragAndDropper = class DragAndDropper {
        constructor() {
            /** @member {function} - called when an element is resized function(component,top,left) */
            this.onpropertychanged = undefined;
            this.onpropertyadded = undefined;
            this.lastDropCanceled = false;
            this.allIDs = ""; //all ids
        }
        isDragEnabled(event, ui) {
            var mouse = event.target._this.dom.style.cursor;
            if (mouse === "e-resize" || mouse === "s-resize" || mouse === "se-resize")
                return true;
            else
                return false;
        }
        isDragging() {
            return this._isDragging;
        }
        canDrop(enable) {
            $(this.allIDs).find(".jcontainer").not(".jdesigncontainer").draggable(enable ? "enable" : "disable");
        }
        /* testDropDesignDummy(target, event, ui) {
             var _this = this;
             if (target._this._designDummyPre !== undefined) {
                 var dummy = target._this._designDummyPre;
                 var oldParent = ui.draggable[0]._this._parent;
                 var oldx = $(ui.helper).offset().left;
                 var oldy = $(ui.helper).offset().top;
                 if (ui.draggable[0]._this.createFromType !== undefined) {
                     oldx = parseInt($(ui.helper).css('left'));
                     oldy = parseInt($(ui.helper).css('top'));
                 }
     
                 var com = dummy;
                 var posx = $(com.dom).offset().left;
                 var posy = $(com.dom).offset().top;
                 var w = $(com.dom).outerWidth();
                 var h = $(com.dom).outerHeight();
     
                 if ((oldx >= posx && oldx <= posx + w) && (oldy >= posy && oldy <= posy + h) && com !== ui.draggable[0]._this) {
                     //com=com.designDummyFor;
                     $(ui.draggable).css({ 'top': "", 'left': "", "position": "relative" });
                     if (ui.draggable[0]._this.createFromType !== undefined) {
                         if (this.onpropertyadded !== undefined)
                             this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this._parent, com);
                         return true;
                     }
                     com.designDummyFor._parent.addBefore(ui.draggable[0]._this, com);
                     if (_this.onpropertychanged !== undefined) {
                         _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, target._this._parent, com.designDummyFor);
                     }
                     return true;
                 }
             }
             return false;
         }*/
        _drop(target, event, ui) {
            var _this = this;
            var newComponent = ui.draggable[0]._this;
            var newParent = target._this;
            var beforeComponent = target._this;
            var designDummyAtEnd;
            if ((beforeComponent === null || beforeComponent === void 0 ? void 0 : beforeComponent.type) === "atEnd") {
                designDummyAtEnd = beforeComponent;
                beforeComponent = undefined;
                newParent = newParent.designDummyFor;
            }
            if ((beforeComponent === null || beforeComponent === void 0 ? void 0 : beforeComponent.type) === "beforeComponent") {
                beforeComponent = newParent.designDummyFor;
                newParent = newParent.designDummyFor._parent;
            }
            if (target._this.isAbsolute) {
                var left = parseInt($(ui.helper).css('left'));
                var top = parseInt($(ui.helper).css('top'));
                if (ui.draggable[0]._this.createFromType !== undefined) {
                    var offsetNewParent = $(target._this.dom).offset();
                    left = -offsetNewParent.left + parseInt($(ui.helper).css('left'));
                    top = -offsetNewParent.top + parseInt($(ui.helper).css('top'));
                    //      ui.helper[0]._this.left=left;
                    //    ui.helper[0]._this.y=top;
                    if (this.onpropertyadded !== undefined)
                        this.onpropertyadded(ui.draggable[0]._this.createFromType, newComponent, left, top, newParent);
                    return;
                }
                //snap to 5
                if (top !== 1) {
                    top = Math.round(top / 5) * 5;
                }
                if (left !== 1) {
                    left = Math.round(left / 5) * 5;
                }
                var oldParent = ui.draggable[0]._this._parent;
                oldParent.remove(ui.draggable[0]._this);
                $(ui.draggable).css({ 'top': top, 'left': left, position: 'absolute' });
                target._this.add(ui.draggable[0]._this);
                if (_this.onpropertychanged !== undefined) {
                    _this.onpropertychanged(newComponent, left, top, oldParent, newParent);
                }
            }
            else { //relative layout
                var oldParent = ui.draggable[0]._this._parent;
                if (!$(newParent.domWrapper).hasClass("jcontainer") && newParent._parent) {
                    newParent = newParent._parent;
                }
                $(ui.draggable).css({ 'top': "", 'left': "", "position": "relative" });
                if (ui.draggable[0]._this.createFromType !== undefined) {
                    if (this.onpropertyadded !== undefined)
                        this.onpropertyadded(newComponent.createFromType, ui.draggable[0]._this, undefined, undefined, newParent, beforeComponent);
                }
                else {
                    //newParent.add(ui.draggable[0]._this);
                    if (target._this !== newParent)
                        newParent.addBefore(ui.draggable[0]._this, target._this);
                    else
                        newParent.add(ui.draggable[0]._this);
                    if (_this.onpropertychanged !== undefined) {
                        _this.onpropertychanged(newComponent, undefined, undefined, oldParent, newParent, beforeComponent);
                    }
                }
                /*var t = $(ui.draggable).css('left');
                var oldx = event.clientX;//["originalEvent"].offsetX; //$(ui.helper).offset().left;
                var oldy = event.clientY;//["originalEvent"].offsetY;//$(ui.helper).offset().top;
                var called = false;
    
                //  $(ui.draggable).css({ 'top': "", 'left': "", "position": "relative" });
    
    
    
                var all = [];
                for (var x = 0;x < target._this._components.length;x++) {
                    all.push(target._this._components[x]);
                }
                
                for (var x = 0;x < all.length;x++) {
                    var com = all[x];
                    var postest = $(com.dom).position();
                    var posx = $(com.dom).offset().left;
                    var posy = $(com.dom).offset().top;
                    var w = $(com.dom).outerWidth();
                    var h = $(com.dom).outerHeight();
                    if (com.designDummyFor)
                        com = com.designDummyFor;
                    if ((oldx >= posx && oldx <= posx + w) && (oldy >= posy && oldy <= posy + h) && com !== ui.draggable[0]._this) {
                        if (ui.draggable[0]._this.createFromType !== undefined) {
                            if (this.onpropertyadded !== undefined)
                                this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this, com);
                            return;
                        }
                        var h = 0;
                        console.debug(com._id);
                        com._parent.addBefore(ui.draggable[0]._this, com);
                        called = true;
                        if (_this.onpropertychanged !== undefined) {
                            _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, target._this, com);
                        }
                        break;
                    }
    
                }
                if (!called) {//insert at the end
                    if (ui.draggable[0]._this.createFromType !== undefined) {
                        if (this.onpropertyadded !== undefined)
                            this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this);
                        return;
                    }
                    target._this.add(ui.draggable[0]._this);
                    if (_this.onpropertychanged !== undefined) {
                        _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, target._this);
                    }
                }*/
            }
            if (designDummyAtEnd) { //this Component should stand at last
                var par = designDummyAtEnd._parent;
                par.remove(designDummyAtEnd);
                par.add(designDummyAtEnd);
                par.designDummies.push(designDummyAtEnd); //bug insert dummy again
            }
        }
        _dropoldsicherung(target, event, ui) {
            var _this = this;
            var l = $(ui.helper).offset().left;
            var t = $(ui.helper).offset().top;
            var lp = $(ui.helper[0].parentNode).offset().left;
            var tp = $(ui.helper[0].parentNode).offset().top;
            console.debug(l + ":" + t + "-->" + (l - lp) + ":" + (t - tp));
            if (target._this.isAbsolute) {
                var offsetNewParent = $(target._this.dom).offset();
                var offsetOldParent = $(ui.draggable[0]._this._parent.dom).offset();
                var x = offsetNewParent.left - offsetOldParent.left;
                var y = offsetNewParent.top - offsetOldParent.top;
                let t = $(ui.draggable).css('left');
                var to = offsetOldParent.left;
                var tn = offsetNewParent.left;
                var tl = $(ui.draggable).offset().left;
                var test = $(ui.draggable).offset();
                var top = parseInt($(ui.helper).css('top')) - y;
                var left = parseInt($(ui.helper).css('left')) - x;
                if (ui.draggable[0]._this.createFromType !== undefined) {
                    left = -offsetNewParent.left + parseInt($(ui.helper).css('left'));
                    top = -offsetNewParent.top + parseInt($(ui.helper).css('top'));
                    ui.helper[0]._this.left = top;
                    ui.helper[0]._this.y = top;
                    if (this.onpropertyadded !== undefined)
                        this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, left, top, target._this);
                    return;
                }
                //snap to 5
                if (top !== 1) {
                    top = Math.round(top / 5) * 5;
                }
                if (left !== 1) {
                    left = Math.round(left / 5) * 5;
                }
                var oldParent = ui.draggable[0]._this._parent;
                oldParent.remove(ui.draggable[0]._this);
                $(ui.draggable).css({ 'top': top, 'left': left, position: 'absolute' });
                target._this.add(ui.draggable[0]._this);
                if (_this.onpropertychanged !== undefined) {
                    _this.onpropertychanged(ui.draggable[0]._this, left, top, oldParent, target._this);
                }
            }
            else { //relative layout
                var oldParent = ui.draggable[0]._this._parent;
                var newParent = target._this;
                if (!$(newParent.dom).hasClass("jcontainer")) {
                    newParent = newParent._parent;
                }
                if (ui.draggable[0]._this.createFromType !== undefined) {
                    if (this.onpropertyadded !== undefined)
                        this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this);
                    return;
                }
                newParent.add(ui.draggable[0]._this);
                if (_this.onpropertychanged !== undefined) {
                    _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, newParent);
                }
                /*
                
                let t = $(ui.draggable).css('left');
                var oldx = $(ui.helper).offset().left;
                var oldy = $(ui.helper).offset().top;
                var called = false;
                if (ui.draggable[0]._this.createFromType !== undefined) {
                    oldx = parseInt($(ui.helper).css('left'));
                    oldy = parseInt($(ui.helper).css('top'));
                }
                $(ui.draggable).css({ 'top': "", 'left': "", "position": "relative" });
    
                var comps=[];
                for(var xx=0;xx<target._this._components.length;x++){
                    comps.push(target._this._components[x]);
                }
                
                for (var x = 0;x < comps.length;x++) {
                    var com = comps[x];
                    var postest = $(com.dom).position();
                    var posx = $(com.dom).offset().left;
                    var posy = $(com.dom).offset().top;
                    var w = $(com.dom).outerWidth();
                    var h = $(com.dom).outerHeight();
    
                    if ((oldx >= posx && oldx <= posx + w) && (oldy >= posy && oldy <= posy + h) && com !== ui.draggable[0]._this) {
                        if (ui.draggable[0]._this.createFromType !== undefined) {
                            if (this.onpropertyadded !== undefined)
                                this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this, com);
                            return;
                        }
                        var h = 0;
                        console.debug(com._id);
                        com._parent.addBefore(ui.draggable[0]._this, com);
                        called = true;
                        if (_this.onpropertychanged !== undefined) {
                            _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, target._this, com);
                        }
                        break;
                    }
    
                }
                if (!called) {//insert at the end
                    if (ui.draggable[0]._this.createFromType !== undefined) {
                        if (this.onpropertyadded !== undefined)
                            this.onpropertyadded(ui.draggable[0]._this.createFromType, ui.draggable[0]._this, undefined, undefined, target._this);
                        return;
                    }
                    target._this.add(ui.draggable[0]._this);
                    if (_this.onpropertychanged !== undefined) {
                        _this.onpropertychanged(ui.draggable[0]._this, undefined, undefined, oldParent, target._this);
                    }
                }*/
            }
        }
        /**
        * install the DragAndDropper
        * all child jomponents are draggable
        * all child containers are droppable
        * @param {jassi.ui.Component} parentPanel - all childs are effected
        * @param {string} all - ID's of all editable components e.g. #10,#12
        * @returns {unresolved}
        */
        install(parentPanel, all) {
            //$(this.parentPainer");
            var _this = this;
            if (parentPanel !== undefined)
                this.parentPanel = parentPanel;
            if (all !== undefined)
                this.allIDs = all;
            // this.draggableComponents = $(this.parentPanel.dom).find(".jcomponent").not(".jdesigncontainer").not(".designerNoDraggable");
            this.draggableComponents = $(this.allIDs).find(".jcomponent").not(".jdesigncontainer").not(".designerNoDraggable");
            this.draggableComponents.draggable({
                cancel: "false",
                revert: "invalid",
                drag: function (event, ui) {
                    _this.lastDropCanceled = _this.isDragEnabled(event, ui);
                    setTimeout(function () {
                        _this.lastDropCanceled = false;
                    }, 100);
                    return !_this.lastDropCanceled;
                },
                start: function () {
                    _this._isDragging = true;
                },
                stop: function () {
                    _this._isDragging = false;
                },
                //appendTo: "body"
                helper: "clone",
            });
            $(this.parentPanel.dom).find(".jcomponent").not(".jdesigncontainer").not(".designerNoDraggable").draggable('disable');
            $(this.allIDs).find(".jcomponent").not(".jdesigncontainer").not(".designerNoDraggable").draggable('enable');
            var _this = this;
            //all jcompoenents are proptargets                                         also jdesignummy     but no jcomponents in absolute Layout  no jcomponens that contains a jdesigndummy  absolutelayout container
            this.droppableComponents = $(this.parentPanel.dom).parent().parent().find(".jdesigndummy,.jcomponent:not(.jabsolutelayout>.jcomponent, :has(.jdesigndummy)),                      .jcontainer>.jabsolutelayout");
            console.log(this.droppableComponents.length);
            var isDropping = false;
            var dropWnd;
            var dropEvent;
            var dropUI;
            this.droppableComponents.droppable({
                greedy: true,
                hoverClass: "ui-state-highlight",
                tolerance: "pointer",
                drop: function (event, ui) {
                    //function is called for every Window in z-Index - we need the last one
                    if (_this.lastDropCanceled)
                        return;
                    dropWnd = this;
                    dropEvent = event;
                    dropUI = ui;
                    if (!isDropping) {
                        isDropping = true;
                        window.setTimeout(function () {
                            isDropping = false;
                            _this._drop(dropWnd, dropEvent, dropUI);
                        }, 50);
                    }
                }
            });
            //this.droppableComponents.droppable("enable");
            //$(this.allIDs).eq(".jcontainer").not(".jdesigncontainer").droppable("enable");
            //$(this.allIDs).filter(".jcontainer").not(".jdesigncontainer").droppable("enable");
        }
        enableDraggable(enable) {
            //  this.onpropertychanged = undefined;
            // this.onpropertyadded = undefined;
            if (this.draggableComponents !== undefined) {
                if (!enable)
                    this.draggableComponents.draggable('disable');
                else
                    this.draggableComponents.draggable('enable');
            }
        }
        /**
         * uninstall the DragAndDropper
         */
        uninstall() {
            this.onpropertychanged = undefined;
            this.onpropertyadded = undefined;
            // 	$(this.allIDs).eq(".jcontainer").not(".jdesigncontainer").droppable("disable");  
            //$(this.parentPanel.dom).parent().parent().find(".jcontainer").droppable("destroy");
            // var components=$(this.allIDs);
            if (this.draggableComponents !== undefined) {
                this.draggableComponents.draggable();
                this.draggableComponents.draggable('destroy');
                delete $.ui["ddmanager"].current; //memory leak https://bugs.jqueryui.com/ticket/10667
                this.draggableComponents = undefined;
            }
            if (this.droppableComponents !== undefined) {
                this.droppableComponents.droppable();
                this.droppableComponents.droppable("destroy");
            }
        }
    };
    DragAndDropper = __decorate([
        Jassi_82.$Class("jassi.ui.helper.DragAndDropper"),
        __metadata("design:paramtypes", [])
    ], DragAndDropper);
    exports.DragAndDropper = DragAndDropper;
});
define("jassi/ui/helper/Resizer", ["require", "exports", "remote/jassi/base/Jassi"], function (require, exports, Jassi_83) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Resizer = void 0;
    let Resizer = class Resizer {
        constructor() {
            this.cursorType = "";
            this.isCursorOnBorder = false;
            this.isMouseDown = false;
            this.resizedElement = "";
            this.elements = undefined;
            this.toResizedElement = undefined;
            /** @member {function} - called when and element is selected function(domid,mouseevent */
            this.onelementselected = undefined;
            /** @member {function} - called when an element is resized function(component,property,value) */
            this.onpropertychanged = undefined;
            /** @member {jassi.ui.Component} - the parent panel */
            this.parentPanel = undefined;
            this.lastSelected = undefined;
            this.componentUnderCursor = undefined;
            this.lassoMode = false;
            this.draganddropper = undefined;
            /* this.mouseDown=function(event){
                     this._activateResize($(this).attr('id'),event);
             }
             this.mouseMove=function(event){
                 this._resizeDiv(event);
             };
             this.mouseUp=function(event){
                 this._deActivateResize(event);
             }*/
        }
        mouseDown(event) {
            event.data._resizeDiv(event);
            event.data._activateResize($(this).attr('id'), event);
        }
        mouseMove(event) {
            event.data._resizeDiv(event);
        }
        ;
        mouseUp(event) {
            if (event.data !== undefined)
                event.data._deActivateResize(event);
        }
        //not every event is fired there nly the last with delay
        firePropertyChange(...param) {
            var _this = this;
            if (this.propertyChangetimer) {
                clearTimeout(this.propertyChangetimer);
            }
            this.propertyChangetimer = setTimeout(() => {
                if (_this.onpropertychanged !== undefined) {
                    _this.onpropertychanged(...param);
                }
            }, 200);
        }
        /**
             * resize the component
             * this is an onmousemove event called from _changeCursor()
             * @param {type} event
             */
        _resizeDiv(e) {
            //window.status = event1.type;
            //check drag is activated or not
            if (this.isMouseDown) {
                // console.debug("drag");
                var curevent = e;
                //coordiantes of the event position
                var x = curevent.clientX;
                var y = curevent.clientY;
                //var element = document.getElementById(this.resizedElement);
                var element = this.componentUnderCursor;
                if (element === undefined) {
                    var cursor = this.cursorType.substring(0, this.cursorType.indexOf('-'));
                    this._changeCursor(e);
                    return;
                }
                //top left positions of the div element
                var topLeftX = $(element._this.dom).offset().left; //element.offsetLeft;
                var topLeftY = $(element._this.dom).offset().top; //element.offsetTop;
                //width and height of the element
                var width = element.offsetWidth;
                var height = element.offsetHeight;
                //get the cursor sytle [e,w,n,s,ne,nw,se,sw]
                var cursor = this.cursorType.substring(0, this.cursorType.indexOf('-'));
                var _this = this;
                if (cursor.indexOf('e') !== -1) {
                    var w = Math.max(x - topLeftX, 8);
                    w = Math.round(w / 5) * 5;
                    element._this.width = w;
                    this.firePropertyChange(element._this, "width", w);
                    /*if (this.onpropertychanged !== undefined) {
                            this.onpropertychanged(element._this, "width", w);
                    }*/
                    //	element.style.width = Math.max(x - topLeftX,8)+'px';
                }
                if (cursor.indexOf('s') !== -1) {
                    var h = Math.max(y - topLeftY, 8);
                    h = Math.round(h / 5) * 5;
                    element._this.height = h; //+'px';
                    this.firePropertyChange(element._this, "height", h);
                    /*if (this.onpropertychanged !== undefined) {
                            this.onpropertychanged(element._this, "height", h);
                    }*/
                }
            }
            else {
                //  document.getElementById(elementID).style.cursor = cursorType;
                this._changeCursor(e);
            }
        }
        /**
                 * activate resizing
                 * @param {string} elementID
                 * @param {type} e
                 */
        _activateResize(elementID, e) {
            var _this = this;
            if (this.onelementselected !== undefined) {
                //select with click
                //delegate only the top window - this is the first event????
                if (this.topElement === undefined) {
                    if ($("#" + elementID).hasClass("designerNoSelectable")) {
                        return;
                    }
                    this.topElement = elementID;
                    setTimeout(function () {
                        $(".jselected").removeClass("jselected");
                        $("#" + _this.topElement).addClass("jselected");
                        _this.lastSelected = [_this.topElement];
                        if (!_this.onelementselected)
                            console.log("onselected undefined");
                        _this.onelementselected(_this.lastSelected, e);
                        _this.topElement = undefined;
                    }, 50);
                }
                var lastTime = new Date().getTime();
                //select with lasso
            }
            if (this.resizedElement === "" || this.resizedElement === undefined) { //if also parentcontainer will be fired->ignore
                this.resizedElement = elementID.toString();
                this.isMouseDown = true;
            }
        }
        /**
             * switch off the resizing
             * @param {type} event
             */
        _deActivateResize(event) {
            this.isMouseDown = false;
            this.isCursorOnBorder = false;
            this.cursorType = "default";
            if (this.resizedElement !== "" && this.resizedElement !== undefined) {
                document.getElementById(this.resizedElement).style.cursor = this.cursorType;
                this.resizedElement = "";
            }
        }
        /**
             * changes the cursor and determine the toResizedElement
             * @param {type} e
             */
        _changeCursor(e) {
            var borderSize = 4;
            this.cursorType = "default";
            // var els=$(".one");//document.getElementsByClassName("one");
            var els = $(this.parentPanel.dom).find(this.elements);
            for (var i = 0; i < els.length; i++) {
                var element = els[i];
                if ($(element).hasClass("designerNoResizable")) {
                    continue;
                }
                //code start for changing the cursor
                //var element2 = document.getElementById(elementID);
                var topLeftX = $(element).offset().left; //element.offsetLeft;
                var topLeftY = $(element).offset().top; //element.offsetTop;
                var bottomRightX = topLeftX + element.offsetWidth;
                var bottomRightY = topLeftY + element.offsetHeight;
                var curevent = e;
                var x = curevent.clientX;
                var y = curevent.clientY;
                //window.status = topLeftX +"--"+topLeftY+"--"+bottomRightX+"--"+bottomRightY+"--"+x+"--"+y+"--"+isMouseDown;
                //change the cursor style when it is on the border or even at a distance of 8 pixels around the border
                if (x >= bottomRightX - borderSize && x <= bottomRightX + borderSize) {
                    /*  if(y >= bottomRightY-borderSize && y <= bottomRightY+borderSize){
                              this.isCursorOnBorder = true;
                              this.cursorType = "se-resize";
                      }*/
                    if (y > topLeftY - borderSize && y < bottomRightY + borderSize) {
                        this.isCursorOnBorder = true;
                        this.cursorType = "e-resize";
                    }
                }
                else if (x > topLeftX - borderSize && x < bottomRightX + borderSize) {
                    if (y >= bottomRightY - borderSize && y <= bottomRightY + borderSize) {
                        this.isCursorOnBorder = true;
                        this.cursorType = "s-resize";
                    }
                }
                if (this.cursorType === "e-resize" || this.cursorType === "s-resize") {
                    var test = $(element).closest(".jcomponent");
                    if (test !== undefined && test.hasClass("ui-draggable")) {
                        this.toResizedElement = test;
                        // test.draggable( "disable" );
                        //  if(this.toResizedElement[0]._this!=undefined&&this.toResizedElement[0]._this.dom!=undefined)
                        //    $(this.toResizedElement[0]._this.dom).prop('disabled', true);
                    }
                    var isDragging = false;
                    if (this.draganddropper !== undefined) {
                        element == undefined;
                        isDragging = this.draganddropper.isDragging();
                    }
                    if (!this.lassoMode && !isDragging) {
                        this.componentUnderCursor = test[0];
                        element.style.cursor = this.cursorType;
                    }
                    else {
                        this.cursorType = "default";
                        this.componentUnderCursor = undefined;
                        element.style.cursor = this.cursorType;
                    }
                    return;
                }
                this.componentUnderCursor = undefined;
                element.style.cursor = this.cursorType;
            }
            if (this.toResizedElement !== undefined) {
                //     this.toResizedElement.draggable( "enable" );
            }
        }
        setLassoMode(enable) {
            this.lassoMode = enable;
            this.lastSelected = [];
            this.resizedElement = "";
            this.cursorType = "";
            this.isCursorOnBorder = false;
            this.isMouseDown = false;
            this.toResizedElement = undefined;
            var lastTime = new Date().getTime();
            var _this = this;
            if (enable === true) {
                $(this.parentPanel.dom).selectable({
                    selected: function (event, ui) {
                        if (new Date().getTime() - lastTime > 500) { //new selection
                            _this.lastSelected = [];
                            $(".jselected").removeClass("jselected");
                            setTimeout(function () {
                                _this.onelementselected(_this.lastSelected);
                                _this.lastSelected = undefined;
                            }, 50);
                        }
                        lastTime = new Date().getTime();
                        var a = 9;
                        if (ui.selected._this && $(ui.selected).hasClass("jcomponent") && !$(ui.selected).hasClass("designerNoSelectable")) {
                            var ids = _this.elements + ",";
                            if (ids.indexOf("#" + ui.selected._this._id + ",") > -1) {
                                _this.lastSelected.push(ui.selected._this._id);
                                $("#" + ui.selected._this._id).addClass("jselected");
                            }
                        }
                    }
                });
            }
            else {
                $(this.parentPanel.dom).selectable("destroy");
            }
        }
        /**
         * install the resizer
         * @param {jassi.ui.Component} parentPanel - the parent component
         * @param {string} elements - the search pattern for the components to resize e.q. ".jresizeable"
         */
        install(parentPanel, elements) {
            var _this = this;
            $(parentPanel.domWrapper).resizable({
                resize: function (evt) {
                    var h = evt.target.offsetHeight;
                    var w = evt.target.offsetWidth;
                    if (_this.onpropertychanged !== undefined) {
                        evt.target._this.width = w;
                        evt.target._this.height = h;
                        _this.onpropertychanged(evt.target._this, "width", w);
                        _this.onpropertychanged(evt.target._this, "height", h);
                        $(evt.target._this.domWrapper).css("width", w + "px");
                        $(evt.target._this.domWrapper).css("height", h + "px");
                    }
                }
            });
            if (parentPanel !== undefined)
                this.parentPanel = parentPanel;
            if (elements !== undefined)
                this.elements = elements;
            $(this.parentPanel.dom).on("mousedown", this, this.mouseDown);
            this.mousedownElements = $(this.parentPanel.dom).find(this.elements);
            this.mousedownElements.on("mousedown", this, this.mouseDown);
            $(this.parentPanel.dom).on("mousemove", this, this.mouseMove);
            $(this.parentPanel.dom).on("mouseup", this, this.mouseUp);
            //this.setLassoMode(true);
            //this.setLassoMode(false);
        }
        tt() {
            if (this.parentPanel !== undefined) {
                $(this.parentPanel.dom).off("mousedown", this.mouseDown);
                if (this.mousedownElements !== undefined)
                    this.mousedownElements.off("mousedown", this.mouseDown);
                this.mousedownElements = undefined;
                $(this.parentPanel.dom).off("mousemove", this.mouseMove);
                $(this.parentPanel.dom).on("mouseup", this.mouseUp);
            }
        }
        /**
         * uninstall the resizer
         */
        uninstall() {
            this.onelementselected = undefined;
            this.onpropertychanged = undefined;
            if (this.parentPanel !== undefined) {
                $(this.parentPanel.dom).off("mousedown", this.mouseDown);
                if (this.mousedownElements !== undefined)
                    this.mousedownElements.off("mousedown", this.mouseDown);
                this.mousedownElements = undefined;
                $(this.parentPanel.dom).off("mousemove", this.mouseMove);
                $(this.parentPanel.dom).on("mouseup", this.mouseUp);
            }
            this.resizedElement = "";
            this.elements = undefined;
            this.toResizedElement = undefined;
            this.parentPanel = undefined;
            this.lastSelected = undefined;
            this.componentUnderCursor = undefined;
            this.draganddropper = undefined;
            /*  this.mouseDown.bound=undefined;
              this.mouseMove.bound=undefined;
              this.mouseUp.bound=undefined;*/
        }
    };
    Resizer = __decorate([
        Jassi_83.$Class("jassi.ui.helper.Resizer"),
        __metadata("design:paramtypes", [])
    ], Resizer);
    exports.Resizer = Resizer;
});
define("jassi/util/CSVImport", ["require", "exports", "jassi/ui/Upload", "jassi/ui/Button", "jassi/ui/converters/NumberConverter", "jassi/ui/Textbox", "jassi/ui/BoxPanel", "jassi/ui/Select", "jassi/ui/Table", "remote/jassi/base/Jassi", "jassi/ui/Panel", "jassi/ext/papaparse", "remote/jassi/base/Database", "remote/jassi/base/Registry", "remote/jassi/base/Classes", "remote/jassi/base/DBObject"], function (require, exports, Upload_1, Button_15, NumberConverter_2, Textbox_17, BoxPanel_9, Select_7, Table_5, Jassi_84, Panel_27, papaparse_1, Database_1, Registry_23, Classes_25, DBObject_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.CSVImport = void 0;
    var csv = `id,testid,companyname,contactname,contacttitle,address,city,region,postalcode,country,phone,fax
ALFKI,1,Alfreds Futterkiste,Maria Anders,Sales Representative,Obere Str. 57,Berlin,#NV,12209,Germany,030-0074321,030-0076545
ANATR,2,Ana Trujillo Emparedados y helados,Ana Trujillo,Owner,Avda. de la Constitución 2222,México D.F.,#NV,05021,Mexico,(5) 555-4729,(5) 555-3745
ANTON,3,Antonio Moreno Taquería,Antonio Moreno,Owner,Mataderos  2312,México D.F.,#NV,05023,Mexico,(5) 555-3932,#NV
AROUT,4,Around the Horn,Thomas Hardy,Sales Representative,120 Hanover Sq.,London,#NV,WA1 1DP,UK,(171) 555-7788,(171) 555-6750
BERGS,5,Berglunds snabbköp,Christina Berglund,Order Administrator,Berguvsvägen  8,Luleå,#NV,S-958 22,Sweden,0921-12 34 65,0921-12 34 67
BLAUS,6,Blauer See Delikatessen,Hanna Moos,Sales Representative,Forsterstr. 57,Mannheim,#NV,68306,Germany,0621-08460,0621-08924
BLONP,7,Blondesddsl père et fils,Frédérique Citeaux,Marketing Manager,"24, place Kléber",Strasbourg,#NV,67000,France,88.60.15.31,88.60.15.32
BOLID,8,Bólido Comidas preparadas,Martín Sommer,Owner,"C/ Araquil, 67",Madrid,#NV,28023,Spain,(91) 555 22 82,(91) 555 91 99
BONAP,9,Bon app',Laurence Lebihan,Owner,"12, rue des Bouchers",Marseille,#NV,13008,France,91.24.45.40,91.24.45.41
BOTTM,10,Bottom-Dollar Markets,Elizabeth Lincoln,Accounting Manager,23 Tsawassen Blvd.,Tsawassen,BC,T2F 8M4,Canada,(604) 555-4729,(604) 555-3745
BSBEV,11,B's Beverages,Victoria Ashworth,Sales Representative,Fauntleroy Circus,London,#NV,EC2 5NT,UK,(171) 555-1212,#NV
CACTU,12,Cactus Comidas para llevar,Patricio Simpson,Sales Agent,Cerrito 333,Buenos Aires,#NV,1010,Argentina,(1) 135-5555,(1) 135-4892
CENTC,13,Centro comercial Moctezuma,Francisco Chang,Marketing Manager,Sierras de Granada 9993,México D.F.,#NV,05022,Mexico,(5) 555-3392,(5) 555-7293
CHOPS,14,Chop-suey Chinese,Yang Wang,Owner,Hauptstr. 29,Bern,#NV,3012,Switzerland,0452-076545,#NV
COMMI,15,Comércio Mineiro,Pedro Afonso,Sales Associate,"Av. dos Lusíadas, 23",Sao Paulo,SP,05432-043,Brazil,(11) 555-7647,#NV
CONSH,16,Consolidated Holdings,Elizabeth Brown,Sales Representative,Berkeley Gardens 12  Brewery,London,#NV,WX1 6LT,UK,(171) 555-2282,(171) 555-9199
DRACD,17,Drachenblut Delikatessen,Sven Ottlieb,Order Administrator,Walserweg 21,Aachen,#NV,52066,Germany,0241-039123,0241-059428
DUMON,18,Du monde entier,Janine Labrune,Owner,"67, rue des Cinquante Otages",Nantes,#NV,44000,France,40.67.88.88,40.67.89.89
EASTC,19,Eastern Connection,Ann Devon,Sales Agent,35 King George,London,#NV,WX3 6FW,UK,(171) 555-0297,(171) 555-3373
ERNSH,20,Ernst Handel,Roland Mendel,Sales Manager,Kirchgasse 6,Graz,#NV,8010,Austria,7675-3425,7675-3426
FAMIA,21,Familia Arquibaldo,Aria Cruz,Marketing Assistant,"Rua Orós, 92",Sao Paulo,SP,05442-030,Brazil,(11) 555-9857,#NV
FISSA,22,FISSA Fabrica Inter. Salchichas S.A.,Diego Roel,Accounting Manager,"C/ Moralzarzal, 86",Madrid,#NV,28034,Spain,(91) 555 94 44,(91) 555 55 93
FOLIG,23,Folies gourmandes,Martine Rancé,Assistant Sales Agent,"184, chaussée de Tournai",Lille,#NV,59000,France,20.16.10.16,20.16.10.17
FOLKO,24,Folk och fä HB,Maria Larsson,Owner,Åkergatan 24,Bräcke,#NV,S-844 67,Sweden,0695-34 67 21,#NV
FRANK,25,Frankenversand,Peter Franken,Marketing Manager,Berliner Platz 43,München,#NV,80805,Germany,089-0877310,089-0877451
FRANR,26,France restauration,Carine Schmitt,Marketing Manager,"54, rue Royale",Nantes,#NV,44000,France,40.32.21.21,40.32.21.20
FRANS,27,Franchi S.p.A.,Paolo Accorti,Sales Representative,Via Monte Bianco 34,Torino,#NV,10100,Italy,011-4988260,011-4988261
FURIB,28,Furia Bacalhau e Frutos do Mar,Lino Rodriguez,Sales Manager,Jardim das rosas n. 32,Lisboa,#NV,1675,Portugal,(1) 354-2534,(1) 354-2535
GALED,29,Galería del gastrónomo,Eduardo Saavedra,Marketing Manager,"Rambla de Cataluña, 23",Barcelona,#NV,08022,Spain,(93) 203 4560,(93) 203 4561
GODOS,30,Godos Cocina Típica,José Pedro Freyre,Sales Manager,"C/ Romero, 33",Sevilla,#NV,41101,Spain,(95) 555 82 82,#NV
GOURL,31,Gourmet Lanchonetes,André Fonseca,Sales Associate,"Av. Brasil, 442",Campinas,SP,04876-786,Brazil,(11) 555-9482,#NV
GREAL,32,Great Lakes Food Market,Howard Snyder,Marketing Manager,2732 Baker Blvd.,Eugene,OR,97403,USA,(503) 555-7555,#NV
GROSR,33,GROSELLA-Restaurante,Manuel Pereira,Owner,5ª Ave. Los Palos Grandes,Caracas,DF,1081,Venezuela,(2) 283-2951,(2) 283-3397
HANAR,34,Hanari Carnes,Mario Pontes,Accounting Manager,"Rua do Paço, 67",Rio de Janeiro,RJ,05454-876,Brazil,(21) 555-0091,(21) 555-8765
HILAA,35,HILARION-Abastos,Carlos Hernández,Sales Representative,Carrera 22 con Ave. Carlos Soublette #8-35,San Cristóbal,Táchira,5022,Venezuela,(5) 555-1340,(5) 555-1948
HUNGC,36,Hungry Coyote Import Store,Yoshi Latimer,Sales Representative,City Center Plaza 516 Main St.,Elgin,OR,97827,USA,(503) 555-6874,(503) 555-2376
HUNGO,37,Hungry Owl All-Night Grocers,Patricia McKenna,Sales Associate,8 Johnstown Road,Cork,Co. Cork,#NV,Ireland,2967 542,2967 3333
ISLAT,38,Island Trading,Helen Bennett,Marketing Manager,Garden House Crowther Way,Cowes,Isle of Wight,PO31 7PJ,UK,(198) 555-8888,#NV
KOENE,39,Königlich Essen,Philip Cramer,Sales Associate,Maubelstr. 90,Brandenburg,#NV,14776,Germany,0555-09876,#NV
LACOR,40,La corne d'abondance,Daniel Tonini,Sales Representative,"67, avenue de l'Europe",Versailles,#NV,78000,France,30.59.84.10,30.59.85.11
LAMAI,41,La maison d'Asie,Annette Roulet,Sales Manager,1 rue Alsace-Lorraine,Toulouse,#NV,31000,France,61.77.61.10,61.77.61.11
LAUGB,42,Laughing Bacchus Wine Cellars,Yoshi Tannamuri,Marketing Assistant,1900 Oak St.,Vancouver,BC,V3F 2K1,Canada,(604) 555-3392,(604) 555-7293
LAZYK,43,Lazy K Kountry Store,John Steel,Marketing Manager,12 Orchestra Terrace,Walla Walla,WA,99362,USA,(509) 555-7969,(509) 555-6221
LEHMS,44,Lehmanns Marktstand,Renate Messner,Sales Representative,Magazinweg 7,Frankfurt a.M.,#NV,60528,Germany,069-0245984,069-0245874
LETSS,45,Let's Stop N Shop,Jaime Yorres,Owner,87 Polk St. Suite 5,San Francisco,CA,94117,USA,(415) 555-5938,#NV
LILAS,46,LILA-Supermercado,Carlos González,Accounting Manager,Carrera 52 con Ave. Bolívar #65-98 Llano Largo,Barquisimeto,Lara,3508,Venezuela,(9) 331-6954,(9) 331-7256
LINOD,47,LINO-Delicateses,Felipe Izquierdo,Owner,Ave. 5 de Mayo Porlamar,I. de Margarita,Nueva Esparta,4980,Venezuela,(8) 34-56-12,(8) 34-93-93
LONEP,48,Lonesome Pine Restaurant,Fran Wilson,Sales Manager,89 Chiaroscuro Rd.,Portland,OR,97219,USA,(503) 555-9573,(503) 555-9646
MAGAA,49,Magazzini Alimentari Riuniti,Giovanni Rovelli,Marketing Manager,Via Ludovico il Moro 22,Bergamo,#NV,24100,Italy,035-640230,035-640231
MAISD,50,Maison Dewey,Catherine Dewey,Sales Agent,Rue Joseph-Bens 532,Bruxelles,#NV,B-1180,Belgium,(02) 201 24 67,(02) 201 24 68
MEREP,51,Mère Paillarde,Jean Fresnière,Marketing Assistant,43 rue St. Laurent,Montréal,Québec,H1J 1C3,Canada,(514) 555-8054,(514) 555-8055
MORGK,52,Morgenstern Gesundkost,Alexander Feuer,Marketing Assistant,Heerstr. 22,Leipzig,#NV,04179,Germany,0342-023176,#NV
NORTS,53,North/South,Simon Crowther,Sales Associate,South House 300 Queensbridge,London,#NV,SW7 1RZ,UK,(171) 555-7733,(171) 555-2530
OCEAN,54,Océano Atlántico Ltda.,Yvonne Moncada,Sales Agent,Ing. Gustavo Moncada 8585 Piso 20-A,Buenos Aires,#NV,1010,Argentina,(1) 135-5333,(1) 135-5535
OLDWO,55,Old World Delicatessen,Rene Phillips,Sales Representative,2743 Bering St.,Anchorage,AK,99508,USA,(907) 555-7584,(907) 555-2880
OTTIK,56,Ottilies Käseladen,Henriette Pfalzheim,Owner,Mehrheimerstr. 369,Köln,#NV,50739,Germany,0221-0644327,0221-0765721
PARIS,57,Paris spécialités,Marie Bertrand,Owner,"265, boulevard Charonne",Paris,#NV,75012,France,(1) 42.34.22.66,(1) 42.34.22.77
PERIC,58,Pericles Comidas clásicas,Guillermo Fernández,Sales Representative,Calle Dr. Jorge Cash 321,México D.F.,#NV,05033,Mexico,(5) 552-3745,(5) 545-3745
PICCO,59,Piccolo und mehr,Georg Pipps,Sales Manager,Geislweg 14,Salzburg,#NV,5020,Austria,6562-9722,6562-9723
PRINI,60,Princesa Isabel Vinhos,Isabel de Castro,Sales Representative,Estrada da saúde n. 58,Lisboa,#NV,1756,Portugal,(1) 356-5634,#NV
QUEDE,61,Que Delícia,Bernardo Batista,Accounting Manager,"Rua da Panificadora, 12",Rio de Janeiro,RJ,02389-673,Brazil,(21) 555-4252,(21) 555-4545
QUEEN,62,Queen Cozinha,Lúcia Carvalho,Marketing Assistant,"Alameda dos Canàrios, 891",Sao Paulo,SP,05487-020,Brazil,(11) 555-1189,#NV
QUICK,63,QUICK-Stop,Horst Kloss,Accounting Manager,Taucherstraße 10,Cunewalde,#NV,01307,Germany,0372-035188,#NV
RANCH,64,Rancho grande,Sergio Gutiérrez,Sales Representative,Av. del Libertador 900,Buenos Aires,#NV,1010,Argentina,(1) 123-5555,(1) 123-5556
RATTC,65,Rattlesnake Canyon Grocery,Paula Wilson,Assistant Sales Representative,2817 Milton Dr.,Albuquerque,NM,87110,USA,(505) 555-5939,(505) 555-3620
REGGC,66,Reggiani Caseifici,Maurizio Moroni,Sales Associate,Strada Provinciale 124,Reggio Emilia,#NV,42100,Italy,0522-556721,0522-556722
RICAR,67,Ricardo Adocicados,Janete Limeira,Assistant Sales Agent,"Av. Copacabana, 267",Rio de Janeiro,RJ,02389-890,Brazil,(21) 555-3412,#NV
RICSU,68,Richter Supermarkt,Michael Holz,Sales Manager,Grenzacherweg 237,Genève,#NV,1203,Switzerland,0897-034214,#NV
ROMEY,69,Romero y tomillo,Alejandra Camino,Accounting Manager,"Gran Vía, 1",Madrid,#NV,28001,Spain,(91) 745 6200,(91) 745 6210
SANTG,70,Santé Gourmet,Jonas Bergulfsen,Owner,Erling Skakkes gate 78,Stavern,#NV,4110,Norway,07-98 92 35,07-98 92 47
SAVEA,71,Save-a-lot Markets,Jose Pavarotti,Sales Representative,187 Suffolk Ln.,Boise,ID,83720,USA,(208) 555-8097,#NV
SEVES,72,Seven Seas Imports,Hari Kumar,Sales Manager,90 Wadhurst Rd.,London,#NV,OX15 4NB,UK,(171) 555-1717,(171) 555-5646
SIMOB,73,Simons bistro,Jytte Petersen,Owner,Vinbæltet 34,Kobenhavn,#NV,1734,Denmark,31 12 34 56,31 13 35 57
SPECD,74,Spécialités du monde,Dominique Perrier,Marketing Manager,"25, rue Lauriston",Paris,#NV,75016,France,(1) 47.55.60.10,(1) 47.55.60.20
SPLIR,75,Split Rail Beer & Ale,Art Braunschweiger,Sales Manager,P.O. Box 555,Lander,WY,82520,USA,(307) 555-4680,(307) 555-6525
SUPRD,76,Suprêmes délices,Pascale Cartrain,Accounting Manager,"Boulevard Tirou, 255",Charleroi,#NV,B-6000,Belgium,(071) 23 67 22 20,(071) 23 67 22 21
THEBI,77,The Big Cheese,Liz Nixon,Marketing Manager,89 Jefferson Way Suite 2,Portland,OR,97201,USA,(503) 555-3612,#NV
THECR,78,The Cracker Box,Liu Wong,Marketing Assistant,55 Grizzly Peak Rd.,Butte,MT,59801,USA,(406) 555-5834,(406) 555-8083
TOMSP,79,Toms Spezialitäten,Karin Josephs,Marketing Manager,Luisenstr. 48,Münster,#NV,44087,Germany,0251-031259,0251-035695
TORTU,80,Tortuga Restaurante,Miguel Angel Paolino,Owner,Avda. Azteca 123,México D.F.,#NV,05033,Mexico,(5) 555-2933,#NV
TRADH,81,Tradição Hipermercados,Anabela Domingues,Sales Representative,"Av. Inês de Castro, 414",Sao Paulo,SP,05634-030,Brazil,(11) 555-2167,(11) 555-2168
TRAIH,82,Trail's Head Gourmet Provisioners,Helvetius Nagy,Sales Associate,722 DaVinci Blvd.,Kirkland,WA,98034,USA,(206) 555-8257,(206) 555-2174
VAFFE,83,Vaffeljernet,Palle Ibsen,Sales Manager,Smagsloget 45,Århus,#NV,8200,Denmark,86 21 32 43,86 22 33 44
VICTE,84,Victuailles en stock,Mary Saveley,Sales Agent,"2, rue du Commerce",Lyon,#NV,69004,France,78.32.54.86,78.32.54.87
VINET,85,Vins et alcools Chevalier,Paul Henriot,Accounting Manager,59 rue de l'Abbaye,Reims,#NV,51100,France,26.47.15.10,26.47.15.11
WANDK,86,Die Wandernde Kuh,Rita Müller,Sales Representative,Adenauerallee 900,Stuttgart,#NV,70563,Germany,0711-020361,0711-035428
WARTH,87,Wartian Herkku,Pirkko Koskitalo,Accounting Manager,Torikatu 38,Oulu,#NV,90110,Finland,981-443655,981-443655
WELLI,88,Wellington Importadora,Paula Parente,Sales Manager,"Rua do Mercado, 12",Resende,SP,08737-363,Brazil,(14) 555-8122,#NV
WHITC,89,White Clover Markets,Karl Jablonski,Owner,305 - 14th Ave. S. Suite 3B,Seattle,WA,98128,USA,(206) 555-4112,(206) 555-4115
WILMK,90,Wilman Kala,Matti Karttunen,Owner/Marketing Assistant,Keskuskatu 45,Helsinki,#NV,21240,Finland,90-224 8858,90-224 8858
WOLZA,91,Wolski  Zajazd,Zbyszek Piestrzeniewicz,Owner,ul. Filtrowa 68,Warszawa,#NV,01-012,Poland,(26) 642-7012,(26) 642-7012
`;
    let CSVImport = class CSVImport extends Panel_27.Panel {
        constructor() {
            super();
            this.me = {};
            this.layout(this.me);
        }
        initTableHeaders() {
            var _this = this;
            var html = "<option></option>";
            var meta = Database_1.db.getMetadata(Classes_25.classes.getClass(this.me.select.value));
            var lkeys = [];
            for (var key in meta) {
                if (key === "this")
                    continue;
                html = html + '<option value="' + key.toLowerCase() + '">' + key.toLowerCase() + '</option>';
                lkeys.push(key.toLowerCase());
            }
            for (var x = 0; x < this.fieldCount; x++) {
                var el = $("#" + this._id + "--" + x)[0];
                el.innerHTML = html;
                var pos = lkeys.indexOf(this.data[0]["Column " + x].toLowerCase());
                //assign dettected fields in first row
                if (pos !== -1) {
                    $("#" + this._id + "--" + x).val(lkeys[pos]);
                }
            }
            //this.me.table.
        }
        async initClasses() {
            var cls = [];
            var _this = this;
            await Registry_23.default.loadAllFilesForService("$DBObject");
            var data = Registry_23.default.getData("$DBObject");
            data.forEach((entr) => {
                cls.push(Classes_25.classes.getClassName(entr.oclass));
            });
            this.me.select.items = cls;
            //debug
        }
        readData(csvdata) {
            var csvdata = papaparse_1.Papa.parse(csvdata, { skipEmptyLines: true }).data;
            var len = csvdata[0].length;
            this.data = [];
            //convert [{1:hallo",2:"Du"}]
            for (var z = 0; z < csvdata.length; z++) {
                var ob = {};
                for (var x = 0; x < len; x++) {
                    ob["Column " + x] = csvdata[z][x];
                }
                this.data.push(ob);
            }
        }
        updateTable() {
            let _this = this;
            this.fieldCount = 0;
            for (var key in this.data[0]) {
                this.fieldCount++;
            }
            this.initClasses();
            var cols = [];
            var formatter = function (cell, formatterParams, onRendered) {
                return '<select name="pets" id="' + _this._id + "--" + formatterParams.max + '"><option>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</option></select';
            };
            for (var x = 0; x < this.fieldCount; x++) {
                cols.push({
                    headerSort: false,
                    title: "Column " + x,
                    field: "Column " + x,
                    titleFormatter: formatter,
                    titleFormatterParams: { max: x }
                });
            }
            this.me.table.columns = cols;
            this.me.table.items = this.data;
        }
        layout(me) {
            me.boxpanel1 = new BoxPanel_9.BoxPanel();
            me.fromLine = new Textbox_17.Textbox();
            me.next = new Button_15.Button();
            me.upload = new Upload_1.Upload();
            var _this = this;
            this.me.table = new Table_5.Table({
                autoColumns: false
            });
            me.select = new Select_7.Select();
            me.table.width = 500;
            me.table.height = "200";
            me.fromLine.value = 2;
            this.add(me.upload);
            this.add(me.boxpanel1);
            this.add(me.table);
            this.add(me.next);
            me.select.label = "DB-Class";
            me.select.width = 235;
            me.select.onchange(function (event) {
                _this.initTableHeaders();
            });
            me.select.height = 30;
            me.boxpanel1.width = 195;
            me.boxpanel1.horizontal = false;
            me.boxpanel1.add(me.fromLine);
            me.boxpanel1.add(me.select);
            me.fromLine.label = "start from line";
            me.fromLine.width = "80";
            me.fromLine.converter = new NumberConverter_2.NumberConverter();
            me.next.text = "next";
            me.next.onclick(function (event) {
                _this.doimport();
            });
            me.upload.onuploaded(function (fdata) {
                for (var key in fdata) {
                    _this.readData(fdata[key]);
                    _this.updateTable();
                }
            });
            this.readData(csv);
            this.updateTable();
        }
        async doimport() {
            //read userchoices
            var assignedfields = {};
            var Type = Classes_25.classes.getClass(this.me.select.value);
            //read objects so we can read from cache
            let nil = await Type["find"]();
            var meta = Database_1.db.getMetadata(Classes_25.classes.getClass(this.me.select.value));
            var members = Registry_23.default.getMemberData("design:type")[this.me.select.value];
            for (var x = 0; x < this.fieldCount; x++) {
                var value = $("#" + this._id + "--" + x).val();
                if (value !== "")
                    assignedfields[value] = x;
            }
            var allObjects = [];
            var from = this.me.fromLine.value;
            for (var x = from; x < this.data.length; x++) {
                var satz = this.data[x];
                var ob = new Type();
                for (var fname in meta) {
                    let pos = assignedfields[fname.toLowerCase()];
                    if (pos !== undefined) {
                        let val = satz["Column " + pos];
                        var mtype = members[fname];
                        if (mtype !== undefined) {
                            var mt = mtype[0][0];
                            if (mt === Number)
                                val = Number(val);
                            if (val === "#NV")
                                val = undefined;
                        }
                        ob[fname] = val;
                    }
                }
                var exists = DBObject_2.DBObject.getFromCache(this.me.select.value, ob.id);
                if (exists) {
                    Object.assign(exists, ob);
                    allObjects.push(exists);
                }
                else
                    allObjects.push(ob);
            }
            var ret = [];
            for (var x = 0; x < allObjects.length; x++) {
                await allObjects[x].save();
                //ret.push(allObjects[x].save());
            }
            await Promise.all(ret);
            alert("imported " + allObjects.length + " objects");
            console.log("imported " + allObjects.length + " objects");
        }
    };
    CSVImport = __decorate([
        Jassi_84.$Class("jassi/util/CSVImport"),
        __metadata("design:paramtypes", [])
    ], CSVImport);
    exports.CSVImport = CSVImport;
    async function test() {
        var t = await Classes_25.classes.loadClass("northwind.Customer");
        var ret = new CSVImport();
        window.setTimeout(() => {
            /*        	ret.me.select.value="northwind.Customer";
                        ret.initTableHeaders();
                        ret.doimport();*/
        }, 300);
        return ret;
    }
    exports.test = test;
});
define("jassi/util/Cookies", ["require", "exports", "jassi/ext/js-cookie"], function (require, exports, js_cookie_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Cookies = void 0;
    class C {
        set(name, value, params = undefined) {
        }
        get(name) {
        }
        remove(name, params = undefined) {
        } // removed!
    }
    var Cookies = js_cookie_1.default;
    exports.Cookies = Cookies;
});
define("jassi/util/DatabaseSchema", ["require", "exports", "remote/jassi/base/Database", "remote/jassi/base/Classes"], function (require, exports, Database_2, Classes_26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManyToMany = exports.ManyToOne = exports.OneToMany = exports.OneToOne = exports.PrimaryColumn = exports.Column = exports.JoinTable = exports.JoinColumn = exports.PrimaryGeneratedColumn = exports.Entity = void 0;
    //define Decoraters for typeorm
    let cache = {};
    function addDecorater(decoratername, ...args) {
        return function (...fargs) {
            var con = fargs.length === 1 ? fargs[0] : fargs[0].constructor;
            var clname = Classes_26.classes.getClassName(con);
            var field = fargs.length == 1 ? "this" : fargs[1];
            Database_2.db._setMetadata(con, field, decoratername, args, fargs);
        };
    }
    function Entity(...param) {
        return addDecorater("Entity", param);
    }
    exports.Entity = Entity;
    function PrimaryGeneratedColumn(...param) {
        return addDecorater("PrimaryGeneratedColumn", param);
    }
    exports.PrimaryGeneratedColumn = PrimaryGeneratedColumn;
    function JoinColumn(...param) {
        return addDecorater("JoinColumn", param);
    }
    exports.JoinColumn = JoinColumn;
    function JoinTable(...param) {
        return addDecorater("JoinTable", param);
    }
    exports.JoinTable = JoinTable;
    function Column(...any) {
        return addDecorater("Column", any);
    }
    exports.Column = Column;
    function PrimaryColumn(...any) {
        return addDecorater("PrimaryColumn", any);
    }
    exports.PrimaryColumn = PrimaryColumn;
    function OneToOne(...any) {
        return addDecorater("OneToOne", any);
    }
    exports.OneToOne = OneToOne;
    function OneToMany(...any) {
        return addDecorater("OneToMany", any);
    }
    exports.OneToMany = OneToMany;
    function ManyToOne(...any) {
        return addDecorater("ManyToOne", any);
    }
    exports.ManyToOne = ManyToOne;
    function ManyToMany(...any) {
        return addDecorater("ManyToMany", any);
    }
    exports.ManyToMany = ManyToMany;
});
define("jassi/util/Reloader", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Registry"], function (require, exports, Jassi_85, Registry_24) {
    "use strict";
    var Reloader_3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reloader = void 0;
    let Reloader = Reloader_3 = class Reloader {
        /**
         * reloads Code
         */
        constructor() {
        }
        /**
         * check code changes out of the browser if localhost and load the changes in to the browser
         */
        static startReloadCodeFromServer() {
            if (Reloader_3.reloadCodeFromServerIsRunning)
                return;
            if (window.location.hostname !== "localhost") {
                return;
            }
            var h = { date: 0, files: [] };
            var f = async function () {
                Jassi_85.default.server.call("checkDir", h.date).then(function (t) {
                    h = JSON.parse(t);
                    var len = h.files.length;
                    if (len > 3)
                        len = 1;
                    for (var x = 0; x < len; x++) {
                        var file = h.files[x];
                        new Reloader_3().reloadJS(file);
                        $.notify(file + " reloaded", "info", { position: "bottom right" });
                    }
                    window.setTimeout(f, 100000);
                });
            };
            window.setTimeout(f, 100000);
        }
        _findScript(name) {
            var scripts = $('script');
            for (var x = 0; x < scripts.length; x++) {
                var attr = scripts[x].getAttributeNode("src");
                if (attr !== null && attr !== undefined && attr.value === (name + ".js")) { //?bust="+window.jassiversion
                    return scripts[x];
                }
            }
            return undefined;
        }
        async reloadJS(fileName) {
            //classname->file
            var files = {};
            var fileNameBlank = fileName;
            if (fileNameBlank.endsWith(".js"))
                fileNameBlank = fileNameBlank.substring(0, fileNameBlank.length - 3);
            var test = this._findScript(fileNameBlank);
            //de.Kunde statt de/kunde
            if (test !== undefined) {
                var attr = test.getAttributeNode("data-requiremodule");
                if (attr !== null) {
                    fileNameBlank = attr.value;
                }
            }
            //load all classes which depends on the classes in filename
            var allclasses = await Registry_24.default.getJSONData("classes");
            var classesInFile = [];
            for (var x = 0; x < allclasses.length; x++) {
                var pclass = allclasses[x];
                if (pclass.filename === fileName) {
                    classesInFile.push(pclass.filename);
                }
            }
            //collect all classes which depends on the class
            var family = {};
            for (var x = 0; x < classesInFile.length; x++) {
                var classname = classesInFile[x];
                var check = classes.getClass(classname);
                if (check === undefined)
                    continue;
                var classes = classes.getCache();
                family[classname] = {};
                for (var key in classes) {
                    if (key === classname)
                        files[key] = allclasses[key][0].file;
                    if (classes[key].prototype instanceof check) {
                        files[key] = allclasses[key][0].file;
                        var tree = [];
                        let test = classes[key].prototype;
                        while (test !== check.prototype) {
                            tree.push(classes.getClassName(test));
                            test = test["__proto__"];
                            //all.push(allclasses[key][0].file);
                        }
                        var cur = family[classname];
                        for (var c = tree.length - 1; c >= 0; c--) {
                            var cl = tree[c];
                            if (cur[cl] === undefined)
                                cur[cl] = {};
                            cur = cur[cl];
                        }
                        //delete class - its better to get an exception if sonething goes wrong
                        //  classes[key]=undefined;
                        //jassi.classes.removeClass(key);
                    }
                }
            }
            var allfiles = [];
            for (var key in files) {
                if (files[key].endsWith(".js"))
                    files[key] = files[key].substring(0, files[key].length - 3); //files._self_=fileName;
                allfiles.push(files[key]);
            }
            if (allfiles.indexOf(fileNameBlank) < 0) {
                allfiles.push(fileNameBlank);
            }
            //save all modules
            let allModules = {};
            await new Promise((resolve, reject) => {
                require(allfiles, function (...ret) {
                    for (var rx = 0; rx < ret.length; rx++) {
                        allModules[allfiles[rx]] = ret[rx];
                    }
                    resolve(undefined);
                });
            });
            //undefined all files
            for (var key in files) {
                requirejs.undef(files[key]);
            }
            requirejs.undef(fileNameBlank);
            var hasloaded = {};
            var doclass = async function (fam) {
                for (var key in fam) {
                    var name = fam[key].name;
                    var file = files[key];
                    //console.log("reload "+key+"->"+file);
                    var next = fam[key];
                    var key = key;
                    await new Promise((resolve, reject) => {
                        require([file], function (ret) {
                            _this.migrateModul(allModules, file, ret);
                            resolve(undefined);
                        });
                    });
                    await doclass(next);
                }
            };
            doclass(family);
            var _this = this;
            await new Promise((resolve, reNameject) => {
                require([fileNameBlank], function (ret) {
                    _this.migrateModul(allModules, fileNameBlank, ret);
                    resolve(undefined);
                });
            });
        }
        migrateModul(allModules, file, modul) {
            if (modul === undefined)
                return;
            var old = allModules[file];
            this.migrateClasses(file, old, modul);
            //now migrate loaded modules
            modul.__oldModul = old;
            while (old !== undefined) {
                for (let key in old) {
                    if (key !== "__oldModul") {
                        old[key] = modul[key];
                    }
                }
                old = old.__oldModul;
            }
        }
        migrateClasses(file, oldmodul, modul) {
            if (oldmodul === undefined)
                return;
            for (let key in modul) {
                var newClass = modul[key];
                if (newClass.prototype !== undefined && key !== "__oldModul") {
                    //migrate old Class
                    var meths = Object.getOwnPropertyNames(newClass.prototype);
                    if (Reloader_3.cache[file + "/" + key] === undefined) {
                        Reloader_3.cache[file + "/" + key] = [];
                        Reloader_3.cache[file + "/" + key].push(oldmodul[key]);
                    }
                    for (let c = 0; c < Reloader_3.cache[file + "/" + key].length; c++) {
                        var oldClass = Reloader_3.cache[file + "/" + key][c];
                        if (oldClass !== undefined) {
                            for (var x = 0; x < meths.length; x++) {
                                var m = meths[x];
                                if (m === "constructor" || m === "length" || m === "prototype") {
                                    continue;
                                }
                                var desc = Object.getOwnPropertyDescriptor(newClass.prototype, m);
                                if (desc.value !== undefined) { //function
                                    oldClass.prototype[m] = newClass.prototype[m];
                                }
                                if (desc.get !== undefined || desc.set !== undefined) {
                                    Object.defineProperty(oldClass.prototype, m, desc);
                                }
                            }
                        }
                    }
                    Reloader_3.cache[file + "/" + key].push(newClass);
                }
            }
        }
    };
    Reloader.cache = [];
    Reloader.reloadCodeFromServerIsRunning = false;
    Reloader = Reloader_3 = __decorate([
        Jassi_85.$Class("jassi.util.Reloader"),
        __metadata("design:paramtypes", [])
    ], Reloader);
    exports.Reloader = Reloader;
});
define("jassi/util/TSSourceMap", ["require", "exports", "jassi/ext/sourcemap", "remote/jassi/base/Jassi"], function (require, exports, sourcemap_1, Jassi_86) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TSSourceMap = void 0;
    //var sourceMap=window["sourceMap"];
    let TSSourceMap = class TSSourceMap {
        async getLineFromTS(tsfile, line, column) {
            var jscode = await $.ajax({ url: "js/" + tsfile.replace(".ts", ".js"), dataType: "text" });
            var mapcode = "";
            var pos = jscode.indexOf("//" + "# sourceMappingURL=");
            if (jscode.indexOf("//" + "# sourceMappingURL=data:application") > -1) {
                var b64 = jscode.substring(pos + 50);
                mapcode = ts["base64decode"](undefined, b64);
                //mapcode = decodeURIComponent(escape((b64)));
            }
            else {
                mapcode = await $.ajax({ url: "js/" + tsfile.replace(".ts", ".js.map"), dataType: "text" });
            }
            var ret = new Promise((resolve, reject) => {
                var isinline = false;
                sourcemap_1.default.SourceMapConsumer.initialize({
                    "lib/mappings.wasm": "https://unpkg.com/source-map@0.7.3/lib/mappings.wasm"
                });
                var rawSourceMap = JSON.parse(mapcode);
                sourcemap_1.default.SourceMapConsumer.with(rawSourceMap, null, consumer => {
                    var test = consumer.sources;
                    var l = consumer.generatedPositionFor({
                        source: rawSourceMap.sources[0],
                        line: line,
                        column: column
                    });
                    return l;
                }).then(function (whatever) {
                    resolve(whatever.line);
                });
            });
            return ret;
        }
        async getLineFromJS(jsfile, line, column) {
            var jscode = await $.ajax({ url: jsfile, dataType: "text" });
            var mapcode = "";
            var pos = jscode.indexOf("//" + "# sourceMappingURL=");
            if (jscode.indexOf("//" + "# sourceMappingURL=data:application") > -1) {
                var b64 = jscode.substring(pos + 50);
                mapcode = atob(b64);
            }
            else {
                mapcode = await $.ajax({ url: jsfile.replace(".js", ".js.map"), dataType: "text" });
            }
            var ret = new Promise((resolve, reject) => {
                sourcemap_1.default.SourceMapConsumer.initialize({
                    "lib/mappings.wasm": "https://unpkg.com/source-map@0.7.3/lib/mappings.wasm"
                });
                var rawSourceMap = JSON.parse(mapcode);
                sourcemap_1.default.SourceMapConsumer.with(rawSourceMap, null, consumer => {
                    var test = consumer.sources;
                    var l = consumer.originalPositionFor({
                        bias: sourcemap_1.default.SourceMapConsumer.GREATEST_LOWER_BOUND,
                        line: line,
                        column: column
                    });
                    return l;
                }).then(function (whatever) {
                    resolve(whatever.line);
                });
            });
            return ret;
            //  jassi.myRequire("https://unpkg.com/source-map@0.7.3/dist/source-map.js",function(data){
        }
    };
    TSSourceMap = __decorate([
        Jassi_86.$Class("jassi.util.TSSourceMap")
    ], TSSourceMap);
    exports.TSSourceMap = TSSourceMap;
});
define("jassi/util/Tools", ["require", "exports", "remote/jassi/base/Jassi", "jassi/ext/lodash", "jassi/ext/typescript"], function (require, exports, Jassi_87, lodash_1) {
    "use strict";
    var Tools_4;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Tools = void 0;
    let Tools = Tools_4 = class Tools {
        constructor() {
        }
        static copyObject(src) {
            //var j = Tools.objectToJson(src);
            //return Tools.jsonToObject(j);
            lodash_1.default();
            //@ts-ignore
            return _.cloneDeep(src);
        }
        /**
               * converts a json string to a object
               * @param {string} value - the code
               */
        static jsonToObject(code) {
            //var ret=eval("("+value+")");
            code = "a=" + code;
            var sourceFile = ts.createSourceFile('hallo.ts', code, ts.ScriptTarget.ES5, true);
            var ret = Tools_4.visitNode2(sourceFile);
            return ret;
        }
        static replaceQuotes(value) {
            if (Array.isArray(value)) {
                for (var x = 0; x < value.length; x++) {
                    if (typeof (value[x]) === "object") {
                        value[x] = this.replaceQuotes(value[x]);
                    }
                }
                return value;
            }
            //if (typeof (value) === "object") {
            var ret = {};
            for (var key in value) {
                var newkey = "$%)" + key + "$%)";
                ret[newkey] = value[key];
                if (typeof value[key] === "object") {
                    ret[newkey] = this.replaceQuotes(ret[newkey]);
                }
            }
            return ret;
            //}
        }
        /**
       * converts a string to a object
       * @param value - the object to stringify
       * @param space - the space before the property
       * @param nameWithQuotes - if true "key":value else key:value
       */
        static objectToJson(value, space = undefined, nameWithQuotes = true) {
            var ovalue = value;
            if (nameWithQuotes === false)
                ovalue = Tools_4.replaceQuotes(Tools_4.copyObject(ovalue));
            var ret = JSON.stringify(ovalue, function (key, value) {
                if (typeof (value) === "function") {
                    let r = value.toString();
                    r = r.replaceAll("\r" + space, "\r");
                    r = r.replaceAll("\n" + space, "\n");
                    r = r.replaceAll("\r", "$§&\r");
                    r = r.replaceAll("\n", "$§&\n");
                    r = r.replaceAll("\t", "$§&\t");
                    r = r.replaceAll('\"', '$§&\"');
                    //  ret=ret.replace("\t\t","");
                    return "$%&" + r + "$%&";
                }
                return value;
            }, "\t");
            if (ret !== undefined) {
                ret = ret.replaceAll("\"$%&", "");
                ret = ret.replaceAll("$%&\"", "");
                //  ret = ret.replaceAll("\\r", "\r");
                //  ret = ret.replaceAll("\\n", "\n");
                //  ret = ret.replaceAll("\\t", "\t");
                //  ret = ret.replaceAll('\\"', '\"');
            }
            if (nameWithQuotes === false) {
                ret = ret.replaceAll("\"$%)", "");
                ret = ret.replaceAll("$%)\"", "");
            }
            ret = ret.replaceAll("$§&\\n", "\n");
            ret = ret.replaceAll("$§&\\r", "\t");
            ret = ret.replaceAll("$§&\\t", "\t");
            ret = ret.replaceAll('$§&\\"', '\"');
            //one to much
            //  ret=ret.substring(0,ret.length-2)+ret.substring(ret.length-1);
            return ret;
        }
        static toText(node, text) {
            return text.substring(node.pos, node.end).trim();
        }
        static getValueFromNode(node, val, prop) {
        }
        static visitObject(node) {
            if (node.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                var ret = {};
                for (var i = 0; i < node["properties"].length; i++) {
                    var s = node["properties"][i];
                    var name = s["name"].text;
                    ret[name] = Tools_4.visitObject(s["initializer"]);
                }
                return ret;
            }
            else if (node.kind === ts.SyntaxKind.ArrayLiteralExpression) { //[]
                let ret = [];
                for (let i = 0; i < node["elements"].length; i++) {
                    let ob = this.visitObject(node["elements"][i]);
                    ret.push(ob);
                    /* if (s["initializer"].elements[i].kind === ts.SyntaxKind.ObjectLiteralExpression) {
                         ob[name].push(_newob);
                         Tools.visitNode2(code, s["initializer"].elements[i], _newob);
                     }*/
                }
                return ret;
            }
            else if (node.kind === ts.SyntaxKind.StringLiteral) {
                return node.getText().substring(1, node.getText().length - 1);
            }
            else if (node.kind === ts.SyntaxKind.NumericLiteral) {
                return new Number(node.getText());
            }
            else if (node.kind === ts.SyntaxKind.FalseKeyword) {
                return false;
            }
            else if (node.kind === ts.SyntaxKind.TrueKeyword) {
                return true;
            }
            else if (node.getText().startsWith("function")) {
                var func = function () {
                    return node.getText();
                };
                func.toString = function () {
                    return node.getText();
                };
                return func;
            }
            else {
                return node.getText();
            }
        }
        static visitNode2(node) {
            if (node.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                return Tools_4.visitObject(node);
            }
            else {
                var childs = node.getChildren();
                for (var x = 0; x < childs.length; x++) {
                    var ret = Tools_4.visitNode2(childs[x]);
                    if (ret)
                        return ret;
                }
            }
            return undefined;
        }
        static visitNode(code, node, ob) {
            if (node.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                node["properties"].forEach((s) => {
                    var name = s["name"].text;
                    var val = s["initializer"].getText(); //Tools.toText(s["initializer"], code);
                    if (s["initializer"].kind === ts.SyntaxKind.ObjectLiteralExpression) {
                        ob[name] = {};
                        Tools_4.visitNode(code, s, ob[name]);
                    }
                    else {
                        if (s["initializer"].kind === ts.SyntaxKind.StringLiteral) {
                            ob[name] = val;
                        }
                        else
                            ob[name] = val;
                    }
                });
            }
            else
                node.getChildren().forEach(c => {
                    Tools_4.visitNode(code, c, ob);
                });
        }
        /**
         * parse a json string and returns an object an embed all values in string
         * e.g.
         * { a:"hallo",i:{b:9,c:"test"}} would be convert to{ a:""hallo"",i:{b:"9",c:""test""}}
         **/
        static jsonToStringObject(code) {
            code = "a=" + code;
            var sourceFile = ts.createSourceFile('hallo.ts', code, ts.ScriptTarget.ES5, true);
            var ret = {};
            Tools_4.visitNode(code, sourceFile, ret);
            return ret;
        }
        static _stringObjectToJson(ob, ret) {
            for (var key in ob) {
                if (typeof (ob[key]) === "string") {
                    ret[key] = "%&&/" + ob[key] + "%&&/";
                }
                else {
                    ret[key] = {};
                    Tools_4._stringObjectToJson(ob[key], ret[key]);
                }
            }
        }
        /**
        * parse a json string and returns an object an embed all values in string
        * e.g.
        * { a:"hallo",i:{b:9,c:"test"}} would be convert to{ a:""hallo"",i:{b:"9",c:""test""}}
        **/
        static stringObjectToJson(ob, space) {
            var ret = {};
            Tools_4._stringObjectToJson(ob, ret);
            var sret = JSON.stringify(ret, function (key, value) {
                //rename propertynames
                if (typeof (value) === "object") {
                    var keys = Object.assign({}, value);
                    for (var key in keys) {
                        value["<<&START" + key + "END&>>"] = value[key];
                        delete value[key];
                    }
                }
                return value;
            }, "      ");
            sret = sret.replaceAll("\\\"%&&/", "").replaceAll("%&&/\\\"", "");
            sret = sret.replaceAll("\"%&&/", "").replaceAll("%&&/\"", "");
            var aret = sret.split("\r");
            for (let x = 0; x < aret.length; x++) {
                aret[x] = space + aret[x];
            }
            var r = aret.join("\r");
            r = r.replaceAll("\\r", "\r");
            r = r.replaceAll("\\n", "\n");
            r = r.replaceAll("\\t", "\t");
            r = r.replaceAll("\"<<&START", "");
            r = r.replaceAll("END&>>\"", "");
            return r;
        }
    };
    Tools = Tools_4 = __decorate([
        Jassi_87.$Class("jassi.util.Tools"),
        __metadata("design:paramtypes", [])
    ], Tools);
    exports.Tools = Tools;
    async function test() {
        var k = Tools.objectToJson({
            a: "h\no", b: 1, function() {
                var ad = "\n";
            }
        });
        var k2 = Tools.jsonToObject(k);
        var code = `{ 
	g:function(){
		return 1;
		
	}
	a:"hallo",
	i:{
		b:9,
		c:"test"
		}
	} `;
        var h = await Tools.jsonToStringObject(code);
        var h2 = Tools.stringObjectToJson(h, "    ");
        var j = {
            body: [
                ['Item', 'Price'],
                {
                    foreach: "line in invoice.lines", do: [
                        '{{line.text}}', '{{line.price}}'
                    ]
                }
            ]
        };
        var j2 = Tools.objectToJson(j, undefined, false);
        var g = Tools.jsonToObject(j2);
    }
    exports.test = test;
});
define("jassi/util/Typescript", ["require", "exports", "remote/jassi/base/Jassi", "remote/jassi/base/Server", "jassi/ext/monaco", "jassi/ext/requestidlecallback"], function (require, exports, Jassi_88, Server_6) {
    "use strict";
    var Typescript_10;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typescript = void 0;
    let Typescript = Typescript_10 = class Typescript {
        constructor() {
            this.initInIdle = true;
            if (Typescript_10._isInited === undefined)
                this.waitForInited = this.initService();
        }
        isInited(file) {
            return Typescript_10._isInited === true;
        }
        /**
         * transpile the ts-file an returns all reflected files
         * @param fileName
         * @param content
         */
        async transpile(fileName, content, compilerSettings = undefined) {
            //@ts-ignore
            //await import("jassi/ext/typescript");
            var ret = { fileNames: [fileName], contents: [content] };
            /*  var opt = {
                //  compilerOptions: {
                      baseUrl: "./",
                      target: ts.ScriptTarget.ES2017,
                      module: ts.ModuleKind.AMD,
                      sourceMap: true
               //   }
              };*/
            var prefix = "";
            for (let x = 0; x < fileName.split("/").length; x++) {
                prefix = "../" + prefix;
            }
            var opt = {
                compilerOptions: compilerSettings ? compilerSettings : Typescript_10.compilerSettings,
                fileName: prefix + fileName,
            };
            //@ts-ignore
            var comp = ts.transpileModule(content, opt);
            ret.fileNames.push("js/" + fileName.replace(".ts", ".js"));
            ret.contents.push(comp.outputText);
            ret.fileNames.push("js/" + fileName.replace(".ts", ".js.map"));
            ret.contents.push(comp.sourceMapText);
            return ret;
        }
        static initMonaco() {
            /* monaco.languages.typescript.javascriptDefaults.setCompilerOptions({
                 "baseUrl": "./",
                 rootDir: "./",
             })*/
            monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
                "target": monaco.languages.typescript.ScriptTarget.Latest,
                "baseUrl": "./",
                "module": monaco.languages.typescript.ModuleKind.AMD,
                //@ts-ignore
                "moduleResolution": monaco.languages.typescript.ModuleResolutionKind.node,
                rootDir: "./",
                "sourceMap": true,
                "outDir": "./js",
                emitDecoratorMetadata: true,
                allowNonTsExtensions: true,
                allowJs: true,
                experimentalDecorators: true,
            });
        }
        /**
         * initialize the services tooks any seconds
         * functions which uses the languageservice are blocked until ready
         */
        async initService() {
            if (Typescript_10._isInited !== undefined)
                return;
            Typescript_10._isInited = false;
            Typescript_10.initMonaco();
            //@ts-ignore
            //  import("jassi/ext/typescript").then(async function(ts1) {
            Typescript_10.ts = ts;
            var _this = this;
            var f = (await new Server_6.Server().dir(true)).resolveChilds();
            var nodeFiles = [];
            //Load all files to in cache
            //node_modules with ajax - so we kann cache 
            var myfiles = [];
            for (let x in f) {
                let fname = f[x].fullpath;
                let fdat = f[x].date;
                //include js in jassi/ext
                if (fname.toLowerCase().endsWith(".js") && (fname.startsWith("js/") || fname.startsWith("node_modules")))
                    continue;
                if (fname.toLowerCase().endsWith(".ts") || fname.toLowerCase().endsWith(".js") || fname.toLowerCase().endsWith(".json")) {
                    if (fname.toLocaleLowerCase().endsWith(".js")) {
                        monaco.languages.typescript.typescriptDefaults.addExtraLib("export default const test=1;", "file:///" + fname);
                    }
                    if (fdat === undefined) {
                        nodeFiles[fname] = new Server_6.Server().loadFile(fname);
                    }
                    else {
                        nodeFiles[fname] = $.ajax({
                            url: fname,
                            beforeSend: function (request) {
                                request.setRequestHeader("X-Custom-FromCache", fdat);
                            },
                            dataType: "text"
                        });
                    }
                    //}
                }
            }
            //load TS sources
            //wait for each nodefiles
            var code = {};
            for (let key in nodeFiles) {
                code[key] = await nodeFiles[key];
            }
            for (let key in nodeFiles) {
                //monaco
                //@ts-ignore
                //	
                var type = "typescript";
                if (key.toLocaleLowerCase().endsWith(".ts")) {
                    //
                    if (this.initInIdle) {
                        var ffile = monaco.Uri.from({ path: "/" + key, scheme: 'file' });
                        //console.log(key);
                        if (!monaco.editor.getModel(ffile))
                            monaco.editor.createModel(code[key], "typescript", ffile);
                        //});
                    }
                    else {
                        monaco.languages.typescript.typescriptDefaults.addExtraLib(code[key], "file:///" + key);
                    }
                }
                if (key.toLocaleLowerCase().endsWith(".json"))
                    type = "json";
            }
            //initialize monaco
            if (!this.initInIdle)
                monaco.editor.createModel("var a=1;", "typescript", monaco.Uri.from({ path: "/__mydummy.ts", scheme: 'file' }));
            this.tsWorker = await (await monaco.languages.typescript.getTypeScriptWorker())();
            Typescript_10._isInited = true;
            return true;
        }
        /**
         * unused
         */
        async getDefinitionAtPosition(file, position) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            return await this.tsWorker.getDefinitionAtPosition("file:///" + file, position);
        }
        /**
         * unused
         */
        async getSignatureHelpItems(file, position) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            return await this.tsWorker.getSignatureHelpItems("file:///" + file, position);
        }
        async includefileIfNeeded(file) {
        }
        async renameFile(oldfile, newfile) {
            var ffile = monaco.Uri.from({ path: "/" + oldfile, scheme: 'file' });
            var oldmodell = monaco.editor.getModel(ffile);
            oldmodell.dispose();
            var text = await $.ajax({
                url: newfile,
                beforeSend: function (request) {
                    request.setRequestHeader("X-Custom-FromCache", newfile);
                },
                dataType: "text"
            });
            await this.setCode(newfile, text);
            var snap = Typescript_10.languageServiceHost.getScriptSnapshot(newfile);
        }
        /**
         * @returns all code filenames
         */
        getFiles() {
            var ret = [];
            var mods = monaco.editor.getModels();
            for (var x = 0; x < mods.length; x++) {
                var f = mods[x].uri.path.substring(1);
                ret.push(f);
            }
            return ret;
        }
        /**
         * get the code for a file
         * @params file - the filename e.g. jassi/base/Parser.ts
         */
        getCode(file) {
            var ffile = monaco.Uri.from({ path: "/" + file, scheme: 'file' });
            var mod = monaco.editor.getModel(ffile);
            if (mod)
                return mod.getValue();
            else
                return undefined;
        }
        /**
         * put file in cache
         * @param file - the ts file
         * @param text - the text of the ts file
         */
        setCode(file, text) {
            var ffile = monaco.Uri.from({ path: "/" + file, scheme: 'file' });
            var mod = monaco.editor.getModel(ffile);
            if (!mod) {
                mod = monaco.editor.createModel(text, "typescript", ffile);
            }
            var waiter = new Promise(function (resolve) {
                var disp = mod.onDidChangeContent((evt) => {
                    if (evt.changes[0].text === text) {
                        disp.dispose();
                        resolve(mod);
                    }
                });
            });
            mod.setValue(text);
            return waiter;
        }
        /**
         * get info for a completionentry
         * @param file - the ts file
         * @param position - the position in string
         * @param item -the item we are interested
         * @param formatOptions -unused
         * @param source -unused
         * @param preferences - unused
         */
        async getCompletionEntryDetails(file, position, item, formatOptions = {}, source = undefined, preferences = {}) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            const info = await this.tsWorker.getCompletionEntryDetails("file:///" + file, position, item);
            return info;
        }
        /**
         * get all completions at a  position
         * @param file -the ts file
         * @param position -the position in string
         * @param text - the text of the file is saved to cache
         */
        async getCompletion(file, position, text = undefined, options) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            if (text !== undefined) {
                var p = this.setCode(file, text);
                await p;
                // Typescript.languageServiceHost.getScriptSnapshot(file);
            }
            //@ts-ignore
            const info = await this.tsWorker.getCompletionsAtPosition("file:///" + file, position, options);
            //            { includeExternalModuleExports: true });
            return info;
        }
        async getQuickInfoAtPosition(file, position, text) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            if (text !== undefined) {
                await this.setCode(file, text);
            }
            return await this.tsWorker.getQuickInfoAtPosition("file:///" + file, position);
        }
        async getCodeFixesAtPosition(file, text = undefined, start, end, errorCodes) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            if (text !== undefined) {
                await this.setCode(file, text);
            }
            return await this.tsWorker.getCodeFixesAtPosition("file:///" + file, start, end, errorCodes, {});
        }
        async formatDocument(filePath, text = undefined) {
            await this.waitForInited;
            await this.setCode(filePath, text);
            var textChanges = await this.tsWorker.getFormattingEditsForDocument("file:///" + filePath, {
                convertTabsToSpaces: true,
                insertSpaceAfterCommaDelimiter: true,
                insertSpaceAfterKeywordsInControlFlowStatements: true,
                insertSpaceBeforeAndAfterBinaryOperators: true,
                newLineCharacter: "\n",
                indentStyle: ts.IndentStyle.Smart,
                indentSize: 4,
                tabSize: 4
            });
            let finalText = text;
            textChanges = textChanges.sort((a, b) => b.span.start - a.span.start);
            for (var i = 0; i < textChanges.length; i++) {
                var textChange = textChanges[i];
                const { span } = textChange;
                finalText = finalText.slice(0, span.start) + textChange.newText
                    + finalText.slice(span.start + span.length);
            }
            return finalText;
        }
        getDiagnosticsForAll() {
            return undefined;
            /* var prog=Typescript.languageService.getProgram();
             let all=Typescript.ts.getPreEmitDiagnostics(prog);
             let all2=prog.emit().diagnostics;
             let ret=[];
             all.forEach((diag)=>{
                 if(diag.file!==undefined&&!diag.file.fileName.startsWith("node_modules"))
                     ret.push(diag);
             });
             return ret;*/
        }
        getLineAndCharacterOfPosition(fileName, pos) {
            var p = monaco.editor.getModel(monaco.Uri.from({ path: "/" + fileName, scheme: 'file' })).getPositionAt(pos);
            return {
                line: p.lineNumber,
                character: p.column
            };
        }
        getPositionOfLineAndCharacter(fileName, pos) {
            var p = monaco.editor.getModel(monaco.Uri.from({ path: "/" + fileName, scheme: 'file' })).getOffsetAt({
                column: pos.character,
                lineNumber: pos.line
            });
            return p;
        }
        async getDiagnostics(file, text = undefined) {
            await this.waitForInited;
            if (Typescript_10._isInited !== true) {
                throw Error("check isInited before call ");
            }
            if (text !== undefined) {
                this.setCode(file, text);
            }
            return {
                semantic: await this.tsWorker.getSemanticDiagnostics("file:///" + file),
                suggestion: await this.tsWorker.getSuggestionDiagnostics("file:///" + file),
                syntactic: await this.tsWorker.getSyntacticDiagnostics("file:///" + file)
                //      declaration:Typescript.languageService.getDeclarationDiagnostics(file)
            };
        }
    };
    /**
    * resolved if the service is inited
    */
    Typescript._isInited = undefined;
    Typescript.compilerSettings = {
        baseUrl: "./",
        target: "ES2017",
        module: "AMD",
        sourceMap: true,
        outDir: "./js",
        emitDecoratorMetadata: true,
        experimentalDecorators: true,
    };
    Typescript = Typescript_10 = __decorate([
        Jassi_88.$Class("jassi/util/Typescript"),
        __metadata("design:paramtypes", [])
    ], Typescript);
    exports.Typescript = Typescript;
    //@ts-ignore
    var typescript = new Typescript();
    exports.default = typescript;
});
//# sourceMappingURL=jassi.js.map