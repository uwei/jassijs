define(["require", "exports", "game/product", "game/icons"], function (require, exports, product_1, icons_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = exports.Company = void 0;
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    var distributionTable = undefined;
    function getRandomCompanyType(notThisIds = undefined) {
        if (notThisIds === undefined)
            notThisIds = [];
        if (!distributionTable) {
            distributionTable = [];
            var distCount = 0;
            for (var x = 0; x < product_1.allProducts.length; x++) {
                for (var y = 0; y < product_1.allProducts[x].distribution; y++) {
                    distributionTable.push(product_1.allProducts[x].id);
                }
            }
        }
        var rand = undefined;
        while (rand === undefined || notThisIds.indexOf(rand) > -1) {
            rand = getRandomInt(distributionTable.length);
            rand = distributionTable[rand];
        }
        return rand;
    }
    class Company {
        constructor(notThisIds = undefined) {
            this.buildings = 0;
            this.workers = 0;
            this.hasLicense = false;
            this.productid = getRandomCompanyType(notThisIds);
            this.buildings = 0; // getRandomInt(3)+1;
            this.workers = 25 * this.buildings;
            this.hasLicense = (product_1.allProducts[this.productid].distribution <= 8) ? false : true;
        }
        getMaxWorkers() {
            return this.buildings * 25;
        }
        getDailyProduce() {
            var produce = this.workers * product_1.allProducts[this.productid].dailyProduce / 25;
            return Math.round(produce);
        }
        getDailyInput1() {
            var needs = 0;
            var product = product_1.allProducts[this.productid];
            if (product.input1 !== undefined) {
                var p = product_1.allProducts[product.input1];
                needs = this.workers * product.input1Amount / 25;
            }
            return needs;
        }
        getBuildingCoastsAsIcon() {
            var a = this.getBuildingCoasts();
            return a[0] + icons_1.Icons.money + "<br/>" + a[1] + "x" + product_1.allProducts[0].getIcon() + "<br/>" + a[2] + "x" + product_1.allProducts[1].getIcon();
        }
        getBuildingCoasts() {
            var fact = 5 - (product_1.allProducts[this.productid].distribution) / 4;
            return [fact * 10000,
                fact * 5,
                fact * 10];
        }
        getDailyInput2() {
            var needs = 0;
            var product = product_1.allProducts[this.productid];
            if (product.input2 !== undefined) {
                needs = this.workers * product.input2Amount / 25;
            }
            return needs;
        }
    }
    exports.Company = Company;
    function test() {
        var ids = [];
        var t = [];
        for (var x = 0; x < product_1.allProducts.length; x++) {
            var h = new Company(ids);
            ids.push(h.productid);
            t.push(h.productid);
        }
        t.sort();
        for (var x = 0; x < t.length; x++) {
            console.log(t[x]);
        }
    }
    exports.test = test;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGFueS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2dhbWUvQ29tcGFueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBR0EsU0FBUyxZQUFZLENBQUMsR0FBRztRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxJQUFJLGlCQUFpQixHQUFhLFNBQVMsQ0FBQztJQUU1QyxTQUFTLG9CQUFvQixDQUFDLGFBQXVCLFNBQVM7UUFDMUQsSUFBSSxVQUFVLEtBQUssU0FBUztZQUN4QixVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNwQixpQkFBaUIsR0FBRyxFQUFFLENBQUM7WUFDdkIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxxQkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHFCQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNsRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMscUJBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDN0M7YUFDSjtTQUNKO1FBQ0QsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3hELElBQUksR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFD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RyxFQUFFLENBQUM7UUFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcscUJBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkI7UUFDRCxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQztJQVpELG9CQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWxsUHJvZHVjdHMgfSBmcm9tIFwiZ2FtZS9wcm9kdWN0XCI7XG5pbXBvcnQgeyBJY29ucyB9IGZyb20gXCJnYW1lL2ljb25zXCI7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUludChtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbn1cbnZhciBkaXN0cmlidXRpb25UYWJsZTogbnVtYmVyW10gPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUNvbXBhbnlUeXBlKG5vdFRoaXNJZHM6IG51bWJlcltdID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG5vdFRoaXNJZHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgbm90VGhpc0lkcyA9IFtdO1xuICAgIGlmICghZGlzdHJpYnV0aW9uVGFibGUpIHtcbiAgICAgICAgZGlzdHJpYnV0aW9uVGFibGUgPSBbXTtcbiAgICAgICAgdmFyIGRpc3RDb3VudCA9IDA7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgYWxsUHJvZHVjdHMubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgYWxsUHJvZHVjdHNbeF0uZGlzdHJpYnV0aW9uOyB5KyspIHtcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb25UYWJsZS5wdXNoKGFsbFByb2R1Y3RzW3hdLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcmFuZCA9IHVuZGVmaW5lZDtcbiAgICB3aGlsZSAocmFuZCA9PT0gdW5kZWZpbmVkIHx8IG5vdFRoaXNJZHMuaW5kZXhPZihyYW5kKSA+IC0xKSB7XG4gICAgICAgIHJhbmQgPSBnZXRSYW5kb21JbnQoZGlzdHJpYnV0aW9uVGFibGUubGVuZ3RoKTtcbiAgICAgICAgcmFuZCA9IGRpc3RyaWJ1dGlvblRhYmxlW3JhbmRdO1xuICAgIH1cblxuICAgIHJldHVybiByYW5kO1xufVxuZXhwb3J0IGNsYXNzIENvbXBhbnkge1xuICAgIHByb2R1Y3RpZDogbnVtYmVyO1xuICAgIGJ1aWxkaW5nczogbnVtYmVyID0gMDtcbiAgICB3b3JrZXJzOiBudW1iZXIgPSAwO1xuICAgIGhhc0xpY2Vuc2U9ZmFsc2U7XG4gICAgY29uc3RydWN0b3Iobm90VGhpc0lkczogbnVtYmVyW10gPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5wcm9kdWN0aWQgPSBnZXRSYW5kb21Db21wYW55VHlwZShub3RUaGlzSWRzKTtcbiAgICAgICAgdGhpcy5idWlsZGluZ3MgPTA7Ly8gZ2V0UmFuZG9tSW50KDMpKzE7XG4gICAgICAgIHRoaXMud29ya2VycyA9IDI1ICogdGhpcy5idWlsZGluZ3M7XG4gICAgICAgIHRoaXMuaGFzTGljZW5zZT0oYWxsUHJvZHVjdHNbdGhpcy5wcm9kdWN0aWRdLmRpc3RyaWJ1dGlvbjw9OCk/ZmFsc2U6dHJ1ZTtcbiAgICB9XG4gICAgZ2V0TWF4V29ya2VycygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZGluZ3MgKiAyNTtcbiAgICB9XG4gICAgZ2V0RGFpbHlQcm9kdWNlKCk6IG51bWJlciB7XG4gICAgICAgIHZhciBwcm9kdWNlID0gdGhpcy53b3JrZXJzICogYWxsUHJvZHVjdHNbdGhpcy5wcm9kdWN0aWRdLmRhaWx5UHJvZHVjZSAvIDI1O1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChwcm9kdWNlKTtcbiAgICB9XG4gICAgZ2V0RGFpbHlJbnB1dDEoKTogbnVtYmVyIHtcbiAgICAgICAgdmFyIG5lZWRzID0gMDtcbiAgICAgICAgdmFyIHByb2R1Y3QgPSBhbGxQcm9kdWN0c1t0aGlzLnByb2R1Y3RpZF07XG4gICAgICAgIGlmIChwcm9kdWN0LmlucHV0MSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgcD0gYWxsUHJvZHVjdHNbcHJvZHVjdC5pbnB1dDFdO1xuICAgICAgICAgICAgbmVlZHMgPSB0aGlzLndvcmtlcnMgKiBwcm9kdWN0LmlucHV0MUFtb3VudC8yNTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVlZHM7XG4gICAgfVxuICAgIGdldEJ1aWxkaW5nQ29hc3RzQXNJY29uKCl7XG4gICAgICAgIHZhciBhPXRoaXMuZ2V0QnVpbGRpbmdDb2FzdHMoKTtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuIGFbMF0rSWNvbnMubW9uZXkrXCI8YnIvPlwiK2FbMV0rXCJ4XCIrYWxsUHJvZHVjdHNbMF0uZ2V0SWNvbigpK1wiPGJyLz5cIithWzJdK1wieFwiK2FsbFByb2R1Y3RzWzFdLmdldEljb24oKTtcbiAgICB9ICAgIFxuICAgIGdldEJ1aWxkaW5nQ29hc3RzKCl7XG4gICAgICAgIHZhciBmYWN0PTUtKGFsbFByb2R1Y3RzW3RoaXMucHJvZHVjdGlkXS5kaXN0cmlidXRpb24pLzQ7XG4gICAgICAgIHJldHVybiBbZmFjdCoxMDAwMCxcbiAgICAgICAgICAgICAgICBmYWN0KjUsXG4gICAgICAgICAgICAgICAgZmFjdCoxMF1cbiAgICB9XG4gICAgZ2V0RGFpbHlJbnB1dDIoKTogbnVtYmVyIHtcbiAgICAgICAgdmFyIG5lZWRzID0gMDtcbiAgICAgICAgdmFyIHByb2R1Y3QgPSBhbGxQcm9kdWN0c1t0aGlzLnByb2R1Y3RpZF07XG4gICAgICAgIGlmIChwcm9kdWN0LmlucHV0MiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZWVkcyA9IHRoaXMud29ya2VycyAqIHByb2R1Y3QuaW5wdXQyQW1vdW50LzI1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZWVkcztcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdGVzdCgpIHtcbiAgICB2YXIgaWRzID0gW107XG4gICAgdmFyIHQgPSBbXTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGFsbFByb2R1Y3RzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgIHZhciBoID0gbmV3IENvbXBhbnkoaWRzKTtcbiAgICAgICAgaWRzLnB1c2goaC5wcm9kdWN0aWQpO1xuICAgICAgICB0LnB1c2goaC5wcm9kdWN0aWQpO1xuICAgIH1cbiAgICB0LnNvcnQoKTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHQubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgY29uc29sZS5sb2codFt4XSk7XG4gICAgfVxufSJdfQ==