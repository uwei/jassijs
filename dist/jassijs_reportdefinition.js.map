{"version":3,"file":"jassijs_reportdefinition.js","sourceRoot":"","sources":["../client/jassijs_reportdefinition/ReportDesignGlobal.ts","../client/jassijs_reportdefinition/modul.ts","../client/jassijs_reportdefinition/pdfMake-interface.ts","../client/jassijs_reportdefinition/registry.js"],"names":[],"mappings":";;;ICAA,kBAAe;QACX,SAAS,EAAC;YACN,KAAK,EAAE,EAEN;YACD,IAAI,EAAE,EACL;SAEJ;KACJ,CAAA;;ACRD,yEAAyE;AACzE,mCAAmC;AACnC,8BAA8B;AAC9B,gEAAgE;AAChE,+DAA+D;AAC/D,+DAA+D;AAC/D,iEAAiE;AACjE,2DAA2D;AAC3D,iEAAiE;AACjE,kEAAkE;AAClE,0BAA0B;AAC1B,6DAA6D;AAC7D,8BAA8B;AAC9B,gCAAgC;;;;;ACdhC,yCAAyC;AACzC,MAAM,CAAC,mCAAmC,EAAC,CAAC,SAAS,CAAC,EAAE,UAAS,OAAO;IACvE,OAAO;QACN,OAAO,EAAE;YACV,mCAAmC,EAAE;gBACpC,MAAM,EAAE,aAAa;aACrB;YACD,+CAA+C,EAAE;gBAChD,MAAM,EAAE,aAAa;aACrB;YACD,gDAAgD,EAAE;gBACjD,MAAM,EAAE,aAAa;aACrB;SACD;KACC,CAAA;AACF,CAAC,CAAC,CAAC","sourcesContent":["declare var reportdesign:JassijsReportDefinition;","export default {\r\n    \"require\":{ \r\n        paths: {\r\n            \r\n        },\r\n        shim: {\r\n        }\r\n    \r\n    } \r\n}","\r\n//source from https://cdn.jsdelivr.net/npm/@types/pdfmake/interfaces.d.ts\r\n// Type definitions for pdfmake 0.1\r\n// Project: http://pdfmake.org\r\n// Definitions by: Milen Stefanov <https://github.com/m1llen1um>\r\n//                 Rajab Shakirov <https://github.com/radziksh>\r\n//                 Enzo Volkmann <https://github.com/evolkmann>\r\n//                 Andi Pätzold <https://github.com/andipaetzold>\r\n//                 Neal Mummau <https://github.com/nmummau>\r\n//                 Jean-Raphaël Matte <https://github.com/jeralm>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 3.0\r\n//  changes by jassijs are tagged with /*changed by jassijs*/\r\n/// <reference types=\"node\" />\r\n/// <reference types=\"pdfkit\" />\r\n\r\ndeclare var reportdesign1: JassijsReportDefinition;\r\ndeclare global{\r\n    export interface JassijsReportDefinition extends TDocumentDefinitions{\r\n        /**\r\n         * the data which is filled into the report\r\n         * e.g. reportdesign.data={name:\"Hallo\"}\r\n         * could be filled in textfield  like \"{name}\"  \r\n         */\r\n        data?:any|any[];\r\n        /**\r\n         * the parameter which are filled into the report\r\n         * e.g. reportdesign.parameter = { date: \"2021-10-10\" };\r\n         * could be filled in textfield like \"{parameter.data}\"\r\n         */\r\n        parameter?:any;\r\n    } \r\n}\r\n\r\nexport type PageSize = PredefinedPageSize | CustomPageSize;\r\n\r\nexport interface CustomPageSize {\r\n    width: number;\r\n    height: number | 'auto';\r\n}\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type PredefinedPageSize =\r\n    | '4A0' | '2A0'\r\n    | 'A0' | 'A1' | 'A2' | 'A3' | 'A4' | 'A5' | 'A6' | 'A7' | 'A8' | 'A9' | 'A10'\r\n    | 'B0' | 'B1' | 'B2' | 'B3' | 'B4' | 'B5' | 'B6' | 'B7' | 'B8' | 'B9' | 'B10'\r\n    | 'C0' | 'C1' | 'C2' | 'C3' | 'C4' | 'C5' | 'C6' | 'C7' | 'C8' | 'C9' | 'C10'\r\n    | 'RA1' | 'RA2' | 'RA3' | 'RA4'\r\n    | 'SRA1' | 'SRA2' | 'SRA3' | 'SRA4'\r\n    | 'EXECUTIVE' | 'FOLIO' | 'LEGAL' | 'LETTER' | 'TABLOID';\r\n\r\nexport type PageOrientation = 'portrait' | 'landscape';\r\n\r\nexport type PageBreak = 'before' | 'after';\r\n\r\nexport type Size =\r\n    | number // absolute\r\n    | 'auto'\r\n    | '*'\r\n    | string; // percentage\r\n\r\nexport interface TFontDictionary {\r\n    [fontName: string]: TFontFamilyTypes;\r\n}\r\n\r\nexport interface TFontFamilyTypes {\r\n    normal?: PDFKit.Mixins.PDFFontSource | undefined;\r\n    bold?: PDFKit.Mixins.PDFFontSource | undefined;\r\n    italics?: PDFKit.Mixins.PDFFontSource | undefined;\r\n    bolditalics?: PDFKit.Mixins.PDFFontSource | undefined;\r\n}\r\n\r\nexport interface TDocumentInformation {\r\n    /** the title of the document */\r\n    title?: string | undefined;\r\n    /** the name of the author */\r\n    author?: string | undefined;\r\n    /** the subject of the document */\r\n    subject?: string | undefined;\r\n    /** keywords associated with the document */\r\n    keywords?: string | undefined;\r\n    creator?: string | undefined;\r\n    producer?: string | undefined;\r\n    creationDate?: Date | undefined;\r\n    modDate?: Date | undefined;\r\n    trapped?: string | undefined;\r\n}\r\n\r\nexport type DynamicContent = (\r\n    currentPage: number,\r\n    pageCount: number,\r\n    pageSize: ContextPageSize,\r\n) => Content | null | undefined;\r\n\r\nexport type DynamicBackground = (currentPage: number, pageSize: ContextPageSize) => Content | null | undefined;\r\n\r\nexport type Margins = number | [number, number] | [number, number, number, number];\r\n\r\nexport type Decoration = 'underline' | 'lineThrough' | 'overline';\r\nexport type DecorationStyle = 'dashed' | 'dotted' | 'double' | 'wavy';\r\n\r\nexport type Alignment = 'left' | 'right' | 'justify' | 'center';\r\n\r\nexport type DynamicRowSize = (row: number) => number | 'auto';\r\n\r\nexport interface CustomTableLayout {\r\n    hLineWidth?: DynamicLayout<number> | undefined;\r\n    vLineWidth?: DynamicLayout<number> | undefined;\r\n    hLineColor?: string | DynamicLayout<string> | undefined;\r\n    vLineColor?: string | DynamicLayout<string> | undefined;\r\n    hLineStyle?: DynamicLayout<LineStyle> | undefined;\r\n    vLineStyle?: DynamicLayout<LineStyle> | undefined;\r\n    fillColor?: string | DynamicLayout<string> | undefined;\r\n    paddingLeft?: DynamicLayout<number> | undefined;\r\n    paddingRight?: DynamicLayout<number> | undefined;\r\n    paddingTop?: DynamicLayout<number> | undefined;\r\n    paddingBottom?: DynamicLayout<number> | undefined;\r\n    fillOpacity?: number | DynamicLayout<number> | undefined;\r\n    defaultBorder?: boolean | undefined;\r\n}\r\n\r\nexport type DynamicLayout<T> = (rowIndex: number, node: ContentTable, columnIndex: number) => T | null | undefined;\r\n\r\nexport interface LineStyle {\r\n    dash?: {\r\n        length: number;\r\n        space?: number | undefined;\r\n    } | undefined;\r\n}\r\n\r\nexport type TableCell =\r\n    | {} // Used when another cell spans over this cell\r\n    | (Content & {\r\n          rowSpan?: number | undefined;\r\n          colSpan?: number | undefined;\r\n          border?: [boolean, boolean, boolean, boolean] | undefined;\r\n          borderColor?: [string, string, string, string] | undefined;\r\n          fillOpacity?: number | undefined;\r\n      });\r\n\r\nexport interface Table {\r\n    body: TableCell[][];\r\n    widths?: '*' | 'auto' | Size[] | undefined;\r\n    heights?: number | number[] | DynamicRowSize | undefined;\r\n    headerRows?: number | undefined;\r\n    dontBreakRows?: boolean | undefined;\r\n    keepWithHeaderRows?: number | undefined;\r\n    layout?: TableLayout | undefined;\r\n}\r\n\r\nexport type PredefinedTableLayout = 'noBorders' | 'headerLineOnly' | 'lightHorizontalLines';\r\nexport type TableLayout = string | PredefinedTableLayout | CustomTableLayout;\r\n\r\nexport interface Style {\r\n    /** name of the font */\r\n    font?: string | undefined;\r\n    /** size of the font in pt */\r\n    fontSize?: number | undefined;\r\n    fontFeatures?: PDFKit.Mixins.OpenTypeFeatures[] | undefined;\r\n    /** the line height (default: 1) */\r\n    lineHeight?: number | undefined;\r\n    /** whether to use bold text (default: false) */\r\n    bold?: boolean | undefined;\r\n    /** whether to use italic text (default: false) */\r\n    italics?: boolean | undefined;\r\n    /** the alignment of the text */\r\n    alignment?: Alignment | undefined;\r\n    /** the color of the text (color name e.g., ‘blue’ or hexadecimal color e.g., ‘#ff5500’) */\r\n    color?: string | undefined;\r\n    /** the background color of the text */\r\n    background?: string | undefined;\r\n    /** the color of the bullets in a buletted list */\r\n    markerColor?: string | undefined;\r\n    /** the text decoration to applu (‘underline’ or ‘lineThrough’ or ‘overline’) */\r\n    decoration?: Decoration | undefined;\r\n    /** (‘dashed’ or ‘dotted’ or ‘double’ or ‘wavy’) */\r\n    decorationStyle?: DecorationStyle | undefined;\r\n    /** the color of the text decoration, see color */\r\n    decorationColor?: string | undefined;\r\n    margin?: Margins | undefined;\r\n    preserveLeadingSpaces?: boolean | undefined;\r\n    preserveTrailingSpaces?: boolean | undefined;\r\n    opacity?: number | undefined;\r\n    characterSpacing?: number | undefined;\r\n    leadingIndent?: number | undefined;\r\n    // Table-cell properties:\r\n    noWrap?: boolean | undefined;\r\n    /** the background color of a table cell */\r\n    fillColor?: string | undefined;\r\n    /** the background opacity of a table cell */\r\n    fillOpacity?: number | undefined;\r\n    /** optional space between columns */\r\n    columnGap?: Size | undefined;\r\n    sup?: boolean | undefined;\r\n    sub?: boolean | undefined;\r\n    // These properties appear in the documentation but don't do anything:\r\n    // tableCellPadding?: unknown;\r\n    // cellBorder?: unknown;\r\n    // headerCellBorder?: unknown;\r\n    // oddRowCellBorder?: unknown;\r\n    // evenRowCellBorder?: unknown;\r\n    // tableBorder?: unknown;\r\n}\r\n\r\nexport type Content =\r\n    | string\r\n    | ArrayOfContent\r\n    | ContentText\r\n    | ContentColumns\r\n    | ContentStack\r\n    | ContentUnorderedList\r\n    | ContentOrderedList\r\n    | ContentTable\r\n    | ContentAnchor\r\n    | ContentPageReference\r\n    | ContentTextReference\r\n    | ContentToc\r\n    | ContentTocItem\r\n    | ContentImage\r\n    | ContentSvg\r\n    | ContentQr\r\n    | ContentCanvas;\r\n\r\n// not exported, only used to prevent Content from circularly referencing itself\r\ninterface ArrayOfContent extends Array<Content> {}\r\n\r\nexport interface ContentText extends ContentLink, ContentBase {\r\n    text: Content;\r\n}\r\n\r\nexport interface ContentColumns extends ContentBase {\r\n    columns: Column[];\r\n}\r\n\r\nexport interface ContentStack extends ContentBase {\r\n    /** if true, ensures that the contents of the stack are always on the same page */\r\n    unbreakable?: boolean | undefined;\r\n    stack: Content[];\r\n}\r\n\r\n/** for numbered lists set the ol key */\r\nexport interface ContentOrderedList extends ContentBase {\r\n    ol: OrderedListElement[];\r\n    type?: OrderedListType | undefined;\r\n    markerColor?: string | undefined;\r\n    separator?: string | [string, string] | undefined;\r\n    reversed?: boolean | undefined;\r\n    start?: number | undefined;\r\n}\r\n\r\n/** to treat a paragraph as a bulleted list, set an array of items under the ul key */\r\nexport interface ContentUnorderedList extends ContentBase {\r\n    ul: UnorderedListElement[];\r\n    type?: UnorderedListType | undefined;\r\n    markerColor?: string | undefined;\r\n}\r\n\r\nexport interface ContentCanvas extends ContentBase {\r\n    canvas: CanvasElement[];\r\n}\r\n\r\nexport interface ContentSvg extends ContentBase {\r\n    svg: string;\r\n    width?: number | undefined;\r\n    height?: number | undefined;\r\n    fit?: [number, number] | undefined;\r\n}\r\n\r\nexport interface ContentImage extends ContentLink, ContentBase {\r\n    image: string;\r\n    width?: number | undefined;\r\n    height?: number | undefined;\r\n    fit?: [number, number] | undefined;\r\n    cover?: ImageCover | undefined;\r\n}\r\n\r\nexport interface ContentTable extends ContentBase {\r\n    table: Table;\r\n    layout?: TableLayout | undefined;\r\n}\r\n\r\nexport interface ContentAnchor extends ContentBase {\r\n    text: string | ContentAnchor;\r\n    id: string;\r\n}\r\n\r\nexport interface ContentTocItem extends ContentBase {\r\n    text: string | ContentTocItem;\r\n    tocItem: boolean | string | string[];\r\n    tocStyle?: string | string[] | Style | undefined;\r\n    tocNumberStyle?: string | string[] | Style | undefined;\r\n    tocMargin?: Margins | undefined;\r\n}\r\n\r\nexport interface ContentPageReference extends ContentBase {\r\n    pageReference: string;\r\n}\r\n\r\nexport interface ContentTextReference extends ContentBase {\r\n    textReference: string;\r\n}\r\n\r\nexport interface ContentToc extends ContentBase {\r\n    toc: TableOfContent;\r\n}\r\n\r\nexport interface ContentQr extends ContentBase {\r\n    qr: string;\r\n    foreground?: string | undefined;\r\n    fit?: number | undefined;\r\n    version?: number | undefined;\r\n    eccLevel?: 'L' | 'M' | 'Q' | 'H' | undefined;\r\n    mode?: 'numeric' | 'alphanumeric' | 'octet' | undefined;\r\n    mask?: number | undefined;\r\n}\r\n\r\nexport interface ContentBase extends Style {\r\n    style?: string | string[] | Style | undefined;\r\n    absolutePosition?: Position | undefined;\r\n    relativePosition?: Position | undefined;\r\n    pageBreak?: PageBreak | undefined;\r\n    pageOrientation?: PageOrientation | undefined;\r\n    headlineLevel?: number | undefined;\r\n}\r\n\r\nexport interface ContentLink {\r\n    link?: string | undefined;\r\n    linkToPage?: number | undefined;\r\n    linkToDestination?: string | undefined;\r\n}\r\n\r\nexport interface TableOfContent {\r\n    title?: Content | undefined;\r\n    textMargin?: Margins | undefined;\r\n    textStyle?: string | string[] | Style | undefined;\r\n    numberStyle?: string | string[] | Style | undefined;\r\n    id?: string | undefined;\r\n}\r\n\r\nexport type Column = Content & {\r\n    width?: Size | undefined;\r\n};\r\n\r\nexport type OrderedListType = 'lower-alpha' | 'upper-alpha' | 'lower-roman' | 'upper-roman' | 'none';\r\nexport type OrderedListElement = Content & {\r\n    counter?: number | undefined;\r\n    listType?: OrderedListType | undefined;\r\n};\r\n\r\nexport type UnorderedListType = 'square' | 'circle' | 'none';\r\nexport type UnorderedListElement = Content & {\r\n    listType?: UnorderedListType | undefined;\r\n};\r\n\r\nexport type CanvasElement = CanvasRect | CanvasPolyline | CanvasLine | CanvasEllipse;\r\n\r\nexport interface CanvasRect extends CanvasLineElement, CanvasFilledElement {\r\n    type: 'rect';\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    r?: number | undefined;\r\n}\r\n\r\nexport interface CanvasPolyline extends CanvasLineElement, CanvasFilledElement {\r\n    type: 'polyline';\r\n    points: Array<{ x: number; y: number }>;\r\n    closePath?: boolean | undefined;\r\n    lineCap?: 'round' | 'square' | undefined;\r\n}\r\n\r\nexport interface CanvasLine extends CanvasLineElement {\r\n    type: 'line';\r\n    x1: number;\r\n    y1: number;\r\n    x2: number;\r\n    y2: number;\r\n    lineCap?: 'round' | 'square' | undefined;\r\n}\r\n\r\nexport interface CanvasEllipse extends CanvasLineElement, CanvasFilledElement {\r\n    type: 'ellipse';\r\n    x: number;\r\n    y: number;\r\n    r1: number;\r\n    r2?: number | undefined;\r\n}\r\n\r\nexport interface CanvasFilledElement {\r\n    color?: string | undefined;\r\n    fillOpacity?: number | undefined;\r\n    linearGradient?: string[] | undefined;\r\n}\r\n\r\nexport interface CanvasLineElement {\r\n    lineWidth?: number | undefined;\r\n    lineColor?: string | undefined;\r\n    dash?: {\r\n        length: number;\r\n        space?: number | undefined;\r\n    } | undefined;\r\n}\r\n\r\nexport type ImageAlignment = 'left' | 'right' | 'center';\r\nexport type ImageVerticalAlignment = 'top' | 'bottom' | 'center';\r\n\r\nexport interface ImageCover {\r\n    width?: number | undefined;\r\n    height?: number | undefined;\r\n    align?: ImageAlignment | undefined;\r\n    valign?: ImageVerticalAlignment | undefined;\r\n}\r\n\r\nexport interface StyleDictionary {\r\n    [name: string]: Style;\r\n}\r\n\r\nexport type PDFVersion = '1.3' | '1.4' | '1.5' | '1.6' | '1.7' | '1.7ext3';\r\n\r\nexport interface Watermark {\r\n    /** watermark text */\r\n    text: string;\r\n    /** opacity of text */\r\n    opacity?: number | undefined;\r\n    /** angle of text rotation (minimal version: 0.1.60) */\r\n    angle?: number | undefined;\r\n    font?: string | undefined;\r\n    /** own font size of text (ideal size is calculated automatically) (minimal version: 0.1.60) */\r\n    fontSize?: number | undefined;\r\n    /** color of text */\r\n    color?: string | undefined;\r\n    /** bold style of text */\r\n    bold?: boolean | undefined;\r\n    /** italics style of text */\r\n    italics?: boolean | undefined;\r\n}\r\n\r\nexport interface TDocumentDefinitions {\r\n    content: Content;\r\n    background?: DynamicBackground | Content | undefined;\r\n    compress?: boolean | undefined;\r\n    defaultStyle?: Style | undefined;\r\n    footer?: DynamicContent | Content | undefined;\r\n    header?: DynamicContent | Content | undefined;\r\n    images?: { [key: string]: string } | undefined;\r\n    info?: TDocumentInformation | undefined;\r\n    pageBreakBefore?: ((\r\n        currentNode: Node,\r\n        followingNodesOnPage: Node[],\r\n        nodesOnNextPage: Node[],\r\n        previousNodesOnPage: Node[],\r\n    ) => boolean) | undefined;\r\n    pageMargins?: Margins | undefined;\r\n    pageOrientation?: PageOrientation | undefined;\r\n    pageSize?: PageSize | undefined;\r\n    styles?: StyleDictionary | undefined;\r\n    userPassword?: string | undefined;\r\n    ownerPassword?: string | undefined;\r\n    permissions?: PDFKit.DocumentPermissions | undefined;\r\n    version?: PDFVersion | undefined;\r\n    watermark?: string | Watermark | undefined;\r\n}\r\n\r\nexport interface Node {\r\n    text?: Content | undefined;\r\n    ul?: UnorderedListElement[] | undefined;\r\n    ol?: OrderedListElement[] | undefined;\r\n    table?: Table | undefined;\r\n    image?: string | undefined;\r\n    qr?: string | undefined;\r\n    canvas?: CanvasElement | undefined;\r\n    svg?: string | undefined;\r\n    columns?: Column[] | undefined;\r\n    id?: string | undefined;\r\n    headlineLevel?: number | undefined;\r\n    style?: string | string[] | Style | undefined;\r\n    pageBreak?: PageBreak | undefined;\r\n    pageOrientation?: PageOrientation | undefined;\r\n    pageNumbers: number[];\r\n    pages: number;\r\n    stack: boolean;\r\n    startPosition: {\r\n        pageNumber: number;\r\n        pageOrientation: PageOrientation;\r\n        pageInnerHeight: number;\r\n        pageInnerWidth: number;\r\n        left: number;\r\n        top: number;\r\n        verticalRatio: number;\r\n        horizontalRatio: number;\r\n    };\r\n}\r\n\r\nexport interface ContextPageSize {\r\n    height: number;\r\n    width: number;\r\n    orientation: PageOrientation;\r\n}\r\n\r\nexport interface BufferOptions {\r\n    fontLayoutCache?: boolean | undefined;\r\n    bufferPages?: boolean | undefined;\r\n    tableLayouts?: { [key: string]: CustomTableLayout } | undefined;\r\n    autoPrint?: boolean | undefined;\r\n    progressCallback?: ((progress: number) => void) | undefined;\r\n}\r\n\r\n// disable automatic exporting\r\nexport {};","//this file is autogenerated don't modify\ndefine(\"jassijs_reportdefinition/registry\",[\"require\"], function(require) {\n return {\n  default: {\n\t\"jassijs_reportdefinition/modul.ts\": {\n\t\t\"date\": 1655637506035\n\t},\n\t\"jassijs_reportdefinition/pdfMake-interface.ts\": {\n\t\t\"date\": 1655637557493\n\t},\n\t\"jassijs_reportdefinition/ReportDesignGlobal.ts\": {\n\t\t\"date\": 1655397712425\n\t}\n}\n }\n});"]}