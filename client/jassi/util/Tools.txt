import jassi, { $Class } from "remote/jassi/base/Jassi";

@$Class("jassi.util.Tools")
export default class Tools{
        
        constructor(){
         }
        static copyObject(obj){
             if(Array.isArray(obj)){
             	var ret=[];
                 for(var x=0;x<obj.length;x++){
                     ret.push(this.copyObject(obj[x]));
                 }
                 return ret;
             }else{
	             var s=Tools.objectToJson(obj);
	             return this.jsonToObject(s);
             }
         }
  /**
         * converts a json string to a object
         * @param {string} value - the code
         */
        static jsonToObject(value){
            var ret=eval("("+value+")");
            /*var toeval;
            toeval="window.jassi_debug.temp"+id+"="+value+";";
            eval(toeval);
            var ret=window.jassi_debug["temp"+id];
            delete window.jassi_debug["temp"+id];*/
            return ret;
        }
          /**
         * converts a string to a object
         * @param {object} value - the object to stringify
         * @param {string} space - the space before the property
         */
        static objectToJson(value,space=undefined){
            var ret=JSON.stringify(value,function(key,value){
                if(typeof(value)==="function"){
                    ret=value.toString();
                    ret=ret.replaceAll("\r"+space,"\r");
                    ret=ret.replaceAll("\n"+space,"\n");
                  //  ret=ret.replace("\t\t","");
                    return "$%&"+ret+"$%&";
                }
                return value;
            },"\t");
            if(ret!==undefined){
                ret=ret.replaceAll("\"$%&","");
                ret=ret.replaceAll("$%&\"","");
            	ret=ret.replaceAll("\\r","\r");
	            ret=ret.replaceAll("\\n","\n");
	            ret=ret.replaceAll("\\t","\t");
	            ret=ret.replaceAll('\\"','\"');
            }
            //one to much
          //  ret=ret.substring(0,ret.length-2)+ret.substring(ret.length-1);
            return ret;
        }
        private static toText(node:ts.Node,text:string):string{
        	 return text.substring(node.pos,node.end).trim();	        		
        }
        /*private static visitNode(code:string,node:ts.Node,ob:any){
        	if(node.kind=== ts.SyntaxKind.ObjectLiteralExpression){
	        	node["properties"].forEach((s:ts.Node)=>{
	        		
                       	var name=s["name"].text;
                       	var val=Tools.toText(s["initializer"],code);
                       	if(s["initializer"].kind===ts.SyntaxKind.ObjectLiteralExpression){
                       		ob[name]={};
                       		Tools.visitNode(code,s,ob[name]);
                       	
                       	}else{
                       		if(s["initializer"].kind===ts.SyntaxKind.StringLiteral){
                       			ob[name]=val.substring(1,val.length-1);
                       		}else if(s["initializer"].kind===ts.SyntaxKind.NumericLiteral){
		        		        ob[name]=new Number(val);
                       		}else if( s["initializer"].kind===ts.SyntaxKind.FalseKeyword{
                       				ob[name]=false;
                       		}else if( s["initializer"].kind===ts.SyntaxKind.TrueKeyword{
                       				ob[name]=true;
                       		}else if val.startsWith("function"){
                       			ob[name]= function(){
                       				return val;
                       			};
                       			ob[name].toString=function(){
                       				return val;
                       			}
                       		}else{
                       			ob[name]= val;	
                       		}
                       	}
	        	});
        		
        	}else
        	node.getChildren().forEach(c=>{
        		Tools.visitNode(code,c,ob);	
        	});
        }*/
        private static visitNode(code:string,node:ts.Node,ob:any){
        	if(node.kind=== ts.SyntaxKind.ObjectLiteralExpression){
	        	node["properties"].forEach((s:ts.Node)=>{
	        		
                       	var name=s["name"].text;
                       	var val=Tools.toText(s["initializer"],code);
                       	if(s["initializer"].kind===ts.SyntaxKind.ObjectLiteralExpression){
                       		ob[name]={};
                       		Tools.visitNode(code,s,ob[name]);
                       	
                       	}else{
                       		if(s["initializer"].kind===ts.SyntaxKind.StringLiteral){
                       			ob[name]="\""+val+"\"";
                       		}else
		        		        ob[name]=val;
                       	}
	        	});
        		
        	}else
        	node.getChildren().forEach(c=>{
        		Tools.visitNode(code,c,ob);	
        	});
        }
        /**
         * parse a json string and returns an object an embed all values in string
         * e.g. 
         * { a:"hallo",i:{b:9,c:"test"}} would be convert to{ a:""hallo"",i:{b:"9",c:""test""}}
         **/
        static async jsonToStringObject(code:string){
        	await import("jassi/ext/typescript");
        	 code="a="+code;
        	 var sourceFile = ts.createSourceFile('hallo.ts', code, ts.ScriptTarget.ES5, true);
    		 var ret={};
    		 Tools.visitNode(code, sourceFile,ret);
    		 return ret;
        }
        private static _stringObjectToJson(ob:any,ret:any){
        	
        	 for(var key in ob){
        	 	if(typeof(ob[key])==="string"){
        	 		ret[key]="%&&/"+ob[key]+"%&&/";
        	 	}else{
        	 		ret[key]={}
        	 		Tools._stringObjectToJson(ob[key],ret[key]);
        	 	}
        	 }
        }
         /**
         * parse a json string and returns an object an embed all values in string
         * e.g. 
         * { a:"hallo",i:{b:9,c:"test"}} would be convert to{ a:""hallo"",i:{b:"9",c:""test""}}
         **/
        static stringObjectToJson(ob:any,space:string){
        	 var ret={};
    		 Tools._stringObjectToJson(ob,ret);
    		 var sret=JSON.stringify(ret,undefined,"      ");
    		 sret = sret.replaceAll("\\\"%&&/", "").replaceAll("%&&/\\\"","");
    		 sret = sret.replaceAll("\"%&&/", "").replaceAll("%&&/\"","");
    		 var aret=sret.split("\r");
    		 for(let x=0;x<aret.length;x++){
    		 	aret[x]=space+aret[x];
    		 }
    		 
    		 return aret.join("\r");
        }
}

export async function test(){
	var code=`{ a:"hallo",
	i:{
		b:9,
		c:"test"
		}
	} `;
	var h=await Tools.jsonToStringObject(code);
	h=Tools.stringObjectToJson(h,"    ");
	
}





