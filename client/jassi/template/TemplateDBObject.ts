import { $Class } from "remote/jassi/base/Jassi";
import { $Property } from "jassi/ui/Property";
import { $ActionProvider, $Action } from "jassi/base/Actions";
import { DBObject } from "remote/jassi/base/DBObject";
import { FileNode } from "remote/jassi/base/FileNode";
import { OptionDialog } from "jassi/ui/OptionDialog";
import { classes } from "remote/jassi/base/Classes";
import registry from "remote/jassi/base/Registry";
import { FileActions } from "jassi/ui/FileExplorer";
import { TemplateDBDialog } from "jassi/template/TemplateDBDialog";

var code=`import {DBObject, $DBObject } from "remote/jassi/base/DBObject";
import jassi, { $Class } from "remote/jassi/base/Jassi";
import { Entity, PrimaryColumn, Column, OneToOne, ManyToMany, ManyToOne, OneToMany } from "jassi/util/DatabaseSchema";
import { $DBObjectQuery } from "remote/jassi/base/DBObjectQuery";


@$DBObject()
@$Class("{{fullclassname}}")

export class {{classname}} extends DBObject {

    {{PrimaryAnnotator}}
    id: number;
  
    constructor() {
        super();
    }
}


export async function test() {
};`;

@$Class("jassi.ui.TemplateDBDialogProperties")
export class TemplateDBObjectProperties {
	@$Property({decription:"name of the db class"})
	name:string;
	@$Property({default:"true",description:"the primary column alue will be automatically generated with an auto-increment value"})
    autogeneratedid:string;
}
@$ActionProvider("jassi.base.FileNode")
@$Class("jassi.ui.TemplateDBObject")
export class TemplateDBObject {
	static code:string=code;
    @$Action({
        name: "New/DBObject",
        isEnabled: function(all: FileNode[]): boolean {
            return all[0].isDirectory()&&all[0].fullpath.startsWith("remote/");
        }
    })
    static async newFile(all: FileNode[]) {
		var props=new TemplateDBObjectProperties();
        var res = await OptionDialog.askProperties("Create Database Class:",props, ["ok", "cancel"],undefined,false);
        if (res.button === "ok" ) {
	    	var scode=TemplateDBObject.code.replaceAll("{{fullclassname}}",all[0].fullpath+"/"+props.name);
	    	scode=scode.replaceAll("{{classname}}",props.name);
	    	var anno="@PrimaryColumn()";
	    	if(props.autogeneratedid)
	    		 anno="@PrimaryGeneratedColumn()";
	    	scode=scode.replaceAll("{{PrimaryAnnotator}}",anno);

	    	FileActions .newFile(all,props.name+".ts",scode,true);
        }
    }
}


