{"version":3,"file":"Server.js","sourceRoot":"","sources":["../../../jassijs/remote/Server.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { $Class } from \"jassijs/remote/Registry\";\r\nimport { Context, RemoteObject } from \"jassijs/remote/RemoteObject\";\r\nimport { FileNode } from \"jassijs/remote/FileNode\";\r\nimport { classes, JassiError } from \"./Classes\";\r\nimport { serverservices } from \"./Serverservice\";\r\nimport { ValidateFunctionParameter, ValidateIsArray, ValidateIsBoolean, ValidateIsString } from \"jassijs/remote/Validator\";\r\nimport { config } from \"./Config\";\r\n\r\n\r\n\r\n\r\n@$Class(\"jassijs.remote.Server\")\r\nexport class Server extends RemoteObject {\r\n    private static isonline: Promise<boolean> = undefined;\r\n   \r\n    //files found in js.map of modules in the jassijs.json\r\n    public static filesInMap: { [name: string]: { modul: string, id: number } } = undefined;\r\n    constructor() {\r\n        super();\r\n\r\n    }\r\n    private _convertFileNode(node: FileNode): FileNode {\r\n        var ret: FileNode = new FileNode();\r\n        Object.assign(ret, node);\r\n        if (ret.files !== undefined) {\r\n            for (let x = 0; x < ret.files.length; x++) {\r\n                ret.files[x].parent = ret;\r\n                var s = ret.fullpath === undefined ? \"\" : ret.fullpath;\r\n                ret.files[x].fullpath = s + (s === \"\" ? \"\" : \"/\") + ret.files[x].name;\r\n                ret.files[x] = this._convertFileNode(ret.files[x]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    private async fillMapModules( ret,serverModules) {\r\n        var modules=config.modules;\r\n        if(serverModules===true)\r\n            modules=config.server?.modules;\r\n        if(modules===undefined)\r\n            return;\r\n        for (var mod in modules) {\r\n            if (jassijs?.options?.Server?.filterModulInFilemap) {\r\n                if (jassijs?.options?.Server?.filterModulInFilemap.indexOf(mod) === -1)\r\n                    continue;\r\n            }\r\n            if (modules[mod].endsWith(\".js\") || modules[mod].indexOf(\".js?\") > -1) {\r\n                let mapname = modules[mod].split(\"?\")[0] + \".map\";\r\n                if (modules[mod].indexOf(\".js?\") > -1)\r\n                    mapname = mapname + \"?\" + modules[mod].split(\"?\")[1];\r\n                var code = await $.ajax({ url: mapname, dataType: \"text\" })\r\n                var data = JSON.parse(code);\r\n                var files = data.sources;\r\n                for (let x = 0; x < files.length; x++) {\r\n                    let fname = files[x].substring(files[x].indexOf(mod + \"/\"));\r\n                    if (jassijs?.options?.Server?.filterSytemfilesInFilemap === true) {\r\n                        if (fname.endsWith(\"/modul.js\") || fname.endsWith(\"/registry.js\"))\r\n                            continue;\r\n                    }\r\n                    if (fname.endsWith)\r\n                        ret[(serverModules?\"$serverside/\":\"\")+ fname] = {\r\n                            id: x,\r\n                            modul: mod\r\n                        };\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    async fillFilesInMapIfNeeded() {\r\n        if (Server.filesInMap)\r\n            return;\r\n        var ret = {};\r\n        await this.fillMapModules(ret,false);\r\n        await this.fillMapModules(ret,true);\r\n        Server.filesInMap = ret;\r\n\r\n    }\r\n    async addFilesFromMap(root: FileNode) {\r\n        await this.fillFilesInMapIfNeeded();\r\n        for (var fname in Server.filesInMap) {\r\n            if(fname.startsWith(\"$serverside\"))\r\n                continue;\r\n            let path = fname.split(\"/\");\r\n            var parent = root;\r\n            for (let p = 0; p < path.length; p++) {\r\n                if (p + 1 < path.length) {\r\n                    let dirname = path[p];\r\n                    var found = undefined;\r\n                    for (let f = 0; f < parent.files.length; f++) {\r\n                        if (parent.files[f].name === dirname)\r\n                            found = parent.files[f];\r\n                    }\r\n                    if (!found) {\r\n                        found = {\r\n                            flag: \"fromMap\",\r\n                            name: dirname,\r\n                            files: []\r\n                        }\r\n                        parent.files.push(found);\r\n                    }\r\n                    parent = found;\r\n\r\n                } else {\r\n                    parent.files.push({\r\n                        flag: \"fromMap\",\r\n                        name: path[p],\r\n                        date: undefined\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * gets alls ts/js-files from server\r\n    * @param {Promise<string>} [async] - returns a Promise for asynchros handling\r\n    * @returns {string[]} - list of files\r\n    */\r\n    @ValidateFunctionParameter()\r\n    async dir(@ValidateIsBoolean({ optional: true }) withDate: boolean = false, context: Context = undefined): Promise<FileNode> {\r\n\r\n        if (!context?.isServer) {\r\n            var ret: FileNode;\r\n            if ((await Server.isOnline(context)) === true)\r\n                ret = <FileNode>await this.call(this, this.dir, withDate, context);\r\n            else\r\n                ret = { name: \"\", files: [] };\r\n            await this.addFilesFromMap(ret);\r\n            ret.fullpath = \"\";//root\r\n            let r = this._convertFileNode(ret);\r\n            return r;\r\n        } else {\r\n            var rett = await (await serverservices.filesystem).dir(\"\", withDate);\r\n            return rett;\r\n            // return [\"jassijs/base/ChromeDebugger.ts\"];\r\n        }\r\n    }\r\n    @ValidateFunctionParameter()\r\n    public async zip(@ValidateIsString() directoryname: string, @ValidateIsBoolean({ optional: true }) serverdir: boolean = undefined, context: Context = undefined) {\r\n        if (!context?.isServer) {\r\n            return <{ [id: string]: string }>await this.call(this, this.zip, directoryname, serverdir, context);\r\n        } else {\r\n            return (await serverservices.filesystem).zip(directoryname, serverdir);\r\n            // return [\"jassijs/base/ChromeDebugger.ts\"];\r\n        }\r\n    }\r\n    /**\r\n     * gets the content of a file from server\r\n     * @param {string} fileNamew\r\n     * @returns {string} content of the file\r\n     */\r\n    @ValidateFunctionParameter()\r\n    async loadFiles(@ValidateIsArray({ type: tp => String }) fileNames: string[], context: Context = undefined): Promise<{ [id: string]: string }> {\r\n        if (!context?.isServer) {\r\n            return <{ [id: string]: string }>await this.call(this, this.loadFiles, fileNames, context);\r\n        } else {\r\n            return (await serverservices.filesystem).loadFiles(fileNames);\r\n            // return [\"jassijs/base/ChromeDebugger.ts\"];\r\n        }\r\n    }\r\n    /**\r\n     * gets the content of a file from server\r\n     * @param {string} fileName\r\n     * @returns {string} content of the file\r\n     */\r\n    @ValidateFunctionParameter()\r\n    async loadFile(@ValidateIsString() fileName: string, context: Context = undefined): Promise<string> {\r\n        var fromServerdirectory = fileName.startsWith(\"$serverside/\");\r\n        if (!context?.isServer) {\r\n            await this.fillFilesInMapIfNeeded();\r\n            if (Server.filesInMap[fileName]) {\r\n                var foundOnLocalserver=false;\r\n                if(config.serverrequire){\r\n                    var r=<any>await new Promise((resolve)=>{\r\n                        config.serverrequire([\"jassijs/server/NativeAdapter\"],(adapter)=>{\r\n                            resolve(adapter);\r\n                        });\r\n                    });\r\n                    var fname=\"./client/\"+fileName;\r\n                    if(fromServerdirectory)\r\n                        fname=fileName.replace(\"$serverside/\",\"./\");\r\n                    if(r.exists&&await r.exists(fname)){\r\n                        foundOnLocalserver=true;\r\n                    }\r\n                }\r\n                if(foundOnLocalserver){\r\n                    //use ajax\r\n                } else { \r\n                    var found = Server.filesInMap[fileName];\r\n                    let mapname = config.modules[found.modul].split(\"?\")[0] + \".map\";\r\n                    if(fromServerdirectory)\r\n                        mapname = config.server.modules[found.modul].split(\"?\")[0] + \".map\";\r\n                    if (config.modules[found.modul].indexOf(\".js?\") > -1)\r\n                        mapname = mapname + \"?\" + config.modules[found.modul].split(\"?\")[1];\r\n                    var code = await this.loadFile(mapname, context);\r\n                    var data = JSON.parse(code).sourcesContent[found.id];\r\n                    return data;\r\n                }\r\n\r\n            }\r\n            if (fromServerdirectory) {\r\n\r\n                return await this.call(this, this.loadFile, fileName, context);\r\n            } else\r\n                return $.ajax({ url: fileName, dataType: \"text\" });\r\n            //return await this.call(this,\"loadFile\", fileName);\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can loadFile from Serverdirectory\");\r\n            var rett: string = await (await serverservices.filesystem).loadFile(fileName);\r\n            return rett;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * put the content to a file\r\n    * @param [{string}] fileNames - the name of the file \r\n    * @param [{string}] contents\r\n    */\r\n    @ValidateFunctionParameter()\r\n    async saveFiles(@ValidateIsArray({ type: type => String }) fileNames: string[], @ValidateIsArray({ type: type => String }) contents: string[], context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var allfileNames: string[] = [];\r\n            var allcontents: string[] = [];\r\n            var alltsfiles: string[] = [];\r\n            for (var f = 0; f < fileNames.length; f++) {\r\n                var _this = this;\r\n\r\n                var fileName = fileNames[f];\r\n                var content = contents[f];\r\n                if (!fileName.startsWith(\"$serverside/\") && (fileName.endsWith(\".tsx\") ||fileName.endsWith(\".ts\") || fileName.endsWith(\".js\"))) {\r\n\r\n                    //var tss = await import(\"jassijs_editor/util/Typescript\");\r\n                    var tss = <any>await classes.loadClass(\"jassijs_editor.util.Typescript\");\r\n                    var rets = await tss.instance.transpile(fileName, content);\r\n\r\n                    allfileNames = allfileNames.concat(rets.fileNames);\r\n                    allcontents = allcontents.concat(rets.contents);\r\n                    alltsfiles.push(fileName);\r\n                } else {\r\n                    allfileNames.push(fileName);\r\n                    allcontents.push(content);\r\n                }\r\n            }\r\n            var res = await this.call(this, this.saveFiles, allfileNames, allcontents, context);\r\n\r\n            if (res === \"\") {\r\n                //@ts-ignore\r\n                import(\"jassijs/ui/Notify\").then((el) => {\r\n                    el.notify(fileName + \" saved\", \"info\", { position: \"bottom right\" });\r\n                });\r\n                //if (!fromServerdirectory) {\r\n                for (var x = 0; x < alltsfiles.length; x++) {\r\n                    await $.ajax({ url: alltsfiles[x], dataType: \"text\" });\r\n                }\r\n                // }\r\n            } else {\r\n                //@ts-ignore\r\n                import(\"jassijs/ui/Notify\").then((el) => {\r\n                    el.notify(fileName + \" not saved\", \"error\", { position: \"bottom right\" });\r\n                });\r\n                throw new JassiError(res);\r\n            }\r\n            return res;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can saveFiles\");\r\n            var ret = (await serverservices.filesystem).saveFiles(fileNames, contents, true);\r\n            return ret;\r\n        }\r\n    }\r\n    /**\r\n    * put the content to a file\r\n    * @param {string} fileName - the name of the file\r\n    * @param {string} content\r\n    */\r\n    @ValidateFunctionParameter()\r\n    async saveFile(@ValidateIsString() fileName: string, @ValidateIsString() content: string, context: Context = undefined): Promise<string> {\r\n        /*await this.fillFilesInMapIfNeeded();\r\n        if (Server.filesInMap[fileName]) {\r\n            //@ts-ignore\r\n             notify(fileName + \" could not be saved on server\", \"error\", { position: \"bottom right\" });\r\n            return;\r\n        }*/\r\n        return await this.saveFiles([fileName], [content], context);\r\n    }\r\n    /**\r\n   * deletes a server modul\r\n   **/\r\n    @ValidateFunctionParameter()\r\n    async testServersideFile(@ValidateIsString() name: string, context: Context = undefined): Promise<string> {\r\n        if (!name.startsWith(\"$serverside/\"))\r\n            throw new JassiError(name + \" is not a serverside file\");\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.testServersideFile, name, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin) {\r\n                throw new JassiError(\"only admins can delete\");\r\n            }\r\n            //@ts-ignore\r\n            var test = (await import(name.replaceAll(\"$serverside/\", \"\"))).test;\r\n            var ret;\r\n            if (test)\r\n                ret = await test();\r\n            return ret;\r\n\r\n        }\r\n    }\r\n    /**\r\n   * deletes a server modul\r\n   **/\r\n    @ValidateFunctionParameter()\r\n    async removeServerModul(@ValidateIsString() name: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.removeServerModul, name, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can delete\");\r\n            return (await serverservices.filesystem).removeServerModul(name);\r\n        }\r\n    }\r\n    /**\r\n    * deletes a file or directory\r\n    **/\r\n    @ValidateFunctionParameter()\r\n    async delete(@ValidateIsString() name: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.delete, name, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can delete\");\r\n            return (await serverservices.filesystem).remove(name);\r\n        }\r\n    }\r\n    /**\r\n     * renames a file or directory\r\n     **/\r\n    @ValidateFunctionParameter()\r\n    async rename(@ValidateIsString() oldname: string, @ValidateIsString() newname: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.rename, oldname, newname, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can rename\");\r\n            return (await serverservices.filesystem).rename(oldname, newname);;\r\n        }\r\n    }\r\n    /**\r\n    * is the nodes server running \r\n    **/\r\n    public static async isOnline(context: Context = undefined): Promise<boolean> {\r\n        if (!context?.isServer) {\r\n            //no serviceworker no serverside implementation\r\n            //@ts-ignore\r\n            if (navigator.serviceWorker.controller === null)\r\n                return false;\r\n            try {\r\n                if (this.isonline === undefined)\r\n                    Server.isonline = await this.call(this.isOnline, context);\r\n                return await Server.isonline;\r\n            } catch {\r\n                return false;\r\n            }\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * creates a file \r\n     **/\r\n    @ValidateFunctionParameter()\r\n    async createFile(@ValidateIsString() filename: string, content: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.createFile, filename, content, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can createFile\");\r\n\r\n            return (await serverservices.filesystem).createFile(filename, content);\r\n        }\r\n    }\r\n    /**\r\n    * creates a file \r\n    **/\r\n    @ValidateFunctionParameter()\r\n    async createFolder(@ValidateIsString() foldername: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.createFolder, foldername, context);\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can createFolder\");\r\n            return (await serverservices.filesystem).createFolder(foldername);\r\n        }\r\n    }\r\n    @ValidateFunctionParameter()\r\n    async createModule(@ValidateIsString() modulename: string, context: Context = undefined): Promise<string> {\r\n        if (!context?.isServer) {\r\n            var ret = await this.call(this, this.createModule, modulename, context);\r\n            if (!config.modules[modulename]){\r\n                //config.jsonData.modules[modulename] = modulename;\r\n                await config.reload();\r\n            }\r\n            //@ts-ignore\r\n            //  $.notify(fileNames[0] + \" and more saved\", \"info\", { position: \"bottom right\" });\r\n            return ret;\r\n        } else {\r\n            if (!context.request.user.isAdmin)\r\n                throw new JassiError(\"only admins can createFolder\");\r\n            return (await serverservices.filesystem).createModule(modulename);\r\n        }\r\n    }\r\n    static async mytest(context: Context = undefined) {\r\n        if (!context?.isServer) {\r\n            return await this.call(this.mytest, context);\r\n        } else\r\n            return 14;//this is called on server\r\n    }\r\n}\r\n\r\n"]}