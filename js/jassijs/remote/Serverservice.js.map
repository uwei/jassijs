{"version":3,"file":"Serverservice.js","sourceRoot":"","sources":["../../../jassijs/remote/Serverservice.ts"],"names":[],"mappings":";AAAA,YAAY;;;AAEZ,kCAAgC;AAChC,oDAAiD;AACjD,sDAA+C;AAE/C,MAAa,uBAAuB;CAGnC;AAHD,0DAGC;AACD,IAAI,qBAAqB,GAAG,EAAE,CAAC;AAkEW,sDAAqB;AAjE/D,IAAI,wBAAwB,GAAC,EAAE,CAAC;AAChC,SAAgB,iBAAiB,CAAC,IAAsD;IACpF,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,CAAC;AAFD,8CAEC;AAOD,IAAI,cAAc,GAAuB,IAAI,KAAK,CAAC,qBAAqB,EAAE;IACtE,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ;QACtB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YACzC,IAAI,KAAK,GAAC,qBAAqB,CAAC;YAChC,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;gBACd,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtB,OAAO;aACV;iBAAM;gBACH,IAAI,GAAG,GAAG,MAAM,kBAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;gBACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACjC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBAC/B,IAAI,IAAI,KAAK,IAAI,EAAE;wBACf,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBAC/B,IAAI,EAAE,GAAG,MAAM,kBAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;wBACzD,YAAY;wBACZ,IAAI,OAAO,CAAC,IAAI,EAAE,EAAC,sCAAsC;4BACrD;;;;+BAIG;4BACH,YAAY;4BACZ,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;yBAC5F;6BAAM;4BACH,MAAM,iBAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,+CAA+C;yBACtF;wBACD,IAAI,KAAK,GAAyB,kBAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC5F,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,wBAAwB,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;4BAC9C,MAAM,wBAAwB,CAAC,CAAC,CAAC,CAAS,IAAI,EAAC,KAAK,CAAC,CAAC;yBACzD;wBACD,IAAI,QAAQ,GAAE,KAAK,CAAC,WAAW,EAAE,CAAC;wBAElC,MAAM,CAAC,IAAI,CAAC,GAAC,QAAQ,CAAC;wBACtB,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAClB,OAAO;qBAEV;iBAEJ;aACJ;YAED,MAAM,CAAC,0BAA0B,GAAW,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAC,CAAC;AAUM,wCAAc;AARvB,SAAgB,cAAc,CAAC,UAAmC;IAC9D,OAAO,UAAU,MAAM;QACnB,kBAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC,CAAA;AACL,CAAC;AAJD,wCAIC;AAGD,IAAI,iBAAiB,GAAC,IAAI,CAAC;AACH,8CAAiB","sourcesContent":["//@ts-ignore\r\n\r\nimport \"jassijs/remote/Classes\";\r\nimport { classes } from \"jassijs/remote/Classes\";\r\nimport registry from \"jassijs/remote/Registry\";\r\n\r\nexport class ServerserviceProperties {\r\n    name: string;\r\n    getInstance:(()=>Promise<any>) \r\n}\r\nvar runningServerservices = {};\r\nvar beforeServiceLoadHandler=[];\r\nexport function beforeServiceLoad(func:(name:string,props:ServerserviceProperties)=>void){\r\n    beforeServiceLoadHandler.push(func);\r\n}\r\ndeclare global{ \r\n    interface Serverservice{\r\n\r\n    }\r\n}\r\n\r\nvar serverservices: Serverservice = <any>new Proxy(runningServerservices, {\r\n    get(target, prop, receiver) {\r\n        return new Promise(async (resolve, reject) => {\r\n            var khsdf=runningServerservices;\r\n            if (target[prop]) { \r\n                resolve(target[prop]); \r\n                return;\r\n            } else {\r\n                var all = await registry.getJSONData(\"$Serverservice\");\r\n                for (var x = 0; x < all.length; x++) { \r\n                    var serv = all[x];\r\n                    var name = serv.params[0].name;\r\n                    if (name === prop) { \r\n                        var classname = serv.classname;\r\n                        var cl = await registry.getJSONData(\"$Class\", classname);\r\n                        //@ts-ignore\r\n                        if (require.main) {//nodes load project class from module\r\n                            /*for (var jfile in require.cache) {\r\n                                if(jfile.replaceAll(\"\\\\\",\"/\").endsWith(serv.filename.substring(0,serv.filename.length-2)+\"js\")){\r\n                                    delete require.cache[jfile];\r\n                                }\r\n                            }*/\r\n                            //@ts-ignore\r\n                            await Promise.resolve().then(() => require.main.require(classname.replaceAll(\".\", \"/\")));\r\n                        } else {\r\n                            await classes.loadClass(classname); //await import(classname.replaceAll(\".\", \"/\"));\r\n                        } \r\n                        var props:ServerserviceProperties=registry.getData(\"$Serverservice\",classname)[0].params[0];\r\n                        for(var x=0;x<beforeServiceLoadHandler.length;x++){\r\n                            await beforeServiceLoadHandler[x](<string>prop,props);\r\n                        }\r\n                        var instance= props.getInstance();\r\n                       \r\n                        target[prop]=instance;\r\n                        resolve(instance);  \r\n                        return;\r\n                           \r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n            reject(\"serverservice not found:\" + <string>prop);\r\n        });\r\n    }\r\n});  \r\n\r\nexport function $Serverservice(properties: ServerserviceProperties): Function {\r\n    return function (pclass) {\r\n        registry.register(\"$Serverservice\", pclass, properties);\r\n    }\r\n}\r\n \r\n\r\nvar doNotReloadModule=true;\r\nexport { serverservices,doNotReloadModule,runningServerservices};\r\n\r\n\r\n"]}