define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.test = void 0;
    class NumberParser {
        constructor(locale) {
            const parts = new Intl.NumberFormat(locale).formatToParts(12345.6);
            const numerals = [...new Intl.NumberFormat(locale, { useGrouping: false }).format(9876543210)].reverse();
            const index = new Map(numerals.map((d, i) => [d, i]));
            this._group = new RegExp(`[${parts.find(d => d.type === "group").value}]`, "g");
            this._decimal = new RegExp(`[${parts.find(d => d.type === "decimal").value}]`);
            this._numeral = new RegExp(`[${numerals.join("")}]`, "g");
            this._index = d => index.get(d);
        }
        parse(string) {
            return (string = string.trim()
                .replace(this._group, "")
                .replace(this._decimal, ".")
                .replace(this._numeral, this._index)) ? +string : NaN;
        }
    }
    function test() {
        var hh = new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).resolvedOptions();
        console.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(55.66));
        var hh2 = new Intl.NumberFormat("de-DE").format(12345678.90, { style: 'currency', currency: "EUR" });
        var ll = new NumberParser("de").parse("500 â‚¬");
    }
    exports.test = test;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVyRm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGUvTnVtYmVyRm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFDQSxNQUFNLFlBQVk7UUFDaEIsWUFBWSxNQUFNO1lBQ2hCLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2RyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxLQUFLLENBQUMsTUFBTTtZQUNWLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRTtpQkFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO2lCQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7aUJBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzFELENBQUM7S0FDRjtJQUNELFNBQWdCLElBQUk7UUFDaEIsSUFBSSxFQUFFLEdBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFaEcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsRyxJQUFJLEdBQUcsR0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7UUFDN0YsSUFBSSxFQUFFLEdBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRWpELENBQUM7SUFQRCxvQkFPQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jbGFzcyBOdW1iZXJQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSkge1xyXG4gICAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlKS5mb3JtYXRUb1BhcnRzKDEyMzQ1LjYpO1xyXG4gICAgY29uc3QgbnVtZXJhbHMgPSBbLi4ubmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwge3VzZUdyb3VwaW5nOiBmYWxzZX0pLmZvcm1hdCg5ODc2NTQzMjEwKV0ucmV2ZXJzZSgpO1xyXG4gICAgY29uc3QgaW5kZXggPSBuZXcgTWFwKG51bWVyYWxzLm1hcCgoZCwgaSkgPT4gW2QsIGldKSk7XHJcbiAgICB0aGlzLl9ncm91cCA9IG5ldyBSZWdFeHAoYFske3BhcnRzLmZpbmQoZCA9PiBkLnR5cGUgPT09IFwiZ3JvdXBcIikudmFsdWV9XWAsIFwiZ1wiKTtcclxuICAgIHRoaXMuX2RlY2ltYWwgPSBuZXcgUmVnRXhwKGBbJHtwYXJ0cy5maW5kKGQgPT4gZC50eXBlID09PSBcImRlY2ltYWxcIikudmFsdWV9XWApO1xyXG4gICAgdGhpcy5fbnVtZXJhbCA9IG5ldyBSZWdFeHAoYFske251bWVyYWxzLmpvaW4oXCJcIil9XWAsIFwiZ1wiKTtcclxuICAgIHRoaXMuX2luZGV4ID0gZCA9PiBpbmRleC5nZXQoZCk7XHJcbiAgfVxyXG4gIHBhcnNlKHN0cmluZykge1xyXG4gICAgcmV0dXJuIChzdHJpbmcgPSBzdHJpbmcudHJpbSgpXHJcbiAgICAgIC5yZXBsYWNlKHRoaXMuX2dyb3VwLCBcIlwiKVxyXG4gICAgICAucmVwbGFjZSh0aGlzLl9kZWNpbWFsLCBcIi5cIilcclxuICAgICAgLnJlcGxhY2UodGhpcy5fbnVtZXJhbCwgdGhpcy5faW5kZXgpKSA/ICtzdHJpbmcgOiBOYU47XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0ZXN0KCl7XHJcbiAgICB2YXIgaGg9bmV3IEludGwuTnVtYmVyRm9ybWF0KCdkZS1ERScsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiAnRVVSJyB9KS5yZXNvbHZlZE9wdGlvbnMoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2RlLURFJywgeyBzdHlsZTogJ2N1cnJlbmN5JywgY3VycmVuY3k6ICdFVVInIH0pLmZvcm1hdCg1NS42NikpO1xyXG4gICAgdmFyIGhoMj1uZXcgSW50bC5OdW1iZXJGb3JtYXQoXCJkZS1ERVwiKS5mb3JtYXQoMTIzNDU2NzguOTAse3N0eWxlOiAnY3VycmVuY3knLGN1cnJlbmN5OlwiRVVSXCJ9KVxyXG4gICAgdmFyIGxsPW5ldyBOdW1iZXJQYXJzZXIoXCJkZVwiKS5wYXJzZShcIjUwMCDigqxcIik7XHJcblxyXG59Il19