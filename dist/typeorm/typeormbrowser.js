#!/usr/bin/env node
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("typeorm/cli", ["require", "exports", "yargs", "./commands/SchemaSyncCommand", "./commands/SchemaDropCommand", "./commands/QueryCommand", "./commands/EntityCreateCommand", "./commands/MigrationCreateCommand", "./commands/MigrationRunCommand", "./commands/MigrationRevertCommand", "./commands/MigrationShowCommand", "./commands/SubscriberCreateCommand", "./commands/SchemaLogCommand", "./commands/MigrationGenerateCommand", "./commands/VersionCommand", "./commands/InitCommand", "./commands/CacheClearCommand", "reflect-metadata"], function (require, exports, yargs_1, SchemaSyncCommand_1, SchemaDropCommand_1, QueryCommand_1, EntityCreateCommand_1, MigrationCreateCommand_1, MigrationRunCommand_1, MigrationRevertCommand_1, MigrationShowCommand_1, SubscriberCreateCommand_1, SchemaLogCommand_1, MigrationGenerateCommand_1, VersionCommand_1, InitCommand_1, CacheClearCommand_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    yargs_1.default
        .usage("Usage: $0 <command> [options]")
        .command(new SchemaSyncCommand_1.SchemaSyncCommand())
        .command(new SchemaLogCommand_1.SchemaLogCommand())
        .command(new SchemaDropCommand_1.SchemaDropCommand())
        .command(new QueryCommand_1.QueryCommand())
        .command(new EntityCreateCommand_1.EntityCreateCommand())
        .command(new SubscriberCreateCommand_1.SubscriberCreateCommand())
        .command(new MigrationCreateCommand_1.MigrationCreateCommand())
        .command(new MigrationGenerateCommand_1.MigrationGenerateCommand())
        .command(new MigrationRunCommand_1.MigrationRunCommand())
        .command(new MigrationShowCommand_1.MigrationShowCommand())
        .command(new MigrationRevertCommand_1.MigrationRevertCommand())
        .command(new VersionCommand_1.VersionCommand())
        .command(new CacheClearCommand_1.CacheClearCommand())
        .command(new InitCommand_1.InitCommand())
        .recommendCommands()
        .demandCommand(1)
        .strict()
        .alias("v", "version")
        .help("h")
        .alias("h", "help")
        .argv;
    require("yargonaut")
        .style("blue")
        .style("yellow", "required")
        .helpStyle("green")
        .errorsStyle("red");
});
define("typeorm/container", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFromContainer = exports.useContainer = void 0;
    /**
     * Container to be used by this library for inversion control. If container was not implicitly set then by default
     * container simply creates a new instance of the given class.
     */
    const defaultContainer = new (class {
        constructor() {
            this.instances = [];
        }
        get(someClass) {
            let instance = this.instances.find(i => i.type === someClass);
            if (!instance) {
                instance = { type: someClass, object: new someClass() };
                this.instances.push(instance);
            }
            return instance.object;
        }
    })();
    let userContainer;
    let userContainerOptions;
    /**
     * Sets container to be used by this library.
     */
    function useContainer(iocContainer, options) {
        userContainer = iocContainer;
        userContainerOptions = options;
    }
    exports.useContainer = useContainer;
    /**
     * Gets the IOC container used by this library.
     */
    function getFromContainer(someClass) {
        if (userContainer) {
            try {
                const instance = userContainer.get(someClass);
                if (instance)
                    return instance;
                if (!userContainerOptions || !userContainerOptions.fallback)
                    return instance;
            }
            catch (error) {
                if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
                    throw error;
            }
        }
        return defaultContainer.get(someClass);
    }
    exports.getFromContainer = getFromContainer;
});
define("typeorm/schema-builder/options/TableColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/table/TableColumn", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableColumn = void 0;
    /**
     * Table's columns in the database represented in this class.
     */
    class TableColumn {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Indicates if column is NULL, or is NOT NULL in the database.
             */
            this.isNullable = false;
            /**
             * Indicates if column is auto-generated sequence.
             */
            this.isGenerated = false;
            /**
             * Indicates if column is a primary key.
             */
            this.isPrimary = false;
            /**
             * Indicates if column has unique value.
             */
            this.isUnique = false;
            /**
             * Indicates if column stores array.
             */
            this.isArray = false;
            /**
             * Column type's length. Used only on some column types.
             * For example type = "string" and length = "100" means that ORM will create a column with type varchar(100).
             */
            this.length = "";
            /**
             * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.
             * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
             */
            this.zerofill = false;
            /**
             * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.
             */
            this.unsigned = false;
            if (options) {
                this.name = options.name;
                this.type = options.type || "";
                this.length = options.length || "";
                this.width = options.width;
                this.charset = options.charset;
                this.collation = options.collation;
                this.precision = options.precision;
                this.scale = options.scale;
                this.zerofill = options.zerofill || false;
                this.unsigned = this.zerofill ? true : (options.unsigned || false);
                this.default = options.default;
                this.onUpdate = options.onUpdate;
                this.isNullable = options.isNullable || false;
                this.isGenerated = options.isGenerated || false;
                this.generationStrategy = options.generationStrategy;
                this.isPrimary = options.isPrimary || false;
                this.isUnique = options.isUnique || false;
                this.isArray = options.isArray || false;
                this.comment = options.comment;
                this.enum = options.enum;
                this.enumName = options.enumName;
                this.asExpression = options.asExpression;
                this.generatedType = options.generatedType;
                this.spatialFeatureType = options.spatialFeatureType;
                this.srid = options.srid;
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Clones this column to a new column with exact same properties as this column has.
         */
        clone() {
            return new TableColumn({
                name: this.name,
                type: this.type,
                length: this.length,
                width: this.width,
                charset: this.charset,
                collation: this.collation,
                precision: this.precision,
                scale: this.scale,
                zerofill: this.zerofill,
                unsigned: this.unsigned,
                enum: this.enum,
                enumName: this.enumName,
                asExpression: this.asExpression,
                generatedType: this.generatedType,
                default: this.default,
                onUpdate: this.onUpdate,
                isNullable: this.isNullable,
                isGenerated: this.isGenerated,
                generationStrategy: this.generationStrategy,
                isPrimary: this.isPrimary,
                isUnique: this.isUnique,
                isArray: this.isArray,
                comment: this.comment,
                spatialFeatureType: this.spatialFeatureType,
                srid: this.srid
            });
        }
    }
    exports.TableColumn = TableColumn;
});
define("typeorm/common/ObjectLiteral", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaIndexOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/types/ColumnTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ValueTransformer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/SpatialColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/JoinColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/RelationTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/JoinTableMultipleColumnsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/DeferrableType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/OnDeleteType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/OnUpdateType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaRelationOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/OrderByCondition", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/TableTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaUniqueOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaCheckOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaExclusionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntitySchemaOptions = void 0;
    /**
     * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
     */
    class EntitySchemaOptions {
    }
    exports.EntitySchemaOptions = EntitySchemaOptions;
});
define("typeorm/entity-schema/EntitySchema", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntitySchema = void 0;
    /**
     * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
     */
    class EntitySchema {
        constructor(options) {
            this.options = options;
        }
    }
    exports.EntitySchema = EntitySchema;
});
define("typeorm/logger/LoggerOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/naming-strategy/NamingStrategyInterface", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/types/DatabaseType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/logger/Logger", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/cache/QueryResultCacheOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/cache/QueryResultCache", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/connection/BaseConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/postgres/PostgresConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/postgres/PostgresConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/error/ConnectionIsNotSetError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionIsNotSetError = void 0;
    /**
     * Thrown when user tries to execute operation that requires connection to be established.
     */
    class ConnectionIsNotSetError extends Error {
        constructor(dbType) {
            super();
            this.name = "ConnectionIsNotSetError";
            Object.setPrototypeOf(this, ConnectionIsNotSetError.prototype);
            this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;
        }
    }
    exports.ConnectionIsNotSetError = ConnectionIsNotSetError;
});
define("typeorm/error/DriverPackageNotInstalledError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DriverPackageNotInstalledError = void 0;
    /**
     * Thrown when required driver's package is not installed.
     */
    class DriverPackageNotInstalledError extends Error {
        constructor(driverName, packageName) {
            super();
            this.name = "DriverPackageNotInstalledError";
            Object.setPrototypeOf(this, DriverPackageNotInstalledError.prototype);
            this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;
        }
    }
    exports.DriverPackageNotInstalledError = DriverPackageNotInstalledError;
});
define("typeorm/metadata/ForeignKeyMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ForeignKeyMetadata = void 0;
    /**
     * Contains all information about entity's foreign key.
     */
    class ForeignKeyMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Array of columns of this foreign key.
             */
            this.columns = [];
            /**
             * Array of referenced columns.
             */
            this.referencedColumns = [];
            /**
             * Gets array of column names.
             */
            this.columnNames = [];
            /**
             * Gets array of referenced column names.
             */
            this.referencedColumnNames = [];
            this.entityMetadata = options.entityMetadata;
            this.referencedEntityMetadata = options.referencedEntityMetadata;
            this.columns = options.columns;
            this.referencedColumns = options.referencedColumns;
            this.onDelete = options.onDelete || "NO ACTION";
            this.onUpdate = options.onUpdate || "NO ACTION";
            this.deferrable = options.deferrable;
            if (options.namingStrategy)
                this.build(options.namingStrategy);
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend foreign key properties.
         * Must be called after all entity metadatas and their columns are built.
         */
        build(namingStrategy) {
            this.columnNames = this.columns.map(column => column.databaseName);
            this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);
            this.referencedTablePath = this.referencedEntityMetadata.tablePath;
            this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);
        }
    }
    exports.ForeignKeyMetadata = ForeignKeyMetadata;
});
define("typeorm/decorator/options/RelationOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/PropertyTypeInFunction", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/RelationTypeInFunction", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/RelationMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/RelationMetadata", ["require", "exports", "typeorm/metadata/EntityMetadata"], function (require, exports, EntityMetadata_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationMetadata = void 0;
    /**
     * Contains all information about some entity's relation.
     */
    class RelationMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.
             */
            this.isTreeParent = false;
            /**
             * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.
             */
            this.isTreeChildren = false;
            /**
             * Indicates if this relation's column is a primary key.
             * Can be used only for many-to-one and owner one-to-one relations.
             */
            this.isPrimary = false;
            /**
             * Indicates if this relation is lazily loaded.
             */
            this.isLazy = false;
            /**
             * Indicates if this relation is eagerly loaded.
             */
            this.isEager = false;
            /**
             * Indicates if persistence is enabled for the relation.
             * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.
             * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.
             * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.
             */
            this.persistenceEnabled = true;
            /**
             * If set to true then related objects are allowed to be inserted to the database.
             */
            this.isCascadeInsert = false;
            /**
             * If set to true then related objects are allowed to be updated in the database.
             */
            this.isCascadeUpdate = false;
            /**
             * If set to true then related objects are allowed to be remove from the database.
             */
            this.isCascadeRemove = false;
            /**
             * If set to true then related objects are allowed to be soft-removed from the database.
             */
            this.isCascadeSoftRemove = false;
            /**
             * If set to true then related objects are allowed to be recovered from the database.
             */
            this.isCascadeRecover = false;
            /**
             * Indicates if relation column value can be nullable or not.
             */
            this.isNullable = true;
            /**
             * Indicates whether foreign key constraints will be created for join columns.
             * Can be used only for many-to-one and owner one-to-one relations.
             * Defaults to true.
             */
            this.createForeignKeyConstraints = true;
            /**
             * Indicates if this side is an owner of this relation.
             */
            this.isOwning = false;
            /**
             * Checks if this relation's type is "one-to-one".
             */
            this.isOneToOne = false;
            /**
             * Checks if this relation is owner side of the "one-to-one" relation.
             * Owner side means this side of relation has a join column in the table.
             */
            this.isOneToOneOwner = false;
            /**
             * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).
             */
            this.isWithJoinColumn = false;
            /**
             * Checks if this relation is NOT owner side of the "one-to-one" relation.
             * NOT owner side means this side of relation does not have a join column in the table.
             */
            this.isOneToOneNotOwner = false;
            /**
             * Checks if this relation's type is "one-to-many".
             */
            this.isOneToMany = false;
            /**
             * Checks if this relation's type is "many-to-one".
             */
            this.isManyToOne = false;
            /**
             * Checks if this relation's type is "many-to-many".
             */
            this.isManyToMany = false;
            /**
             * Checks if this relation's type is "many-to-many", and is owner side of the relationship.
             * Owner side means this side of relation has a join table.
             */
            this.isManyToManyOwner = false;
            /**
             * Checks if this relation's type is "many-to-many", and is NOT owner side of the relationship.
             * Not owner side means this side of relation does not have a join table.
             */
            this.isManyToManyNotOwner = false;
            /**
             * Foreign keys created for this relation.
             */
            this.foreignKeys = [];
            /**
             * Join table columns.
             * Join columns can be obtained only from owner side of the relation.
             * From non-owner side of the relation join columns will be empty.
             * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.
             * If this relation is many-to-many then it takes all owner join columns from the junction entity.
             */
            this.joinColumns = [];
            /**
             * Inverse join table columns.
             * Inverse join columns are supported only for many-to-many relations
             * and can be obtained only from owner side of the relation.
             * From non-owner side of the relation join columns will be undefined.
             */
            this.inverseJoinColumns = [];
            this.entityMetadata = options.entityMetadata;
            this.embeddedMetadata = options.embeddedMetadata;
            const args = options.args;
            this.target = args.target;
            this.propertyName = args.propertyName;
            this.relationType = args.relationType;
            if (args.inverseSideProperty)
                this.givenInverseSidePropertyFactory = args.inverseSideProperty;
            this.isLazy = args.isLazy || false;
            // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf("insert") !== -1);
            // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf("update") !== -1);
            // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf("remove") !== -1);
            // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf("soft-remove") !== -1);
            // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf("recover") !== -1);
            this.isCascadeInsert = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf("insert") !== -1);
            this.isCascadeUpdate = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf("update") !== -1);
            this.isCascadeRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf("remove") !== -1);
            this.isCascadeSoftRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf("soft-remove") !== -1);
            this.isCascadeRecover = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf("recover") !== -1);
            this.isPrimary = args.options.primary || false;
            this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;
            this.onDelete = args.options.onDelete;
            this.onUpdate = args.options.onUpdate;
            this.deferrable = args.options.deferrable;
            this.createForeignKeyConstraints = args.options.createForeignKeyConstraints === false ? false : true;
            this.isEager = args.options.eager || false;
            this.persistenceEnabled = args.options.persistence === false ? false : true;
            this.orphanedRowAction = args.options.orphanedRowAction || "nullify";
            this.isTreeParent = args.isTreeParent || false;
            this.isTreeChildren = args.isTreeChildren || false;
            this.type = args.type instanceof Function ? args.type() : args.type;
            this.isOneToOne = this.relationType === "one-to-one";
            this.isOneToMany = this.relationType === "one-to-many";
            this.isManyToOne = this.relationType === "many-to-one";
            this.isManyToMany = this.relationType === "many-to-many";
            this.isOneToOneNotOwner = this.isOneToOne ? true : false;
            this.isManyToManyNotOwner = this.isManyToMany ? true : false;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Creates join column ids map from the given related entity ids array.
         */
        getRelationIdMap(entity) {
            const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;
            const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn);
            // console.log("entity", entity);
            // console.log("referencedColumns", referencedColumns);
            return EntityMetadata_1.EntityMetadata.getValueMap(entity, referencedColumns);
        }
        /**
         * Ensures that given object is an entity id map.
         * If given id is an object then it means its already id map.
         * If given id isn't an object then it means its a value of the id column
         * and it creates a new id map with this value and name of the primary column.
         */
        ensureRelationIdMap(id) {
            if (id instanceof Object)
                return id;
            const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;
            const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn);
            if (referencedColumns.length > 1)
                throw new Error(`Cannot create relation id map for a single value because relation contains multiple referenced columns.`);
            return referencedColumns[0].createValueMap(id);
        }
        /**
         * Extracts column value from the given entity.
         * If column is in embedded (or recursive embedded) it extracts its value from there.
         */
        getEntityValue(entity, getLazyRelationsPromiseValue = false) {
            if (entity === null || entity === undefined)
                return undefined;
            // extract column value from embeddeds of entity if column is in embedded
            if (this.embeddedMetadata) {
                // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
                // we need to get value of "id" column from the post real entity object
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const propertyNames = [...this.embeddedMetadata.parentPropertyNames];
                // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters
                // this recursive function takes array of generated property names and gets the post[data][information][counters] embed
                const extractEmbeddedColumnValue = (propertyNames, value) => {
                    const propertyName = propertyNames.shift();
                    if (propertyName) {
                        if (value[propertyName]) {
                            return extractEmbeddedColumnValue(propertyNames, value[propertyName]);
                        }
                        return undefined;
                    }
                    return value;
                };
                // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]
                const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);
                if (this.isLazy) {
                    if (embeddedObject["__" + this.propertyName + "__"] !== undefined)
                        return embeddedObject["__" + this.propertyName + "__"];
                    if (getLazyRelationsPromiseValue === true)
                        return embeddedObject[this.propertyName];
                    return undefined;
                }
                return embeddedObject ? embeddedObject[this.isLazy ? "__" + this.propertyName + "__" : this.propertyName] : undefined;
            }
            else { // no embeds - no problems. Simply return column name by property name of the entity
                if (this.isLazy) {
                    if (entity["__" + this.propertyName + "__"] !== undefined)
                        return entity["__" + this.propertyName + "__"];
                    if (getLazyRelationsPromiseValue === true)
                        return entity[this.propertyName];
                    return undefined;
                }
                return entity[this.propertyName];
            }
        }
        /**
         * Sets given entity's relation's value.
         * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.
         *
         * If merge is set to true, it merges given value into currently
         */
        setEntityValue(entity, value) {
            const propertyName = this.isLazy ? "__" + this.propertyName + "__" : this.propertyName;
            if (this.embeddedMetadata) {
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const extractEmbeddedColumnValue = (embeddedMetadatas, map) => {
                    // if (!object[embeddedMetadata.propertyName])
                    //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();
                    const embeddedMetadata = embeddedMetadatas.shift();
                    if (embeddedMetadata) {
                        if (!map[embeddedMetadata.propertyName])
                            map[embeddedMetadata.propertyName] = embeddedMetadata.create();
                        extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);
                        return map;
                    }
                    map[propertyName] = value;
                    return map;
                };
                return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);
            }
            else {
                entity[propertyName] = value;
            }
        }
        /**
         * Creates entity id map from the given entity ids array.
         */
        createValueMap(value) {
            // extract column value from embeds of entity if column is in embedded
            if (this.embeddedMetadata) {
                // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
                // we need to get value of "id" column from the post real entity object and return it in a
                // { data: { information: { counters: { id: ... } } } } format
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const propertyNames = [...this.embeddedMetadata.parentPropertyNames];
                // now need to access post[data][information][counters] to get column value from the counters
                // and on each step we need to create complex literal object, e.g. first { data },
                // then { data: { information } }, then { data: { information: { counters } } },
                // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
                // this recursive function helps doing that
                const extractEmbeddedColumnValue = (propertyNames, map) => {
                    const propertyName = propertyNames.shift();
                    if (propertyName) {
                        map[propertyName] = {};
                        extractEmbeddedColumnValue(propertyNames, map[propertyName]);
                        return map;
                    }
                    map[this.propertyName] = value;
                    return map;
                };
                return extractEmbeddedColumnValue(propertyNames, {});
            }
            else { // no embeds - no problems. Simply return column property name and its value of the entity
                return { [this.propertyName]: value };
            }
        }
        // ---------------------------------------------------------------------
        // Builder Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend relation metadata properties.
         * This builder method should be used only after embedded metadata tree was build.
         */
        build() {
            this.propertyPath = this.buildPropertyPath();
        }
        /**
         * Registers given foreign keys in the relation.
         * This builder method should be used to register foreign key in the relation.
         */
        registerForeignKeys(...foreignKeys) {
            this.foreignKeys.push(...foreignKeys);
        }
        /**
         * Registers given join columns in the relation.
         * This builder method should be used to register join column in the relation.
         */
        registerJoinColumns(joinColumns = [], inverseJoinColumns = []) {
            this.joinColumns = joinColumns;
            this.inverseJoinColumns = inverseJoinColumns;
            this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);
            this.isOneToOneOwner = this.isOneToOne && this.isOwning;
            this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;
            this.isManyToManyOwner = this.isManyToMany && this.isOwning;
            this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;
            this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;
        }
        /**
         * Registers a given junction entity metadata.
         * This builder method can be called after junction entity metadata for the many-to-many relation was created.
         */
        registerJunctionEntityMetadata(junctionEntityMetadata) {
            this.junctionEntityMetadata = junctionEntityMetadata;
            this.joinTableName = junctionEntityMetadata.tableName;
            if (this.inverseRelation) {
                this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;
                this.joinTableName = junctionEntityMetadata.tableName;
            }
        }
        /**
         * Builds inverse side property path based on given inverse side property factory.
         * This builder method should be used only after properties map of the inverse entity metadata was build.
         */
        buildInverseSidePropertyPath() {
            if (this.givenInverseSidePropertyFactory) {
                const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;
                if (typeof this.givenInverseSidePropertyFactory === "function")
                    return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);
                if (typeof this.givenInverseSidePropertyFactory === "string")
                    return this.givenInverseSidePropertyFactory;
            }
            else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {
                return this.entityMetadata.treeChildrenRelation.propertyName;
            }
            else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {
                return this.entityMetadata.treeParentRelation.propertyName;
            }
            return "";
        }
        /**
         * Builds relation's property path based on its embedded tree.
         */
        buildPropertyPath() {
            if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)
                return this.propertyName;
            return this.embeddedMetadata.parentPropertyNames.join(".") + "." + this.propertyName;
        }
    }
    exports.RelationMetadata = RelationMetadata;
});
define("typeorm/metadata-args/EmbeddedMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/platform/PlatformTools", ["require", "exports", "path", "fs", "dotenv", "chalk", "cli-highlight", "fs", "events", "stream"], function (require, exports, path, fs, dotenv_1, chalk_1, cli_highlight_1, fs_1, events_1, stream_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlatformTools = exports.Writable = exports.Readable = exports.EventEmitter = exports.ReadStream = void 0;
    Object.defineProperty(exports, "ReadStream", { enumerable: true, get: function () { return fs_1.ReadStream; } });
    Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function () { return events_1.EventEmitter; } });
    Object.defineProperty(exports, "Readable", { enumerable: true, get: function () { return stream_1.Readable; } });
    Object.defineProperty(exports, "Writable", { enumerable: true, get: function () { return stream_1.Writable; } });
    /**
     * Platform-specific tools.
     */
    class PlatformTools {
        /**
         * Gets global variable where global stuff can be stored.
         */
        static getGlobalVariable() {
            return global;
        }
        /**
         * Loads ("require"-s) given file or package.
         * This operation only supports on node platform
         */
        static load(name) {
            // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
            // this is useful when we are using typeorm package globally installed and it accesses drivers
            // that are not installed globally
            try {
                // switch case to explicit require statements for webpack compatibility.
                switch (name) {
                    /**
                    * mongodb
                    */
                    case "mongodb":
                        return require("mongodb");
                    /**
                    * hana
                    */
                    case "@sap/hana-client":
                        return require("@sap/hana-client");
                    case "hdb-pool":
                        return require("hdb-pool");
                    /**
                    * mysql
                    */
                    case "mysql":
                        return require("mysql");
                    case "mysql2":
                        return require("mysql2");
                    /**
                    * oracle
                    */
                    case "oracledb":
                        return require("oracledb");
                    /**
                    * postgres
                    */
                    case "pg":
                        return require("pg");
                    case "pg-native":
                        return require("pg-native");
                    case "pg-query-stream":
                        return require("pg-query-stream");
                    case "typeorm-aurora-data-api-driver":
                        return require("typeorm-aurora-data-api-driver");
                    /**
                    * redis
                    */
                    case "redis":
                        return require("redis");
                    case "ioredis":
                        return require("ioredis");
                    /**
                     * better-sqlite3
                     */
                    case "better-sqlite3":
                        return require("better-sqlite3");
                    /**
                    * sqlite
                    */
                    case "sqlite3":
                        return require("sqlite3");
                    /**
                    * sql.js
                    */
                    case "sql.js":
                        return require("sql.js");
                    /**
                    * sqlserver
                    */
                    case "mssql":
                        return require("mssql");
                    /**
                     * react-native-sqlite
                     */
                    case "react-native-sqlite-storage":
                        return require("react-native-sqlite-storage");
                }
            }
            catch (err) {
                return require(path.resolve(process.cwd() + "/node_modules/" + name));
            }
            // If nothing above matched and we get here, the package was not listed within PlatformTools
            // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for
            // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw
            // an error.
            throw new TypeError(`Invalid Package for PlatformTools.load: ${name}`);
        }
        /**
         * Normalizes given path. Does "path.normalize".
         */
        static pathNormalize(pathStr) {
            return path.normalize(pathStr);
        }
        /**
         * Gets file extension. Does "path.extname".
         */
        static pathExtname(pathStr) {
            return path.extname(pathStr);
        }
        /**
         * Resolved given path. Does "path.resolve".
         */
        static pathResolve(pathStr) {
            return path.resolve(pathStr);
        }
        /**
         * Synchronously checks if file exist. Does "fs.existsSync".
         */
        static fileExist(pathStr) {
            return fs.existsSync(pathStr);
        }
        static readFileSync(filename) {
            return fs.readFileSync(filename);
        }
        static appendFileSync(filename, data) {
            fs.appendFileSync(filename, data);
        }
        static async writeFile(path, data) {
            return new Promise((ok, fail) => {
                fs.writeFile(path, data, (err) => {
                    if (err)
                        fail(err);
                    ok();
                });
            });
        }
        /**
         * Loads a dotenv file into the environment variables.
         *
         * @param path The file to load as a dotenv configuration
         */
        static dotenv(pathStr) {
            dotenv_1.default.config({ path: pathStr });
        }
        /**
         * Gets environment variable.
         */
        static getEnvVariable(name) {
            return process.env[name];
        }
        /**
         * Highlights sql string to be print in the console.
         */
        static highlightSql(sql) {
            const theme = {
                "keyword": chalk_1.default.blueBright,
                "literal": chalk_1.default.blueBright,
                "string": chalk_1.default.white,
                "type": chalk_1.default.magentaBright,
                "built_in": chalk_1.default.magentaBright,
                "comment": chalk_1.default.gray,
            };
            return cli_highlight_1.highlight(sql, { theme: theme, language: "sql" });
        }
        /**
         * Highlights json string to be print in the console.
         */
        static highlightJson(json) {
            return cli_highlight_1.highlight(json, { language: "json" });
        }
        /**
         * Logging functions needed by AdvancedConsoleLogger
         */
        static logInfo(prefix, info) {
            console.log(chalk_1.default.gray.underline(prefix), info);
        }
        static logError(prefix, error) {
            console.log(chalk_1.default.underline.red(prefix), error);
        }
        static logWarn(prefix, warning) {
            console.log(chalk_1.default.underline.yellow(prefix), warning);
        }
        static log(message) {
            console.log(chalk_1.default.underline(message));
        }
        static warn(message) {
            return chalk_1.default.yellow(message);
        }
    }
    exports.PlatformTools = PlatformTools;
    /**
     * Type of the currently running platform.
     */
    PlatformTools.type = "node";
});
define("typeorm/util/StringUtils", ["require", "exports", "sha.js"], function (require, exports, sha_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hash = exports.shorten = exports.abbreviate = exports.titleCase = exports.snakeCase = exports.camelCase = void 0;
    /**
     * Converts string into camelCase.
     *
     * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case
     */
    function camelCase(str, firstCapital = false) {
        return str.replace(/^([A-Z])|[\s-_](\w)/g, function (match, p1, p2, offset) {
            if (firstCapital === true && offset === 0)
                return p1;
            if (p2)
                return p2.toUpperCase();
            return p1.toLowerCase();
        });
    }
    exports.camelCase = camelCase;
    /**
     * Converts string into snake_case.
     *
     * @see https://regex101.com/r/QeSm2I/1
     */
    function snakeCase(str) {
        return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, "$1_$3$2$4").toLowerCase();
    }
    exports.snakeCase = snakeCase;
    /**
     * Converts string into Title Case.
     *
     * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript
     */
    function titleCase(str) {
        return str.replace(/\w\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
    }
    exports.titleCase = titleCase;
    /**
     * Builds abbreviated string from given string;
     */
    function abbreviate(str, abbrLettersCount = 1) {
        const words = str.replace(/([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g, "$1 $2").split(" ");
        return words.reduce((res, word) => {
            res += word.substr(0, abbrLettersCount);
            return res;
        }, "");
    }
    exports.abbreviate = abbreviate;
    /**
     * Shorten a given `input`. Useful for RDBMS imposing a limit on the
     * maximum length of aliases and column names in SQL queries.
     *
     * @param input String to be shortened.
     * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.
     *
     * @return Shortened `input`.
     *
     * @example
     * // returns: "UsShCa__orde__mark__dire"
     * shorten('UserShoppingCart__order__market__director')
     *
     * // returns: "cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam"
     * shorten(
     *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',
     *   { separator: '_', segmentLength: 3 }
     * )
     *
     * // equals: UsShCa__orde__mark_market_id
     * `${shorten('UserShoppingCart__order__market')}_market_id`
     */
    function shorten(input, options = {}) {
        const { segmentLength = 4, separator = "__", termLength = 2 } = options;
        const segments = input.split(separator);
        const shortSegments = segments.reduce((acc, val) => {
            // split the given segment into many terms based on an eventual camel cased name
            const segmentTerms = val.replace(/([a-z\xE0-\xFF])([A-Z\xC0-\xDF])/g, "$1 $2").split(" ");
            // "OrderItemList" becomes "OrItLi", while "company" becomes "comp"
            const length = segmentTerms.length > 1 ? termLength : segmentLength;
            const shortSegment = segmentTerms.map(term => term.substr(0, length)).join("");
            acc.push(shortSegment);
            return acc;
        }, []);
        return shortSegments.join(separator);
    }
    exports.shorten = shorten;
    /**
     * Returns a hashed input.
     *
     * @param input String to be hashed.
     * @param options.length Optionally, shorten the output to desired length.
     */
    function hash(input, options = {}) {
        const hashFunction = sha_js_1.default("sha256");
        hashFunction.update(input, "utf8");
        const hashedInput = hashFunction.digest("hex");
        if (options.length) {
            return hashedInput.slice(0, options.length);
        }
        return hashedInput;
    }
    exports.hash = hash;
});
define("typeorm/driver/DriverUtils", ["require", "exports", "typeorm/util/StringUtils"], function (require, exports, StringUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DriverUtils = void 0;
    /**
     * Common driver utility functions.
     */
    class DriverUtils {
        // -------------------------------------------------------------------------
        // Public Static Methods
        // -------------------------------------------------------------------------
        /**
         * Normalizes and builds a new driver options.
         * Extracts settings from connection url and sets to a new options object.
         */
        static buildDriverOptions(options, buildOptions) {
            if (options.url) {
                const urlDriverOptions = this.parseConnectionUrl(options.url);
                if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {
                    urlDriverOptions.sid = urlDriverOptions.database;
                }
                for (const key of Object.keys(urlDriverOptions)) {
                    if (typeof urlDriverOptions[key] === "undefined") {
                        delete urlDriverOptions[key];
                    }
                }
                return Object.assign({}, options, urlDriverOptions);
            }
            return Object.assign({}, options);
        }
        /**
         * buildDriverOptions for MongodDB only to support replica set
         */
        static buildMongoDBDriverOptions(options, buildOptions) {
            if (options.url) {
                const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);
                if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {
                    urlDriverOptions.sid = urlDriverOptions.database;
                }
                for (const key of Object.keys(urlDriverOptions)) {
                    if (typeof urlDriverOptions[key] === "undefined") {
                        delete urlDriverOptions[key];
                    }
                }
                return Object.assign({}, options, urlDriverOptions);
            }
            return Object.assign({}, options);
        }
        /**
         * Builds column alias from given alias name and column name.
         *
         * If alias length is greater than the limit (if any) allowed by the current
         * driver, replaces it with a hashed string.
         *
         * @param driver Current `Driver`.
         * @param alias Alias part.
         * @param column Name of the column to be concatened to `alias`.
         *
         * @return An alias allowing to select/transform the target `column`.
         */
        static buildColumnAlias({ maxAliasLength }, alias, column) {
            const columnAliasName = alias + "_" + column;
            if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength) {
                return StringUtils_1.hash(columnAliasName, { length: maxAliasLength });
            }
            return columnAliasName;
        }
        // -------------------------------------------------------------------------
        // Private Static Methods
        // -------------------------------------------------------------------------
        /**
         * Extracts connection data from the connection url.
         */
        static parseConnectionUrl(url) {
            const type = url.split(":")[0];
            const firstSlashes = url.indexOf("//");
            const preBase = url.substr(firstSlashes + 2);
            const secondSlash = preBase.indexOf("/");
            const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;
            let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;
            // remove mongodb query params
            if (afterBase && afterBase.indexOf("?") !== -1) {
                afterBase = afterBase.substr(0, afterBase.indexOf("?"));
            }
            const lastAtSign = base.lastIndexOf("@");
            const usernameAndPassword = base.substr(0, lastAtSign);
            const hostAndPort = base.substr(lastAtSign + 1);
            let username = usernameAndPassword;
            let password = "";
            const firstColon = usernameAndPassword.indexOf(":");
            if (firstColon !== -1) {
                username = usernameAndPassword.substr(0, firstColon);
                password = usernameAndPassword.substr(firstColon + 1);
            }
            const [host, port] = hostAndPort.split(":");
            return {
                type: type,
                host: host,
                username: decodeURIComponent(username),
                password: decodeURIComponent(password),
                port: port ? parseInt(port) : undefined,
                database: afterBase || undefined
            };
        }
        /**
         * Extracts connection data from the connection url for MongoDB to support replica set.
         */
        static parseMongoDBConnectionUrl(url) {
            const type = url.split(":")[0];
            const firstSlashes = url.indexOf("//");
            const preBase = url.substr(firstSlashes + 2);
            const secondSlash = preBase.indexOf("/");
            const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;
            let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;
            let afterQuestionMark = "";
            let host = undefined;
            let port = undefined;
            let hostReplicaSet = undefined;
            let replicaSet = undefined;
            // remove mongodb query params
            if (afterBase && afterBase.indexOf("?") !== -1) {
                // split params to get replica set
                afterQuestionMark = afterBase.substr((afterBase.indexOf("?") + 1), afterBase.length);
                replicaSet = afterQuestionMark.split("=")[1];
                afterBase = afterBase.substr(0, afterBase.indexOf("?"));
            }
            const lastAtSign = base.lastIndexOf("@");
            const usernameAndPassword = base.substr(0, lastAtSign);
            const hostAndPort = base.substr(lastAtSign + 1);
            let username = usernameAndPassword;
            let password = "";
            const firstColon = usernameAndPassword.indexOf(":");
            if (firstColon !== -1) {
                username = usernameAndPassword.substr(0, firstColon);
                password = usernameAndPassword.substr(firstColon + 1);
            }
            if (replicaSet) {
                hostReplicaSet = hostAndPort;
            }
            else {
                [host, port] = hostAndPort.split(":");
            }
            return {
                type: type,
                host: host,
                hostReplicaSet: hostReplicaSet,
                username: decodeURIComponent(username),
                password: decodeURIComponent(password),
                port: port ? parseInt(port) : undefined,
                database: afterBase || undefined,
                replicaSet: replicaSet || undefined
            };
        }
    }
    exports.DriverUtils = DriverUtils;
});
define("typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/cockroachdb/CockroachConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/util/DateUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateUtils = void 0;
    /**
     * Provides utilities to transform hydrated and persisted data.
     */
    class DateUtils {
        // -------------------------------------------------------------------------
        // Public Static Methods
        // -------------------------------------------------------------------------
        /**
         * Normalizes date object hydrated from the database.
         */
        static normalizeHydratedDate(mixedDate) {
            if (!mixedDate)
                return mixedDate;
            return typeof mixedDate === "string" ? new Date(mixedDate) : mixedDate;
        }
        /**
         * Converts given value into date string in a "YYYY-MM-DD" format.
         */
        static mixedDateToDateString(value) {
            if (value instanceof Date)
                return this.formatZerolessValue(value.getFullYear()) + "-" + this.formatZerolessValue(value.getMonth() + 1) + "-" + this.formatZerolessValue(value.getDate());
            return value;
        }
        /**
         * Converts given value into date object.
         */
        static mixedDateToDate(mixedDate, toUtc = false, useMilliseconds = true) {
            let date = typeof mixedDate === "string" ? new Date(mixedDate) : mixedDate;
            if (toUtc)
                date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
            if (!useMilliseconds)
                date.setUTCMilliseconds(0);
            return date;
        }
        /**
         * Converts given value into time string in a "HH:mm:ss" format.
         */
        static mixedDateToTimeString(value, skipSeconds = false) {
            if (value instanceof Date)
                return this.formatZerolessValue(value.getHours()) +
                    ":" + this.formatZerolessValue(value.getMinutes()) +
                    (!skipSeconds ? ":" + this.formatZerolessValue(value.getSeconds()) : "");
            return value;
        }
        /**
         * Converts given value into time string in a "HH:mm:ss" format.
         */
        static mixedTimeToDate(value) {
            if (typeof value === "string") {
                const [hours, minutes, seconds] = value.split(":");
                const date = new Date();
                if (hours)
                    date.setHours(parseInt(hours));
                if (minutes)
                    date.setMinutes(parseInt(minutes));
                if (seconds)
                    date.setSeconds(parseInt(seconds));
                return date;
            }
            return value;
        }
        /**
         * Converts given string value with "-" separator into a "HH:mm:ss" format.
         */
        static mixedTimeToString(value, skipSeconds = false) {
            value = value instanceof Date ? (value.getHours() + ":" + value.getMinutes() + (!skipSeconds ? ":" + value.getSeconds() : "")) : value;
            if (typeof value === "string") {
                return value.split(":")
                    .map(v => v.length === 1 ? "0" + v : v) // append zero at beginning if we have a first-zero-less number
                    .join(":");
            }
            return value;
        }
        /**
         * Converts given value into datetime string in a "YYYY-MM-DD HH-mm-ss" format.
         */
        static mixedDateToDatetimeString(value, useMilliseconds) {
            if (typeof value === "string") {
                value = new Date(value);
            }
            if (value instanceof Date) {
                let finalValue = this.formatZerolessValue(value.getFullYear()) + "-" +
                    this.formatZerolessValue(value.getMonth() + 1) + "-" +
                    this.formatZerolessValue(value.getDate()) + " " +
                    this.formatZerolessValue(value.getHours()) + ":" +
                    this.formatZerolessValue(value.getMinutes()) + ":" +
                    this.formatZerolessValue(value.getSeconds());
                if (useMilliseconds)
                    finalValue += `.${this.formatMilliseconds(value.getMilliseconds())}`;
                value = finalValue;
            }
            return value;
        }
        /**
         * Converts given value into utc datetime string in a "YYYY-MM-DD HH-mm-ss.sss" format.
         */
        static mixedDateToUtcDatetimeString(value) {
            if (typeof value === "string") {
                value = new Date(value);
            }
            if (value instanceof Date) {
                return this.formatZerolessValue(value.getUTCFullYear()) + "-" +
                    this.formatZerolessValue(value.getUTCMonth() + 1) + "-" +
                    this.formatZerolessValue(value.getUTCDate()) + " " +
                    this.formatZerolessValue(value.getUTCHours()) + ":" +
                    this.formatZerolessValue(value.getUTCMinutes()) + ":" +
                    this.formatZerolessValue(value.getUTCSeconds()) + "." +
                    this.formatMilliseconds(value.getUTCMilliseconds());
            }
            return value;
        }
        /**
         * Converts each item in the given array to string joined by "," separator.
         */
        static simpleArrayToString(value) {
            if (Array.isArray(value)) {
                return value
                    .map(i => String(i))
                    .join(",");
            }
            return value;
        }
        /**
         * Converts given string to simple array split by "," separator.
         */
        static stringToSimpleArray(value) {
            if (value instanceof String || typeof value === "string") {
                if (value.length > 0) {
                    return value.split(",");
                }
                else {
                    return [];
                }
            }
            return value;
        }
        static simpleJsonToString(value) {
            return JSON.stringify(value);
        }
        static stringToSimpleJson(value) {
            return typeof value === "string" ? JSON.parse(value) : value;
        }
        static simpleEnumToString(value) {
            return "" + value;
        }
        static stringToSimpleEnum(value, columnMetadata) {
            if (columnMetadata.enum
                && !isNaN(value)
                && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {
                // convert to number if that exists in poosible enum options
                value = parseInt(value);
            }
            return value;
        }
        // -------------------------------------------------------------------------
        // Private Static Methods
        // -------------------------------------------------------------------------
        /**
         * Formats given number to "0x" format, e.g. if it is 1 then it will return "01".
         */
        static formatZerolessValue(value) {
            if (value < 10)
                return "0" + value;
            return String(value);
        }
        /**
         * Formats given number to "0x" format, e.g. if it is 1 then it will return "01".
         */
        static formatMilliseconds(value) {
            if (value < 10) {
                return "00" + value;
            }
            else if (value < 100) {
                return "0" + value;
            }
            else {
                return String(value);
            }
        }
    }
    exports.DateUtils = DateUtils;
});
define("typeorm/driver/types/MappedColumnTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/types/DataTypeDefaults", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/util/OrmUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrmUtils = void 0;
    class OrmUtils {
        // -------------------------------------------------------------------------
        // Public methods
        // -------------------------------------------------------------------------
        /**
         * Chunks array into peaces.
         */
        static chunk(array, size) {
            return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {
                return array.slice(i * size, i * size + size);
            });
        }
        static splitClassesAndStrings(clsesAndStrings) {
            return [
                (clsesAndStrings).filter((cls) => typeof cls !== "string"),
                (clsesAndStrings).filter((str) => typeof str === "string"),
            ];
        }
        static groupBy(array, propertyCallback) {
            return array.reduce((groupedArray, value) => {
                const key = propertyCallback(value);
                let grouped = groupedArray.find(i => i.id === key);
                if (!grouped) {
                    grouped = { id: key, items: [] };
                    groupedArray.push(grouped);
                }
                grouped.items.push(value);
                return groupedArray;
            }, []);
        }
        static uniq(array, criteriaOrProperty) {
            return array.reduce((uniqueArray, item) => {
                let found = false;
                if (criteriaOrProperty instanceof Function) {
                    const itemValue = criteriaOrProperty(item);
                    found = !!uniqueArray.find(uniqueItem => criteriaOrProperty(uniqueItem) === itemValue);
                }
                else if (typeof criteriaOrProperty === "string") {
                    found = !!uniqueArray.find(uniqueItem => uniqueItem[criteriaOrProperty] === item[criteriaOrProperty]);
                }
                else {
                    found = uniqueArray.indexOf(item) !== -1;
                }
                if (!found)
                    uniqueArray.push(item);
                return uniqueArray;
            }, []);
        }
        static isObject(item) {
            return (item && typeof item === "object" && !Array.isArray(item));
        }
        /**
         * Deep Object.assign.
         *
         * @see http://stackoverflow.com/a/34749873
         */
        static mergeDeep(target, ...sources) {
            if (!sources.length)
                return target;
            const source = sources.shift();
            if (this.isObject(target) && this.isObject(source)) {
                for (const key in source) {
                    const value = source[key];
                    if (key === "__proto__" || value instanceof Promise)
                        continue;
                    if (this.isObject(value)
                        && !(value instanceof Map)
                        && !(value instanceof Set)
                        && !(value instanceof Date)
                        && !(value instanceof Buffer)
                        && !(value instanceof RegExp)) {
                        if (!target[key])
                            Object.assign(target, { [key]: Object.create(Object.getPrototypeOf(value)) });
                        this.mergeDeep(target[key], value);
                    }
                    else {
                        Object.assign(target, { [key]: value });
                    }
                }
            }
            return this.mergeDeep(target, ...sources);
        }
        /**
         * Deep compare objects.
         *
         * @see http://stackoverflow.com/a/1144249
         */
        static deepCompare(...args) {
            let i, l, leftChain, rightChain;
            if (arguments.length < 1) {
                return true; // Die silently? Don't know how to handle such case, please help...
                // throw "Need two or more arguments to compare";
            }
            for (i = 1, l = arguments.length; i < l; i++) {
                leftChain = []; // Todo: this can be cached
                rightChain = [];
                if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {
                    return false;
                }
            }
            return true;
        }
        /**
         * Check if two entity-id-maps are the same
         */
        static compareIds(firstId, secondId) {
            if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)
                return false;
            // Optimized version for the common case
            if (((typeof firstId.id === "string" && typeof secondId.id === "string") ||
                (typeof firstId.id === "number" && typeof secondId.id === "number")) &&
                Object.keys(firstId).length === 1 &&
                Object.keys(secondId).length === 1) {
                return firstId.id === secondId.id;
            }
            return OrmUtils.deepCompare(firstId, secondId);
        }
        /**
         * Transforms given value into boolean value.
         */
        static toBoolean(value) {
            if (typeof value === "boolean")
                return value;
            if (typeof value === "string")
                return value === "true" || value === "1";
            if (typeof value === "number")
                return value > 0;
            return false;
        }
        /**
         * Composes an object from the given array of keys and values.
         */
        static zipObject(keys, values) {
            return keys.reduce((object, column, index) => {
                object[column] = values[index];
                return object;
            }, {});
        }
        /**
         * Compares two arrays.
         */
        static isArraysEqual(arr1, arr2) {
            if (arr1.length !== arr2.length)
                return false;
            return arr1.every(element => {
                return arr2.indexOf(element) !== -1;
            });
        }
        // -------------------------------------------------------------------------
        // Private methods
        // -------------------------------------------------------------------------
        static compare2Objects(leftChain, rightChain, x, y) {
            let p;
            // remember that NaN === NaN returns false
            // and isNaN(undefined) returns true
            if (Number.isNaN(x) && Number.isNaN(y))
                return true;
            // Compare primitives and functions.
            // Check if both arguments link to the same object.
            // Especially useful on the step where we compare prototypes
            if (x === y)
                return true;
            // Unequal, but either is null or undefined (use case: jsonb comparasion)
            // PR #3776, todo: add tests
            if (x === null || y === null || x === undefined || y === undefined)
                return false;
            // Fix the buffer compare bug.
            // See: https://github.com/typeorm/typeorm/issues/3654
            if ((typeof x.equals === "function" || x.equals instanceof Function) && x.equals(y))
                return true;
            // Works in case when functions are created in constructor.
            // Comparing dates is a common scenario. Another built-ins?
            // We can even handle functions passed across iframes
            if ((typeof x === "function" && typeof y === "function") ||
                (x instanceof Date && y instanceof Date) ||
                (x instanceof RegExp && y instanceof RegExp) ||
                (x instanceof String && y instanceof String) ||
                (x instanceof Number && y instanceof Number))
                return x.toString() === y.toString();
            // At last checking prototypes as good as we can
            if (!(x instanceof Object && y instanceof Object))
                return false;
            if (x.isPrototypeOf(y) || y.isPrototypeOf(x))
                return false;
            if (x.constructor !== y.constructor)
                return false;
            if (x.prototype !== y.prototype)
                return false;
            // Check for infinitive linking loops
            if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)
                return false;
            // Quick checking of one object being a subset of another.
            // todo: cache the structure of arguments[0] for performance
            for (p in y) {
                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                    return false;
                }
                else if (typeof y[p] !== typeof x[p]) {
                    return false;
                }
            }
            for (p in x) {
                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
                    return false;
                }
                else if (typeof y[p] !== typeof x[p]) {
                    return false;
                }
                switch (typeof (x[p])) {
                    case "object":
                    case "function":
                        leftChain.push(x);
                        rightChain.push(y);
                        if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {
                            return false;
                        }
                        leftChain.pop();
                        rightChain.pop();
                        break;
                    default:
                        if (x[p] !== y[p]) {
                            return false;
                        }
                        break;
                }
            }
            return true;
        }
    }
    exports.OrmUtils = OrmUtils;
});
define("typeorm/error/TransactionAlreadyStartedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionAlreadyStartedError = void 0;
    /**
     * Thrown when transaction is already started and user tries to run it again.
     */
    class TransactionAlreadyStartedError extends Error {
        constructor() {
            super();
            this.name = "TransactionAlreadyStartedError";
            Object.setPrototypeOf(this, TransactionAlreadyStartedError.prototype);
            this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;
        }
    }
    exports.TransactionAlreadyStartedError = TransactionAlreadyStartedError;
});
define("typeorm/error/TransactionNotStartedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionNotStartedError = void 0;
    /**
     * Thrown when transaction is not started yet and user tries to run commit or rollback.
     */
    class TransactionNotStartedError extends Error {
        constructor() {
            super();
            this.name = "TransactionNotStartedError";
            Object.setPrototypeOf(this, TransactionNotStartedError.prototype);
            this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;
        }
    }
    exports.TransactionNotStartedError = TransactionNotStartedError;
});
define("typeorm/schema-builder/options/TableForeignKeyOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/table/TableForeignKey", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableForeignKey = void 0;
    /**
     * Foreign key from the database stored in this class.
     */
    class TableForeignKey {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Column names which included by this foreign key.
             */
            this.columnNames = [];
            /**
             * Column names which included by this foreign key.
             */
            this.referencedColumnNames = [];
            this.name = options.name;
            this.columnNames = options.columnNames;
            this.referencedColumnNames = options.referencedColumnNames;
            this.referencedTableName = options.referencedTableName;
            this.onDelete = options.onDelete;
            this.onUpdate = options.onUpdate;
            this.deferrable = options.deferrable;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new copy of this foreign key with exactly same properties.
         */
        clone() {
            return new TableForeignKey({
                name: this.name,
                columnNames: [...this.columnNames],
                referencedColumnNames: [...this.referencedColumnNames],
                referencedTableName: this.referencedTableName,
                onDelete: this.onDelete,
                onUpdate: this.onUpdate,
                deferrable: this.deferrable,
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new table foreign key from the given foreign key metadata.
         */
        static create(metadata) {
            return new TableForeignKey({
                name: metadata.name,
                columnNames: metadata.columnNames,
                referencedColumnNames: metadata.referencedColumnNames,
                referencedTableName: metadata.referencedTablePath,
                onDelete: metadata.onDelete,
                onUpdate: metadata.onUpdate,
                deferrable: metadata.deferrable,
            });
        }
    }
    exports.TableForeignKey = TableForeignKey;
});
define("typeorm/error/QueryRunnerAlreadyReleasedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryRunnerAlreadyReleasedError = void 0;
    /**
     */
    class QueryRunnerAlreadyReleasedError extends Error {
        constructor() {
            super();
            this.name = "QueryRunnerAlreadyReleasedError";
            Object.setPrototypeOf(this, QueryRunnerAlreadyReleasedError.prototype);
            this.message = `Query runner already released. Cannot run queries anymore.`;
        }
    }
    exports.QueryRunnerAlreadyReleasedError = QueryRunnerAlreadyReleasedError;
});
define("typeorm/schema-builder/options/ViewOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/view/View", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.View = void 0;
    /**
     * View in the database represented in this class.
     */
    class View {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            if (options) {
                this.name = options.name;
                this.expression = options.expression;
                this.materialized = !!options.materialized;
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Clones this table to a new table with all properties cloned.
         */
        clone() {
            return new View({
                name: this.name,
                expression: this.expression,
                materialized: this.materialized,
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates view from a given entity metadata.
         */
        static create(entityMetadata, driver) {
            const options = {
                name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),
                expression: entityMetadata.expression,
                materialized: entityMetadata.tableMetadataArgs.materialized
            };
            return new View(options);
        }
    }
    exports.View = View;
});
define("typeorm/driver/Query", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Query = void 0;
    /**
     * This class stores query and its parameters
     */
    class Query {
        constructor(query, parameters) {
            this.query = query;
            this.parameters = parameters;
        }
    }
    exports.Query = Query;
});
define("typeorm/util/ObjectUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectUtils = void 0;
    class ObjectUtils {
        /**
         * Copy the values of all of the enumerable own properties from one or more source objects to a
         * target object. Returns the target object.
         * @param target The target object to copy to.
         * @param sources One or more source objects from which to copy properties
         */
        static assign(target, ...sources) {
            for (const source of sources) {
                for (const prop of Object.getOwnPropertyNames(source)) {
                    target[prop] = source[prop];
                }
            }
        }
    }
    exports.ObjectUtils = ObjectUtils;
});
define("typeorm/error/QueryFailedError", ["require", "exports", "typeorm/util/ObjectUtils"], function (require, exports, ObjectUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryFailedError = void 0;
    /**
     * Thrown when query execution has failed.
    */
    class QueryFailedError extends Error {
        constructor(query, parameters, driverError) {
            super();
            Object.setPrototypeOf(this, QueryFailedError.prototype);
            this.message = driverError.toString()
                .replace(/^error: /, "")
                .replace(/^Error: /, "")
                .replace(/^Request/, "");
            ObjectUtils_1.ObjectUtils.assign(this, Object.assign(Object.assign({}, driverError), { name: "QueryFailedError", query: query, parameters: parameters || [] }));
        }
    }
    exports.QueryFailedError = QueryFailedError;
});
define("typeorm/common/EntityFieldsNames", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/JoinOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/FindOperatorType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/FindOperator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FindOperator = void 0;
    /**
     * Find Operator used in Find Conditions.
     */
    class FindOperator {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(type, value, useParameter = true, multipleParameters = false, getSql, objectLiteralParameters) {
            this._type = type;
            this._value = value;
            this._useParameter = useParameter;
            this._multipleParameters = multipleParameters;
            this._getSql = getSql;
            this._objectLiteralParameters = objectLiteralParameters;
        }
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        /**
         * Indicates if parameter is used or not for this operator.
         * Extracts final value if value is another find operator.
         */
        get useParameter() {
            if (this._value instanceof FindOperator)
                return this._value.useParameter;
            return this._useParameter;
        }
        /**
         * Indicates if multiple parameters must be used for this operator.
         * Extracts final value if value is another find operator.
         */
        get multipleParameters() {
            if (this._value instanceof FindOperator)
                return this._value.multipleParameters;
            return this._multipleParameters;
        }
        /**
         * Gets the Type of this FindOperator
         */
        get type() {
            return this._type;
        }
        /**
         * Gets the final value needs to be used as parameter value.
         */
        get value() {
            if (this._value instanceof FindOperator)
                return this._value.value;
            return this._value;
        }
        /**
         * Gets ObjectLiteral parameters.
         */
        get objectLiteralParameters() {
            if (this._value instanceof FindOperator)
                return this._value.objectLiteralParameters;
            return this._objectLiteralParameters;
        }
        /**
         * Gets the child FindOperator if it exists
         */
        get child() {
            if (this._value instanceof FindOperator)
                return this._value;
            return undefined;
        }
        /**
         * Gets the SQL generator
         */
        get getSql() {
            if (this._value instanceof FindOperator)
                return this._value.getSql;
            return this._getSql;
        }
    }
    exports.FindOperator = FindOperator;
});
define("typeorm/find-options/FindConditions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/FindOneOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/find-options/FindManyOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/common/ObjectType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/common/EntityTarget", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/error/EntityNotFoundError", ["require", "exports", "typeorm/index"], function (require, exports, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityNotFoundError = void 0;
    /**
     * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.
     */
    class EntityNotFoundError extends Error {
        constructor(entityClass, criteria) {
            super();
            this.name = "EntityNotFound";
            Object.setPrototypeOf(this, EntityNotFoundError.prototype);
            let targetName;
            if (entityClass instanceof index_1.EntitySchema) {
                targetName = entityClass.options.name;
            }
            else if (typeof entityClass === "function") {
                targetName = entityClass.name;
            }
            else if (typeof entityClass === "object" && "name" in entityClass) {
                targetName = entityClass.name;
            }
            else {
                targetName = entityClass;
            }
            const criteriaString = this.stringifyCriteria(criteria);
            this.message = `Could not find any entity of type "${targetName}" matching: ${criteriaString}`;
        }
        stringifyCriteria(criteria) {
            try {
                return JSON.stringify(criteria, null, 4);
            }
            catch (e) { }
            return "" + criteria;
        }
    }
    exports.EntityNotFoundError = EntityNotFoundError;
});
define("typeorm/error/QueryRunnerProviderAlreadyReleasedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryRunnerProviderAlreadyReleasedError = void 0;
    /**
     * Thrown when consumer tries to use query runner from query runner provider after it was released.
     */
    class QueryRunnerProviderAlreadyReleasedError extends Error {
        constructor() {
            super();
            this.name = "QueryRunnerProviderAlreadyReleasedError";
            Object.setPrototypeOf(this, QueryRunnerProviderAlreadyReleasedError.prototype);
            this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;
        }
    }
    exports.QueryRunnerProviderAlreadyReleasedError = QueryRunnerProviderAlreadyReleasedError;
});
define("typeorm/common/DeepPartial", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/repository/RemoveOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/repository/SaveOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/error/NoNeedToReleaseEntityManagerError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoNeedToReleaseEntityManagerError = void 0;
    /**
     * Thrown when consumer tries to release entity manager that does not use single database connection.
     */
    class NoNeedToReleaseEntityManagerError extends Error {
        constructor() {
            super();
            this.name = "NoNeedToReleaseEntityManagerError";
            Object.setPrototypeOf(this, NoNeedToReleaseEntityManagerError.prototype);
            this.message = `Entity manager is not using single database connection and cannot be released. ` +
                `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +
                `methods have a single database connection and they should be released.`;
        }
    }
    exports.NoNeedToReleaseEntityManagerError = NoNeedToReleaseEntityManagerError;
});
define("typeorm/query-builder/result/DeleteResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResult = void 0;
    /**
     * Result object returned by DeleteQueryBuilder execution.
     */
    class DeleteResult {
    }
    exports.DeleteResult = DeleteResult;
});
define("typeorm/query-builder/result/UpdateResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateResult = void 0;
    /**
     * Result object returned by UpdateQueryBuilder execution.
     */
    class UpdateResult {
        constructor() {
            /**
             * Contains inserted entity id.
             * Has entity-like structure (not just column database name and values).
             */
            // identifier: ObjectLiteral[] = [];
            /**
             * Generated values returned by a database.
             * Has entity-like structure (not just column database name and values).
             */
            this.generatedMaps = [];
        }
    }
    exports.UpdateResult = UpdateResult;
});
define("typeorm/query-builder/result/InsertResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InsertResult = void 0;
    /**
     * Result object returned by InsertQueryBuilder execution.
     */
    class InsertResult {
        constructor() {
            /**
             * Contains inserted entity id.
             * Has entity-like structure (not just column database name and values).
             */
            this.identifiers = [];
            /**
             * Generated values returned by a database.
             * Has entity-like structure (not just column database name and values).
             */
            this.generatedMaps = [];
        }
    }
    exports.InsertResult = InsertResult;
});
define("typeorm/query-builder/QueryPartialEntity", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/mongodb/typings", ["require", "exports", "typeorm/platform/PlatformTools"], function (require, exports, PlatformTools_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/repository/Repository", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Repository = void 0;
    /**
     * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.
     */
    class Repository {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new query builder that can be used to build a sql query.
         */
        createQueryBuilder(alias, queryRunner) {
            return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);
        }
        /**
         * Returns object that is managed by this repository.
         * If this repository manages entity from schema,
         * then it returns a name of that schema instead.
         */
        get target() {
            return this.metadata.target;
        }
        /**
         * Checks if entity has an id.
         * If entity composite compose ids, it will check them all.
         */
        hasId(entity) {
            return this.manager.hasId(this.metadata.target, entity);
        }
        /**
         * Gets entity mixed id.
         */
        getId(entity) {
            return this.manager.getId(this.metadata.target, entity);
        }
        /**
         * Creates a new entity instance or instances.
         * Can copy properties from the given object into new entities.
         */
        create(plainEntityLikeOrPlainEntityLikes) {
            return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);
        }
        /**
         * Merges multiple entities (or entity-like objects) into a given entity.
         */
        merge(mergeIntoEntity, ...entityLikes) {
            return this.manager.merge(this.metadata.target, mergeIntoEntity, ...entityLikes);
        }
        /**
         * Creates a new entity from the given plain javascript object. If entity already exist in the database, then
         * it loads it (and everything related to it), replaces all values with the new ones from the given object
         * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
         * replaced from the new object.
         *
         * Note that given entity-like object must have an entity id / primary key to find entity by.
         * Returns undefined if entity with given id was not found.
         */
        preload(entityLike) {
            return this.manager.preload(this.metadata.target, entityLike);
        }
        /**
         * Saves one or many given entities.
         */
        save(entityOrEntities, options) {
            return this.manager.save(this.metadata.target, entityOrEntities, options);
        }
        /**
         * Removes one or many given entities.
         */
        remove(entityOrEntities, options) {
            return this.manager.remove(this.metadata.target, entityOrEntities, options);
        }
        /**
         * Records the delete date of one or many given entities.
         */
        softRemove(entityOrEntities, options) {
            return this.manager.softRemove(this.metadata.target, entityOrEntities, options);
        }
        /**
         * Recovers one or many given entities.
         */
        recover(entityOrEntities, options) {
            return this.manager.recover(this.metadata.target, entityOrEntities, options);
        }
        /**
         * Inserts a given entity into the database.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient INSERT query.
         * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
         */
        insert(entity) {
            return this.manager.insert(this.metadata.target, entity);
        }
        /**
         * Updates entity partially. Entity can be found by a given conditions.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient UPDATE query.
         * Does not check if entity exist in the database.
         */
        update(criteria, partialEntity) {
            return this.manager.update(this.metadata.target, criteria, partialEntity);
        }
        /**
         * Deletes entities by a given criteria.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         */
        delete(criteria) {
            return this.manager.delete(this.metadata.target, criteria);
        }
        /**
         * Records the delete date of entities by a given criteria.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient SOFT-DELETE query.
         * Does not check if entity exist in the database.
         */
        softDelete(criteria) {
            return this.manager.softDelete(this.metadata.target, criteria);
        }
        /**
         * Restores entities by a given criteria.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient SOFT-DELETE query.
         * Does not check if entity exist in the database.
         */
        restore(criteria) {
            return this.manager.restore(this.metadata.target, criteria);
        }
        /**
         * Counts entities that match given find options or conditions.
         */
        count(optionsOrConditions) {
            return this.manager.count(this.metadata.target, optionsOrConditions);
        }
        /**
         * Finds entities that match given find options or conditions.
         */
        find(optionsOrConditions) {
            return this.manager.find(this.metadata.target, optionsOrConditions);
        }
        /**
         * Finds entities that match given find options or conditions.
         * Also counts all entities that match given conditions,
         * but ignores pagination settings (from and take options).
         */
        findAndCount(optionsOrConditions) {
            return this.manager.findAndCount(this.metadata.target, optionsOrConditions);
        }
        /**
         * Finds entities by ids.
         * Optionally find options can be applied.
         */
        findByIds(ids, optionsOrConditions) {
            return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);
        }
        /**
         * Finds first entity that matches given conditions.
         */
        findOne(optionsOrConditions, maybeOptions) {
            return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);
        }
        /**
         * Finds first entity that matches given conditions.
         */
        findOneOrFail(optionsOrConditions, maybeOptions) {
            return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);
        }
        /**
         * Executes a raw SQL query and returns a raw database results.
         * Raw query execution is supported only by relational databases (MongoDB is not supported).
         */
        query(query, parameters) {
            return this.manager.query(query, parameters);
        }
        /**
         * Clears all the data from the given table/collection (truncates/drops it).
         *
         * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.
         * @see https://stackoverflow.com/a/5972738/925151
         */
        clear() {
            return this.manager.clear(this.metadata.target);
        }
        /**
         * Increments some column by provided value of the entities matched given conditions.
         */
        increment(conditions, propertyPath, value) {
            return this.manager.increment(this.metadata.target, conditions, propertyPath, value);
        }
        /**
         * Decrements some column by provided value of the entities matched given conditions.
         */
        decrement(conditions, propertyPath, value) {
            return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);
        }
    }
    exports.Repository = Repository;
});
define("typeorm/driver/SqlInMemory", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqlInMemory = void 0;
    /**
     * This class stores up and down queries needed for migrations functionality.
     */
    class SqlInMemory {
        constructor() {
            this.upQueries = [];
            this.downQueries = [];
        }
    }
    exports.SqlInMemory = SqlInMemory;
});
define("typeorm/schema-builder/options/TableUniqueOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/UniqueMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/UniqueMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UniqueMetadata = void 0;
    /**
     * Unique metadata contains all information about table's unique constraints.
     */
    class UniqueMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Unique columns.
             */
            this.columns = [];
            /**
             * Map of column names with order set.
             * Used only by MongoDB driver.
             */
            this.columnNamesWithOrderingMap = {};
            this.entityMetadata = options.entityMetadata;
            this.embeddedMetadata = options.embeddedMetadata;
            if (options.columns)
                this.columns = options.columns;
            if (options.args) {
                this.target = options.args.target;
                this.givenName = options.args.name;
                this.givenColumnNames = options.args.columns;
            }
        }
        // ---------------------------------------------------------------------
        // Public Build Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend unique constraint properties.
         * Must be called after all entity metadata's properties map, columns and relations are built.
         */
        build(namingStrategy) {
            const map = {};
            // if columns already an array of string then simply return it
            if (this.givenColumnNames) {
                let columnPropertyPaths = [];
                if (Array.isArray(this.givenColumnNames)) {
                    columnPropertyPaths = this.givenColumnNames.map(columnName => {
                        if (this.embeddedMetadata)
                            return this.embeddedMetadata.propertyPath + "." + columnName;
                        return columnName;
                    });
                    columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);
                }
                else {
                    // if columns is a function that returns array of field names then execute it and get columns names from it
                    const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);
                    if (Array.isArray(columnsFnResult)) {
                        columnPropertyPaths = columnsFnResult.map((i) => String(i));
                        columnPropertyPaths.forEach(name => map[name] = 1);
                    }
                    else {
                        columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));
                        Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);
                    }
                }
                this.columns = columnPropertyPaths.map(propertyName => {
                    const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);
                    if (columnWithSameName) {
                        return [columnWithSameName];
                    }
                    const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);
                    if (relationWithSameName) {
                        return relationWithSameName.joinColumns;
                    }
                    const indexName = this.givenName ? "\"" + this.givenName + "\" " : "";
                    const entityName = this.entityMetadata.targetName;
                    throw new Error(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);
                })
                    .reduce((a, b) => a.concat(b));
            }
            this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {
                const column = this.entityMetadata.columns.find(column => column.propertyPath === key);
                if (column)
                    updatedMap[column.databasePath] = map[key];
                return updatedMap;
            }, {});
            this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName));
            return this;
        }
    }
    exports.UniqueMetadata = UniqueMetadata;
});
define("typeorm/schema-builder/table/TableUnique", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableUnique = void 0;
    /**
     * Database's table unique constraint stored in this class.
     */
    class TableUnique {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Columns that contains this constraint.
             */
            this.columnNames = [];
            this.name = options.name;
            this.columnNames = options.columnNames;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new copy of this constraint with exactly same properties.
         */
        clone() {
            return new TableUnique({
                name: this.name,
                columnNames: [...this.columnNames]
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates unique from the unique metadata object.
         */
        static create(uniqueMetadata) {
            return new TableUnique({
                name: uniqueMetadata.name,
                columnNames: uniqueMetadata.columns.map(column => column.databaseName)
            });
        }
    }
    exports.TableUnique = TableUnique;
});
define("typeorm/schema-builder/options/TableCheckOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/CheckMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/CheckMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckMetadata = void 0;
    /**
     * Check metadata contains all information about table's check constraints.
     */
    class CheckMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            this.entityMetadata = options.entityMetadata;
            if (options.args) {
                this.target = options.args.target;
                this.expression = options.args.expression;
                this.givenName = options.args.name;
            }
        }
        // ---------------------------------------------------------------------
        // Public Build Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend check constraint properties.
         * Must be called after all entity metadata's properties map, columns and relations are built.
         */
        build(namingStrategy) {
            this.name = this.givenName ? this.givenName : namingStrategy.checkConstraintName(this.entityMetadata.tablePath, this.expression);
            return this;
        }
    }
    exports.CheckMetadata = CheckMetadata;
});
define("typeorm/schema-builder/table/TableCheck", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableCheck = void 0;
    /**
     * Database's table check constraint stored in this class.
     */
    class TableCheck {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Column that contains this constraint.
             */
            this.columnNames = [];
            this.name = options.name;
            this.columnNames = options.columnNames;
            this.expression = options.expression;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new copy of this constraint with exactly same properties.
         */
        clone() {
            return new TableCheck({
                name: this.name,
                columnNames: this.columnNames ? [...this.columnNames] : [],
                expression: this.expression,
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates checks from the check metadata object.
         */
        static create(checkMetadata) {
            return new TableCheck({
                name: checkMetadata.name,
                expression: checkMetadata.expression
            });
        }
    }
    exports.TableCheck = TableCheck;
});
define("typeorm/schema-builder/options/TableExclusionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/ExclusionMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/ExclusionMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExclusionMetadata = void 0;
    /**
     * Exclusion metadata contains all information about table's exclusion constraints.
     */
    class ExclusionMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            this.entityMetadata = options.entityMetadata;
            if (options.args) {
                this.target = options.args.target;
                this.expression = options.args.expression;
                this.givenName = options.args.name;
            }
        }
        // ---------------------------------------------------------------------
        // Public Build Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend exclusion constraint properties.
         * Must be called after all entity metadata's properties map, columns and relations are built.
         */
        build(namingStrategy) {
            this.name = this.givenName ? this.givenName : namingStrategy.exclusionConstraintName(this.entityMetadata.tablePath, this.expression);
            return this;
        }
    }
    exports.ExclusionMetadata = ExclusionMetadata;
});
define("typeorm/schema-builder/table/TableExclusion", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableExclusion = void 0;
    /**
     * Database's table exclusion constraint stored in this class.
     */
    class TableExclusion {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            this.name = options.name;
            this.expression = options.expression;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new copy of this constraint with exactly same properties.
         */
        clone() {
            return new TableExclusion({
                name: this.name,
                expression: this.expression,
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates exclusions from the exclusion metadata object.
         */
        static create(exclusionMetadata) {
            return new TableExclusion({
                name: exclusionMetadata.name,
                expression: exclusionMetadata.expression
            });
        }
    }
    exports.TableExclusion = TableExclusion;
});
define("typeorm/driver/mongodb/MongoQueryRunner", ["require", "exports", "typeorm/subscriber/Broadcaster"], function (require, exports, Broadcaster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MongoQueryRunner = void 0;
    /**
     * Runs queries on a single MongoDB connection.
     */
    class MongoQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, databaseConnection) {
            /**
             * Indicates if connection for this query runner is released.
             * Once its released, query runner cannot run queries anymore.
             * Always false for mongodb since mongodb has a single query executor instance.
             */
            this.isReleased = false;
            /**
             * Indicates if transaction is active in this query executor.
             * Always false for mongodb since mongodb does not support transactions.
             */
            this.isTransactionActive = false;
            /**
             * Stores temporarily user data.
             * Useful for sharing data with subscribers.
             */
            this.data = {};
            this.connection = connection;
            this.databaseConnection = databaseConnection;
            this.broadcaster = new Broadcaster_1.Broadcaster(this);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a cursor for a query that can be used to iterate over results from MongoDB.
         */
        cursor(collectionName, query) {
            return this.getCollection(collectionName).find(query || {});
        }
        /**
         * Execute an aggregation framework pipeline against the collection.
         */
        aggregate(collectionName, pipeline, options) {
            return this.getCollection(collectionName).aggregate(pipeline, options);
        }
        /**
         * Perform a bulkWrite operation without a fluent API.
         */
        async bulkWrite(collectionName, operations, options) {
            return await this.getCollection(collectionName).bulkWrite(operations, options);
        }
        /**
         * Count number of matching documents in the db to a query.
         */
        async count(collectionName, query, options) {
            return await this.getCollection(collectionName).countDocuments(query || {}, options);
        }
        /**
         * Creates an index on the db and collection.
         */
        async createCollectionIndex(collectionName, fieldOrSpec, options) {
            return await this.getCollection(collectionName).createIndex(fieldOrSpec, options);
        }
        /**
         * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.
         * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.
         */
        async createCollectionIndexes(collectionName, indexSpecs) {
            return await this.getCollection(collectionName).createIndexes(indexSpecs);
        }
        /**
         * Delete multiple documents on MongoDB.
         */
        async deleteMany(collectionName, query, options) {
            return await this.getCollection(collectionName).deleteMany(query, options);
        }
        /**
         * Delete a document on MongoDB.
         */
        async deleteOne(collectionName, query, options) {
            return await this.getCollection(collectionName).deleteOne(query, options);
        }
        /**
         * The distinct command returns returns a list of distinct values for the given key across a collection.
         */
        async distinct(collectionName, key, query, options) {
            return await this.getCollection(collectionName).distinct(key, query, options);
        }
        /**
         * Drops an index from this collection.
         */
        async dropCollectionIndex(collectionName, indexName, options) {
            return await this.getCollection(collectionName).dropIndex(indexName, options);
        }
        /**
         * Drops all indexes from the collection.
         */
        async dropCollectionIndexes(collectionName) {
            return await this.getCollection(collectionName).dropIndexes();
        }
        /**
         * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.
         */
        async findOneAndDelete(collectionName, query, options) {
            return await this.getCollection(collectionName).findOneAndDelete(query, options);
        }
        /**
         * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.
         */
        async findOneAndReplace(collectionName, query, replacement, options) {
            return await this.getCollection(collectionName).findOneAndReplace(query, replacement, options);
        }
        /**
         * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.
         */
        async findOneAndUpdate(collectionName, query, update, options) {
            return await this.getCollection(collectionName).findOneAndUpdate(query, update, options);
        }
        /**
         * Execute a geo search using a geo haystack index on a collection.
         */
        async geoHaystackSearch(collectionName, x, y, options) {
            return await this.getCollection(collectionName).geoHaystackSearch(x, y, options);
        }
        /**
         * Execute the geoNear command to search for items in the collection.
         */
        async geoNear(collectionName, x, y, options) {
            return await this.getCollection(collectionName).geoNear(x, y, options);
        }
        /**
         * Run a group command across a collection.
         */
        async group(collectionName, keys, condition, initial, reduce, finalize, command, options) {
            return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, options);
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        async collectionIndexes(collectionName) {
            return await this.getCollection(collectionName).indexes();
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        async collectionIndexExists(collectionName, indexes) {
            return await this.getCollection(collectionName).indexExists(indexes);
        }
        /**
         * Retrieves this collections index info.
         */
        async collectionIndexInformation(collectionName, options) {
            return await this.getCollection(collectionName).indexInformation(options);
        }
        /**
         * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.
         */
        initializeOrderedBulkOp(collectionName, options) {
            return this.getCollection(collectionName).initializeOrderedBulkOp(options);
        }
        /**
         * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
         */
        initializeUnorderedBulkOp(collectionName, options) {
            return this.getCollection(collectionName).initializeUnorderedBulkOp(options);
        }
        /**
         * Inserts an array of documents into MongoDB.
         */
        async insertMany(collectionName, docs, options) {
            return await this.getCollection(collectionName).insertMany(docs, options);
        }
        /**
         * Inserts a single document into MongoDB.
         */
        async insertOne(collectionName, doc, options) {
            return await this.getCollection(collectionName).insertOne(doc, options);
        }
        /**
         * Returns if the collection is a capped collection.
         */
        async isCapped(collectionName) {
            return await this.getCollection(collectionName).isCapped();
        }
        /**
         * Get the list of all indexes information for the collection.
         */
        listCollectionIndexes(collectionName, options) {
            return this.getCollection(collectionName).listIndexes(options);
        }
        /**
         * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
         */
        async mapReduce(collectionName, map, reduce, options) {
            return await this.getCollection(collectionName).mapReduce(map, reduce, options);
        }
        /**
         * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.
         * There are no ordering guarantees for returned results.
         */
        async parallelCollectionScan(collectionName, options) {
            return await this.getCollection(collectionName).parallelCollectionScan(options);
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        async reIndex(collectionName) {
            return await this.getCollection(collectionName).reIndex();
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        async rename(collectionName, newName, options) {
            return await this.getCollection(collectionName).rename(newName, options);
        }
        /**
         * Replace a document on MongoDB.
         */
        async replaceOne(collectionName, query, doc, options) {
            return await this.getCollection(collectionName).replaceOne(query, doc, options);
        }
        /**
         * Get all the collection statistics.
         */
        async stats(collectionName, options) {
            return await this.getCollection(collectionName).stats(options);
        }
        /**
         * Watching new changes as stream.
         */
        watch(collectionName, pipeline, options) {
            return this.getCollection(collectionName).watch(pipeline, options);
        }
        /**
         * Update multiple documents on MongoDB.
         */
        async updateMany(collectionName, query, update, options) {
            return await this.getCollection(collectionName).updateMany(query, update, options);
        }
        /**
         * Update a single document on MongoDB.
         */
        async updateOne(collectionName, query, update, options) {
            return await this.getCollection(collectionName).updateOne(query, update, options);
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods (from QueryRunner)
        // -------------------------------------------------------------------------
        /**
         * Removes all collections from the currently connected database.
         * Be careful with using this method and avoid using it in production or migrations
         * (because it can clear all your database).
         */
        async clearDatabase() {
            await this.databaseConnection.db(this.connection.driver.database).dropDatabase();
        }
        /**
         * For MongoDB database we don't create connection, because its single connection already created by a driver.
         */
        async connect() {
        }
        /**
         * For MongoDB database we don't release connection, because its single connection.
         */
        async release() {
            // releasing connection are not supported by mongodb driver, so simply don't do anything here
        }
        /**
         * Starts transaction.
         */
        async startTransaction() {
            // transactions are not supported by mongodb driver, so simply don't do anything here
        }
        /**
         * Commits transaction.
         */
        async commitTransaction() {
            // transactions are not supported by mongodb driver, so simply don't do anything here
        }
        /**
         * Rollbacks transaction.
         */
        async rollbackTransaction() {
            // transactions are not supported by mongodb driver, so simply don't do anything here
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            throw new Error(`Executing SQL query is not supported by MongoDB driver.`);
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            throw new Error(`Stream is not supported by MongoDB driver. Use watch instead.`);
        }
        /**
         * Insert a new row with given values into the given table.
         * Returns value of inserted object id.
    
        async insert(collectionName: string, keyValues: ObjectLiteral): Promise<any> { // todo: fix any
            const results = await this.databaseConnection
                .collection(collectionName)
                .insertOne(keyValues);
            const generatedMap = this.connection.getMetadata(collectionName).objectIdColumn!.createValueMap(results.insertedId);
            return {
                result: results,
                generatedMap: generatedMap
            };
        }*/
        /**
         * Updates rows that match given conditions in the given table.
    
        async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<any> { // todo: fix any
            await this.databaseConnection
                .collection(collectionName)
                .updateOne(conditions, valuesMap);
        }*/
        /**
         * Deletes from the given table by a given conditions.
    
        async delete(collectionName: string, conditions: ObjectLiteral|ObjectLiteral[]|string, maybeParameters?: any[]): Promise<any> { // todo: fix any
            if (typeof conditions === "string")
                throw new Error(`String condition is not supported by MongoDB driver.`);
    
            await this.databaseConnection
                .collection(collectionName)
                .deleteOne(conditions);
        }*/
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Loads given table's data from the database.
         */
        async getTable(collectionName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async getTables(collectionNames) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Loads given views's data from the database.
         */
        async getView(collectionName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Loads all views (with given names) from the database and creates a Table from them.
         */
        async getViews(collectionNames) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            throw new Error(`Check database queries are not supported by MongoDB driver.`);
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            throw new Error(`Check schema queries are not supported by MongoDB driver.`);
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(collectionName) {
            throw new Error(`Check schema queries are not supported by MongoDB driver.`);
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a database if it's not created.
         */
        async createDatabase(database) {
            throw new Error(`Database create queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            throw new Error(`Database drop queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            throw new Error(`Schema create queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist) {
            throw new Error(`Schema drop queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new table from the given table and columns inside it.
         */
        async createTable(table) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops the table.
         */
        async dropTable(tableName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Renames the given table.
         */
        async renameTable(oldTableOrName, newTableOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops an unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKey) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops an index from the table.
         */
        async dropIndex(collectionName, indexName) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            throw new Error(`Schema update queries are not supported by MongoDB driver.`);
        }
        /**
         * Drops collection.
         */
        async clearTable(collectionName) {
            await this.databaseConnection
                .db(this.connection.driver.database)
                .dropCollection(collectionName);
        }
        /**
         * Enables special query runner mode in which sql queries won't be executed,
         * instead they will be memorized into a special variable inside query runner.
         * You can get memorized sql using getMemorySql() method.
         */
        enableSqlMemory() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        /**
         * Disables special query runner mode in which sql queries won't be executed
         * started by calling enableSqlMemory() method.
         *
         * Previously memorized sql will be flushed.
         */
        disableSqlMemory() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        /**
         * Flushes all memorized sqls.
         */
        clearSqlMemory() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        /**
         * Gets sql stored in the memory. Parameters in the sql are already replaced.
         */
        getMemorySql() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        /**
         * Executes up sql queries.
         */
        async executeMemoryUpSql() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        /**
         * Executes down sql queries.
         */
        async executeMemoryDownSql() {
            throw new Error(`This operation is not supported by MongoDB driver.`);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Gets collection from the database with a given name.
         */
        getCollection(collectionName) {
            return this.databaseConnection.db(this.connection.driver.database).collection(collectionName);
        }
    }
    exports.MongoQueryRunner = MongoQueryRunner;
});
define("typeorm/driver/mongodb/MongoConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/SchemaBuilder", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/MongoSchemaBuilder", ["require", "exports", "typeorm/driver/SqlInMemory"], function (require, exports, SqlInMemory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MongoSchemaBuilder = void 0;
    /**
     * Creates complete tables schemas in the database based on the entity metadatas.
     *
     * Steps how schema is being built:
     * 1. load list of all tables with complete column and keys information from the db
     * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata
     * 3. create new tables that does not exist in the db, but exist in the metadata
     * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata
     * 5. add columns from metadata which does not exist in the table
     * 6. update all exist columns which metadata has changed
     * 7. update primary keys - update old and create new primary key from changed columns
     * 8. create foreign keys which does not exist in the table yet
     * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore
     */
    class MongoSchemaBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates complete schemas for the given entity metadatas.
         */
        async build() {
            const queryRunner = this.connection.createQueryRunner();
            const promises = [];
            this.connection.entityMetadatas.forEach(metadata => {
                metadata.indices.forEach(index => {
                    const options = Object.assign({}, {
                        name: index.name,
                        unique: index.isUnique,
                        sparse: index.isSparse,
                        background: index.isBackground
                    }, index.expireAfterSeconds === undefined
                        ? {}
                        : { expireAfterSeconds: index.expireAfterSeconds });
                    promises.push(queryRunner.createCollectionIndex(metadata.tableName, index.columnNamesWithOrderingMap, options));
                });
                metadata.uniques.forEach(unique => {
                    const options = {
                        name: unique.name,
                        unique: true,
                    };
                    promises.push(queryRunner.createCollectionIndex(metadata.tableName, unique.columnNamesWithOrderingMap, options));
                });
            });
            await Promise.all(promises);
        }
        /**
         * Returns query to be executed by schema builder.
         */
        log() {
            return Promise.resolve(new SqlInMemory_1.SqlInMemory());
        }
    }
    exports.MongoSchemaBuilder = MongoSchemaBuilder;
});
define("typeorm/driver/mysql/MysqlConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/mysql/MysqlConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sqlite/SqliteConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sqlserver/SqlServerConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/oracle/OracleConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/oracle/OracleConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/cordova/CordovaConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sqljs/SqljsConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/react-native/ReactNativeConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/nativescript/NativescriptConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/expo/ExpoConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/aurora-data-api/AuroraDataApiConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/aurora-data-api/AuroraDataApiConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sap/SapConnectionCredentialsOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/sap/SapConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/aurora-data-api-pg/AuroraDataApiPostgresConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/connection/ConnectionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/util/ApplyValueTransformers", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplyValueTransformers = void 0;
    class ApplyValueTransformers {
        static transformFrom(transformer, databaseValue) {
            if (Array.isArray(transformer)) {
                const reverseTransformers = transformer.slice().reverse();
                return reverseTransformers.reduce((transformedValue, _transformer) => {
                    return _transformer.from(transformedValue);
                }, databaseValue);
            }
            return transformer.from(databaseValue);
        }
        static transformTo(transformer, entityValue) {
            if (Array.isArray(transformer)) {
                return transformer.reduce((transformedValue, _transformer) => {
                    return _transformer.to(transformedValue);
                }, entityValue);
            }
            return transformer.to(entityValue);
        }
    }
    exports.ApplyValueTransformers = ApplyValueTransformers;
});
define("typeorm/driver/types/ReplicationMode", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/mongodb/MongoDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/mongodb/MongoQueryRunner", "typeorm/platform/PlatformTools", "typeorm/schema-builder/MongoSchemaBuilder", "typeorm/util/ObjectUtils", "typeorm/util/ApplyValueTransformers", "typeorm/driver/DriverUtils"], function (require, exports, ConnectionIsNotSetError_1, DriverPackageNotInstalledError_1, MongoQueryRunner_1, PlatformTools_2, MongoSchemaBuilder_1, ObjectUtils_2, ApplyValueTransformers_1, DriverUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MongoDriver = void 0;
    /**
     * Organizes communication with MongoDB.
     */
    class MongoDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = false;
            /**
             * Mongodb does not need to have column types because they are not used in schema sync.
             */
            this.supportedDataTypes = [];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [];
            /**
             * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.
             */
            this.mappedDataTypes = {
                createDate: "int",
                createDateDefault: "",
                updateDate: "int",
                updateDateDefault: "",
                deleteDate: "int",
                deleteDateNullable: true,
                version: "int",
                treeLevel: "int",
                migrationId: "int",
                migrationName: "int",
                migrationTimestamp: "int",
                cacheId: "int",
                cacheIdentifier: "int",
                cacheTime: "int",
                cacheDuration: "int",
                cacheQuery: "int",
                cacheResult: "int",
                metadataType: "int",
                metadataDatabase: "int",
                metadataSchema: "int",
                metadataTable: "int",
                metadataName: "int",
                metadataValue: "int",
            };
            // -------------------------------------------------------------------------
            // Protected Properties
            // -------------------------------------------------------------------------
            /**
             * Valid mongo connection options
             * NOTE: Keep sync with MongoConnectionOptions
             * Sync with http://mongodb.github.io/node-mongodb-native/3.5/api/MongoClient.html
             */
            this.validOptionNames = [
                "poolSize",
                "ssl",
                "sslValidate",
                "sslCA",
                "sslCert",
                "sslKey",
                "sslPass",
                "sslCRL",
                "autoReconnect",
                "noDelay",
                "keepAlive",
                "keepAliveInitialDelay",
                "connectTimeoutMS",
                "family",
                "socketTimeoutMS",
                "reconnectTries",
                "reconnectInterval",
                "ha",
                "haInterval",
                "replicaSet",
                "secondaryAcceptableLatencyMS",
                "acceptableLatencyMS",
                "connectWithNoPrimary",
                "authSource",
                "w",
                "wtimeout",
                "j",
                "forceServerObjectId",
                "serializeFunctions",
                "ignoreUndefined",
                "raw",
                "bufferMaxEntries",
                "readPreference",
                "pkFactory",
                "promiseLibrary",
                "readConcern",
                "maxStalenessSeconds",
                "loggerLevel",
                // Do not overwrite BaseConnectionOptions.logger
                // "logger",
                "promoteValues",
                "promoteBuffers",
                "promoteLongs",
                "domainsEnabled",
                "checkServerIdentity",
                "validateOptions",
                "appname",
                // omit auth - we are building url from username and password
                // "auth"
                "authMechanism",
                "compression",
                "fsync",
                "readPreferenceTags",
                "numberOfRetries",
                "auto_reconnect",
                "minSize",
                "monitorCommands",
                "useNewUrlParser",
                "useUnifiedTopology",
                "autoEncryption"
            ];
            this.options = connection.options;
            // validate options to make sure everything is correct and driver will be able to establish connection
            this.validateOptions(connection.options);
            // load mongodb package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         */
        connect() {
            return new Promise((ok, fail) => {
                const options = DriverUtils_1.DriverUtils.buildMongoDBDriverOptions(this.options);
                this.mongodb.MongoClient.connect(this.buildConnectionUrl(options), this.buildConnectionOptions(options), (err, client) => {
                    if (err)
                        return fail(err);
                    this.queryRunner = new MongoQueryRunner_1.MongoQueryRunner(this.connection, client);
                    ObjectUtils_2.ObjectUtils.assign(this.queryRunner, { manager: this.connection.manager });
                    ok();
                });
            });
        }
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                if (!this.queryRunner)
                    return fail(new ConnectionIsNotSetError_1.ConnectionIsNotSetError("mongodb"));
                const handler = (err) => err ? fail(err) : ok();
                this.queryRunner.databaseConnection.close(handler);
                this.queryRunner = undefined;
            });
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new MongoSchemaBuilder_1.MongoSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return this.queryRunner;
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            throw new Error(`This operation is not supported by Mongodb driver.`);
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return columnName;
        }
        /**
         * Build full table name with database name, schema name and table name.
         * E.g. "myDB"."mySchema"."myTable"
         */
        buildTableName(tableName, schema, database) {
            return tableName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_1.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_1.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Calculates column length taking into account the default length values.
         */
        getColumnLength(column) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Normalizes "default" value of the column.
         */
        createFullType(column) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return Promise.resolve();
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            return Promise.resolve();
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertedId) {
            return metadata.objectIdColumn.createValueMap(insertedId);
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            throw new Error(`MongoDB is schema-less, not supported by this driver.`);
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return false;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "";
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Validate driver options to make sure everything is correct and driver will be able to establish connection.
         */
        validateOptions(options) {
            // if (!options.url) {
            //     if (!options.database)
            //         throw new DriverOptionNotSetError("database");
            // }
        }
        /**
         * Loads all driver dependencies.
         */
        loadDependencies() {
            try {
                this.mongodb = PlatformTools_2.PlatformTools.load("mongodb"); // try to load native driver dynamically
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError("MongoDB", "mongodb");
            }
        }
        /**
         * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.
         */
        buildConnectionUrl(options) {
            const schemaUrlPart = options.type.toLowerCase();
            const credentialsUrlPart = (options.username && options.password)
                ? `${options.username}:${options.password}@`
                : "";
            let connectionString = undefined;
            if (options.replicaSet) {
                connectionString = `${schemaUrlPart}://${credentialsUrlPart}${options.hostReplicaSet}/${options.database || ""}`;
            }
            else {
                const portUrlPart = (schemaUrlPart === "mongodb+srv")
                    ? ""
                    : `:${options.port || "27017"}`;
                connectionString = `${schemaUrlPart}://${credentialsUrlPart}${options.host || "127.0.0.1"}${portUrlPart}/${options.database || ""}`;
            }
            return connectionString;
        }
        /**
         * Build connection options from MongoConnectionOptions
         */
        buildConnectionOptions(options) {
            const mongoOptions = {};
            for (let index = 0; index < this.validOptionNames.length; index++) {
                const optionName = this.validOptionNames[index];
                if (options.extra && optionName in options.extra) {
                    mongoOptions[optionName] = options.extra[optionName];
                }
                else if (optionName in options) {
                    mongoOptions[optionName] = options[optionName];
                }
            }
            return mongoOptions;
        }
    }
    exports.MongoDriver = MongoDriver;
});
define("typeorm/query-builder/transformer/DocumentToEntityTransformer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DocumentToEntityTransformer = void 0;
    /**
     * Transforms raw document into entity object.
     * Entity is constructed based on its entity metadata.
     */
    class DocumentToEntityTransformer {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(// private selectionMap: AliasMap,
        // private joinMappings: JoinMapping[],
        // private relationCountMetas: RelationCountAttribute[],
        enableRelationIdValues = false) {
            this.enableRelationIdValues = enableRelationIdValues;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        transformAll(documents, metadata) {
            return documents.map(document => this.transform(document, metadata));
        }
        transform(document, metadata) {
            const entity = metadata.create();
            let hasData = false;
            // handle _id property the special way
            if (metadata.objectIdColumn && document[metadata.objectIdColumn.databaseNameWithoutPrefixes]) {
                // todo: we can't use driver in this class
                // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?
                // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name"], metadata.objectIdColumn);
                entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.databaseNameWithoutPrefixes];
                hasData = true;
            }
            // add special columns that contains relation ids
            if (this.enableRelationIdValues) {
                metadata.columns.filter(column => !!column.relationMetadata).forEach(column => {
                    const valueInObject = document[column.databaseNameWithoutPrefixes];
                    if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {
                        // todo: we can't use driver in this class
                        // const value = this.driver.prepareHydratedValue(valueInObject, column);
                        entity[column.propertyName] = valueInObject;
                        hasData = true;
                    }
                });
            }
            /*this.joinMappings
                .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.relationOwnerSelection && joinMapping.alias.target)
                .map(joinMapping => {
                    const relatedEntities = this.transformRawResultsGroup(rawSqlResults, joinMapping.alias);
                    const isResultArray = joinMapping.isMany;
                    const result = !isResultArray ? relatedEntities[0] : relatedEntities;
    
                    if (result && (!isResultArray || result.length > 0)) {
                        entity[joinMapping.propertyName] = result;
                        hasData = true;
                    }
                });*/
            // get value from columns selections and put them into object
            metadata.ownColumns.forEach(column => {
                const valueInObject = document[column.databaseNameWithoutPrefixes];
                if (valueInObject !== undefined &&
                    valueInObject !== null &&
                    column.propertyName &&
                    !column.isVirtual) {
                    // const value = this.driver.prepareHydratedValue(valueInObject, column);
                    entity[column.propertyName] = valueInObject;
                    hasData = true;
                }
            });
            const addEmbeddedValuesRecursively = (entity, document, embeddeds) => {
                embeddeds.forEach(embedded => {
                    if (!document[embedded.prefix])
                        return;
                    if (embedded.isArray) {
                        entity[embedded.propertyName] = document[embedded.prefix].map((subValue, index) => {
                            const newItem = embedded.create();
                            embedded.columns.forEach(column => {
                                newItem[column.propertyName] = subValue[column.databaseNameWithoutPrefixes];
                            });
                            addEmbeddedValuesRecursively(newItem, document[embedded.prefix][index], embedded.embeddeds);
                            return newItem;
                        });
                    }
                    else {
                        if (embedded.embeddeds.length && !entity[embedded.propertyName])
                            entity[embedded.propertyName] = embedded.create();
                        embedded.columns.forEach(column => {
                            const value = document[embedded.prefix][column.databaseNameWithoutPrefixes];
                            if (value === undefined)
                                return;
                            if (!entity[embedded.propertyName])
                                entity[embedded.propertyName] = embedded.create();
                            entity[embedded.propertyName][column.propertyName] = value;
                        });
                    }
                    addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);
                });
            };
            addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);
            // if relation is loaded then go into it recursively and transform its values too
            /*metadata.relations.forEach(relation => {
                const relationAlias = this.selectionMap.findSelectionByParent(alias.name, relation.propertyName);
                if (relationAlias) {
                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === "join" && joinMapping.alias === relationAlias);
                    const relatedEntities = this.transformRawResultsGroup(rawSqlResults, relationAlias);
                    const isResultArray = relation.isManyToMany || relation.isOneToMany;
                    const result = !isResultArray ? relatedEntities[0] : relatedEntities;
    
                    if (result) {
                        let propertyName = relation.propertyName;
                        if (joinMapping) {
                            propertyName = joinMapping.propertyName;
                        }
    
                        if (relation.isLazy) {
                            entity["__" + propertyName + "__"] = result;
                        } else {
                            entity[propertyName] = result;
                        }
    
                        if (!isResultArray || result.length > 0)
                            hasData = true;
                    }
                }
    
                // if relation has id field then relation id/ids to that field.
                if (relation.isManyToMany) {
                    if (relationAlias) {
                        const ids: any[] = [];
                        const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === "relationId" && joinMapping.alias === relationAlias);
    
                        if (relation.idField || joinMapping) {
                            const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;
                            const junctionMetadata = relation.junctionEntityMetadata;
                            const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;
    
                            rawSqlResults.forEach(results => {
                                if (relationAlias) {
                                    const resultsKey = relationAlias.name + "_" + columnName;
                                    const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);
                                    if (value !== undefined && value !== null)
                                        ids.push(value);
                                }
                            });
    
                            if (ids && ids.length)
                                entity[propertyName] = ids;
                        }
                    }
                } else if (relation.idField) {
                    const relationName = relation.name;
                    entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + "_" + relationName], relation.referencedColumn);
                }
    
                // if relation counter
                this.relationCountMetas.forEach(joinMeta => {
                    if (joinMeta.alias === relationAlias) {
                        // console.log("relation count was found for relation: ", relation);
                        // joinMeta.entity = entity;
                        joinMeta.entities.push({ entity: entity, metadata: metadata });
                        // console.log(joinMeta);
                        // console.log("---------------------");
                    }
                });
            });*/
            return hasData ? entity : null;
        }
    }
    exports.DocumentToEntityTransformer = DocumentToEntityTransformer;
});
define("typeorm/error/FindRelationsNotFoundError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FindRelationsNotFoundError = void 0;
    /**
     * Thrown when relations specified in the find options were not found in the entities.
    */
    class FindRelationsNotFoundError extends Error {
        constructor(notFoundRelations) {
            super();
            Object.setPrototypeOf(this, FindRelationsNotFoundError.prototype);
            if (notFoundRelations.length === 1) {
                this.message = `Relation "${notFoundRelations[0]}" was not found; please check if it is correct and really exists in your entity.`;
            }
            else {
                this.message = `Relations ${notFoundRelations.map(relation => `"${relation}"`).join(", ")} were not found; please check if relations are correct and they exist in your entities.`;
            }
        }
    }
    exports.FindRelationsNotFoundError = FindRelationsNotFoundError;
});
define("typeorm/find-options/FindOptionsUtils", ["require", "exports", "typeorm/error/FindRelationsNotFoundError", "typeorm/util/StringUtils"], function (require, exports, FindRelationsNotFoundError_1, StringUtils_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FindOptionsUtils = void 0;
    /**
     * Utilities to work with FindOptions.
     */
    class FindOptionsUtils {
        // -------------------------------------------------------------------------
        // Public Static Methods
        // -------------------------------------------------------------------------
        /**
         * Checks if given object is really instance of FindOneOptions interface.
         */
        static isFindOneOptions(obj) {
            const possibleOptions = obj;
            return possibleOptions &&
                (Array.isArray(possibleOptions.select) ||
                    possibleOptions.where instanceof Object ||
                    typeof possibleOptions.where === "string" ||
                    Array.isArray(possibleOptions.relations) ||
                    possibleOptions.join instanceof Object ||
                    possibleOptions.order instanceof Object ||
                    possibleOptions.cache instanceof Object ||
                    typeof possibleOptions.cache === "boolean" ||
                    typeof possibleOptions.cache === "number" ||
                    possibleOptions.lock instanceof Object ||
                    possibleOptions.loadRelationIds instanceof Object ||
                    typeof possibleOptions.loadRelationIds === "boolean" ||
                    typeof possibleOptions.loadEagerRelations === "boolean" ||
                    typeof possibleOptions.withDeleted === "boolean" ||
                    typeof possibleOptions.transaction === "boolean");
        }
        /**
         * Checks if given object is really instance of FindManyOptions interface.
         */
        static isFindManyOptions(obj) {
            const possibleOptions = obj;
            return possibleOptions && (this.isFindOneOptions(possibleOptions) ||
                typeof possibleOptions.skip === "number" ||
                typeof possibleOptions.take === "number" ||
                typeof possibleOptions.skip === "string" ||
                typeof possibleOptions.take === "string");
        }
        /**
         * Checks if given object is really instance of FindOptions interface.
         */
        static extractFindManyOptionsAlias(object) {
            if (this.isFindManyOptions(object) && object.join)
                return object.join.alias;
            return undefined;
        }
        /**
         * Applies give find many options to the given query builder.
         */
        static applyFindManyOptionsOrConditionsToQueryBuilder(qb, options) {
            if (this.isFindManyOptions(options))
                return this.applyOptionsToQueryBuilder(qb, options);
            if (options)
                return qb.where(options);
            return qb;
        }
        /**
         * Applies give find options to the given query builder.
         */
        static applyOptionsToQueryBuilder(qb, options) {
            // if options are not set then simply return query builder. This is made for simplicity of usage.
            if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))
                return qb;
            if (options.transaction === true) {
                qb.expressionMap.useTransaction = true;
            }
            if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)
                return qb;
            const metadata = qb.expressionMap.mainAlias.metadata;
            // apply all options from FindOptions
            if (options.select) {
                qb.select([]);
                options.select.forEach(select => {
                    if (!metadata.findColumnWithPropertyPath(String(select)))
                        throw new Error(`${select} column was not found in the ${metadata.name} entity.`);
                    qb.addSelect(qb.alias + "." + select);
                });
            }
            if (options.where)
                qb.where(options.where);
            if (options.skip)
                qb.skip(options.skip);
            if (options.take)
                qb.take(options.take);
            if (options.order)
                Object.keys(options.order).forEach(key => {
                    const order = options.order[key];
                    if (!metadata.findColumnWithPropertyPath(key))
                        throw new Error(`${key} column was not found in the ${metadata.name} entity.`);
                    switch (order) {
                        case 1:
                            qb.addOrderBy(qb.alias + "." + key, "ASC");
                            break;
                        case -1:
                            qb.addOrderBy(qb.alias + "." + key, "DESC");
                            break;
                        case "ASC":
                            qb.addOrderBy(qb.alias + "." + key, "ASC");
                            break;
                        case "DESC":
                            qb.addOrderBy(qb.alias + "." + key, "DESC");
                            break;
                    }
                });
            if (options.relations) {
                const allRelations = options.relations.map(relation => relation);
                this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, "");
                // recursive removes found relations from allRelations array
                // if there are relations left in this array it means those relations were not found in the entity structure
                // so, we give an exception about not found relations
                if (allRelations.length > 0)
                    throw new FindRelationsNotFoundError_1.FindRelationsNotFoundError(allRelations);
            }
            if (options.join) {
                if (options.join.leftJoin)
                    Object.keys(options.join.leftJoin).forEach(key => {
                        qb.leftJoin(options.join.leftJoin[key], key);
                    });
                if (options.join.innerJoin)
                    Object.keys(options.join.innerJoin).forEach(key => {
                        qb.innerJoin(options.join.innerJoin[key], key);
                    });
                if (options.join.leftJoinAndSelect)
                    Object.keys(options.join.leftJoinAndSelect).forEach(key => {
                        qb.leftJoinAndSelect(options.join.leftJoinAndSelect[key], key);
                    });
                if (options.join.innerJoinAndSelect)
                    Object.keys(options.join.innerJoinAndSelect).forEach(key => {
                        qb.innerJoinAndSelect(options.join.innerJoinAndSelect[key], key);
                    });
            }
            if (options.cache) {
                if (options.cache instanceof Object) {
                    const cache = options.cache;
                    qb.cache(cache.id, cache.milliseconds);
                }
                else {
                    qb.cache(options.cache);
                }
            }
            if (options.lock) {
                if (options.lock.mode === "optimistic") {
                    qb.setLock(options.lock.mode, options.lock.version);
                }
                else if (options.lock.mode === "pessimistic_read" || options.lock.mode === "pessimistic_write" || options.lock.mode === "dirty_read" || options.lock.mode === "pessimistic_partial_write" || options.lock.mode === "pessimistic_write_or_fail") {
                    const tableNames = options.lock.tables ? options.lock.tables.map((table) => {
                        const tableAlias = qb.expressionMap.aliases.find((alias) => {
                            return alias.metadata.tableNameWithoutPrefix === table;
                        });
                        if (!tableAlias) {
                            throw new Error(`"${table}" is not part of this query`);
                        }
                        return qb.escape(tableAlias.name);
                    }) : undefined;
                    qb.setLock(options.lock.mode, undefined, tableNames);
                }
            }
            if (options.withDeleted) {
                qb.withDeleted();
            }
            if (options.loadRelationIds === true) {
                qb.loadAllRelationIds();
            }
            else if (options.loadRelationIds instanceof Object) {
                qb.loadAllRelationIds(options.loadRelationIds);
            }
            return qb;
        }
        // -------------------------------------------------------------------------
        // Protected Static Methods
        // -------------------------------------------------------------------------
        /**
         * Adds joins for all relations and sub-relations of the given relations provided in the find options.
         */
        static applyRelationsRecursively(qb, allRelations, alias, metadata, prefix) {
            // find all relations that match given prefix
            let matchedBaseRelations = [];
            if (prefix) {
                const regexp = new RegExp("^" + prefix.replace(".", "\\.") + "\\.");
                matchedBaseRelations = allRelations
                    .filter(relation => relation.match(regexp))
                    .map(relation => relation.replace(regexp, ""))
                    .filter(relation => metadata.findRelationWithPropertyPath(relation));
            }
            else {
                matchedBaseRelations = allRelations.filter(relation => metadata.findRelationWithPropertyPath(relation));
            }
            // go through all matched relations and add join for them
            matchedBaseRelations.forEach(relation => {
                // generate a relation alias
                let relationAlias = alias + "__" + relation;
                // shorten it if needed by the driver
                if (qb.connection.driver.maxAliasLength && relationAlias.length > qb.connection.driver.maxAliasLength) {
                    relationAlias = StringUtils_2.shorten(relationAlias);
                }
                // add a join for the found relation
                const selection = alias + "." + relation;
                qb.leftJoinAndSelect(selection, relationAlias);
                // join the eager relations of the found relation
                const relMetadata = metadata.relations.find(metadata => metadata.propertyName === relation);
                if (relMetadata) {
                    this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);
                }
                // remove added relations from the allRelations array, this is needed to find all not found relations at the end
                allRelations.splice(allRelations.indexOf(prefix ? prefix + "." + relation : relation), 1);
                // try to find sub-relations
                const join = qb.expressionMap.joinAttributes.find(join => join.entityOrProperty === selection);
                this.applyRelationsRecursively(qb, allRelations, join.alias.name, join.metadata, prefix ? prefix + "." + relation : relation);
            });
        }
        static joinEagerRelations(qb, alias, metadata) {
            metadata.eagerRelations.forEach(relation => {
                const relationAlias = qb.connection.namingStrategy.eagerJoinRelationAlias(alias, relation.propertyPath);
                qb.leftJoinAndSelect(alias + "." + relation.propertyPath, relationAlias);
                this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);
            });
        }
    }
    exports.FindOptionsUtils = FindOptionsUtils;
});
define("typeorm/subscriber/BroadcasterResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BroadcasterResult = void 0;
    /**
     * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.
     */
    class BroadcasterResult {
        constructor() {
            /**
             * Number of executed listeners and subscribers.
             */
            this.count = 0;
            /**
             * Promises returned by listeners and subscribers which needs to be awaited.
             */
            this.promises = [];
        }
    }
    exports.BroadcasterResult = BroadcasterResult;
});
define("typeorm/entity-manager/MongoEntityManager", ["require", "exports", "typeorm/entity-manager/EntityManager", "typeorm/query-builder/transformer/DocumentToEntityTransformer", "typeorm/find-options/FindOptionsUtils", "typeorm/platform/PlatformTools", "typeorm/query-builder/result/InsertResult", "typeorm/query-builder/result/UpdateResult", "typeorm/query-builder/result/DeleteResult", "typeorm/subscriber/BroadcasterResult"], function (require, exports, EntityManager_1, DocumentToEntityTransformer_1, FindOptionsUtils_1, PlatformTools_3, InsertResult_1, UpdateResult_1, DeleteResult_1, BroadcasterResult_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MongoEntityManager = void 0;
    /**
     * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
     * whatever entity type are you passing.
     *
     * This implementation is used for MongoDB driver which has some specifics in its EntityManager.
     */
    class MongoEntityManager extends EntityManager_1.EntityManager {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
        }
        // -------------------------------------------------------------------------
        // Overridden Properties
        // -------------------------------------------------------------------------
        /**
         * Gets query runner used to execute queries.
         */
        get queryRunner() {
            return this.connection.driver.queryRunner;
        }
        // -------------------------------------------------------------------------
        // Overridden Methods
        // -------------------------------------------------------------------------
        /**
         * Finds entities that match given find options or conditions.
         */
        async find(entityClassOrName, optionsOrConditions) {
            const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);
            const cursor = await this.createEntityCursor(entityClassOrName, query);
            if (FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {
                if (optionsOrConditions.select)
                    cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));
                if (optionsOrConditions.skip)
                    cursor.skip(optionsOrConditions.skip);
                if (optionsOrConditions.take)
                    cursor.limit(optionsOrConditions.take);
                if (optionsOrConditions.order)
                    cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));
            }
            return cursor.toArray();
        }
        /**
         * Finds entities that match given find options or conditions.
         * Also counts all entities that match given conditions,
         * but ignores pagination settings (from and take options).
         */
        async findAndCount(entityClassOrName, optionsOrConditions) {
            const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);
            const cursor = await this.createEntityCursor(entityClassOrName, query);
            if (FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {
                if (optionsOrConditions.select)
                    cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));
                if (optionsOrConditions.skip)
                    cursor.skip(optionsOrConditions.skip);
                if (optionsOrConditions.take)
                    cursor.limit(optionsOrConditions.take);
                if (optionsOrConditions.order)
                    cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));
            }
            const [results, count] = await Promise.all([
                cursor.toArray(),
                this.count(entityClassOrName, query),
            ]);
            return [results, parseInt(count)];
        }
        /**
         * Finds entities by ids.
         * Optionally find options can be applied.
         */
        async findByIds(entityClassOrName, ids, optionsOrConditions) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};
            const objectIdInstance = PlatformTools_3.PlatformTools.load("mongodb").ObjectID;
            query["_id"] = {
                $in: ids.map(id => {
                    if (id instanceof objectIdInstance)
                        return id;
                    return id[metadata.objectIdColumn.propertyName];
                })
            };
            const cursor = await this.createEntityCursor(entityClassOrName, query);
            if (FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {
                if (optionsOrConditions.select)
                    cursor.project(this.convertFindOptionsSelectToProjectCriteria(optionsOrConditions.select));
                if (optionsOrConditions.skip)
                    cursor.skip(optionsOrConditions.skip);
                if (optionsOrConditions.take)
                    cursor.limit(optionsOrConditions.take);
                if (optionsOrConditions.order)
                    cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));
            }
            return await cursor.toArray();
        }
        /**
         * Finds first entity that matches given conditions and/or find options.
         */
        async findOne(entityClassOrName, optionsOrConditions, maybeOptions) {
            const objectIdInstance = PlatformTools_3.PlatformTools.load("mongodb").ObjectID;
            const id = (optionsOrConditions instanceof objectIdInstance) || typeof optionsOrConditions === "string" ? optionsOrConditions : undefined;
            const findOneOptionsOrConditions = (id ? maybeOptions : optionsOrConditions);
            const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(findOneOptionsOrConditions) || {};
            if (id) {
                query["_id"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);
            }
            const cursor = await this.createEntityCursor(entityClassOrName, query);
            if (FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {
                if (findOneOptionsOrConditions.select)
                    cursor.project(this.convertFindOptionsSelectToProjectCriteria(findOneOptionsOrConditions.select));
                if (findOneOptionsOrConditions.order)
                    cursor.sort(this.convertFindOptionsOrderToOrderCriteria(findOneOptionsOrConditions.order));
            }
            // const result = await cursor.limit(1).next();
            const result = await cursor.limit(1).toArray();
            return result.length > 0 ? result[0] : undefined;
        }
        /**
         * Inserts a given entity into the database.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient INSERT query.
         * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
         * You can execute bulk inserts using this method.
         */
        async insert(target, entity) {
            // todo: convert entity to its database name
            const result = new InsertResult_1.InsertResult();
            if (Array.isArray(entity)) {
                result.raw = await this.insertMany(target, entity);
                Object.keys(result.raw.insertedIds).forEach((key) => {
                    let insertedId = result.raw.insertedIds[key];
                    result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId));
                    result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId));
                });
            }
            else {
                result.raw = await this.insertOne(target, entity);
                result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId));
                result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId));
            }
            return result;
        }
        /**
         * Updates entity partially. Entity can be found by a given conditions.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient UPDATE query.
         * Does not check if entity exist in the database.
         */
        async update(target, criteria, partialEntity) {
            if (Array.isArray(criteria)) {
                await Promise.all(criteria.map(criteriaItem => {
                    return this.update(target, criteriaItem, partialEntity);
                }));
            }
            else {
                const metadata = this.connection.getMetadata(target);
                await this.updateOne(target, this.convertMixedCriteria(metadata, criteria), { $set: partialEntity });
            }
            return new UpdateResult_1.UpdateResult();
        }
        /**
         * Deletes entities by a given conditions.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         */
        async delete(target, criteria) {
            if (Array.isArray(criteria)) {
                await Promise.all(criteria.map(criteriaItem => {
                    return this.delete(target, criteriaItem);
                }));
            }
            else {
                await this.deleteOne(target, this.convertMixedCriteria(this.connection.getMetadata(target), criteria));
            }
            return new DeleteResult_1.DeleteResult();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a cursor for a query that can be used to iterate over results from MongoDB.
         */
        createCursor(entityClassOrName, query) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.cursor(metadata.tableName, query);
        }
        /**
         * Creates a cursor for a query that can be used to iterate over results from MongoDB.
         * This returns modified version of cursor that transforms each result into Entity model.
         */
        createEntityCursor(entityClassOrName, query) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            const cursor = this.createCursor(entityClassOrName, query);
            this.applyEntityTransformationToCursor(metadata, cursor);
            return cursor;
        }
        /**
         * Execute an aggregation framework pipeline against the collection.
         */
        aggregate(entityClassOrName, pipeline, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.aggregate(metadata.tableName, pipeline, options);
        }
        /**
         * Execute an aggregation framework pipeline against the collection.
         * This returns modified version of cursor that transforms each result into Entity model.
         */
        aggregateEntity(entityClassOrName, pipeline, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            const cursor = this.queryRunner.aggregate(metadata.tableName, pipeline, options);
            this.applyEntityTransformationToCursor(metadata, cursor);
            return cursor;
        }
        /**
         * Perform a bulkWrite operation without a fluent API.
         */
        bulkWrite(entityClassOrName, operations, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.bulkWrite(metadata.tableName, operations, options);
        }
        /**
         * Count number of matching documents in the db to a query.
         */
        count(entityClassOrName, query, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.count(metadata.tableName, query, options);
        }
        /**
         * Creates an index on the db and collection.
         */
        createCollectionIndex(entityClassOrName, fieldOrSpec, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);
        }
        /**
         * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.
         * Earlier version of MongoDB will throw a command not supported error.
         * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.
         */
        createCollectionIndexes(entityClassOrName, indexSpecs) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);
        }
        /**
         * Delete multiple documents on MongoDB.
         */
        deleteMany(entityClassOrName, query, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.deleteMany(metadata.tableName, query, options);
        }
        /**
         * Delete a document on MongoDB.
         */
        deleteOne(entityClassOrName, query, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.deleteOne(metadata.tableName, query, options);
        }
        /**
         * The distinct command returns returns a list of distinct values for the given key across a collection.
         */
        distinct(entityClassOrName, key, query, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.distinct(metadata.tableName, key, query, options);
        }
        /**
         * Drops an index from this collection.
         */
        dropCollectionIndex(entityClassOrName, indexName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.dropCollectionIndex(metadata.tableName, indexName, options);
        }
        /**
         * Drops all indexes from the collection.
         */
        dropCollectionIndexes(entityClassOrName) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.dropCollectionIndexes(metadata.tableName);
        }
        /**
         * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndDelete(entityClassOrName, query, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);
        }
        /**
         * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndReplace(entityClassOrName, query, replacement, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);
        }
        /**
         * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndUpdate(entityClassOrName, query, update, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);
        }
        /**
         * Execute a geo search using a geo haystack index on a collection.
         */
        geoHaystackSearch(entityClassOrName, x, y, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.geoHaystackSearch(metadata.tableName, x, y, options);
        }
        /**
         * Execute the geoNear command to search for items in the collection.
         */
        geoNear(entityClassOrName, x, y, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.geoNear(metadata.tableName, x, y, options);
        }
        /**
         * Run a group command across a collection.
         */
        group(entityClassOrName, keys, condition, initial, reduce, finalize, command, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        collectionIndexes(entityClassOrName) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.collectionIndexes(metadata.tableName);
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        collectionIndexExists(entityClassOrName, indexes) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.collectionIndexExists(metadata.tableName, indexes);
        }
        /**
         * Retrieves this collections index info.
         */
        collectionIndexInformation(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.collectionIndexInformation(metadata.tableName, options);
        }
        /**
         * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.
         */
        initializeOrderedBulkOp(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.initializeOrderedBulkOp(metadata.tableName, options);
        }
        /**
         * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
         */
        initializeUnorderedBulkOp(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.initializeUnorderedBulkOp(metadata.tableName, options);
        }
        /**
         * Inserts an array of documents into MongoDB.
         */
        insertMany(entityClassOrName, docs, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.insertMany(metadata.tableName, docs, options);
        }
        /**
         * Inserts a single document into MongoDB.
         */
        insertOne(entityClassOrName, doc, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.insertOne(metadata.tableName, doc, options);
        }
        /**
         * Returns if the collection is a capped collection.
         */
        isCapped(entityClassOrName) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.isCapped(metadata.tableName);
        }
        /**
         * Get the list of all indexes information for the collection.
         */
        listCollectionIndexes(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.listCollectionIndexes(metadata.tableName, options);
        }
        /**
         * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
         */
        mapReduce(entityClassOrName, map, reduce, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.mapReduce(metadata.tableName, map, reduce, options);
        }
        /**
         * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.
         * There are no ordering guarantees for returned results.
         */
        parallelCollectionScan(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.parallelCollectionScan(metadata.tableName, options);
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        reIndex(entityClassOrName) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.reIndex(metadata.tableName);
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        rename(entityClassOrName, newName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.rename(metadata.tableName, newName, options);
        }
        /**
         * Replace a document on MongoDB.
         */
        replaceOne(entityClassOrName, query, doc, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);
        }
        /**
         * Get all the collection statistics.
         */
        stats(entityClassOrName, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.stats(metadata.tableName, options);
        }
        watch(entityClassOrName, pipeline, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.watch(metadata.tableName, pipeline, options);
        }
        /**
         * Update multiple documents on MongoDB.
         */
        updateMany(entityClassOrName, query, update, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.updateMany(metadata.tableName, query, update, options);
        }
        /**
         * Update a single document on MongoDB.
         */
        updateOne(entityClassOrName, query, update, options) {
            const metadata = this.connection.getMetadata(entityClassOrName);
            return this.queryRunner.updateOne(metadata.tableName, query, update, options);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Converts FindManyOptions to mongodb query.
         */
        convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) {
            if (!optionsOrConditions)
                return undefined;
            if (FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions))
                // If where condition is passed as a string which contains sql we have to ignore
                // as mongo is not a sql database
                return typeof optionsOrConditions.where === "string"
                    ? {}
                    : optionsOrConditions.where;
            return optionsOrConditions;
        }
        /**
         * Converts FindOneOptions to mongodb query.
         */
        convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) {
            if (!optionsOrConditions)
                return undefined;
            if (FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(optionsOrConditions))
                // If where condition is passed as a string which contains sql we have to ignore
                // as mongo is not a sql database
                return typeof optionsOrConditions.where === "string"
                    ? {}
                    : optionsOrConditions.where;
            return optionsOrConditions;
        }
        /**
         * Converts FindOptions into mongodb order by criteria.
         */
        convertFindOptionsOrderToOrderCriteria(order) {
            return Object.keys(order).reduce((orderCriteria, key) => {
                switch (order[key]) {
                    case "DESC":
                        orderCriteria[key] = -1;
                        break;
                    case "ASC":
                        orderCriteria[key] = 1;
                        break;
                    default:
                        orderCriteria[key] = order[key];
                }
                return orderCriteria;
            }, {});
        }
        /**
         * Converts FindOptions into mongodb select by criteria.
         */
        convertFindOptionsSelectToProjectCriteria(selects) {
            return selects.reduce((projectCriteria, key) => {
                projectCriteria[key] = 1;
                return projectCriteria;
            }, {});
        }
        /**
         * Ensures given id is an id for query.
         */
        convertMixedCriteria(metadata, idMap) {
            const objectIdInstance = PlatformTools_3.PlatformTools.load("mongodb").ObjectID;
            // check first if it's ObjectId compatible:
            // string, number, Buffer, ObjectId or ObjectId-like
            if (objectIdInstance.isValid(idMap)) {
                return {
                    "_id": new objectIdInstance(idMap)
                };
            }
            // if it's some other type of object build a query from the columns
            // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance
            if (idMap instanceof Object) {
                return metadata.columns.reduce((query, column) => {
                    const columnValue = column.getEntityValue(idMap);
                    if (columnValue !== undefined)
                        query[column.databasePath] = columnValue;
                    return query;
                }, {});
            }
            // last resort: try to convert it to an ObjectID anyway
            // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.
            // it can still pass with null/undefined
            return {
                "_id": new objectIdInstance(idMap)
            };
        }
        /**
         * Overrides cursor's toArray and next methods to convert results to entity automatically.
         */
        applyEntityTransformationToCursor(metadata, cursor) {
            const ParentCursor = PlatformTools_3.PlatformTools.load("mongodb").Cursor;
            const queryRunner = this.queryRunner;
            cursor.toArray = function (callback) {
                if (callback) {
                    ParentCursor.prototype.toArray.call(this, (error, results) => {
                        if (error) {
                            callback(error, results);
                            return;
                        }
                        const transformer = new DocumentToEntityTransformer_1.DocumentToEntityTransformer();
                        const entities = transformer.transformAll(results, metadata);
                        // broadcast "load" events
                        const broadcastResult = new BroadcasterResult_1.BroadcasterResult();
                        queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);
                        Promise.all(broadcastResult.promises).then(() => callback(error, entities));
                    });
                }
                else {
                    return ParentCursor.prototype.toArray.call(this).then((results) => {
                        const transformer = new DocumentToEntityTransformer_1.DocumentToEntityTransformer();
                        const entities = transformer.transformAll(results, metadata);
                        // broadcast "load" events
                        const broadcastResult = new BroadcasterResult_1.BroadcasterResult();
                        queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);
                        return Promise.all(broadcastResult.promises).then(() => entities);
                    });
                }
            };
            cursor.next = function (callback) {
                if (callback) {
                    ParentCursor.prototype.next.call(this, (error, result) => {
                        if (error || !result) {
                            callback(error, result);
                            return;
                        }
                        const transformer = new DocumentToEntityTransformer_1.DocumentToEntityTransformer();
                        const entity = transformer.transform(result, metadata);
                        // broadcast "load" events
                        const broadcastResult = new BroadcasterResult_1.BroadcasterResult();
                        queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);
                        Promise.all(broadcastResult.promises).then(() => callback(error, entity));
                    });
                }
                else {
                    return ParentCursor.prototype.next.call(this).then((result) => {
                        if (!result)
                            return result;
                        const transformer = new DocumentToEntityTransformer_1.DocumentToEntityTransformer();
                        const entity = transformer.transform(result, metadata);
                        // broadcast "load" events
                        const broadcastResult = new BroadcasterResult_1.BroadcasterResult();
                        queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);
                        return Promise.all(broadcastResult.promises).then(() => entity);
                    });
                }
            };
        }
    }
    exports.MongoEntityManager = MongoEntityManager;
});
define("typeorm/repository/MongoRepository", ["require", "exports", "typeorm/repository/Repository"], function (require, exports, Repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MongoRepository = void 0;
    /**
     * Repository used to manage mongodb documents of a single entity type.
     */
    class MongoRepository extends Repository_1.Repository {
        // -------------------------------------------------------------------------
        // Overridden Methods
        // -------------------------------------------------------------------------
        /**
         * Raw SQL query execution is not supported by MongoDB.
         * Calling this method will return an error.
         */
        query(query, parameters) {
            throw new Error(`Queries aren't supported by MongoDB.`);
        }
        /**
         * Using Query Builder with MongoDB is not supported yet.
         * Calling this method will return an error.
         */
        createQueryBuilder(alias, queryRunner) {
            throw new Error(`Query Builder is not supported by MongoDB.`);
        }
        /**
         * Finds entities that match given find options or conditions.
         */
        find(optionsOrConditions) {
            return this.manager.find(this.metadata.target, optionsOrConditions);
        }
        /**
         * Finds entities that match given find options or conditions.
         * Also counts all entities that match given conditions,
         * but ignores pagination settings (from and take options).
         */
        findAndCount(optionsOrConditions) {
            return this.manager.findAndCount(this.metadata.target, optionsOrConditions);
        }
        /**
         * Finds entities by ids.
         * Optionally find options can be applied.
         */
        findByIds(ids, optionsOrConditions) {
            return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);
        }
        /**
         * Finds first entity that matches given conditions and/or find options.
         */
        findOne(optionsOrConditions, maybeOptions) {
            return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);
        }
        /**
         * Creates a cursor for a query that can be used to iterate over results from MongoDB.
         */
        createCursor(query) {
            return this.manager.createCursor(this.metadata.target, query);
        }
        /**
         * Creates a cursor for a query that can be used to iterate over results from MongoDB.
         * This returns modified version of cursor that transforms each result into Entity model.
         */
        createEntityCursor(query) {
            return this.manager.createEntityCursor(this.metadata.target, query);
        }
        /**
         * Execute an aggregation framework pipeline against the collection.
         */
        aggregate(pipeline, options) {
            return this.manager.aggregate(this.metadata.target, pipeline, options);
        }
        /**
         * Execute an aggregation framework pipeline against the collection.
         * This returns modified version of cursor that transforms each result into Entity model.
         */
        aggregateEntity(pipeline, options) {
            return this.manager.aggregateEntity(this.metadata.target, pipeline, options);
        }
        /**
         * Perform a bulkWrite operation without a fluent API.
         */
        bulkWrite(operations, options) {
            return this.manager.bulkWrite(this.metadata.target, operations, options);
        }
        /**
         * Count number of matching documents in the db to a query.
         */
        count(query, options) {
            return this.manager.count(this.metadata.target, query || {}, options);
        }
        /**
         * Creates an index on the db and collection.
         */
        createCollectionIndex(fieldOrSpec, options) {
            return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);
        }
        /**
         * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.
         * Earlier version of MongoDB will throw a command not supported error.
         * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.
         */
        createCollectionIndexes(indexSpecs) {
            return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);
        }
        /**
         * Delete multiple documents on MongoDB.
         */
        deleteMany(query, options) {
            return this.manager.deleteMany(this.metadata.tableName, query, options);
        }
        /**
         * Delete a document on MongoDB.
         */
        deleteOne(query, options) {
            return this.manager.deleteOne(this.metadata.tableName, query, options);
        }
        /**
         * The distinct command returns returns a list of distinct values for the given key across a collection.
         */
        distinct(key, query, options) {
            return this.manager.distinct(this.metadata.tableName, key, query, options);
        }
        /**
         * Drops an index from this collection.
         */
        dropCollectionIndex(indexName, options) {
            return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);
        }
        /**
         * Drops all indexes from the collection.
         */
        dropCollectionIndexes() {
            return this.manager.dropCollectionIndexes(this.metadata.tableName);
        }
        /**
         * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndDelete(query, options) {
            return this.manager.findOneAndDelete(this.metadata.tableName, query, options);
        }
        /**
         * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndReplace(query, replacement, options) {
            return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);
        }
        /**
         * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.
         */
        findOneAndUpdate(query, update, options) {
            return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);
        }
        /**
         * Execute a geo search using a geo haystack index on a collection.
         */
        geoHaystackSearch(x, y, options) {
            return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);
        }
        /**
         * Execute the geoNear command to search for items in the collection.
         */
        geoNear(x, y, options) {
            return this.manager.geoNear(this.metadata.tableName, x, y, options);
        }
        /**
         * Run a group command across a collection.
         */
        group(keys, condition, initial, reduce, finalize, command, options) {
            return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        collectionIndexes() {
            return this.manager.collectionIndexes(this.metadata.tableName);
        }
        /**
         * Retrieve all the indexes on the collection.
         */
        collectionIndexExists(indexes) {
            return this.manager.collectionIndexExists(this.metadata.tableName, indexes);
        }
        /**
         * Retrieves this collections index info.
         */
        collectionIndexInformation(options) {
            return this.manager.collectionIndexInformation(this.metadata.tableName, options);
        }
        /**
         * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.
         */
        initializeOrderedBulkOp(options) {
            return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);
        }
        /**
         * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
         */
        initializeUnorderedBulkOp(options) {
            return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);
        }
        /**
         * Inserts an array of documents into MongoDB.
         */
        insertMany(docs, options) {
            return this.manager.insertMany(this.metadata.tableName, docs, options);
        }
        /**
         * Inserts a single document into MongoDB.
         */
        insertOne(doc, options) {
            return this.manager.insertOne(this.metadata.tableName, doc, options);
        }
        /**
         * Returns if the collection is a capped collection.
         */
        isCapped() {
            return this.manager.isCapped(this.metadata.tableName);
        }
        /**
         * Get the list of all indexes information for the collection.
         */
        listCollectionIndexes(options) {
            return this.manager.listCollectionIndexes(this.metadata.tableName, options);
        }
        /**
         * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
         */
        mapReduce(map, reduce, options) {
            return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);
        }
        /**
         * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.
         * There are no ordering guarantees for returned results.
         */
        parallelCollectionScan(options) {
            return this.manager.parallelCollectionScan(this.metadata.tableName, options);
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        reIndex() {
            return this.manager.reIndex(this.metadata.tableName);
        }
        /**
         * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
         */
        rename(newName, options) {
            return this.manager.rename(this.metadata.tableName, newName, options);
        }
        /**
         * Replace a document on MongoDB.
         */
        replaceOne(query, doc, options) {
            return this.manager.replaceOne(this.metadata.tableName, query, doc, options);
        }
        /**
         * Get all the collection statistics.
         */
        stats(options) {
            return this.manager.stats(this.metadata.tableName, options);
        }
        /**
         * Update multiple documents on MongoDB.
         */
        updateMany(query, update, options) {
            return this.manager.updateMany(this.metadata.tableName, query, update, options);
        }
        /**
         * Update a single document on MongoDB.
         */
        updateOne(query, update, options) {
            return this.manager.updateOne(this.metadata.tableName, query, update, options);
        }
    }
    exports.MongoRepository = MongoRepository;
});
define("typeorm/driver/sqlite-abstract/AbstractSqliteDriver", ["require", "exports", "typeorm/util/DateUtils", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, DateUtils_1, RdbmsSchemaBuilder_1, OrmUtils_1, ApplyValueTransformers_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractSqliteDriver = void 0;
    /**
     * Organizes communication with sqlite DBMS.
     */
    class AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm
             * @see https://sqlite.org/datatype3.html
             */
            this.supportedDataTypes = [
                "int",
                "integer",
                "tinyint",
                "smallint",
                "mediumint",
                "bigint",
                "unsigned big int",
                "int2",
                "int8",
                "integer",
                "character",
                "varchar",
                "varying character",
                "nchar",
                "native character",
                "nvarchar",
                "text",
                "clob",
                "text",
                "blob",
                "real",
                "double",
                "double precision",
                "float",
                "real",
                "numeric",
                "decimal",
                "boolean",
                "date",
                "time",
                "datetime"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "character",
                "varchar",
                "varying character",
                "nchar",
                "native character",
                "nvarchar",
                "text",
                "blob",
                "clob"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "real",
                "double",
                "double precision",
                "float",
                "real",
                "numeric",
                "decimal",
                "date",
                "time",
                "datetime"
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "real",
                "double",
                "double precision",
                "float",
                "real",
                "numeric",
                "decimal",
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "datetime",
                createDateDefault: "datetime('now')",
                updateDate: "datetime",
                updateDateDefault: "datetime('now')",
                deleteDate: "datetime",
                deleteDateNullable: true,
                version: "integer",
                treeLevel: "integer",
                migrationId: "integer",
                migrationName: "varchar",
                migrationTimestamp: "bigint",
                cacheId: "int",
                cacheIdentifier: "varchar",
                cacheTime: "bigint",
                cacheDuration: "int",
                cacheQuery: "text",
                cacheResult: "text",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "text",
            };
            this.connection = connection;
            this.options = connection.options;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         */
        async connect() {
            this.databaseConnection = await this.createDatabaseConnection();
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.queryRunner = undefined;
                this.databaseConnection.close((err) => err ? fail(err) : ok());
            });
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_1.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_2.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean || columnMetadata.type === "boolean") {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_1.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_1.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                // to string conversation needs because SQLite stores date as integer number, when date came as Object
                // TODO: think about `toUTC` conversion
                return DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_1.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_1.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                return DateUtils_1.DateUtils.simpleEnumToString(value);
            }
            return value;
        }
        /**
         * Prepares given value to a value to be hydrated, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_2.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean || columnMetadata.type === "boolean") {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                /**
                 * Fix date conversion issue
                 *
                 * If the format of the date string is "2018-03-14 02:33:33.906", Safari (and iOS WKWebView) will convert it to an invalid date object.
                 * We need to modify the date string to "2018-03-14T02:33:33.906Z" and Safari will convert it correctly.
                 *
                 * ISO 8601
                 * https://www.w3.org/TR/NOTE-datetime
                 */
                if (value && typeof value === "string") {
                    // There are various valid time string formats a sqlite time string might have:
                    // https://www.sqlite.org/lang_datefunc.html
                    // There are two separate fixes we may need to do:
                    //   1) Add 'T' separator if space is used instead
                    //   2) Add 'Z' UTC suffix if no timezone or offset specified
                    if (/^\d\d\d\d-\d\d-\d\d \d\d:\d\d/.test(value)) {
                        value = value.replace(" ", "T");
                    }
                    if (/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d(:\d\d(\.\d\d\d)?)?$/.test(value)) {
                        value += "Z";
                    }
                }
                value = DateUtils_1.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_1.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_1.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_1.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_1.DateUtils.stringToSimpleJson(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                value = DateUtils_1.DateUtils.stringToSimpleEnum(value, columnMetadata);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_2.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const builtParameters = Object.keys(nativeParameters).map(key => {
                // Mapping boolean values to their numeric representation
                if (typeof nativeParameters[key] === "boolean") {
                    return nativeParameters[key] === true ? 1 : 0;
                }
                return nativeParameters[key];
            });
            if (!parameters || !Object.keys(parameters).length)
                return [sql, builtParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v) => {
                        builtParameters.push(v);
                        return "?";
                        // return "$" + builtParameters.length;
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else {
                    builtParameters.push(value);
                    return "?";
                    // return "$" + builtParameters.length;
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, builtParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return "\"" + columnName + "\"";
        }
        /**
         * Build full table name with database name, schema name and table name.
         * E.g. "myDB"."mySchema"."myTable"
         *
         * Returns only simple table name because all inherited drivers does not supports schema and database.
         */
        buildTableName(tableName, schema, database) {
            return tableName;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "int") {
                return "integer";
            }
            else if (column.type === String) {
                return "varchar";
            }
            else if (column.type === Date) {
                return "datetime";
            }
            else if (column.type === Boolean) {
                return "boolean";
            }
            else if (column.type === "uuid") {
                return "varchar";
            }
            else if (column.type === "simple-array") {
                return "text";
            }
            else if (column.type === "simple-json") {
                return "text";
            }
            else if (column.type === "simple-enum") {
                return "varchar";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if (typeof defaultValue === "number") {
                return "" + defaultValue;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "1" : "0";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else if (defaultValue === null) {
                return undefined;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);
        }
        /**
         * Calculates column length taking into account the default length values.
         */
        getColumnLength(column) {
            return column.length ? column.length.toString() : "";
        }
        /**
         * Normalizes "default" value of the column.
         */
        createFullType(column) {
            let type = column.type;
            if (column.enum) {
                return "varchar";
            }
            if (column.length) {
                type += "(" + column.length + ")";
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += "(" + column.precision + "," + column.scale + ")";
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += "(" + column.precision + ")";
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return Promise.resolve();
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            return Promise.resolve();
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult, entityIndex, entityNum) {
            const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {
                let value;
                if (generatedColumn.generationStrategy === "increment" && insertResult) {
                    // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.
                    // see also: SqliteQueryRunner.query()
                    value = insertResult - entityNum + entityIndex + 1;
                    // } else if (generatedColumn.generationStrategy === "uuid") {
                    //     value = insertValue[generatedColumn.databaseName];
                }
                if (!value)
                    return map;
                return OrmUtils_1.OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
            }, {});
            return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                // console.log("table:", columnMetadata.entityMetadata.tableName);
                // console.log("name:", tableColumn.name, columnMetadata.databaseName);
                // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                // console.log("length:", tableColumn.length, columnMetadata.length);
                // console.log("precision:", tableColumn.precision, columnMetadata.precision);
                // console.log("scale:", tableColumn.scale, columnMetadata.scale);
                // console.log("comment:", tableColumn.comment, columnMetadata.comment);
                // console.log("default:", tableColumn.default, columnMetadata.default);
                // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                // console.log("==========================================");
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadata.length
                    || tableColumn.precision !== columnMetadata.precision
                    || tableColumn.scale !== columnMetadata.scale
                    //  || tableColumn.comment !== columnMetadata.comment || // todo
                    || this.normalizeDefault(columnMetadata) !== tableColumn.default
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated);
            });
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return false;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            // return "$" + (index + 1);
            return "?";
            // return "$" + parameterName;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        createDatabaseConnection() {
            throw new Error("Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers");
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            // dependencies have to be loaded in the specific driver
        }
    }
    exports.AbstractSqliteDriver = AbstractSqliteDriver;
});
define("typeorm/repository/TreeRepository", ["require", "exports", "typeorm/repository/Repository", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver"], function (require, exports, Repository_2, AbstractSqliteDriver_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeRepository = void 0;
    /**
     * Repository with additional functions to work with trees.
     *
     * @see Repository
     */
    class TreeRepository extends Repository_2.Repository {
        // todo: implement moving
        // todo: implement removing
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Gets complete trees for all roots in the table.
         */
        async findTrees() {
            const roots = await this.findRoots();
            await Promise.all(roots.map(root => this.findDescendantsTree(root)));
            return roots;
        }
        /**
         * Roots are entities that have no ancestors. Finds them all.
         */
        findRoots() {
            const escapeAlias = (alias) => this.manager.connection.driver.escape(alias);
            const escapeColumn = (column) => this.manager.connection.driver.escape(column);
            const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(this.metadata.treeParentRelation.propertyName, this.metadata.primaryColumns[0].propertyName);
            return this.createQueryBuilder("treeEntity")
                .where(`${escapeAlias("treeEntity")}.${escapeColumn(parentPropertyName)} IS NULL`)
                .getMany();
        }
        /**
         * Gets all children (descendants) of the given entity. Returns them all in a flat array.
         */
        findDescendants(entity) {
            return this
                .createDescendantsQueryBuilder("treeEntity", "treeClosure", entity)
                .getMany();
        }
        /**
         * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.
         */
        findDescendantsTree(entity) {
            // todo: throw exception if there is no column of this relation?
            return this
                .createDescendantsQueryBuilder("treeEntity", "treeClosure", entity)
                .getRawAndEntities()
                .then(entitiesAndScalars => {
                const relationMaps = this.createRelationMaps("treeEntity", entitiesAndScalars.raw);
                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);
                return entity;
            });
        }
        /**
         * Gets number of descendants of the entity.
         */
        countDescendants(entity) {
            return this
                .createDescendantsQueryBuilder("treeEntity", "treeClosure", entity)
                .getCount();
        }
        /**
         * Creates a query builder used to get descendants of the entities in a tree.
         */
        createDescendantsQueryBuilder(alias, closureTableAlias, entity) {
            // create shortcuts for better readability
            const escape = (alias) => this.manager.connection.driver.escape(alias);
            if (this.metadata.treeType === "closure-table") {
                const joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {
                    return escape(closureTableAlias) + "." + escape(column.propertyPath) + " = " + escape(alias) + "." + escape(column.referencedColumn.propertyPath);
                }).join(" AND ");
                const parameters = {};
                const whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {
                    parameters[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);
                    return escape(closureTableAlias) + "." + escape(column.propertyPath) + " = :" + column.referencedColumn.propertyName;
                }).join(" AND ");
                return this
                    .createQueryBuilder(alias)
                    .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)
                    .where(whereCondition)
                    .setParameters(parameters);
            }
            else if (this.metadata.treeType === "nested-set") {
                const whereCondition = alias + "." + this.metadata.nestedSetLeftColumn.propertyPath + " BETWEEN " +
                    "joined." + this.metadata.nestedSetLeftColumn.propertyPath + " AND joined." + this.metadata.nestedSetRightColumn.propertyPath;
                const parameters = {};
                const joinCondition = this.metadata.treeParentRelation.joinColumns.map(joinColumn => {
                    const parameterName = joinColumn.referencedColumn.propertyPath.replace(".", "_");
                    parameters[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);
                    return "joined." + joinColumn.referencedColumn.propertyPath + " = :" + parameterName;
                }).join(" AND ");
                return this
                    .createQueryBuilder(alias)
                    .innerJoin(this.metadata.targetName, "joined", whereCondition)
                    .where(joinCondition, parameters);
            }
            else if (this.metadata.treeType === "materialized-path") {
                return this
                    .createQueryBuilder(alias)
                    .where(qb => {
                    const subQuery = qb.subQuery()
                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn.propertyPath}`, "path")
                        .from(this.metadata.target, this.metadata.targetName)
                        .whereInIds(this.metadata.getEntityIdMap(entity));
                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);
                    if (this.manager.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) {
                        return `${alias}.${this.metadata.materializedPathColumn.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;
                    }
                    else {
                        return `${alias}.${this.metadata.materializedPathColumn.propertyPath} LIKE CONCAT(${subQuery.getQuery()}, '%')`;
                    }
                });
            }
            throw new Error(`Supported only in tree entities`);
        }
        /**
         * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.
         */
        findAncestors(entity) {
            return this
                .createAncestorsQueryBuilder("treeEntity", "treeClosure", entity)
                .getMany();
        }
        /**
         * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.
         */
        findAncestorsTree(entity) {
            // todo: throw exception if there is no column of this relation?
            return this
                .createAncestorsQueryBuilder("treeEntity", "treeClosure", entity)
                .getRawAndEntities()
                .then(entitiesAndScalars => {
                const relationMaps = this.createRelationMaps("treeEntity", entitiesAndScalars.raw);
                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);
                return entity;
            });
        }
        /**
         * Gets number of ancestors of the entity.
         */
        countAncestors(entity) {
            return this
                .createAncestorsQueryBuilder("treeEntity", "treeClosure", entity)
                .getCount();
        }
        /**
         * Creates a query builder used to get ancestors of the entities in the tree.
         */
        createAncestorsQueryBuilder(alias, closureTableAlias, entity) {
            // create shortcuts for better readability
            // const escape = (alias: string) => this.manager.connection.driver.escape(alias);
            if (this.metadata.treeType === "closure-table") {
                const joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {
                    return closureTableAlias + "." + column.propertyPath + " = " + alias + "." + column.referencedColumn.propertyPath;
                }).join(" AND ");
                const parameters = {};
                const whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {
                    parameters[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);
                    return closureTableAlias + "." + column.propertyPath + " = :" + column.referencedColumn.propertyName;
                }).join(" AND ");
                return this
                    .createQueryBuilder(alias)
                    .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)
                    .where(whereCondition)
                    .setParameters(parameters);
            }
            else if (this.metadata.treeType === "nested-set") {
                const joinCondition = "joined." + this.metadata.nestedSetLeftColumn.propertyPath + " BETWEEN " +
                    alias + "." + this.metadata.nestedSetLeftColumn.propertyPath + " AND " + alias + "." + this.metadata.nestedSetRightColumn.propertyPath;
                const parameters = {};
                const whereCondition = this.metadata.treeParentRelation.joinColumns.map(joinColumn => {
                    const parameterName = joinColumn.referencedColumn.propertyPath.replace(".", "_");
                    parameters[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);
                    return "joined." + joinColumn.referencedColumn.propertyPath + " = :" + parameterName;
                }).join(" AND ");
                return this
                    .createQueryBuilder(alias)
                    .innerJoin(this.metadata.targetName, "joined", joinCondition)
                    .where(whereCondition, parameters);
            }
            else if (this.metadata.treeType === "materialized-path") {
                // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');
                return this
                    .createQueryBuilder(alias)
                    .where(qb => {
                    const subQuery = qb.subQuery()
                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn.propertyPath}`, "path")
                        .from(this.metadata.target, this.metadata.targetName)
                        .whereInIds(this.metadata.getEntityIdMap(entity));
                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);
                    if (this.manager.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) {
                        return `${subQuery.getQuery()} LIKE ${alias}.${this.metadata.materializedPathColumn.propertyPath} || '%'`;
                    }
                    else {
                        return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.metadata.materializedPathColumn.propertyPath}, '%')`;
                    }
                });
            }
            throw new Error(`Supported only in tree entities`);
        }
        /**
         * Moves entity to the children of then given entity.
         *
        move(entity: Entity, to: Entity): Promise<void> {
            return Promise.resolve();
        } */
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        createRelationMaps(alias, rawResults) {
            return rawResults.map(rawResult => {
                const joinColumn = this.metadata.treeParentRelation.joinColumns[0];
                // fixes issue #2518, default to databaseName property when givenDatabaseName is not set
                const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;
                const id = rawResult[alias + "_" + this.metadata.primaryColumns[0].databaseName];
                const parentId = rawResult[alias + "_" + joinColumnName];
                return {
                    id: this.manager.connection.driver.prepareHydratedValue(id, this.metadata.primaryColumns[0]),
                    parentId: this.manager.connection.driver.prepareHydratedValue(parentId, joinColumn),
                };
            });
        }
        buildChildrenEntityTree(entity, entities, relationMaps) {
            const childProperty = this.metadata.treeChildrenRelation.propertyName;
            const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);
            const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);
            const childIds = new Set(childRelationMaps.map(relationMap => relationMap.id));
            entity[childProperty] = entities.filter(entity => childIds.has(this.metadata.primaryColumns[0].getEntityValue(entity)));
            entity[childProperty].forEach((childEntity) => {
                this.buildChildrenEntityTree(childEntity, entities, relationMaps);
            });
        }
        buildParentEntityTree(entity, entities, relationMaps) {
            const parentProperty = this.metadata.treeParentRelation.propertyName;
            const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);
            const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);
            const parentEntity = entities.find(entity => {
                if (!parentRelationMap)
                    return false;
                return this.metadata.primaryColumns[0].getEntityValue(entity) === parentRelationMap.parentId;
            });
            if (parentEntity) {
                entity[parentProperty] = parentEntity;
                this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);
            }
        }
    }
    exports.TreeRepository = TreeRepository;
});
define("typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlainObjectToNewEntityTransformer = void 0;
    /**
     * Transforms plain old javascript object
     * Entity is constructed based on its entity metadata.
     */
    class PlainObjectToNewEntityTransformer {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        transform(newEntity, object, metadata, getLazyRelationsPromiseValue = false) {
            // console.log("groupAndTransform entity:", newEntity);
            // console.log("groupAndTransform object:", object);
            this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);
            // console.log("result:", newEntity);
            return newEntity;
        }
        // -------------------------------------------------------------------------
        // Private Methods
        // -------------------------------------------------------------------------
        /**
         * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated
         * we need to group our result and we must have some unique id (primary key in our case)
         */
        groupAndTransform(entity, object, metadata, getLazyRelationsPromiseValue = false) {
            // console.log("groupAndTransform entity:", entity);
            // console.log("groupAndTransform object:", object);
            // copy regular column properties from the given object
            metadata.nonVirtualColumns.forEach(column => {
                const objectColumnValue = column.getEntityValue(object);
                if (objectColumnValue !== undefined)
                    column.setEntityValue(entity, objectColumnValue);
            });
            // // copy relation properties from the given object
            if (metadata.relations.length) {
                metadata.relations.forEach(relation => {
                    let entityRelatedValue = relation.getEntityValue(entity);
                    const objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);
                    if (objectRelatedValue === undefined)
                        return;
                    if (relation.isOneToMany || relation.isManyToMany) {
                        if (!Array.isArray(objectRelatedValue))
                            return;
                        if (!entityRelatedValue) {
                            entityRelatedValue = [];
                            relation.setEntityValue(entity, entityRelatedValue);
                        }
                        objectRelatedValue.forEach(objectRelatedValueItem => {
                            // check if we have this item from the merging object in the original entity we merge into
                            let objectRelatedValueEntity = entityRelatedValue.find(entityRelatedValueItem => {
                                return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);
                            });
                            // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array
                            if (!objectRelatedValueEntity) {
                                objectRelatedValueEntity = relation.inverseEntityMetadata.create();
                                entityRelatedValue.push(objectRelatedValueEntity);
                            }
                            this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);
                        });
                    }
                    else {
                        // if related object isn't an object (direct relation id for example)
                        // we just set it to the entity relation, we don't need anything more from it
                        // however we do it only if original entity does not have this relation set to object
                        // to prevent full overriding of objects
                        if (!(objectRelatedValue instanceof Object)) {
                            if (!(entityRelatedValue instanceof Object))
                                relation.setEntityValue(entity, objectRelatedValue);
                            return;
                        }
                        if (!entityRelatedValue) {
                            entityRelatedValue = relation.inverseEntityMetadata.create();
                            relation.setEntityValue(entity, entityRelatedValue);
                        }
                        this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);
                    }
                });
            }
        }
    }
    exports.PlainObjectToNewEntityTransformer = PlainObjectToNewEntityTransformer;
});
define("typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlainObjectToDatabaseEntityTransformer = void 0;
    /**
     */
    class LoadMapItem {
        constructor(plainEntity, metadata, parentLoadMapItem, relation) {
            this.plainEntity = plainEntity;
            this.metadata = metadata;
            this.parentLoadMapItem = parentLoadMapItem;
            this.relation = relation;
        }
        get target() {
            return this.metadata.target;
        }
        get id() {
            return this.metadata.getEntityIdMixedMap(this.plainEntity);
        }
    }
    class LoadMap {
        constructor() {
            this.loadMapItems = [];
        }
        get mainLoadMapItem() {
            return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);
        }
        addLoadMap(newLoadMap) {
            const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);
            if (!item)
                this.loadMapItems.push(newLoadMap);
        }
        fillEntities(target, entities) {
            entities.forEach(entity => {
                const item = this.loadMapItems.find(loadMapItem => {
                    return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);
                });
                if (item)
                    item.entity = entity;
            });
        }
        groupByTargetIds() {
            const groups = [];
            this.loadMapItems.forEach(loadMapItem => {
                let group = groups.find(group => group.target === loadMapItem.target);
                if (!group) {
                    group = { target: loadMapItem.target, ids: [] };
                    groups.push(group);
                }
                group.ids.push(loadMapItem.id);
            });
            return groups;
        }
    }
    /**
     * Transforms plain old javascript object
     * Entity is constructed based on its entity metadata.
     */
    class PlainObjectToDatabaseEntityTransformer {
        constructor(manager) {
            this.manager = manager;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        async transform(plainObject, metadata) {
            // if plain object does not have id then nothing to load really
            if (!metadata.hasAllPrimaryKeys(plainObject))
                return Promise.reject("Given object does not have a primary column, cannot transform it to database entity.");
            // create a special load map that will hold all metadata that will be used to operate with entities easily
            const loadMap = new LoadMap();
            const fillLoadMap = (entity, entityMetadata, parentLoadMapItem, relation) => {
                const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);
                loadMap.addLoadMap(item);
                entityMetadata
                    .extractRelationValuesFromEntity(entity, metadata.relations)
                    .filter(value => value !== null && value !== undefined)
                    .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));
            };
            fillLoadMap(plainObject, metadata);
            // load all entities and store them in the load map
            await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => {
                return this.manager
                    .findByIds(targetWithIds.target, targetWithIds.ids)
                    .then(entities => loadMap.fillEntities(targetWithIds.target, entities));
            }));
            // go through each item in the load map and set their entity relationship using metadata stored in load map
            loadMap.loadMapItems.forEach(loadMapItem => {
                if (!loadMapItem.relation ||
                    !loadMapItem.entity ||
                    !loadMapItem.parentLoadMapItem ||
                    !loadMapItem.parentLoadMapItem.entity)
                    return;
                if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {
                    if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])
                        loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];
                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);
                }
                else {
                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;
                }
            });
            return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;
        }
    }
    exports.PlainObjectToDatabaseEntityTransformer = PlainObjectToDatabaseEntityTransformer;
});
define("typeorm/error/CustomRepositoryNotFoundError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomRepositoryNotFoundError = void 0;
    /**
     * Thrown if custom repository was not found.
     */
    class CustomRepositoryNotFoundError extends Error {
        constructor(repository) {
            super();
            this.name = "CustomRepositoryNotFoundError";
            Object.setPrototypeOf(this, CustomRepositoryNotFoundError.prototype);
            this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} was not found. ` +
                `Did you forgot to put @EntityRepository decorator on it?`;
        }
    }
    exports.CustomRepositoryNotFoundError = CustomRepositoryNotFoundError;
});
define("typeorm/error/CustomRepositoryDoesNotHaveEntityError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomRepositoryDoesNotHaveEntityError = void 0;
    /**
     * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.
     */
    class CustomRepositoryDoesNotHaveEntityError extends Error {
        constructor(repository) {
            super();
            this.name = "CustomRepositoryDoesNotHaveEntityError";
            Object.setPrototypeOf(this, CustomRepositoryDoesNotHaveEntityError.prototype);
            this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +
                `Did you forget to specify entity for it @EntityRepository(MyEntity)? `;
        }
    }
    exports.CustomRepositoryDoesNotHaveEntityError = CustomRepositoryDoesNotHaveEntityError;
});
define("typeorm/repository/AbstractRepository", ["require", "exports", "typeorm/error/CustomRepositoryDoesNotHaveEntityError", "typeorm/index", "typeorm/error/CustomRepositoryNotFoundError"], function (require, exports, CustomRepositoryDoesNotHaveEntityError_1, index_2, CustomRepositoryNotFoundError_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractRepository = void 0;
    /**
     * Provides abstract class for custom repositories that do not inherit from original orm Repository.
     * Contains all most-necessary methods to simplify code in the custom repository.
     * All methods are protected thus not exposed and it allows to create encapsulated custom repository.
     *
     * @experimental
     */
    class AbstractRepository {
        // -------------------------------------------------------------------------
        // Protected Accessors
        // -------------------------------------------------------------------------
        /**
         * Gets the original ORM repository for the entity that is managed by this repository.
         * If current repository does not manage any entity, then exception will be thrown.
         */
        get repository() {
            const target = this.getCustomRepositoryTarget(this);
            if (!target)
                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);
            return this.manager.getRepository(target);
        }
        /**
         * Gets the original ORM tree repository for the entity that is managed by this repository.
         * If current repository does not manage any entity, then exception will be thrown.
         */
        get treeRepository() {
            const target = this.getCustomRepositoryTarget(this);
            if (!target)
                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);
            return this.manager.getTreeRepository(target);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new query builder for the repository's entity that can be used to build a sql query.
         * If current repository does not manage any entity, then exception will be thrown.
         */
        createQueryBuilder(alias) {
            const target = this.getCustomRepositoryTarget(this.constructor);
            if (!target)
                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);
            return this.manager.getRepository(target).createQueryBuilder(alias);
        }
        /**
         * Creates a new query builder for the given entity that can be used to build a sql query.
         */
        createQueryBuilderFor(entity, alias) {
            return this.getRepositoryFor(entity).createQueryBuilder(alias);
        }
        /**
         * Gets the original ORM repository for the given entity class.
         */
        getRepositoryFor(entity) {
            return this.manager.getRepository(entity);
        }
        /**
         * Gets the original ORM tree repository for the given entity class.
         */
        getTreeRepositoryFor(entity) {
            return this.manager.getTreeRepository(entity);
        }
        // -------------------------------------------------------------------------
        // Private Methods
        // -------------------------------------------------------------------------
        /**
         * Gets custom repository's managed entity.
         * If given custom repository does not manage any entity then undefined will be returned.
         */
        getCustomRepositoryTarget(customRepository) {
            const entityRepositoryMetadataArgs = index_2.getMetadataArgsStorage().entityRepositories.find(repository => {
                return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);
            });
            if (!entityRepositoryMetadataArgs)
                throw new CustomRepositoryNotFoundError_1.CustomRepositoryNotFoundError(customRepository);
            return entityRepositoryMetadataArgs.entity;
        }
    }
    exports.AbstractRepository = AbstractRepository;
});
define("typeorm/error/CustomRepositoryCannotInheritRepositoryError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomRepositoryCannotInheritRepositoryError = void 0;
    /**
     * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.
     */
    class CustomRepositoryCannotInheritRepositoryError extends Error {
        constructor(repository) {
            super();
            this.name = "CustomRepositoryCannotInheritRepositoryError";
            Object.setPrototypeOf(this, CustomRepositoryCannotInheritRepositoryError.prototype);
            this.message = `Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +
                ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`;
        }
    }
    exports.CustomRepositoryCannotInheritRepositoryError = CustomRepositoryCannotInheritRepositoryError;
});
define("typeorm/error/RepositoryNotFoundError", ["require", "exports", "typeorm/index"], function (require, exports, index_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepositoryNotFoundError = void 0;
    /**
     * Thrown when repository for the given class is not found.
     */
    class RepositoryNotFoundError extends Error {
        constructor(connectionName, entityClass) {
            super();
            this.name = "RepositoryNotFoundError";
            Object.setPrototypeOf(this, RepositoryNotFoundError.prototype);
            let targetName;
            if (entityClass instanceof index_3.EntitySchema) {
                targetName = entityClass.options.name;
            }
            else if (typeof entityClass === "function") {
                targetName = entityClass.name;
            }
            else if (typeof entityClass === "object" && "name" in entityClass) {
                targetName = entityClass.name;
            }
            else {
                targetName = entityClass;
            }
            this.message = `No repository for "${targetName}" was found. Looks like this entity is not registered in ` +
                `current "${connectionName}" connection?`;
        }
    }
    exports.RepositoryNotFoundError = RepositoryNotFoundError;
});
define("typeorm/error/RepositoryNotTreeError", ["require", "exports", "typeorm/index"], function (require, exports, index_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepositoryNotTreeError = void 0;
    /**
     * Thrown when repository for the given class is not found.
     */
    class RepositoryNotTreeError extends Error {
        constructor(entityClass) {
            super();
            this.name = "RepositoryNotTreeError";
            Object.setPrototypeOf(this, RepositoryNotTreeError.prototype);
            let targetName;
            if (entityClass instanceof index_4.EntitySchema) {
                targetName = entityClass.options.name;
            }
            else if (typeof entityClass === "function") {
                targetName = entityClass.name;
            }
            else if (typeof entityClass === "object" && "name" in entityClass) {
                targetName = entityClass.name;
            }
            else {
                targetName = entityClass;
            }
            this.message = `Repository of the "${targetName}" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`;
        }
    }
    exports.RepositoryNotTreeError = RepositoryNotTreeError;
});
define("typeorm/repository/RepositoryFactory", ["require", "exports", "typeorm/repository/TreeRepository", "typeorm/repository/Repository", "typeorm/driver/mongodb/MongoDriver", "typeorm/repository/MongoRepository"], function (require, exports, TreeRepository_1, Repository_3, MongoDriver_1, MongoRepository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepositoryFactory = void 0;
    /**
     * Factory used to create different types of repositories.
     */
    class RepositoryFactory {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a repository.
         */
        create(manager, metadata, queryRunner) {
            if (metadata.treeType) {
                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
                // however we need these properties for internal work of the class
                const repository = new TreeRepository_1.TreeRepository();
                Object.assign(repository, {
                    manager: manager,
                    metadata: metadata,
                    queryRunner: queryRunner,
                });
                return repository;
            }
            else {
                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
                // however we need these properties for internal work of the class
                let repository;
                if (manager.connection.driver instanceof MongoDriver_1.MongoDriver) {
                    repository = new MongoRepository_1.MongoRepository();
                }
                else {
                    repository = new Repository_3.Repository();
                }
                Object.assign(repository, {
                    manager: manager,
                    metadata: metadata,
                    queryRunner: queryRunner,
                });
                return repository;
            }
        }
    }
    exports.RepositoryFactory = RepositoryFactory;
});
define("typeorm/error/TreeRepositoryNotSupportedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeRepositoryNotSupportedError = void 0;
    class TreeRepositoryNotSupportedError extends Error {
        constructor(driver) {
            super();
            this.name = "TreeRepositoryNotSupportedError";
            Object.setPrototypeOf(this, TreeRepositoryNotSupportedError.prototype);
            this.message = `Tree repositories are not supported in ${driver.options.type} driver.`;
        }
    }
    exports.TreeRepositoryNotSupportedError = TreeRepositoryNotSupportedError;
});
define("typeorm/error/MustBeEntityError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MustBeEntityError = void 0;
    /**
     * Thrown when method expects entity but instead something else is given.
     */
    class MustBeEntityError extends Error {
        constructor(operation, wrongValue) {
            super();
            this.name = "MustBeEntityError";
            Object.setPrototypeOf(this, MustBeEntityError.prototype);
            this.message = `Cannot ${operation}, given value must be an entity, instead "${wrongValue}" is given.`;
        }
    }
    exports.MustBeEntityError = MustBeEntityError;
});
define("typeorm/persistence/SubjectChangeMap", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/persistence/Subject", ["require", "exports", "typeorm/util/OrmUtils"], function (require, exports, OrmUtils_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Subject = void 0;
    /**
     * Subject is a subject of persistence.
     * It holds information about each entity that needs to be persisted:
     * - what entity should be persisted
     * - what is database representation of the persisted entity
     * - what entity metadata of the persisted entity
     * - what is allowed to with persisted entity (insert/update/remove)
     *
     * Having this collection of subjects we can perform database queries.
     */
    class Subject {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Subject identifier.
             * This identifier is not limited to table entity primary columns.
             * This can be entity id or ids as well as some unique entity properties, like name or title.
             * Insert / Update / Remove operation will be executed by a given identifier.
             */
            this.identifier = undefined;
            /**
             * Copy of entity but with relational ids fulfilled.
             */
            this.entityWithFulfilledIds = undefined;
            /**
             * Indicates if database entity was loaded.
             * No matter if it was found or not, it indicates the fact of loading.
             */
            this.databaseEntityLoaded = false;
            /**
             * Changes needs to be applied in the database for the given subject.
             */
            this.changeMaps = [];
            /**
             * Indicates if this subject can be inserted into the database.
             * This means that this subject either is newly persisted, either can be inserted by cascades.
             */
            this.canBeInserted = false;
            /**
             * Indicates if this subject can be updated in the database.
             * This means that this subject either was persisted, either can be updated by cascades.
             */
            this.canBeUpdated = false;
            /**
             * Indicates if this subject MUST be removed from the database.
             * This means that this subject either was removed, either was removed by cascades.
             */
            this.mustBeRemoved = false;
            /**
             * Indicates if this subject can be soft-removed from the database.
             * This means that this subject either was soft-removed, either was soft-removed by cascades.
             */
            this.canBeSoftRemoved = false;
            /**
             * Indicates if this subject can be recovered from the database.
             * This means that this subject either was recovered, either was recovered by cascades.
             */
            this.canBeRecovered = false;
            /**
             * Relations updated by the change maps.
             */
            this.updatedRelationMaps = [];
            /**
             * List of updated columns
             */
            this.diffColumns = [];
            /**
             * List of updated relations
             */
            this.diffRelations = [];
            this.metadata = options.metadata;
            this.entity = options.entity;
            this.parentSubject = options.parentSubject;
            if (options.canBeInserted !== undefined)
                this.canBeInserted = options.canBeInserted;
            if (options.canBeUpdated !== undefined)
                this.canBeUpdated = options.canBeUpdated;
            if (options.mustBeRemoved !== undefined)
                this.mustBeRemoved = options.mustBeRemoved;
            if (options.canBeSoftRemoved !== undefined)
                this.canBeSoftRemoved = options.canBeSoftRemoved;
            if (options.canBeRecovered !== undefined)
                this.canBeRecovered = options.canBeRecovered;
            if (options.identifier !== undefined)
                this.identifier = options.identifier;
            if (options.changeMaps !== undefined)
                this.changeMaps.push(...options.changeMaps);
            this.recompute();
        }
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        /**
         * Checks if this subject must be inserted into the database.
         * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)
         * and if it does not have database entity set.
         */
        get mustBeInserted() {
            return this.canBeInserted && !this.databaseEntity;
        }
        /**
         * Checks if this subject must be updated into the database.
         * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)
         * and if it does have differentiated columns or relations.
         */
        get mustBeUpdated() {
            return this.canBeUpdated &&
                this.identifier &&
                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity)) &&
                // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&
                this.changeMaps.length > 0;
        }
        /**
         * Checks if this subject must be soft-removed into the database.
         * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)
         * and if it does have differentiated columns or relations.
         */
        get mustBeSoftRemoved() {
            return this.canBeSoftRemoved &&
                this.identifier &&
                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));
        }
        /**
         * Checks if this subject must be recovered into the database.
         * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)
         * and if it does have differentiated columns or relations.
         */
        get mustBeRecovered() {
            return this.canBeRecovered &&
                this.identifier &&
                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a value set needs to be inserted / updated in the database.
         * Value set is based on the entity and change maps of the subject.
         * Important note: this method pops data from this subject's change maps.
         */
        createValueSetAndPopChangeMap() {
            const changeMapsWithoutValues = [];
            const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {
                let value = changeMap.value;
                if (value instanceof Subject) {
                    // referenced columns can refer on values both which were just inserted and which were present in the model
                    // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database
                    // so, here we check if we have a value set then we simply use it as value to get our reference column values
                    // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data
                    value = value.insertedValueSet ? value.insertedValueSet : value.entity;
                }
                // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);
                let valueMap;
                if (this.metadata.isJunction && changeMap.column) {
                    valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));
                }
                else if (changeMap.column) {
                    valueMap = changeMap.column.createValueMap(value);
                }
                else if (changeMap.relation) {
                    // value can be a related object, for example: post.question = { id: 1 }
                    // or value can be a null or direct relation id, e.g. post.question = 1
                    // if its a direction relation id then we just set it to the valueMap,
                    // however if its an object then we need to extract its relation id map and set it to the valueMap
                    if (value instanceof Object) {
                        // get relation id, e.g. referenced column name and its value,
                        // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }
                        const relationId = changeMap.relation.getRelationIdMap(value);
                        // but relation id can be empty, for example in the case when you insert a new post with category
                        // and both post and category are newly inserted objects (by cascades) and in this case category will not have id
                        // this means we need to insert post without question id and update post's questionId once question be inserted
                        // that's why we create a new changeMap operation for future updation of the post entity
                        if (relationId === undefined) {
                            changeMapsWithoutValues.push(changeMap);
                            this.canBeUpdated = true;
                            return updateMap;
                        }
                        valueMap = changeMap.relation.createValueMap(relationId);
                        this.updatedRelationMaps.push({ relation: changeMap.relation, value: relationId });
                    }
                    else { // value can be "null" or direct relation id here
                        valueMap = changeMap.relation.createValueMap(value);
                        this.updatedRelationMaps.push({ relation: changeMap.relation, value: value });
                    }
                }
                OrmUtils_2.OrmUtils.mergeDeep(updateMap, valueMap);
                return updateMap;
            }, {});
            this.changeMaps = changeMapsWithoutValues;
            return changeSet;
        }
        /**
         * Recomputes entityWithFulfilledIds and identifier when entity changes.
         */
        recompute() {
            if (this.entity) {
                this.entityWithFulfilledIds = Object.assign({}, this.entity);
                if (this.parentSubject) {
                    this.metadata.primaryColumns.forEach(primaryColumn => {
                        if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject.metadata) {
                            const value = primaryColumn.referencedColumn.getEntityValue(this.parentSubject.entity);
                            primaryColumn.setEntityValue(this.entityWithFulfilledIds, value);
                        }
                    });
                }
                this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);
            }
            else if (this.databaseEntity) {
                this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);
            }
        }
    }
    exports.Subject = Subject;
});
define("typeorm/persistence/SubjectTopoligicalSorter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectTopoligicalSorter = void 0;
    /**
     * Orders insert or remove subjects in proper order (using topological sorting)
     * to make sure insert or remove operations are executed in a proper order.
     */
    class SubjectTopoligicalSorter {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(subjects) {
            this.subjects = [...subjects]; // copy subjects to prevent changing of sent array
            this.metadatas = this.getUniqueMetadatas(this.subjects);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Sorts (orders) subjects in their topological order.
         */
        sort(direction) {
            // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here
            if (!this.metadatas.length)
                return this.subjects;
            const sortedSubjects = [];
            // first if we sort for deletion all junction subjects
            // junction subjects are subjects without entity and database entity set
            if (direction === "delete") {
                const junctionSubjects = this.subjects.filter(subject => !subject.entity && !subject.databaseEntity);
                sortedSubjects.push(...junctionSubjects);
                this.removeAlreadySorted(junctionSubjects);
            }
            // next we always insert entities with non-nullable relations, sort them first
            const nonNullableDependencies = this.getNonNullableDependencies();
            let sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);
            if (direction === "insert")
                sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();
            // so we have a sorted entity targets
            // go thought each of them and find all subjects with sorted entity target
            // add those sorted targets and remove them from original array of targets
            sortedNonNullableEntityTargets.forEach(sortedEntityTarget => {
                const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);
                sortedSubjects.push(...entityTargetSubjects);
                this.removeAlreadySorted(entityTargetSubjects);
            });
            // next sort all other entities
            // same process as in above but with other entities
            const otherDependencies = this.getDependencies();
            let sortedOtherEntityTargets = this.toposort(otherDependencies);
            if (direction === "insert")
                sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();
            sortedOtherEntityTargets.forEach(sortedEntityTarget => {
                const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);
                sortedSubjects.push(...entityTargetSubjects);
                this.removeAlreadySorted(entityTargetSubjects);
            });
            // if we have something left in the subjects add them as well
            sortedSubjects.push(...this.subjects);
            return sortedSubjects;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Removes already sorted subjects from this.subjects list of subjects.
         */
        removeAlreadySorted(subjects) {
            subjects.forEach(subject => {
                this.subjects.splice(this.subjects.indexOf(subject), 1);
            });
        }
        /**
         * Extracts all unique metadatas from the given subjects.
         */
        getUniqueMetadatas(subjects) {
            const metadatas = [];
            subjects.forEach(subject => {
                if (metadatas.indexOf(subject.metadata) === -1)
                    metadatas.push(subject.metadata);
            });
            return metadatas;
        }
        /**
         * Gets dependency tree for all entity metadatas with non-nullable relations.
         * We need to execute insertions first for entities which non-nullable relations.
         */
        getNonNullableDependencies() {
            return this.metadatas.reduce((dependencies, metadata) => {
                metadata.relationsWithJoinColumns.forEach(relation => {
                    if (relation.isNullable)
                        return;
                    dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);
                });
                return dependencies;
            }, []);
        }
        /**
         * Gets dependency tree for all entity metadatas with non-nullable relations.
         * We need to execute insertions first for entities which non-nullable relations.
         */
        getDependencies() {
            return this.metadatas.reduce((dependencies, metadata) => {
                metadata.relationsWithJoinColumns.forEach(relation => {
                    // if relation is self-referenced we skip it
                    if (relation.inverseEntityMetadata === metadata)
                        return;
                    dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);
                });
                return dependencies;
            }, []);
        }
        /**
         * Sorts given graph using topological sorting algorithm.
         *
         * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.
         */
        toposort(edges) {
            function uniqueNodes(arr) {
                let res = [];
                for (let i = 0, len = arr.length; i < len; i++) {
                    let edge = arr[i];
                    if (res.indexOf(edge[0]) < 0)
                        res.push(edge[0]);
                    if (res.indexOf(edge[1]) < 0)
                        res.push(edge[1]);
                }
                return res;
            }
            const nodes = uniqueNodes(edges);
            let cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor;
            while (i--) {
                if (!visited[i])
                    visit(nodes[i], i, []);
            }
            function visit(node, i, predecessors) {
                if (predecessors.indexOf(node) >= 0) {
                    throw new Error("Cyclic dependency: " + JSON.stringify(node)); // todo: better error
                }
                if (!~nodes.indexOf(node)) {
                    throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
                }
                if (visited[i])
                    return;
                visited[i] = true;
                // outgoing edges
                let outgoing = edges.filter(function (edge) {
                    return edge[0] === node;
                });
                if (i = outgoing.length) {
                    let preds = predecessors.concat(node);
                    do {
                        let child = outgoing[--i][1];
                        visit(child, nodes.indexOf(child), preds);
                    } while (i);
                }
                sorted[--cursor] = node;
            }
            return sorted;
        }
    }
    exports.SubjectTopoligicalSorter = SubjectTopoligicalSorter;
});
define("typeorm/persistence/SubjectChangedColumnsComputer", ["require", "exports", "typeorm/util/DateUtils", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, DateUtils_2, OrmUtils_3, ApplyValueTransformers_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectChangedColumnsComputer = void 0;
    /**
     * Finds what columns are changed in the subject entities.
     */
    class SubjectChangedColumnsComputer {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Finds what columns are changed in the subject entities.
         */
        compute(subjects) {
            subjects.forEach(subject => {
                this.computeDiffColumns(subject);
                this.computeDiffRelationalColumns(subjects, subject);
            });
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Differentiate columns from the updated entity and entity stored in the database.
         */
        computeDiffColumns(subject) {
            // if there is no persisted entity then nothing to compute changed in it
            if (!subject.entity)
                return;
            subject.metadata.columns.forEach(column => {
                // ignore special columns
                if (column.isVirtual ||
                    column.isDiscriminator // ||
                // column.isUpdateDate ||
                // column.isVersion ||
                // column.isCreateDate
                )
                    return;
                const changeMap = subject.changeMaps.find(changeMap => changeMap.column === column);
                if (changeMap) {
                    subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);
                }
                // get user provided value - column value from the user provided persisted entity
                const entityValue = column.getEntityValue(subject.entity);
                // we don't perform operation over undefined properties (but we DO need null properties!)
                if (entityValue === undefined)
                    return;
                // if there is no database entity then all columns are treated as new, e.g. changed
                if (subject.databaseEntity) {
                    // get database value of the column
                    let databaseValue = column.getEntityValue(subject.databaseEntity, true);
                    // filter out "relational columns" only in the case if there is a relation object in entity
                    if (column.relationMetadata) {
                        const value = column.relationMetadata.getEntityValue(subject.entity);
                        if (value !== null && value !== undefined)
                            return;
                    }
                    let normalizedValue = entityValue;
                    // normalize special values to make proper comparision
                    if (entityValue !== null) {
                        switch (column.type) {
                            case "date":
                                normalizedValue = DateUtils_2.DateUtils.mixedDateToDateString(entityValue);
                                break;
                            case "time":
                            case "time with time zone":
                            case "time without time zone":
                            case "timetz":
                                normalizedValue = DateUtils_2.DateUtils.mixedDateToTimeString(entityValue);
                                break;
                            case "datetime":
                            case "datetime2":
                            case Date:
                            case "timestamp":
                            case "timestamp without time zone":
                            case "timestamp with time zone":
                            case "timestamp with local time zone":
                            case "timestamptz":
                                normalizedValue = DateUtils_2.DateUtils.mixedDateToUtcDatetimeString(entityValue);
                                databaseValue = DateUtils_2.DateUtils.mixedDateToUtcDatetimeString(databaseValue);
                                break;
                            case "json":
                            case "jsonb":
                                // JSON.stringify doesn't work because postgresql sorts jsonb before save.
                                // If you try to save json '[{"messages": "", "attribute Key": "", "level":""}] ' as jsonb,
                                // then postgresql will save it as '[{"level": "", "message":"", "attributeKey": ""}]'
                                if (OrmUtils_3.OrmUtils.deepCompare(entityValue, databaseValue))
                                    return;
                                break;
                            case "simple-array":
                                normalizedValue = DateUtils_2.DateUtils.simpleArrayToString(entityValue);
                                databaseValue = DateUtils_2.DateUtils.simpleArrayToString(databaseValue);
                                break;
                            case "simple-enum":
                                normalizedValue = DateUtils_2.DateUtils.simpleEnumToString(entityValue);
                                databaseValue = DateUtils_2.DateUtils.simpleEnumToString(databaseValue);
                                break;
                            case "simple-json":
                                normalizedValue = DateUtils_2.DateUtils.simpleJsonToString(entityValue);
                                databaseValue = DateUtils_2.DateUtils.simpleJsonToString(databaseValue);
                                break;
                        }
                        if (column.transformer) {
                            normalizedValue = ApplyValueTransformers_3.ApplyValueTransformers.transformTo(column.transformer, entityValue);
                        }
                    }
                    // if value is not changed - then do nothing
                    if (normalizedValue === databaseValue)
                        return;
                }
                subject.diffColumns.push(column);
                subject.changeMaps.push({
                    column: column,
                    value: entityValue
                });
            });
        }
        /**
         * Difference columns of the owning one-to-one and many-to-one columns.
         */
        computeDiffRelationalColumns(allSubjects, subject) {
            // if there is no persisted entity then nothing to compute changed in it
            if (!subject.entity)
                return;
            subject.metadata.relationsWithJoinColumns.forEach(relation => {
                // get the related entity from the persisted entity
                let relatedEntity = relation.getEntityValue(subject.entity);
                // we don't perform operation over undefined properties (but we DO need null properties!)
                if (relatedEntity === undefined)
                    return;
                // if there is no database entity then all relational columns are treated as new, e.g. changed
                if (subject.databaseEntity) {
                    // here we cover two scenarios:
                    // 1. related entity can be another entity which is natural way
                    // 2. related entity can be just an entity id
                    // if relation entity is just a relation id set (for example post.tag = 1)
                    // then we create an id map from it to make a proper comparision
                    let relatedEntityRelationIdMap = relatedEntity;
                    if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)
                        relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap);
                    // get database related entity. Since loadRelationIds are used on databaseEntity
                    // related entity will contain only its relation ids
                    const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);
                    // if relation ids are equal then we don't need to update anything
                    const areRelatedIdsEqual = OrmUtils_3.OrmUtils.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);
                    if (areRelatedIdsEqual) {
                        return;
                    }
                    else {
                        subject.diffRelations.push(relation);
                    }
                }
                // if there is an inserted subject for the related entity of the persisted entity then use it as related entity
                // this code is used for related entities without ids to be properly inserted (and then updated if needed)
                const valueSubject = allSubjects.find(subject => subject.mustBeInserted && subject.entity === relatedEntity);
                if (valueSubject)
                    relatedEntity = valueSubject;
                // find if there is already a relation to be changed
                const changeMap = subject.changeMaps.find(changeMap => changeMap.relation === relation);
                if (changeMap) { // and update its value if it was found
                    changeMap.value = relatedEntity;
                }
                else { // if it wasn't found add a new relation for change
                    subject.changeMaps.push({
                        relation: relation,
                        value: relatedEntity
                    });
                }
            });
        }
    }
    exports.SubjectChangedColumnsComputer = SubjectChangedColumnsComputer;
});
define("typeorm/error/SubjectWithoutIdentifierError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectWithoutIdentifierError = void 0;
    /**
     * Thrown when operation is going to be executed on a subject without identifier.
     * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.
     * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.
     */
    class SubjectWithoutIdentifierError extends Error {
        constructor(subject) {
            super();
            this.name = "SubjectWithoutIdentifierError";
            Object.setPrototypeOf(this, SubjectWithoutIdentifierError.prototype);
            this.message = `Internal error. Subject ${subject.metadata.targetName} must have an identifier to perform operation. ` +
                `Please report a github issue if you face this error.`;
        }
    }
    exports.SubjectWithoutIdentifierError = SubjectWithoutIdentifierError;
});
define("typeorm/error/SubjectRemovedAndUpdatedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectRemovedAndUpdatedError = void 0;
    /**
     * Thrown when same object is scheduled for remove and updation at the same time.
     */
    class SubjectRemovedAndUpdatedError extends Error {
        constructor(subject) {
            super();
            this.name = "SubjectRemovedAndUpdatedError";
            Object.setPrototypeOf(this, SubjectRemovedAndUpdatedError.prototype);
            this.message = `Removed entity "${subject.metadata.name}" is also scheduled for update operation. ` +
                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`;
        }
    }
    exports.SubjectRemovedAndUpdatedError = SubjectRemovedAndUpdatedError;
});
define("typeorm/query-runner/BaseQueryRunner", ["require", "exports", "typeorm/driver/Query", "typeorm/driver/SqlInMemory"], function (require, exports, Query_1, SqlInMemory_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseQueryRunner = void 0;
    class BaseQueryRunner {
        constructor() {
            // -------------------------------------------------------------------------
            // Public Properties
            // -------------------------------------------------------------------------
            /**
             * Indicates if connection for this query runner is released.
             * Once its released, query runner cannot run queries anymore.
             */
            this.isReleased = false;
            /**
             * Indicates if transaction is in progress.
             */
            this.isTransactionActive = false;
            /**
             * Stores temporarily user data.
             * Useful for sharing data with subscribers.
             */
            this.data = {};
            /**
             * All synchronized tables in the database.
             */
            this.loadedTables = [];
            /**
             * All synchronized views in the database.
             */
            this.loadedViews = [];
            /**
             * Indicates if special query runner mode in which sql queries won't be executed is enabled.
             */
            this.sqlMemoryMode = false;
            /**
             * Sql-s stored if "sql in memory" mode is enabled.
             */
            this.sqlInMemory = new SqlInMemory_2.SqlInMemory();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Loads given table's data from the database.
         */
        async getTable(tablePath) {
            this.loadedTables = await this.loadTables([tablePath]);
            return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;
        }
        /**
         * Loads all tables (with given names) from the database.
         */
        async getTables(tableNames) {
            this.loadedTables = await this.loadTables(tableNames);
            return this.loadedTables;
        }
        /**
         * Loads given view's data from the database.
         */
        async getView(viewPath) {
            this.loadedViews = await this.loadViews([viewPath]);
            return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;
        }
        /**
         * Loads given view's data from the database.
         */
        async getViews(viewPaths) {
            this.loadedViews = await this.loadViews(viewPaths);
            return this.loadedViews;
        }
        /**
         * Enables special query runner mode in which sql queries won't be executed,
         * instead they will be memorized into a special variable inside query runner.
         * You can get memorized sql using getMemorySql() method.
         */
        enableSqlMemory() {
            this.sqlInMemory = new SqlInMemory_2.SqlInMemory();
            this.sqlMemoryMode = true;
        }
        /**
         * Disables special query runner mode in which sql queries won't be executed
         * started by calling enableSqlMemory() method.
         *
         * Previously memorized sql will be flushed.
         */
        disableSqlMemory() {
            this.sqlInMemory = new SqlInMemory_2.SqlInMemory();
            this.sqlMemoryMode = false;
        }
        /**
         * Flushes all memorized sqls.
         */
        clearSqlMemory() {
            this.sqlInMemory = new SqlInMemory_2.SqlInMemory();
        }
        /**
         * Gets sql stored in the memory. Parameters in the sql are already replaced.
         */
        getMemorySql() {
            return this.sqlInMemory;
        }
        /**
         * Executes up sql queries.
         */
        async executeMemoryUpSql() {
            for (const { query, parameters } of this.sqlInMemory.upQueries) {
                await this.query(query, parameters);
            }
        }
        /**
         * Executes down sql queries.
         */
        async executeMemoryDownSql() {
            for (const { query, parameters } of this.sqlInMemory.downQueries.reverse()) {
                await this.query(query, parameters);
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Gets view from previously loaded views, otherwise loads it from database.
         */
        async getCachedView(viewName) {
            const view = this.loadedViews.find(view => view.name === viewName);
            if (view)
                return view;
            const foundViews = await this.loadViews([viewName]);
            if (foundViews.length > 0) {
                this.loadedViews.push(foundViews[0]);
                return foundViews[0];
            }
            else {
                throw new Error(`View "${viewName}" does not exist.`);
            }
        }
        /**
         * Gets table from previously loaded tables, otherwise loads it from database.
         */
        async getCachedTable(tableName) {
            const table = this.loadedTables.find(table => table.name === tableName);
            if (table)
                return table;
            const foundTables = await this.loadTables([tableName]);
            if (foundTables.length > 0) {
                this.loadedTables.push(foundTables[0]);
                return foundTables[0];
            }
            else {
                throw new Error(`Table "${tableName}" does not exist.`);
            }
        }
        /**
         * Replaces loaded table with given changed table.
         */
        replaceCachedTable(table, changedTable) {
            const foundTable = this.loadedTables.find(loadedTable => loadedTable.name === table.name);
            if (foundTable) {
                foundTable.name = changedTable.name;
                foundTable.columns = changedTable.columns;
                foundTable.indices = changedTable.indices;
                foundTable.foreignKeys = changedTable.foreignKeys;
                foundTable.uniques = changedTable.uniques;
                foundTable.checks = changedTable.checks;
                foundTable.justCreated = changedTable.justCreated;
                foundTable.engine = changedTable.engine;
            }
        }
        getTypeormMetadataTableName() {
            const options = this.connection.driver.options;
            return this.connection.driver.buildTableName("typeorm_metadata", options.schema, options.database);
        }
        /**
         * Checks if at least one of column properties was changed.
         * Does not checks column type, length and autoincrement, because these properties changes separately.
         */
        isColumnChanged(oldColumn, newColumn, checkDefault, checkComment) {
            // this logs need to debug issues in column change detection. Do not delete it!
            // console.log("charset ---------------");
            // console.log(oldColumn.charset !== newColumn.charset);
            // console.log(oldColumn.charset, newColumn.charset);
            // console.log("collation ---------------");
            // console.log(oldColumn.collation !== newColumn.collation);
            // console.log(oldColumn.collation, newColumn.collation);
            // console.log("precision ---------------");
            // console.log(oldColumn.precision !== newColumn.precision);
            // console.log(oldColumn.precision, newColumn.precision);
            // console.log("scale ---------------");
            // console.log(oldColumn.scale !== newColumn.scale);
            // console.log(oldColumn.scale, newColumn.scale);
            // console.log("default ---------------");
            // console.log((checkDefault && oldColumn.default !== newColumn.default));
            // console.log(oldColumn.default, newColumn.default);
            // console.log("isNullable ---------------");
            // console.log(oldColumn.isNullable !== newColumn.isNullable);
            // console.log(oldColumn.isNullable, newColumn.isNullable);
            // console.log("comment ---------------");
            // console.log((checkComment && oldColumn.comment !== newColumn.comment));
            // console.log(oldColumn.comment, newColumn.comment);
            // console.log("enum ---------------");
            // console.log(oldColumn.enum !== newColumn.enum);
            // console.log(oldColumn.enum, newColumn.enum);
            return oldColumn.charset !== newColumn.charset
                || oldColumn.collation !== newColumn.collation
                || oldColumn.precision !== newColumn.precision
                || oldColumn.scale !== newColumn.scale
                || oldColumn.width !== newColumn.width // MySQL only
                || oldColumn.zerofill !== newColumn.zerofill // MySQL only
                || oldColumn.unsigned !== newColumn.unsigned // MySQL only
                || oldColumn.asExpression !== newColumn.asExpression // MySQL only
                || (checkDefault && oldColumn.default !== newColumn.default)
                || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only
                || oldColumn.isNullable !== newColumn.isNullable
                || (checkComment && oldColumn.comment !== newColumn.comment)
                || oldColumn.enum !== newColumn.enum;
        }
        /**
         * Checks if column length is by default.
         */
        isDefaultColumnLength(table, column, length) {
            // if table have metadata, we check if length is specified in column metadata
            if (this.connection.hasMetadata(table.name)) {
                const metadata = this.connection.getMetadata(table.name);
                const columnMetadata = metadata.findColumnWithDatabaseName(column.name);
                if (columnMetadata && columnMetadata.length)
                    return false;
            }
            if (this.connection.driver.dataTypeDefaults
                && this.connection.driver.dataTypeDefaults[column.type]
                && this.connection.driver.dataTypeDefaults[column.type].length) {
                return this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString();
            }
            return false;
        }
        /**
         * Checks if column precision is by default.
         */
        isDefaultColumnPrecision(table, column, precision) {
            // if table have metadata, we check if length is specified in column metadata
            if (this.connection.hasMetadata(table.name)) {
                const metadata = this.connection.getMetadata(table.name);
                const columnMetadata = metadata.findColumnWithDatabaseName(column.name);
                if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)
                    return false;
            }
            if (this.connection.driver.dataTypeDefaults
                && this.connection.driver.dataTypeDefaults[column.type]
                && this.connection.driver.dataTypeDefaults[column.type].precision !== null
                && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)
                return this.connection.driver.dataTypeDefaults[column.type].precision === precision;
            return false;
        }
        /**
         * Checks if column scale is by default.
         */
        isDefaultColumnScale(table, column, scale) {
            // if table have metadata, we check if length is specified in column metadata
            if (this.connection.hasMetadata(table.name)) {
                const metadata = this.connection.getMetadata(table.name);
                const columnMetadata = metadata.findColumnWithDatabaseName(column.name);
                if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)
                    return false;
            }
            if (this.connection.driver.dataTypeDefaults
                && this.connection.driver.dataTypeDefaults[column.type]
                && this.connection.driver.dataTypeDefaults[column.type].scale !== null
                && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)
                return this.connection.driver.dataTypeDefaults[column.type].scale === scale;
            return false;
        }
        /**
         * Executes sql used special for schema build.
         */
        async executeQueries(upQueries, downQueries) {
            if (upQueries instanceof Query_1.Query)
                upQueries = [upQueries];
            if (downQueries instanceof Query_1.Query)
                downQueries = [downQueries];
            this.sqlInMemory.upQueries.push(...upQueries);
            this.sqlInMemory.downQueries.push(...downQueries);
            // if sql-in-memory mode is enabled then simply store sql in memory and return
            if (this.sqlMemoryMode === true)
                return Promise.resolve();
            for (const { query, parameters } of upQueries) {
                await this.query(query, parameters);
            }
        }
    }
    exports.BaseQueryRunner = BaseQueryRunner;
});
define("typeorm/driver/types/IsolationLevel", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/oracle/OracleQueryRunner", ["require", "exports", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/schema-builder/view/View", "typeorm/driver/Query", "typeorm/error/QueryFailedError", "typeorm/schema-builder/table/TableUnique", "typeorm/subscriber/Broadcaster", "typeorm/query-runner/BaseQueryRunner", "typeorm/util/OrmUtils", "typeorm/schema-builder/table/TableCheck", "typeorm/subscriber/BroadcasterResult"], function (require, exports, TransactionAlreadyStartedError_1, TransactionNotStartedError_1, TableColumn_1, Table_1, TableForeignKey_1, TableIndex_1, QueryRunnerAlreadyReleasedError_1, View_1, Query_2, QueryFailedError_1, TableUnique_1, Broadcaster_2, BaseQueryRunner_1, OrmUtils_4, TableCheck_1, BroadcasterResult_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OracleQueryRunner = void 0;
    /**
     * Runs queries on a single oracle database connection.
     */
    class OracleQueryRunner extends BaseQueryRunner_1.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_2.Broadcaster(this);
            this.mode = mode;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            if (this.databaseConnection)
                return Promise.resolve(this.databaseConnection);
            if (this.databaseConnectionPromise)
                return this.databaseConnectionPromise;
            if (this.mode === "slave" && this.driver.isReplicated) {
                this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {
                    this.databaseConnection = connection;
                    return this.databaseConnection;
                });
            }
            else { // master
                this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {
                    this.databaseConnection = connection;
                    return this.databaseConnection;
                });
            }
            return this.databaseConnectionPromise;
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            return new Promise((ok, fail) => {
                this.isReleased = true;
                if (this.databaseConnection) {
                    this.databaseConnection.close((err) => {
                        if (err)
                            return fail(err);
                        ok();
                    });
                }
                else {
                    ok();
                }
            });
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel = "READ COMMITTED") {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_1.TransactionAlreadyStartedError();
            // await this.query("START TRANSACTION");
            if (isolationLevel !== "SERIALIZABLE" && isolationLevel !== "READ COMMITTED") {
                throw new Error(`Oracle only supports SERIALIZABLE and READ COMMITTED isolation`);
            }
            const beforeBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("SET TRANSACTION ISOLATION LEVEL " + isolationLevel);
            this.isTransactionActive = true;
            const afterBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_1.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("COMMIT");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_1.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("ROLLBACK");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_2.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const queryStartTime = +new Date();
                    const handler = (err, result) => {
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        if (err) {
                            this.driver.connection.logger.logQueryError(err, query, parameters, this);
                            return fail(new QueryFailedError_1.QueryFailedError(query, parameters, err));
                        }
                        // TODO: find better solution. Must return result instead of properties
                        ok(result.rows || result.outBinds || result.rowsAffected);
                    };
                    const executionOptions = {
                        autoCommit: this.isTransactionActive ? false : true
                    };
                    const databaseConnection = await this.connect();
                    databaseConnection.execute(query, parameters || {}, executionOptions, handler);
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            throw new Error(`Stream is not supported by Oracle driver.`);
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            return Promise.resolve([]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            return Promise.resolve(false);
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            return Promise.resolve(false);
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;
            const sql = `SELECT "TABLE_NAME" FROM "USER_TABLES" WHERE "TABLE_NAME" = '${tableName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            const tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;
            const sql = `SELECT "COLUMN_NAME" FROM "USER_TAB_COLS" WHERE "TABLE_NAME" = '${tableName}' AND "COLUMN_NAME" = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            await this.query(`CREATE DATABASE IF NOT EXISTS "${database}"`);
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            return Promise.resolve();
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schemas, ifNotExist) {
            throw new Error(`Schema create queries are not supported by Oracle driver.`);
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist) {
            throw new Error(`Schema drop queries are not supported by Oracle driver.`);
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (createIndices) {
                table.indices.forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(tableOrName, ifExist, dropForeignKeys = true, dropIndices = true) {
            // to perform drop queries for foreign keys and indices.
            if (ifExist) {
                const isTableExist = await this.hasTable(tableOrName);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const upQueries = [];
            const downQueries = [];
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_1.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames the given table.
         */
        async renameTable(oldTableOrName, newTableOrName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_1.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            let newTable = oldTable.clone();
            if (newTableOrName instanceof Table_1.Table) {
                newTable = newTableOrName;
            }
            else {
                newTable.name = newTableOrName;
            }
            // rename table
            upQueries.push(new Query_2.Query(`ALTER TABLE "${oldTable.name}" RENAME TO "${newTable.name}"`));
            downQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME TO "${oldTable.name}"`));
            // rename primary key constraint
            if (newTable.primaryColumns.length > 0) {
                const columnNames = newTable.primaryColumns.map(column => column.name);
                const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
                const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
                // build queries
                upQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
            }
            // rename unique constraints
            newTable.uniques.forEach(unique => {
                // build new constraint name
                const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
                // build queries
                upQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                // replace constraint name
                unique.name = newUniqueName;
            });
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                upQueries.push(new Query_2.Query(`ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`));
                downQueries.push(new Query_2.Query(`ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraints
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // build queries
                upQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${newTable.name}" RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            await this.executeQueries(upQueries, downQueries);
            // rename old table and replace it in cached tabled;
            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD ${this.buildCreateColumnSql(column)}`));
            downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP COLUMN "${column.name}"`));
            // create or update primary key constraint
            if (column.isPrimary) {
                const primaryColumns = clonedTable.primaryColumns;
                // if table already have primary key, me must drop it and recreate again
                if (primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                    const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                    upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
                    downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                }
                primaryColumns.push(column);
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(columnIndex));
            }
            // create unique constraint
            if (column.isUnique) {
                const uniqueConstraint = new TableUnique_1.TableUnique({
                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                    columnNames: [column.name]
                });
                clonedTable.uniques.push(uniqueConstraint);
                upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${column.name}")`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${uniqueConstraint.name}"`));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_1.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            await this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn
                ? oldTableColumnOrName
                : table.columns.find(column => column.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid") || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {
                // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.
                // Also, we recreate column if column type changed
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (newColumn.name !== oldColumn.name) {
                    // rename column
                    upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME COLUMN "${oldColumn.name}" TO "${newColumn.name}"`));
                    downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME COLUMN "${newColumn.name}" TO "${oldColumn.name}"`));
                    // rename column primary key constraint
                    if (oldColumn.isPrimary === true) {
                        const primaryColumns = clonedTable.primaryColumns;
                        // build old primary constraint name
                        const columnNames = primaryColumns.map(column => column.name);
                        const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // replace old column name with new column name
                        columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                        columnNames.push(newColumn.name);
                        // build new primary constraint name
                        const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
                    }
                    // rename unique constraints
                    clonedTable.findColumnUniques(oldColumn).forEach(unique => {
                        // build new constraint name
                        unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);
                        unique.columnNames.push(newColumn.name);
                        const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);
                        // build queries
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                        // replace constraint name
                        unique.name = newUniqueName;
                    });
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        upQueries.push(new Query_2.Query(`ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`));
                        downQueries.push(new Query_2.Query(`ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        // build queries
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (this.isColumnChanged(oldColumn, newColumn, true)) {
                    let defaultUp = "";
                    let defaultDown = "";
                    let nullableUp = "";
                    let nullableDown = "";
                    // changing column default
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        defaultUp = `DEFAULT ${newColumn.default}`;
                        if (oldColumn.default !== null && oldColumn.default !== undefined) {
                            defaultDown = `DEFAULT ${oldColumn.default}`;
                        }
                        else {
                            defaultDown = "DEFAULT NULL";
                        }
                    }
                    else if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        defaultUp = "DEFAULT NULL";
                        defaultDown = `DEFAULT ${oldColumn.default}`;
                    }
                    // changing column isNullable property
                    if (newColumn.isNullable !== oldColumn.isNullable) {
                        if (newColumn.isNullable === true) {
                            nullableUp = "NULL";
                            nullableDown = "NOT NULL";
                        }
                        else {
                            nullableUp = "NOT NULL";
                            nullableDown = "NULL";
                        }
                    }
                    upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" MODIFY "${oldColumn.name}" ${this.connection.driver.createFullType(newColumn)} ${defaultUp} ${nullableUp}`));
                    downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" MODIFY "${oldColumn.name}" ${this.connection.driver.createFullType(oldColumn)} ${defaultDown} ${nullableDown}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                            const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                            upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
                        }
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueConstraint = new TableUnique_1.TableUnique({
                            name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name]
                        });
                        clonedTable.uniques.push(uniqueConstraint);
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${uniqueConstraint.name}"`));
                    }
                    else {
                        const uniqueConstraint = clonedTable.uniques.find(unique => {
                            return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);
                        upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${uniqueConstraint.name}"`));
                        downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                    }
                }
                await this.executeQueries(upQueries, downQueries);
                this.replaceCachedTable(table, clonedTable);
            }
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_1.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                upQueries.push(new Query_2.Query(`ALTER TABLE "${clonedTable.name}" DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${clonedTable.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                    upQueries.push(new Query_2.Query(`ALTER TABLE "${clonedTable.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_2.Query(`ALTER TABLE "${clonedTable.name}" DROP CONSTRAINT "${pkName}"`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.dropIndexSql(columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            // drop column check
            const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);
            if (columnCheck) {
                clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
                upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
                downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }
            // drop column unique
            const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
            if (columnUnique) {
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);
                upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));
                downQueries.push(this.createUniqueConstraintSql(table, columnUnique));
            }
            upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP COLUMN "${column.name}"`));
            downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD ${this.buildCreateColumnSql(column)}`));
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            const down = this.dropPrimaryKeySql(clonedTable);
            await this.executeQueries(up, down);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const columnNames = columns.map(column => column.name);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNamesString = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            upQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${pkName}"`));
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!uniqueConstraint.name)
                uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);
            const up = this.createUniqueConstraintSql(table, uniqueConstraint);
            const down = this.dropUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.addUniqueConstraint(uniqueConstraint);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops an unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const uniqueConstraint = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);
            if (!uniqueConstraint)
                throw new Error(`Supplied unique constraint was not found in table ${table.name}`);
            const up = this.dropUniqueConstraintSql(table, uniqueConstraint);
            const down = this.createUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.removeUniqueConstraint(uniqueConstraint);
        }
        /**
         * Creates an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!checkConstraint.name)
                checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            const up = this.createCheckConstraintSql(table, checkConstraint);
            const down = this.dropCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.addCheckConstraint(checkConstraint);
        }
        /**
         * Creates new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            const up = this.dropCheckConstraintSql(table, checkConstraint);
            const down = this.createCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.removeCheckConstraint(checkConstraint);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`Oracle does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Oracle does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`Oracle does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Oracle does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(index);
            await this.executeQueries(up, down);
            table.addIndex(index);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index from the table.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_1.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableName) {
            await this.query(`TRUNCATE TABLE "${tableName}"`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase() {
            await this.startTransaction();
            try {
                const dropViewsQuery = `SELECT 'DROP VIEW "' || VIEW_NAME || '"' AS "query" FROM "USER_VIEWS"`;
                const dropViewQueries = await this.query(dropViewsQuery);
                await Promise.all(dropViewQueries.map(query => this.query(query["query"])));
                const dropTablesQuery = `SELECT 'DROP TABLE "' || TABLE_NAME || '" CASCADE CONSTRAINTS' AS "query" FROM "USER_TABLES"`;
                const dropTableQueries = await this.query(dropTablesQuery);
                await Promise.all(dropTableQueries.map(query => this.query(query["query"])));
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const viewNamesString = viewNames.map(name => "'" + name + "'").join(", ");
            let query = `SELECT "T".* FROM "${this.getTypeormMetadataTableName()}" "T" INNER JOIN "USER_VIEWS" "V" ON "V"."VIEW_NAME" = "T"."name" WHERE "T"."type" = 'VIEW'`;
            if (viewNamesString.length > 0)
                query += ` AND "T"."name" IN (${viewNamesString})`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_1.View();
                view.name = dbView["name"];
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            // load tables, columns, indices and foreign keys
            const tableNamesString = tableNames.map(name => "'" + name + "'").join(", ");
            const tablesSql = `SELECT * FROM "USER_TABLES" WHERE "TABLE_NAME" IN (${tableNamesString})`;
            const columnsSql = `SELECT * FROM "USER_TAB_COLS" WHERE "TABLE_NAME" IN (${tableNamesString})`;
            const indicesSql = `SELECT "IND"."INDEX_NAME", "IND"."TABLE_NAME", "IND"."UNIQUENESS", ` +
                `LISTAGG ("COL"."COLUMN_NAME", ',') WITHIN GROUP (ORDER BY "COL"."COLUMN_NAME") AS "COLUMN_NAMES" ` +
                `FROM "USER_INDEXES" "IND" ` +
                `INNER JOIN "USER_IND_COLUMNS" "COL" ON "COL"."INDEX_NAME" = "IND"."INDEX_NAME" ` +
                `LEFT JOIN "USER_CONSTRAINTS" "CON" ON "CON"."CONSTRAINT_NAME" = "IND"."INDEX_NAME" ` +
                `WHERE "IND"."TABLE_NAME" IN (${tableNamesString}) AND "CON"."CONSTRAINT_NAME" IS NULL ` +
                `GROUP BY "IND"."INDEX_NAME", "IND"."TABLE_NAME", "IND"."UNIQUENESS"`;
            const foreignKeysSql = `SELECT "C"."CONSTRAINT_NAME", "C"."TABLE_NAME", "COL"."COLUMN_NAME", "REF_COL"."TABLE_NAME" AS "REFERENCED_TABLE_NAME", ` +
                `"REF_COL"."COLUMN_NAME" AS "REFERENCED_COLUMN_NAME", "C"."DELETE_RULE" AS "ON_DELETE" ` +
                `FROM "USER_CONSTRAINTS" "C" ` +
                `INNER JOIN "USER_CONS_COLUMNS" "COL" ON "COL"."OWNER" = "C"."OWNER" AND "COL"."CONSTRAINT_NAME" = "C"."CONSTRAINT_NAME" ` +
                `INNER JOIN "USER_CONS_COLUMNS" "REF_COL" ON "REF_COL"."OWNER" = "C"."R_OWNER" AND "REF_COL"."CONSTRAINT_NAME" = "C"."R_CONSTRAINT_NAME" AND "REF_COL"."POSITION" = "COL"."POSITION" ` +
                `WHERE "C"."TABLE_NAME" IN (${tableNamesString}) AND "C"."CONSTRAINT_TYPE" = 'R'`;
            const constraintsSql = `SELECT "C"."CONSTRAINT_NAME", "C"."CONSTRAINT_TYPE", "C"."TABLE_NAME", "COL"."COLUMN_NAME", "C"."SEARCH_CONDITION" ` +
                `FROM "USER_CONSTRAINTS" "C" ` +
                `INNER JOIN "USER_CONS_COLUMNS" "COL" ON "COL"."OWNER" = "C"."OWNER" AND "COL"."CONSTRAINT_NAME" = "C"."CONSTRAINT_NAME" ` +
                `WHERE "C"."TABLE_NAME" IN (${tableNamesString}) AND "C"."CONSTRAINT_TYPE" IN ('C', 'U', 'P') AND "C"."GENERATED" = 'USER NAME'`;
            const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbConstraints] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql),
                this.query(constraintsSql),
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create tables for loaded tables
            return dbTables.map(dbTable => {
                const table = new Table_1.Table();
                table.name = dbTable["TABLE_NAME"];
                // create columns from the loaded columns
                table.columns = dbColumns
                    .filter(dbColumn => dbColumn["TABLE_NAME"] === table.name)
                    .map(dbColumn => {
                    const columnConstraints = dbConstraints.filter(dbConstraint => dbConstraint["TABLE_NAME"] === table.name && dbConstraint["COLUMN_NAME"] === dbColumn["COLUMN_NAME"]);
                    const uniqueConstraint = columnConstraints.find(constraint => constraint["CONSTRAINT_TYPE"] === "U");
                    const isConstraintComposite = uniqueConstraint
                        ? !!dbConstraints.find(dbConstraint => dbConstraint["CONSTRAINT_TYPE"] === "U"
                            && dbConstraint["CONSTRAINT_NAME"] === uniqueConstraint["CONSTRAINT_NAME"]
                            && dbConstraint["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"])
                        : false;
                    const isUnique = !!uniqueConstraint && !isConstraintComposite;
                    const isPrimary = !!columnConstraints.find(constraint => constraint["CONSTRAINT_TYPE"] === "P");
                    const tableColumn = new TableColumn_1.TableColumn();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE"].toLowerCase();
                    if (tableColumn.type.indexOf("(") !== -1)
                        tableColumn.type = tableColumn.type.replace(/\([0-9]*\)/, "");
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {
                        const length = tableColumn.type === "raw" ? dbColumn["DATA_LENGTH"] : dbColumn["CHAR_COL_DECL_LENGTH"];
                        tableColumn.length = length && !this.isDefaultColumnLength(table, tableColumn, length) ? length.toString() : "";
                    }
                    if (tableColumn.type === "number" || tableColumn.type === "float") {
                        if (dbColumn["DATA_PRECISION"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["DATA_PRECISION"]))
                            tableColumn.precision = dbColumn["DATA_PRECISION"];
                        if (dbColumn["DATA_SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["DATA_SCALE"]))
                            tableColumn.scale = dbColumn["DATA_SCALE"];
                    }
                    else if ((tableColumn.type === "timestamp"
                        || tableColumn.type === "timestamp with time zone"
                        || tableColumn.type === "timestamp with local time zone") && dbColumn["DATA_SCALE"] !== null) {
                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["DATA_SCALE"]) ? dbColumn["DATA_SCALE"] : undefined;
                    }
                    tableColumn.default = dbColumn["DATA_DEFAULT"] !== null
                        && dbColumn["DATA_DEFAULT"] !== undefined
                        && dbColumn["DATA_DEFAULT"].trim() !== "NULL" ? tableColumn.default = dbColumn["DATA_DEFAULT"].trim() : undefined;
                    tableColumn.isNullable = dbColumn["NULLABLE"] === "Y";
                    tableColumn.isUnique = isUnique;
                    tableColumn.isPrimary = isPrimary;
                    tableColumn.isGenerated = dbColumn["IDENTITY_COLUMN"] === "YES";
                    if (tableColumn.isGenerated) {
                        tableColumn.generationStrategy = "increment";
                        tableColumn.default = undefined;
                    }
                    tableColumn.comment = ""; // todo
                    return tableColumn;
                });
                // find unique constraints of table, group them by constraint name and build TableUnique.
                const tableUniqueConstraints = OrmUtils_4.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return dbConstraint["TABLE_NAME"] === table.name && dbConstraint["CONSTRAINT_TYPE"] === "U";
                }), dbConstraint => dbConstraint["CONSTRAINT_NAME"]);
                table.uniques = tableUniqueConstraints.map(constraint => {
                    const uniques = dbConstraints.filter(dbC => dbC["CONSTRAINT_NAME"] === constraint["CONSTRAINT_NAME"]);
                    return new TableUnique_1.TableUnique({
                        name: constraint["CONSTRAINT_NAME"],
                        columnNames: uniques.map(u => u["COLUMN_NAME"])
                    });
                });
                // find check constraints of table, group them by constraint name and build TableCheck.
                const tableCheckConstraints = OrmUtils_4.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return dbConstraint["TABLE_NAME"] === table.name && dbConstraint["CONSTRAINT_TYPE"] === "C";
                }), dbConstraint => dbConstraint["CONSTRAINT_NAME"]);
                table.checks = tableCheckConstraints.map(constraint => {
                    const checks = dbConstraints.filter(dbC => dbC["CONSTRAINT_NAME"] === constraint["CONSTRAINT_NAME"]);
                    return new TableCheck_1.TableCheck({
                        name: constraint["CONSTRAINT_NAME"],
                        columnNames: checks.map(c => c["COLUMN_NAME"]),
                        expression: constraint["SEARCH_CONDITION"]
                    });
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_4.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return dbForeignKey["TABLE_NAME"] === table.name;
                }), dbForeignKey => dbForeignKey["CONSTRAINT_NAME"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    return new TableForeignKey_1.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: dbForeignKey["REFERENCED_TABLE_NAME"],
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["ON_DELETE"],
                        onUpdate: "NO ACTION",
                    });
                });
                // create TableIndex objects from the loaded indices
                table.indices = dbIndices
                    .filter(dbIndex => dbIndex["TABLE_NAME"] === table.name)
                    .map(dbIndex => {
                    return new TableIndex_1.TableIndex({
                        name: dbIndex["INDEX_NAME"],
                        columnNames: dbIndex["COLUMN_NAMES"].split(","),
                        isUnique: dbIndex["UNIQUENESS"] === "UNIQUE"
                    });
                });
                return table;
            });
        }
        /**
         * Builds and returns SQL for create table.
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(", ");
            let sql = `CREATE TABLE "${table.name}" (${columnDefinitions}`;
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
                if (!isUniqueExist)
                    table.uniques.push(new TableUnique_1.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name]
                    }));
            });
            if (table.uniques.length > 0) {
                const uniquesSql = table.uniques.map(unique => {
                    const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
                    const columnNames = unique.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    return `CONSTRAINT "${uniqueName}" UNIQUE (${columnNames})`;
                }).join(", ");
                sql += `, ${uniquesSql}`;
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES "${fk.referencedTableName}" (${referencedColumnNames})`;
                    if (fk.onDelete && fk.onDelete !== "NO ACTION") // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            if (primaryColumns.length > 0) {
                const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            return new Query_2.Query(sql);
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrName, ifExist) {
            const tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;
            const query = ifExist ? `DROP TABLE IF EXISTS "${tableName}"` : `DROP TABLE "${tableName}"`;
            return new Query_2.Query(query);
        }
        createViewSql(view) {
            const materializedClause = view.materialized ? "MATERIALIZED " : "";
            if (typeof view.expression === "string") {
                return new Query_2.Query(`CREATE ${materializedClause}VIEW "${view.name}" AS ${view.expression}`);
            }
            else {
                return new Query_2.Query(`CREATE ${materializedClause}VIEW "${view.name}" AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        insertViewDefinitionSql(view) {
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", name: view.name, value: expression })
                .getQueryAndParameters();
            return new Query_2.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            const viewName = viewOrPath instanceof View_1.View ? viewOrPath.name : viewOrPath;
            return new Query_2.Query(`DROP VIEW "${viewName}"`);
        }
        /**
         * Builds remove view sql.
         */
        deleteViewDefinitionSql(viewOrPath) {
            const viewName = viewOrPath instanceof View_1.View ? viewOrPath.name : viewOrPath;
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("name")} = :name`, { name: viewName })
                .getQueryAndParameters();
            return new Query_2.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_2.Query(`CREATE ${index.isUnique ? "UNIQUE " : ""}INDEX "${index.name}" ON "${table.name}" (${columns})`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(indexOrName) {
            let indexName = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName.name : indexOrName;
            return new Query_2.Query(`DROP INDEX "${indexName}"`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            const columnNames = table.primaryColumns.map(column => column.name);
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            return new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${primaryKeyName}"`);
        }
        /**
         * Builds create unique constraint sql.
         */
        createUniqueConstraintSql(table, uniqueConstraint) {
            const columnNames = uniqueConstraint.columnNames.map(column => `"` + column + `"`).join(", ");
            return new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE (${columnNames})`);
        }
        /**
         * Builds drop unique constraint sql.
         */
        dropUniqueConstraintSql(table, uniqueOrName) {
            const uniqueName = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName.name : uniqueOrName;
            return new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${uniqueName}"`);
        }
        /**
         * Builds create check constraint sql.
         */
        createCheckConstraintSql(table, checkConstraint) {
            return new Query_2.Query(`ALTER TABLE "${table.name}" ADD CONSTRAINT "${checkConstraint.name}" CHECK (${checkConstraint.expression})`);
        }
        /**
         * Builds drop check constraint sql.
         */
        dropCheckConstraintSql(table, checkOrName) {
            const checkName = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName.name : checkOrName;
            return new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${checkName}"`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `"` + column + `"`).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `"` + column + `"`).join(",");
            let sql = `ALTER TABLE "${table.name}" ADD CONSTRAINT "${foreignKey.name}" FOREIGN KEY (${columnNames}) ` +
                `REFERENCES "${foreignKey.referencedTableName}" (${referencedColumnNames})`;
            // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata
            if (foreignKey.onDelete && foreignKey.onDelete !== "NO ACTION")
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            return new Query_2.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_2.Query(`ALTER TABLE "${table.name}" DROP CONSTRAINT "${foreignKeyName}"`);
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(column) {
            let c = `"${column.name}" ` + this.connection.driver.createFullType(column);
            if (column.charset)
                c += " CHARACTER SET " + column.charset;
            if (column.collation)
                c += " COLLATE " + column.collation;
            if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL
                c += " DEFAULT " + column.default;
            if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED
                c += " NOT NULL";
            if (column.isGenerated === true && column.generationStrategy === "increment")
                c += " GENERATED BY DEFAULT AS IDENTITY";
            return c;
        }
    }
    exports.OracleQueryRunner = OracleQueryRunner;
});
define("typeorm/driver/oracle/OracleDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/oracle/OracleQueryRunner", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/driver/DriverUtils", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, ConnectionIsNotSetError_2, DriverPackageNotInstalledError_2, OracleQueryRunner_1, DateUtils_3, PlatformTools_4, RdbmsSchemaBuilder_2, DriverUtils_2, OrmUtils_5, ApplyValueTransformers_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OracleDriver = void 0;
    /**
     * Organizes communication with Oracle RDBMS.
     */
    class OracleDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Pool for slave databases.
             * Used in replication.
             */
            this.slaves = [];
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.techonthenet.com/oracle/datatypes.php
             * @see https://docs.oracle.com/cd/B28359_01/server.111/b28318/datatype.htm#CNCPT012
             */
            this.supportedDataTypes = [
                "char",
                "nchar",
                "nvarchar2",
                "varchar2",
                "long",
                "raw",
                "long raw",
                "number",
                "numeric",
                "float",
                "dec",
                "decimal",
                "integer",
                "int",
                "smallint",
                "real",
                "double precision",
                "date",
                "timestamp",
                "timestamp with time zone",
                "timestamp with local time zone",
                "interval year to month",
                "interval day to second",
                "bfile",
                "blob",
                "clob",
                "nclob",
                "rowid",
                "urowid"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "char",
                "nchar",
                "nvarchar2",
                "varchar2",
                "varchar",
                "raw"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "number",
                "float",
                "timestamp",
                "timestamp with time zone",
                "timestamp with local time zone"
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "number"
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "timestamp",
                createDateDefault: "CURRENT_TIMESTAMP",
                updateDate: "timestamp",
                updateDateDefault: "CURRENT_TIMESTAMP",
                deleteDate: "timestamp",
                deleteDateNullable: true,
                version: "number",
                treeLevel: "number",
                migrationId: "number",
                migrationName: "varchar2",
                migrationTimestamp: "number",
                cacheId: "number",
                cacheIdentifier: "varchar2",
                cacheTime: "number",
                cacheDuration: "number",
                cacheQuery: "clob",
                cacheResult: "clob",
                metadataType: "varchar2",
                metadataDatabase: "varchar2",
                metadataSchema: "varchar2",
                metadataTable: "varchar2",
                metadataName: "varchar2",
                metadataValue: "clob",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "char": { length: 1 },
                "nchar": { length: 1 },
                "varchar": { length: 255 },
                "varchar2": { length: 255 },
                "nvarchar2": { length: 255 },
                "raw": { length: 2000 },
                "float": { precision: 126 },
                "timestamp": { precision: 6 },
                "timestamp with time zone": { precision: 6 },
                "timestamp with local time zone": { precision: 6 }
            };
            /**
             * Max length allowed by Oracle for aliases.
             * @see https://docs.oracle.com/database/121/SQLRF/sql_elements008.htm#SQLRF51129
             * > The following list of rules applies to both quoted and nonquoted identifiers unless otherwise indicated
             * > Names must be from 1 to 30 bytes long with these exceptions:
             * > [...]
             *
             * Since Oracle 12.2 (with a compatible driver/client), the limit has been set to 128.
             * @see https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Database-Object-Names-and-Qualifiers.html
             *
             * > If COMPATIBLE is set to a value of 12.2 or higher, then names must be from 1 to 128 bytes long with these exceptions
             */
            this.maxAliasLength = 30;
            this.connection = connection;
            this.options = connection.options;
            if (this.options.useUTC === true) {
                process.env.ORA_SDTZ = 'UTC';
            }
            // load oracle package
            this.loadDependencies();
            // extra oracle setup
            this.oracle.outFormat = this.oracle.OBJECT;
            // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way
            // validate options to make sure everything is set
            // if (!this.options.host)
            //     throw new DriverOptionNotSetError("host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.sid)
            //     throw new DriverOptionNotSetError("sid");
            //
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
            this.oracle.fetchAsString = [this.oracle.CLOB];
            this.oracle.fetchAsBuffer = [this.oracle.BLOB];
            if (this.options.replication) {
                this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {
                    return this.createPool(this.options, slave);
                }));
                this.master = await this.createPool(this.options, this.options.replication.master);
                this.database = this.options.replication.master.database;
            }
            else {
                this.master = await this.createPool(this.options, this.options);
                this.database = this.options.database;
            }
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
            if (!this.master)
                return Promise.reject(new ConnectionIsNotSetError_2.ConnectionIsNotSetError("oracle"));
            await this.closePool(this.master);
            await Promise.all(this.slaves.map(slave => this.closePool(slave)));
            this.master = undefined;
            this.slaves = [];
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_2.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new OracleQueryRunner_1.OracleQueryRunner(this, mode);
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const escapedParameters = Object.keys(nativeParameters).map(key => {
                if (typeof nativeParameters[key] === "boolean")
                    return nativeParameters[key] ? 1 : 0;
                return nativeParameters[key];
            });
            if (!parameters || !Object.keys(parameters).length)
                return [sql, escapedParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v, index) => {
                        escapedParameters.push(v);
                        return `:${key.substr(4)}${index}`;
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else if (typeof value === "boolean") {
                    return value ? 1 : 0;
                }
                else {
                    escapedParameters.push(value);
                    return key;
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, escapedParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return `"${columnName}"`;
        }
        /**
         * Build full table name with database name, schema name and table name.
         * Oracle does not support table schemas. One user can have only one schema.
         */
        buildTableName(tableName, schema, database) {
            return tableName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_4.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                if (typeof value === "string")
                    value = value.replace(/[^0-9-]/g, "");
                return () => `TO_DATE('${DateUtils_3.DateUtils.mixedDateToDateString(value)}', 'YYYY-MM-DD')`;
            }
            else if (columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp with local time zone") {
                return DateUtils_3.DateUtils.mixedDateToDate(value);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_3.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_3.DateUtils.simpleJsonToString(value);
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_4.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean) {
                value = !!value;
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_3.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_3.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp with local time zone") {
                value = DateUtils_3.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "json") {
                value = JSON.parse(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_3.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_3.DateUtils.stringToSimpleJson(value);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_4.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === Boolean || column.type === "numeric"
                || column.type === "dec" || column.type === "decimal" || column.type === "int"
                || column.type === "integer" || column.type === "smallint") {
                return "number";
            }
            else if (column.type === "real" || column.type === "double precision") {
                return "float";
            }
            else if (column.type === String || column.type === "varchar") {
                return "varchar2";
            }
            else if (column.type === Date) {
                return "timestamp";
            }
            else if (column.type === Buffer) {
                return "blob";
            }
            else if (column.type === "uuid") {
                return "varchar2";
            }
            else if (column.type === "simple-array") {
                return "clob";
            }
            else if (column.type === "simple-json") {
                return "clob";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if (typeof defaultValue === "number") {
                return "" + defaultValue;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "1" : "0";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else if (defaultValue === null) {
                return undefined;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);
        }
        /**
         * Calculates column length taking into account the default length values.
         */
        getColumnLength(column) {
            if (column.length)
                return column.length.toString();
            switch (column.type) {
                case String:
                case "varchar":
                case "varchar2":
                case "nvarchar2":
                    return "255";
                case "raw":
                    return "2000";
                case "uuid":
                    return "36";
                default:
                    return "";
            }
        }
        createFullType(column) {
            let type = column.type;
            // used 'getColumnLength()' method, because in Oracle column length is required for some data types.
            if (this.getColumnLength(column)) {
                type += `(${this.getColumnLength(column)})`;
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += "(" + column.precision + "," + column.scale + ")";
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += "(" + column.precision + ")";
            }
            if (column.type === "timestamp with time zone") {
                type = "TIMESTAMP" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "") + " WITH TIME ZONE";
            }
            else if (column.type === "timestamp with local time zone") {
                type = "TIMESTAMP" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "") + " WITH LOCAL TIME ZONE";
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return new Promise((ok, fail) => {
                this.master.getConnection((err, connection, release) => {
                    if (err)
                        return fail(err);
                    ok(connection);
                });
            });
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.slaves.length)
                return this.obtainMasterConnection();
            return new Promise((ok, fail) => {
                const random = Math.floor(Math.random() * this.slaves.length);
                this.slaves[random].getConnection((err, connection) => {
                    if (err)
                        return fail(err);
                    ok(connection);
                });
            });
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult) {
            if (!insertResult)
                return undefined;
            return Object.keys(insertResult).reduce((map, key) => {
                const column = metadata.findColumnWithDatabaseName(key);
                if (column) {
                    OrmUtils_5.OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));
                }
                return map;
            }, {});
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                const isColumnChanged = tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadata.length
                    || tableColumn.precision !== columnMetadata.precision
                    || tableColumn.scale !== columnMetadata.scale
                    // || tableColumn.comment !== columnMetadata.comment
                    || tableColumn.default !== this.normalizeDefault(columnMetadata)
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated);
                // DEBUG SECTION
                // if (isColumnChanged) {
                //     console.log("table:", columnMetadata.entityMetadata.tableName);
                //     console.log("name:", tableColumn.name, columnMetadata.databaseName);
                //     console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                //     console.log("length:", tableColumn.length, columnMetadata.length);
                //     console.log("precision:", tableColumn.precision, columnMetadata.precision);
                //     console.log("scale:", tableColumn.scale, columnMetadata.scale);
                //     console.log("comment:", tableColumn.comment, columnMetadata.comment);
                //     console.log("default:", tableColumn.default, this.normalizeDefault(columnMetadata));
                //     console.log("enum:", tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + "")));
                //     console.log("onUpdate:", tableColumn.onUpdate, columnMetadata.onUpdate);
                //     console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                //     console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                //     console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                //     console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                //     console.log("==========================================");
                // }
                return isColumnChanged;
            });
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return true;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return ":" + (index + 1);
        }
        /**
         * Converts column type in to native oracle type.
         */
        columnTypeToNativeParameter(type) {
            switch (this.normalizeType({ type: type })) {
                case "number":
                case "numeric":
                case "int":
                case "integer":
                case "smallint":
                case "dec":
                case "decimal":
                    return this.oracle.NUMBER;
                case "char":
                case "nchar":
                case "nvarchar2":
                case "varchar2":
                    return this.oracle.STRING;
                case "blob":
                    return this.oracle.BLOB;
                case "clob":
                    return this.oracle.CLOB;
                case "date":
                case "timestamp":
                case "timestamp with time zone":
                case "timestamp with local time zone":
                    return this.oracle.DATE;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Loads all driver dependencies.
         */
        loadDependencies() {
            try {
                this.oracle = PlatformTools_4.PlatformTools.load("oracledb");
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_2.DriverPackageNotInstalledError("Oracle", "oracledb");
            }
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        async createPool(options, credentials) {
            credentials = Object.assign({}, credentials, DriverUtils_2.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way
            // build connection options for the driver
            const connectionOptions = Object.assign({}, {
                user: credentials.username,
                password: credentials.password,
                connectString: credentials.connectString ? credentials.connectString : credentials.host + ":" + credentials.port + "/" + credentials.sid,
            }, options.extra || {});
            // pooling is enabled either when its set explicitly to true,
            // either when its not defined at all (e.g. enabled by default)
            return new Promise((ok, fail) => {
                this.oracle.createPool(connectionOptions, (err, pool) => {
                    if (err)
                        return fail(err);
                    ok(pool);
                });
            });
        }
        /**
         * Closes connection pool.
         */
        async closePool(pool) {
            return new Promise((ok, fail) => {
                pool.close((err) => err ? fail(err) : ok());
                pool = undefined;
            });
        }
    }
    exports.OracleDriver = OracleDriver;
});
define("typeorm/persistence/tree/NestedSetSubjectExecutor", ["require", "exports", "typeorm/util/OrmUtils"], function (require, exports, OrmUtils_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NestedSetSubjectExecutor = void 0;
    /**
     * Executes subject operations for nested set tree entities.
     */
    class NestedSetSubjectExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner) {
            this.queryRunner = queryRunner;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Executes operations when subject is being inserted.
         */
        async insert(subject) {
            const escape = (alias) => this.queryRunner.connection.driver.escape(alias);
            const tableName = this.getTableName(subject.metadata.tablePath);
            const leftColumnName = escape(subject.metadata.nestedSetLeftColumn.databaseName);
            const rightColumnName = escape(subject.metadata.nestedSetRightColumn.databaseName);
            let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
                parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            const parentId = subject.metadata.getEntityIdMap(parent);
            let parentNsRight = undefined;
            if (parentId) {
                parentNsRight = await this.queryRunner.manager
                    .createQueryBuilder()
                    .select(subject.metadata.targetName + "." + subject.metadata.nestedSetRightColumn.propertyPath, "right")
                    .from(subject.metadata.target, subject.metadata.targetName)
                    .whereInIds(parentId)
                    .getRawOne()
                    .then(result => {
                    const value = result ? result["right"] : undefined;
                    // CockroachDB returns numeric types as string
                    return typeof value === "string" ? parseInt(value) : value;
                });
            }
            if (parentNsRight !== undefined) {
                await this.queryRunner.query(`UPDATE ${tableName} SET ` +
                    `${leftColumnName} = CASE WHEN ${leftColumnName} > ${parentNsRight} THEN ${leftColumnName} + 2 ELSE ${leftColumnName} END,` +
                    `${rightColumnName} = ${rightColumnName} + 2 ` +
                    `WHERE ${rightColumnName} >= ${parentNsRight}`);
                OrmUtils_6.OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(parentNsRight), subject.metadata.nestedSetRightColumn.createValueMap(parentNsRight + 1));
            }
            else {
                OrmUtils_6.OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(1), subject.metadata.nestedSetRightColumn.createValueMap(2));
            }
        }
        /**
         * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom
         * schema name, otherwise returns escaped table name.
         */
        getTableName(tablePath) {
            return tablePath.split(".")
                .map(i => {
                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
                if (i === "")
                    return i;
                return this.queryRunner.connection.driver.escape(i);
            }).join(".");
        }
    }
    exports.NestedSetSubjectExecutor = NestedSetSubjectExecutor;
});
define("typeorm/error/CannotAttachTreeChildrenEntityError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotAttachTreeChildrenEntityError = void 0;
    /**
     * Thrown when user saves tree children entity but its parent is not saved yet.
    */
    class CannotAttachTreeChildrenEntityError extends Error {
        constructor(entityName) {
            super();
            this.name = "CannotAttachTreeChildrenEntityError";
            Object.setPrototypeOf(this, CannotAttachTreeChildrenEntityError.prototype);
            this.message = `Cannot attach entity "${entityName}" to its parent. Please make sure parent is saved in the database before saving children nodes.`;
        }
    }
    exports.CannotAttachTreeChildrenEntityError = CannotAttachTreeChildrenEntityError;
});
define("typeorm/persistence/tree/ClosureSubjectExecutor", ["require", "exports", "typeorm/error/CannotAttachTreeChildrenEntityError"], function (require, exports, CannotAttachTreeChildrenEntityError_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClosureSubjectExecutor = void 0;
    /**
     * Executes subject operations for closure entities.
     */
    class ClosureSubjectExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner) {
            this.queryRunner = queryRunner;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Removes all children of the given subject's entity.
    
         async deleteChildrenOf(subject: Subject) {
            // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);
            // console.log("relationValue: ", relationValue);
            // this.queryRunner.manager
            //     .createQueryBuilder()
            //     .from(subject.metadata.closureJunctionTable.target, "tree")
            //     .where("tree.");
        }*/
        /**
         * Executes operations when subject is being inserted.
         */
        async insert(subject) {
            // create values to be inserted into the closure junction
            const closureJunctionInsertMap = {};
            subject.metadata.closureJunctionTable.ancestorColumns.forEach(column => {
                closureJunctionInsertMap[column.databaseName] = subject.identifier;
            });
            subject.metadata.closureJunctionTable.descendantColumns.forEach(column => {
                closureJunctionInsertMap[column.databaseName] = subject.identifier;
            });
            // insert values into the closure junction table
            await this.queryRunner
                .manager
                .createQueryBuilder()
                .insert()
                .into(subject.metadata.closureJunctionTable.tablePath)
                .values(closureJunctionInsertMap)
                .updateEntity(false)
                .callListeners(false)
                .execute();
            let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
                parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            if (parent) {
                const escape = (alias) => this.queryRunner.connection.driver.escape(alias);
                const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);
                const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(column => {
                    return escape(column.databaseName);
                });
                const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(column => {
                    return escape(column.databaseName);
                });
                const firstQueryParameters = [];
                const childEntityIdValues = subject.metadata.primaryColumns.map(column => column.getEntityValue(subject.insertedValueSet));
                const childEntityIds1 = subject.metadata.primaryColumns.map((column, index) => {
                    firstQueryParameters.push(childEntityIdValues[index]);
                    return this.queryRunner.connection.driver.createParameter("child_entity_" + column.databaseName, firstQueryParameters.length - 1);
                });
                const whereCondition = subject.metadata.closureJunctionTable.descendantColumns.map(column => {
                    const columnName = escape(column.databaseName);
                    const parentId = column.referencedColumn.getEntityValue(parent);
                    if (!parentId)
                        throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);
                    firstQueryParameters.push(parentId);
                    const parameterName = this.queryRunner.connection.driver.createParameter("parent_entity_" + column.referencedColumn.databaseName, firstQueryParameters.length - 1);
                    return columnName + " = " + parameterName;
                }).join(", ");
                await this.queryRunner.query(`INSERT INTO ${tableName} (${[...ancestorColumnNames, ...descendantColumnNames].join(", ")}) ` +
                    `SELECT ${ancestorColumnNames.join(", ")}, ${childEntityIds1.join(", ")} FROM ${tableName} WHERE ${whereCondition}`, firstQueryParameters);
            }
        }
        /**
         * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom
         * schema name, otherwise returns escaped table name.
         */
        getTableName(tablePath) {
            return tablePath.split(".")
                .map(i => {
                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
                if (i === "")
                    return i;
                return this.queryRunner.connection.driver.escape(i);
            }).join(".");
        }
    }
    exports.ClosureSubjectExecutor = ClosureSubjectExecutor;
});
define("typeorm/persistence/tree/MaterializedPathSubjectExecutor", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaterializedPathSubjectExecutor = void 0;
    /**
     * Executes subject operations for materialized-path tree entities.
     */
    class MaterializedPathSubjectExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner) {
            this.queryRunner = queryRunner;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Executes operations when subject is being inserted.
         */
        async insert(subject) {
            let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent
            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children
                parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;
            const parentId = subject.metadata.getEntityIdMap(parent);
            let parentPath = "";
            if (parentId) {
                parentPath = await this.queryRunner.manager
                    .createQueryBuilder()
                    .select(subject.metadata.targetName + "." + subject.metadata.materializedPathColumn.propertyPath, "path")
                    .from(subject.metadata.target, subject.metadata.targetName)
                    .whereInIds(parentId)
                    .getRawOne()
                    .then(result => result ? result["path"] : undefined);
            }
            const insertedEntityId = subject.metadata.treeParentRelation.joinColumns.map(joinColumn => {
                return joinColumn.referencedColumn.getEntityValue(subject.insertedValueSet);
            }).join("_");
            await this.queryRunner.manager
                .createQueryBuilder()
                .update(subject.metadata.target)
                .set({
                [subject.metadata.materializedPathColumn.propertyPath]: parentPath + insertedEntityId + "."
            })
                .where(subject.identifier)
                .execute();
        }
    }
    exports.MaterializedPathSubjectExecutor = MaterializedPathSubjectExecutor;
});
define("typeorm/persistence/SubjectExecutor", ["require", "exports", "typeorm/driver/sap/SapDriver", "typeorm/persistence/SubjectTopoligicalSorter", "typeorm/persistence/SubjectChangedColumnsComputer", "typeorm/error/SubjectWithoutIdentifierError", "typeorm/error/SubjectRemovedAndUpdatedError", "typeorm/driver/mongodb/MongoQueryRunner", "typeorm/driver/mongodb/MongoDriver", "typeorm/subscriber/BroadcasterResult", "typeorm/driver/oracle/OracleDriver", "typeorm/persistence/tree/NestedSetSubjectExecutor", "typeorm/persistence/tree/ClosureSubjectExecutor", "typeorm/persistence/tree/MaterializedPathSubjectExecutor", "typeorm/util/OrmUtils"], function (require, exports, SapDriver_1, SubjectTopoligicalSorter_1, SubjectChangedColumnsComputer_1, SubjectWithoutIdentifierError_1, SubjectRemovedAndUpdatedError_1, MongoQueryRunner_2, MongoDriver_2, BroadcasterResult_3, OracleDriver_1, NestedSetSubjectExecutor_1, ClosureSubjectExecutor_1, MaterializedPathSubjectExecutor_1, OrmUtils_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectExecutor = void 0;
    /**
     * Executes all database operations (inserts, updated, deletes) that must be executed
     * with given persistence subjects.
     */
    class SubjectExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner, subjects, options) {
            // -------------------------------------------------------------------------
            // Public Properties
            // -------------------------------------------------------------------------
            /**
             * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).
             */
            this.hasExecutableOperations = false;
            /**
             * Subjects that must be inserted.
             */
            this.insertSubjects = [];
            /**
             * Subjects that must be updated.
             */
            this.updateSubjects = [];
            /**
             * Subjects that must be removed.
             */
            this.removeSubjects = [];
            /**
             * Subjects that must be soft-removed.
             */
            this.softRemoveSubjects = [];
            /**
             * Subjects that must be recovered.
             */
            this.recoverSubjects = [];
            this.queryRunner = queryRunner;
            this.allSubjects = subjects;
            this.options = options;
            this.validate();
            this.recompute();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Executes all operations over given array of subjects.
         * Executes queries using given query runner.
         */
        async execute() {
            // console.time("SubjectExecutor.execute");
            // broadcast "before" events before we start insert / update / remove operations
            let broadcasterResult = undefined;
            if (!this.options || this.options.listeners !== false) {
                // console.time(".broadcastBeforeEventsForAll");
                broadcasterResult = this.broadcastBeforeEventsForAll();
                if (broadcasterResult.promises.length > 0)
                    await Promise.all(broadcasterResult.promises);
                // console.timeEnd(".broadcastBeforeEventsForAll");
            }
            // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects
            // recompute only in the case if any listener or subscriber was really executed
            if (broadcasterResult && broadcasterResult.count > 0) {
                // console.time(".recompute");
                this.insertSubjects.forEach(subject => subject.recompute());
                this.updateSubjects.forEach(subject => subject.recompute());
                this.removeSubjects.forEach(subject => subject.recompute());
                this.softRemoveSubjects.forEach(subject => subject.recompute());
                this.recoverSubjects.forEach(subject => subject.recompute());
                this.recompute();
                // console.timeEnd(".recompute");
            }
            // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly
            // console.timeEnd("prepare");
            // execute all insert operations
            // console.time(".insertion");
            this.insertSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.insertSubjects).sort("insert");
            await this.executeInsertOperations();
            // console.timeEnd(".insertion");
            // recompute update operations since insertion can create updation operations for the
            // properties it wasn't able to handle on its own (referenced columns)
            this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);
            // execute update operations
            // console.time(".updation");
            await this.executeUpdateOperations();
            // console.timeEnd(".updation");
            // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal
            // console.time(".removal");
            this.removeSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.removeSubjects).sort("delete");
            await this.executeRemoveOperations();
            // console.timeEnd(".removal");
            // recompute soft-remove operations
            this.softRemoveSubjects = this.allSubjects.filter(subject => subject.mustBeSoftRemoved);
            // execute soft-remove operations
            await this.executeSoftRemoveOperations();
            // recompute recover operations
            this.recoverSubjects = this.allSubjects.filter(subject => subject.mustBeRecovered);
            // execute recover operations
            await this.executeRecoverOperations();
            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities
            // console.time(".updateSpecialColumnsInPersistedEntities");
            await this.updateSpecialColumnsInPersistedEntities();
            // console.timeEnd(".updateSpecialColumnsInPersistedEntities");
            // finally broadcast "after" events after we finish insert / update / remove operations
            if (!this.options || this.options.listeners !== false) {
                // console.time(".broadcastAfterEventsForAll");
                broadcasterResult = this.broadcastAfterEventsForAll();
                if (broadcasterResult.promises.length > 0)
                    await Promise.all(broadcasterResult.promises);
                // console.timeEnd(".broadcastAfterEventsForAll");
            }
            // console.timeEnd("SubjectExecutor.execute");
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Validates all given subjects.
         */
        validate() {
            this.allSubjects.forEach(subject => {
                if (subject.mustBeUpdated && subject.mustBeRemoved)
                    throw new SubjectRemovedAndUpdatedError_1.SubjectRemovedAndUpdatedError(subject);
            });
        }
        /**
         * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.
         */
        recompute() {
            new SubjectChangedColumnsComputer_1.SubjectChangedColumnsComputer().compute(this.allSubjects);
            this.insertSubjects = this.allSubjects.filter(subject => subject.mustBeInserted);
            this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);
            this.removeSubjects = this.allSubjects.filter(subject => subject.mustBeRemoved);
            this.softRemoveSubjects = this.allSubjects.filter(subject => subject.mustBeSoftRemoved);
            this.recoverSubjects = this.allSubjects.filter(subject => subject.mustBeRecovered);
            this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0 || this.softRemoveSubjects.length > 0 || this.recoverSubjects.length > 0;
        }
        /**
         * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.
         */
        broadcastBeforeEventsForAll() {
            const result = new BroadcasterResult_3.BroadcasterResult();
            if (this.insertSubjects.length)
                this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity));
            if (this.updateSubjects.length)
                this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            if (this.removeSubjects.length)
                this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity));
            if (this.softRemoveSubjects.length)
                this.softRemoveSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            if (this.recoverSubjects.length)
                this.recoverSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            return result;
        }
        /**
         * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.
         * Returns void if there wasn't any listener or subscriber executed.
         * Note: this method has a performance-optimized code organization.
         */
        broadcastAfterEventsForAll() {
            const result = new BroadcasterResult_3.BroadcasterResult();
            if (this.insertSubjects.length)
                this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity));
            if (this.updateSubjects.length)
                this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            if (this.removeSubjects.length)
                this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity));
            if (this.softRemoveSubjects.length)
                this.softRemoveSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            if (this.recoverSubjects.length)
                this.recoverSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));
            return result;
        }
        /**
         * Executes insert operations.
         */
        async executeInsertOperations() {
            // group insertion subjects to make bulk insertions
            const [groupedInsertSubjects, groupedInsertSubjectKeys] = this.groupBulkSubjects(this.insertSubjects, "insert");
            // then we run insertion in the sequential order which is important since we have an ordered subjects
            for (const groupName of groupedInsertSubjectKeys) {
                const subjects = groupedInsertSubjects[groupName];
                // we must separately insert entities which does not have any values to insert
                // because its not possible to insert multiple entities with only default values in bulk
                const bulkInsertMaps = [];
                const bulkInsertSubjects = [];
                const singleInsertSubjects = [];
                if (this.queryRunner.connection.driver instanceof MongoDriver_2.MongoDriver) {
                    subjects.forEach(subject => {
                        if (subject.metadata.createDateColumn && subject.entity) {
                            subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();
                        }
                        if (subject.metadata.updateDateColumn && subject.entity) {
                            subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();
                        }
                        subject.createValueSetAndPopChangeMap();
                        bulkInsertSubjects.push(subject);
                        bulkInsertMaps.push(subject.entity);
                    });
                }
                else if (this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver) {
                    subjects.forEach(subject => {
                        singleInsertSubjects.push(subject);
                    });
                }
                else {
                    subjects.forEach(subject => {
                        // we do not insert in bulk in following cases:
                        // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows
                        // - when entity is a tree table, since tree tables require extra operation per each inserted row
                        // - when oracle is used, since oracle's bulk insertion is very bad
                        if (subject.changeMaps.length === 0 ||
                            subject.metadata.treeType ||
                            this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver ||
                            this.queryRunner.connection.driver instanceof SapDriver_1.SapDriver) {
                            singleInsertSubjects.push(subject);
                        }
                        else {
                            bulkInsertSubjects.push(subject);
                            bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());
                        }
                    });
                }
                // for mongodb we have a bit different insertion logic
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    const manager = this.queryRunner.manager;
                    const insertResult = await manager.insert(subjects[0].metadata.target, bulkInsertMaps);
                    subjects.forEach((subject, index) => {
                        subject.identifier = insertResult.identifiers[index];
                        subject.generatedMap = insertResult.generatedMaps[index];
                        subject.insertedValueSet = bulkInsertMaps[index];
                    });
                }
                else {
                    // here we execute our insertion query
                    // we need to enable entity updation because we DO need to have updated insertedMap
                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty
                    // also, we disable listeners because we call them on our own in persistence layer
                    if (bulkInsertMaps.length > 0) {
                        const insertResult = await this.queryRunner
                            .manager
                            .createQueryBuilder()
                            .insert()
                            .into(subjects[0].metadata.target)
                            .values(bulkInsertMaps)
                            .updateEntity(this.options && this.options.reload === false ? false : true)
                            .callListeners(false)
                            .execute();
                        bulkInsertSubjects.forEach((subject, index) => {
                            subject.identifier = insertResult.identifiers[index];
                            subject.generatedMap = insertResult.generatedMaps[index];
                            subject.insertedValueSet = bulkInsertMaps[index];
                        });
                    }
                    // insert subjects which must be inserted in separate requests (all default values)
                    if (singleInsertSubjects.length > 0) {
                        for (const subject of singleInsertSubjects) {
                            subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it
                            // for nested set we execute additional queries
                            if (subject.metadata.treeType === "nested-set")
                                await new NestedSetSubjectExecutor_1.NestedSetSubjectExecutor(this.queryRunner).insert(subject);
                            await this.queryRunner
                                .manager
                                .createQueryBuilder()
                                .insert()
                                .into(subject.metadata.target)
                                .values(subject.insertedValueSet)
                                .updateEntity(this.options && this.options.reload === false ? false : true)
                                .callListeners(false)
                                .execute()
                                .then(insertResult => {
                                subject.identifier = insertResult.identifiers[0];
                                subject.generatedMap = insertResult.generatedMaps[0];
                            });
                            // for tree tables we execute additional queries
                            if (subject.metadata.treeType === "closure-table") {
                                await new ClosureSubjectExecutor_1.ClosureSubjectExecutor(this.queryRunner).insert(subject);
                            }
                            else if (subject.metadata.treeType === "materialized-path") {
                                await new MaterializedPathSubjectExecutor_1.MaterializedPathSubjectExecutor(this.queryRunner).insert(subject);
                            }
                        }
                    }
                }
                subjects.forEach(subject => {
                    if (subject.generatedMap) {
                        subject.metadata.columns.forEach(column => {
                            const value = column.getEntityValue(subject.generatedMap);
                            if (value !== undefined && value !== null) {
                                const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);
                                column.setEntityValue(subject.generatedMap, preparedValue);
                            }
                        });
                    }
                });
            }
        }
        /**
         * Updates all given subjects in the database.
         */
        async executeUpdateOperations() {
            await Promise.all(this.updateSubjects.map(async (subject) => {
                if (!subject.identifier)
                    throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);
                // for mongodb we have a bit different updation logic
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    const partialEntity = OrmUtils_7.OrmUtils.mergeDeep({}, subject.entity);
                    if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                    }
                    if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                    }
                    if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                    }
                    const manager = this.queryRunner.manager;
                    await manager.update(subject.metadata.target, subject.identifier, partialEntity);
                }
                else {
                    const updateMap = subject.createValueSetAndPopChangeMap();
                    // here we execute our updation query
                    // we need to enable entity updation because we update a subject identifier
                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty
                    // also, we disable listeners because we call them on our own in persistence layer
                    const updateQueryBuilder = this.queryRunner
                        .manager
                        .createQueryBuilder()
                        .update(subject.metadata.target)
                        .set(updateMap)
                        .updateEntity(this.options && this.options.reload === false ? false : true)
                        .callListeners(false);
                    if (subject.entity) {
                        updateQueryBuilder.whereEntity(subject.identifier);
                    }
                    else { // in this case identifier is just conditions object to update by
                        updateQueryBuilder.where(subject.identifier);
                    }
                    const updateResult = await updateQueryBuilder.execute();
                    let updateGeneratedMap = updateResult.generatedMaps[0];
                    if (updateGeneratedMap) {
                        subject.metadata.columns.forEach(column => {
                            const value = column.getEntityValue(updateGeneratedMap);
                            if (value !== undefined && value !== null) {
                                const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);
                                column.setEntityValue(updateGeneratedMap, preparedValue);
                            }
                        });
                        if (!subject.generatedMap) {
                            subject.generatedMap = {};
                        }
                        Object.assign(subject.generatedMap, updateGeneratedMap);
                    }
                    // experiments, remove probably, need to implement tree tables children removal
                    // if (subject.updatedRelationMaps.length > 0) {
                    //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {
                    //         if (!updatedRelation.relation.isTreeParent) return;
                    //         if (!updatedRelation.value !== null) return;
                    //
                    //         if (subject.metadata.treeType === "closure-table") {
                    //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);
                    //         }
                    //     }));
                    // }
                }
            }));
        }
        /**
         * Removes all given subjects from the database.
         *
         * todo: we need to apply topological sort here as well
         */
        async executeRemoveOperations() {
            // group insertion subjects to make bulk insertions
            const [groupedRemoveSubjects, groupedRemoveSubjectKeys] = this.groupBulkSubjects(this.removeSubjects, "delete");
            for (const groupName of groupedRemoveSubjectKeys) {
                const subjects = groupedRemoveSubjects[groupName];
                const deleteMaps = subjects.map(subject => {
                    if (!subject.identifier)
                        throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);
                    return subject.identifier;
                });
                // for mongodb we have a bit different updation logic
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    const manager = this.queryRunner.manager;
                    await manager.delete(subjects[0].metadata.target, deleteMaps);
                }
                else {
                    // here we execute our deletion query
                    // we don't need to specify entities and set update entity to true since the only thing query builder
                    // will do for use is a primary keys deletion which is handled by us later once persistence is finished
                    // also, we disable listeners because we call them on our own in persistence layer
                    await this.queryRunner
                        .manager
                        .createQueryBuilder()
                        .delete()
                        .from(subjects[0].metadata.target)
                        .where(deleteMaps)
                        .callListeners(false)
                        .execute();
                }
            }
        }
        /**
         * Soft-removes all given subjects in the database.
         */
        async executeSoftRemoveOperations() {
            await Promise.all(this.softRemoveSubjects.map(async (subject) => {
                if (!subject.identifier)
                    throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);
                // for mongodb we have a bit different updation logic
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    const partialEntity = OrmUtils_7.OrmUtils.mergeDeep({}, subject.entity);
                    if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                    }
                    if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                    }
                    if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                    }
                    if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {
                        partialEntity[subject.metadata.deleteDateColumn.propertyName] = new Date();
                    }
                    const manager = this.queryRunner.manager;
                    await manager.update(subject.metadata.target, subject.identifier, partialEntity);
                }
                else {
                    // here we execute our soft-deletion query
                    // we need to enable entity soft-deletion because we update a subject identifier
                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty
                    // also, we disable listeners because we call them on our own in persistence layer
                    const softDeleteQueryBuilder = this.queryRunner
                        .manager
                        .createQueryBuilder()
                        .softDelete()
                        .from(subject.metadata.target)
                        .updateEntity(this.options && this.options.reload === false ? false : true)
                        .callListeners(false);
                    if (subject.entity) {
                        softDeleteQueryBuilder.whereEntity(subject.identifier);
                    }
                    else { // in this case identifier is just conditions object to update by
                        softDeleteQueryBuilder.where(subject.identifier);
                    }
                    const updateResult = await softDeleteQueryBuilder.execute();
                    subject.generatedMap = updateResult.generatedMaps[0];
                    if (subject.generatedMap) {
                        subject.metadata.columns.forEach(column => {
                            const value = column.getEntityValue(subject.generatedMap);
                            if (value !== undefined && value !== null) {
                                const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);
                                column.setEntityValue(subject.generatedMap, preparedValue);
                            }
                        });
                    }
                    // experiments, remove probably, need to implement tree tables children removal
                    // if (subject.updatedRelationMaps.length > 0) {
                    //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {
                    //         if (!updatedRelation.relation.isTreeParent) return;
                    //         if (!updatedRelation.value !== null) return;
                    //
                    //         if (subject.metadata.treeType === "closure-table") {
                    //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);
                    //         }
                    //     }));
                    // }
                }
            }));
        }
        /**
         * Recovers all given subjects in the database.
         */
        async executeRecoverOperations() {
            await Promise.all(this.recoverSubjects.map(async (subject) => {
                if (!subject.identifier)
                    throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);
                // for mongodb we have a bit different updation logic
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    const partialEntity = OrmUtils_7.OrmUtils.mergeDeep({}, subject.entity);
                    if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {
                        delete partialEntity[subject.metadata.objectIdColumn.propertyName];
                    }
                    if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {
                        delete partialEntity[subject.metadata.createDateColumn.propertyName];
                    }
                    if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {
                        partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();
                    }
                    if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {
                        partialEntity[subject.metadata.deleteDateColumn.propertyName] = null;
                    }
                    const manager = this.queryRunner.manager;
                    await manager.update(subject.metadata.target, subject.identifier, partialEntity);
                }
                else {
                    // here we execute our restory query
                    // we need to enable entity restory because we update a subject identifier
                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty
                    // also, we disable listeners because we call them on our own in persistence layer
                    const softDeleteQueryBuilder = this.queryRunner
                        .manager
                        .createQueryBuilder()
                        .restore()
                        .from(subject.metadata.target)
                        .updateEntity(this.options && this.options.reload === false ? false : true)
                        .callListeners(false);
                    if (subject.entity) {
                        softDeleteQueryBuilder.whereEntity(subject.identifier);
                    }
                    else { // in this case identifier is just conditions object to update by
                        softDeleteQueryBuilder.where(subject.identifier);
                    }
                    const updateResult = await softDeleteQueryBuilder.execute();
                    subject.generatedMap = updateResult.generatedMaps[0];
                    if (subject.generatedMap) {
                        subject.metadata.columns.forEach(column => {
                            const value = column.getEntityValue(subject.generatedMap);
                            if (value !== undefined && value !== null) {
                                const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);
                                column.setEntityValue(subject.generatedMap, preparedValue);
                            }
                        });
                    }
                    // experiments, remove probably, need to implement tree tables children removal
                    // if (subject.updatedRelationMaps.length > 0) {
                    //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {
                    //         if (!updatedRelation.relation.isTreeParent) return;
                    //         if (!updatedRelation.value !== null) return;
                    //
                    //         if (subject.metadata.treeType === "closure-table") {
                    //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);
                    //         }
                    //     }));
                    // }
                }
            }));
        }
        /**
         * Updates all special columns of the saving entities (create date, update date, version, etc.).
         * Also updates nullable columns and columns with default values.
         */
        updateSpecialColumnsInPersistedEntities() {
            // update inserted entity properties
            if (this.insertSubjects.length)
                this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);
            // update updated entity properties
            if (this.updateSubjects.length)
                this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);
            // update soft-removed entity properties
            if (this.updateSubjects.length)
                this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.softRemoveSubjects);
            // update recovered entity properties
            if (this.updateSubjects.length)
                this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.recoverSubjects);
            // remove ids from the entities that were removed
            if (this.removeSubjects.length) {
                this.removeSubjects.forEach(subject => {
                    if (!subject.entity)
                        return;
                    subject.metadata.primaryColumns.forEach(primaryColumn => {
                        primaryColumn.setEntityValue(subject.entity, undefined);
                    });
                });
            }
            // other post-persist updations
            this.allSubjects.forEach(subject => {
                if (!subject.entity)
                    return;
                subject.metadata.relationIds.forEach(relationId => {
                    relationId.setValue(subject.entity);
                });
                // mongo _id remove
                if (this.queryRunner instanceof MongoQueryRunner_2.MongoQueryRunner) {
                    if (subject.metadata.objectIdColumn
                        && subject.metadata.objectIdColumn.databaseName
                        && subject.metadata.objectIdColumn.databaseName !== subject.metadata.objectIdColumn.propertyName) {
                        delete subject.entity[subject.metadata.objectIdColumn.databaseName];
                    }
                }
            });
        }
        /**
         * Updates all special columns of the saving entities (create date, update date, version, etc.).
         * Also updates nullable columns and columns with default values.
         */
        updateSpecialColumnsInInsertedAndUpdatedEntities(subjects) {
            subjects.forEach(subject => {
                if (!subject.entity)
                    return;
                // set values to "null" for nullable columns that did not have values
                subject.metadata.columns.forEach(column => {
                    // if table inheritance is used make sure this column is not child's column
                    if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)
                        return;
                    // entities does not have virtual columns
                    if (column.isVirtual)
                        return;
                    // update nullable columns
                    if (column.isNullable) {
                        const columnValue = column.getEntityValue(subject.entity);
                        if (columnValue === undefined)
                            column.setEntityValue(subject.entity, null);
                    }
                    // update relational columns
                    if (subject.updatedRelationMaps.length > 0) {
                        subject.updatedRelationMaps.forEach(updatedRelationMap => {
                            updatedRelationMap.relation.joinColumns.forEach(column => {
                                if (column.isVirtual === true)
                                    return;
                                column.setEntityValue(subject.entity, updatedRelationMap.value instanceof Object ? column.referencedColumn.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);
                            });
                        });
                    }
                });
                // merge into entity all generated values returned by a database
                if (subject.generatedMap)
                    this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);
            });
        }
        /**
         * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.
         * However there are some limitations with bulk insertions of data into tables with generated (increment) columns
         * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns
         * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,
         * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.
         * That's why we only support bulking in junction tables for those drivers.
         *
         * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated
         * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.
         */
        groupBulkSubjects(subjects, type) {
            const group = {};
            const keys = [];
            const groupingAllowed = type === "delete" || this.queryRunner.connection.driver.isReturningSqlSupported();
            subjects.forEach((subject, index) => {
                const key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + "_" + index;
                if (!group[key]) {
                    group[key] = [subject];
                    keys.push(key);
                }
                else {
                    group[key].push(subject);
                }
            });
            return [group, keys];
        }
    }
    exports.SubjectExecutor = SubjectExecutor;
});
define("typeorm/error/CannotDetermineEntityError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotDetermineEntityError = void 0;
    /**
     * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.
     */
    class CannotDetermineEntityError extends Error {
        constructor(operation) {
            super();
            this.name = "CannotDetermineEntityError";
            Object.setPrototypeOf(this, CannotDetermineEntityError.prototype);
            this.message = `Cannot ${operation}, given value must be instance of entity class, instead object literal is given. Or you must specify an entity target to method call.`;
        }
    }
    exports.CannotDetermineEntityError = CannotDetermineEntityError;
});
define("typeorm/persistence/subject-builder/OneToManySubjectBuilder", ["require", "exports", "typeorm/persistence/Subject", "typeorm/util/OrmUtils", "typeorm/metadata/EntityMetadata"], function (require, exports, Subject_1, OrmUtils_8, EntityMetadata_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OneToManySubjectBuilder = void 0;
    /**
     * Builds operations needs to be executed for one-to-many relations of the given subjects.
     *
     * by example: post contains one-to-many relation with category in the property called "categories", e.g.
     *             @OneToMany(type => Category, category => category.post) categories: Category[]
     *             If user adds categories into the post and saves post we need to bind them.
     *             This operation requires updation of category table since its owner of the relation and contains a join column.
     *
     * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class
     *       make sure to reflect changes there as well.
     */
    class OneToManySubjectBuilder {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(subjects) {
            this.subjects = subjects;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Builds all required operations.
         */
        build() {
            this.subjects.forEach(subject => {
                subject.metadata.oneToManyRelations.forEach(relation => {
                    // skip relations for which persistence is disabled
                    if (relation.persistenceEnabled === false)
                        return;
                    this.buildForSubjectRelation(subject, relation);
                });
            });
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Builds operations for a given subject and relation.
         *
         * by example: subject is "post" entity we are saving here and relation is "categories" inside it here.
         */
        buildForSubjectRelation(subject, relation) {
            // prepare objects (relation id maps) for the database entity
            // note: subject.databaseEntity contains relations with loaded relation ids only
            // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,
            //             particularly their relation ids, e.g. category ids stored in the database
            let relatedEntityDatabaseRelationIds = [];
            if (subject.databaseEntity) { // related entities in the database can exist only if this entity (post) is saved
                relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);
            }
            // get related entities of persisted entity
            // by example: get categories from the passed to persist post entity
            let relatedEntities = relation.getEntityValue(subject.entity);
            if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it
                relatedEntities = [];
            if (relatedEntities === undefined) // if relation is undefined then nothing to update
                return;
            // extract only relation ids from the related entities, since we only need them for comparision
            // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)
            const relatedPersistedEntityRelationIds = [];
            relatedEntities.forEach(relatedEntity => {
                let relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }
                // try to find a subject of this related entity, maybe it was loaded or was marked for persistence
                let relatedEntitySubject = this.subjects.find(subject => {
                    return subject.entity === relatedEntity;
                });
                // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved
                if (relatedEntitySubject)
                    relationIdMap = relatedEntitySubject.identifier;
                // if relationIdMap is undefined then it means user binds object which is not saved in the database yet
                // by example: if post contains categories which does not have ids yet (because they are new)
                //             it means they are always newly inserted and relation update operation always must be created for them
                //             it does not make sense to perform difference operation for them for both add and remove actions
                if (!relationIdMap) {
                    // we decided to remove this error because it brings complications when saving object with non-saved entities
                    // if (!relatedEntitySubject)
                    //     throw new Error(`One-to-many relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
                    //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +
                    //         `Please setup cascade insertion or save entities before binding it.`);
                    if (!relatedEntitySubject)
                        return;
                    // okay, so related subject exist and its marked for insertion, then add a new change map
                    // by example: this will tell category to insert into its post relation our post we are working with
                    //             relatedEntitySubject is newly inserted CategorySubject
                    //             relation.inverseRelation is ManyToOne relation inside Category
                    //             subject is Post needs to be inserted into Category
                    relatedEntitySubject.changeMaps.push({
                        relation: relation.inverseRelation,
                        value: subject
                    });
                    return;
                }
                // check if this binding really exist in the database
                // by example: find our category if its already bind in the database
                const relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(relatedDatabaseEntityRelationId => {
                    return OrmUtils_8.OrmUtils.compareIds(relationIdMap, relatedDatabaseEntityRelationId);
                });
                // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to "bind" them
                // by example: this will tell category to insert into its post relation our post we are working with
                //             relatedEntitySubject is newly inserted CategorySubject
                //             relation.inverseRelation is ManyToOne relation inside Category
                //             subject is Post needs to be inserted into Category
                if (!relationIdInDatabaseSubjectRelation) {
                    // if there is no relatedEntitySubject then it means "category" wasn't persisted,
                    // but since we are going to update "category" table (since its an owning side of relation with join column)
                    // we create a new subject here:
                    if (!relatedEntitySubject) {
                        relatedEntitySubject = new Subject_1.Subject({
                            metadata: relation.inverseEntityMetadata,
                            parentSubject: subject,
                            canBeUpdated: true,
                            identifier: relationIdMap
                        });
                        this.subjects.push(relatedEntitySubject);
                    }
                    relatedEntitySubject.changeMaps.push({
                        relation: relation.inverseRelation,
                        value: subject
                    });
                }
                // if related entity has relation id then we add it to the list of relation ids
                // this list will be used later to compare with database relation ids to find a difference
                // what exist in this array and does not exist in the database are newly inserted relations
                // what does not exist in this array, but exist in the database are removed relations
                // removed relations are set to null from inverse side of relation
                relatedPersistedEntityRelationIds.push(relationIdMap);
            });
            // find what related entities were added and what were removed based on difference between what we save and what database has
            EntityMetadata_2.EntityMetadata
                .difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds)
                .forEach(removedRelatedEntityRelationId => {
                // todo: probably we can improve this in the future by finding entity with column those values,
                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns
                // we create a new subject which operations will be executed in subject operation executor
                const removedRelatedEntitySubject = new Subject_1.Subject({
                    metadata: relation.inverseEntityMetadata,
                    parentSubject: subject,
                    identifier: removedRelatedEntityRelationId,
                });
                if (!relation.inverseRelation || relation.inverseRelation.orphanedRowAction === "nullify") {
                    removedRelatedEntitySubject.canBeUpdated = true;
                    removedRelatedEntitySubject.changeMaps = [{
                            relation: relation.inverseRelation,
                            value: null
                        }];
                }
                else if (relation.inverseRelation.orphanedRowAction === "delete") {
                    removedRelatedEntitySubject.mustBeRemoved = true;
                }
                this.subjects.push(removedRelatedEntitySubject);
            });
        }
    }
    exports.OneToManySubjectBuilder = OneToManySubjectBuilder;
});
define("typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder", ["require", "exports", "typeorm/persistence/Subject", "typeorm/util/OrmUtils"], function (require, exports, Subject_2, OrmUtils_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OneToOneInverseSideSubjectBuilder = void 0;
    /**
     * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.
     *
     * by example: post contains one-to-one non-owner relation with category in the property called "category", e.g.
     *             @OneToOne(type => Category, category => category.post) category: Category
     *             If user sets a category into the post and saves post we need to bind them.
     *             This operation requires updation of category table since its owner of the relation and contains a join column.
     *
     * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class
     *       make sure to reflect changes there as well.
     */
    class OneToOneInverseSideSubjectBuilder {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(subjects) {
            this.subjects = subjects;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Builds all required operations.
         */
        build() {
            this.subjects.forEach(subject => {
                subject.metadata.oneToOneRelations.forEach(relation => {
                    // we don't need owning relations, this operation is only for inverse side of one-to-one relations
                    // skip relations for which persistence is disabled
                    if (relation.isOwning || relation.persistenceEnabled === false)
                        return;
                    this.buildForSubjectRelation(subject, relation);
                });
            });
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Builds operations for a given subject and relation.
         *
         * by example: subject is "post" entity we are saving here and relation is "category" inside it here.
         */
        buildForSubjectRelation(subject, relation) {
            // prepare objects (relation id map) for the database entity
            // note: subject.databaseEntity contains relation with loaded relation id only (id map)
            // by example: since subject is a post, we are expecting to get post's category saved in the database here,
            //             particularly its relation id, e.g. category id stored in the database
            let relatedEntityDatabaseRelationId = undefined;
            if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved
                relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);
            // get related entities of persisted entity
            // by example: get category from the passed to persist post entity
            let relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here
            if (relatedEntity === undefined) // if relation is undefined then nothing to update
                return;
            // if related entity is null then we need to check if there a bind in the database and unset it
            // if there is no bind in the entity then we don't need to do anything
            // by example: if post.category = null and category has this post in the database then we unset it
            if (relatedEntity === null) {
                // it makes sense to update database only there is a previously set value in the database
                if (relatedEntityDatabaseRelationId) {
                    // todo: probably we can improve this in the future by finding entity with column those values,
                    // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns
                    // we create a new subject which operations will be executed in subject operation executor
                    const removedRelatedEntitySubject = new Subject_2.Subject({
                        metadata: relation.inverseEntityMetadata,
                        parentSubject: subject,
                        canBeUpdated: true,
                        identifier: relatedEntityDatabaseRelationId,
                        changeMaps: [{
                                relation: relation.inverseRelation,
                                value: null
                            }]
                    });
                    this.subjects.push(removedRelatedEntitySubject);
                }
                return;
            } // else means entity is bind in the database
            // extract only relation id from the related entities, since we only need it for comparision
            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)
            let relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }
            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence
            let relatedEntitySubject = this.subjects.find(operateSubject => {
                return !!operateSubject.entity && operateSubject.entity === relatedEntity;
            });
            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved
            if (relatedEntitySubject)
                relationIdMap = relatedEntitySubject.identifier;
            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet
            // by example: if post contains category which does not have id(s) yet (because its a new category)
            //             it means its always newly inserted and relation update operation always must be created for it
            //             it does not make sense to perform difference operation for it for both add and remove actions
            if (!relationIdMap) {
                // we decided to remove this error because it brings complications when saving object with non-saved entities
                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved
                // in this persistence because he didn't pass this entity for save or he did not set cascades
                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here
                // if (!relatedEntitySubject)
                //     throw new Error(`One-to-one inverse relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
                //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +
                //         `Please setup cascade insertion or save entity before binding it.`);
                if (!relatedEntitySubject)
                    return;
                // okay, so related subject exist and its marked for insertion, then add a new change map
                // by example: this will tell category to insert into its post relation our post we are working with
                //             relatedEntitySubject is newly inserted CategorySubject
                //             relation.inverseRelation is OneToOne owner relation inside Category
                //             subject is Post needs to be inserted into Category
                relatedEntitySubject.changeMaps.push({
                    relation: relation.inverseRelation,
                    value: subject
                });
            }
            // check if this binding really exist in the database
            // by example: find our post if its already bind to category in the database and its not equal to what user tries to set
            const areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils_9.OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId);
            // if they aren't equal it means its a new relation and we need to "bind" them
            // by example: this will tell category to insert into its post relation our post we are working with
            //             relatedEntitySubject is newly inserted CategorySubject
            //             relation.inverseRelation is ManyToOne relation inside Category
            //             subject is Post needs to be inserted into Category
            if (!areRelatedIdEqualWithDatabase) {
                // if there is no relatedEntitySubject then it means "category" wasn't persisted,
                // but since we are going to update "category" table (since its an owning side of relation with join column)
                // we create a new subject here:
                if (!relatedEntitySubject) {
                    relatedEntitySubject = new Subject_2.Subject({
                        metadata: relation.inverseEntityMetadata,
                        canBeUpdated: true,
                        identifier: relationIdMap
                    });
                    this.subjects.push(relatedEntitySubject);
                }
                relatedEntitySubject.changeMaps.push({
                    relation: relation.inverseRelation,
                    value: subject
                });
            }
        }
    }
    exports.OneToOneInverseSideSubjectBuilder = OneToOneInverseSideSubjectBuilder;
});
define("typeorm/persistence/subject-builder/ManyToManySubjectBuilder", ["require", "exports", "typeorm/persistence/Subject", "typeorm/util/OrmUtils"], function (require, exports, Subject_3, OrmUtils_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManyToManySubjectBuilder = void 0;
    /**
     * Builds operations needs to be executed for many-to-many relations of the given subjects.
     *
     * by example: post contains owner many-to-many relation with categories in the property called "categories", e.g.
     *             @ManyToMany(type => Category, category => category.posts) categories: Category[]
     *             If user adds categories into the post and saves post we need to bind them.
     *             This operation requires updation of junction table.
     */
    class ManyToManySubjectBuilder {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(subjects) {
            this.subjects = subjects;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Builds operations for any changes in the many-to-many relations of the subjects.
         */
        build() {
            this.subjects.forEach(subject => {
                // if subject doesn't have entity then no need to find something that should be inserted or removed
                if (!subject.entity)
                    return;
                // go through all persistence enabled many-to-many relations and build subject operations for them
                subject.metadata.manyToManyRelations.forEach(relation => {
                    // skip relations for which persistence is disabled
                    if (relation.persistenceEnabled === false)
                        return;
                    this.buildForSubjectRelation(subject, relation);
                });
            });
        }
        /**
         * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.
         */
        buildForAllRemoval(subject) {
            // if subject does not have a database entity then it means it does not exist in the database
            // if it does not exist in the database then we don't have anything for deletion
            if (!subject.databaseEntity)
                return;
            // go through all persistence enabled many-to-many relations and build subject operations for them
            subject.metadata.manyToManyRelations.forEach(relation => {
                // skip relations for which persistence is disabled
                if (relation.persistenceEnabled === false)
                    return;
                // get all related entities (actually related entity relation ids) bind to this subject entity
                // by example: returns category ids of the post we are currently working with (subject.entity is post)
                const relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);
                // go through all related entities and create a new junction subject for each row in junction table
                relatedEntityRelationIdsInDatabase.forEach(relationId => {
                    const junctionSubject = new Subject_3.Subject({
                        metadata: relation.junctionEntityMetadata,
                        parentSubject: subject,
                        mustBeRemoved: true,
                        identifier: this.buildJunctionIdentifier(subject, relation, relationId)
                    });
                    // we use unshift because we need to perform those operations before post deletion is performed
                    // but post deletion was already added as an subject
                    // this is temporary solution, later we need to implement proper sorting of subjects before their removal
                    this.subjects.push(junctionSubject);
                });
            });
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Builds operations for a given subject and relation.
         *
         * by example: subject is "post" entity we are saving here and relation is "categories" inside it here.
         */
        buildForSubjectRelation(subject, relation) {
            // load from db all relation ids of inverse entities that are "bind" to the subject's entity
            // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)
            let databaseRelatedEntityIds = [];
            // if subject don't have database entity it means all related entities in persisted subject are new and must be bind
            // and we don't need to remove something that is not exist
            if (subject.databaseEntity)
                databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);
            // extract entity's relation value
            // by example: categories inside our post (subject.entity is post)
            let relatedEntities = relation.getEntityValue(subject.entity);
            if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database
                relatedEntities = [];
            if (!(Array.isArray(relatedEntities)))
                return;
            // from all related entities find only those which aren't found in the db - for them we will create operation subjects
            relatedEntities.forEach(relatedEntity => {
                // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet
                // extract only relation id from the related entities, since we only need it for comparision
                // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)
                let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);
                // try to find a subject of this related entity, maybe it was loaded or was marked for persistence
                const relatedEntitySubject = this.subjects.find(subject => {
                    return subject.entity === relatedEntity;
                });
                // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved
                if (relatedEntitySubject)
                    relatedEntityRelationIdMap = relatedEntitySubject.identifier;
                // if related entity relation id map is empty it means related entity is newly persisted
                if (!relatedEntityRelationIdMap) {
                    // we decided to remove this error because it brings complications when saving object with non-saved entities
                    // if related entity does not have a subject then it means user tries to bind entity which wasn't saved
                    // in this persistence because he didn't pass this entity for save or he did not set cascades
                    // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here
                    // we decided to remove this error because it brings complications when saving object with non-saved entities
                    // if (!relatedEntitySubject)
                    //     throw new Error(`Many-to-many relation "${relation.entityMetadata.name}.${relation.propertyPath}" contains ` +
                    //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +
                    //         `Please setup cascade insertion or save entities before binding it.`);
                    if (!relatedEntitySubject)
                        return;
                }
                // try to find related entity in the database
                // by example: find post's category in the database post's categories
                const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(databaseRelatedEntityRelationId => {
                    return OrmUtils_10.OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);
                });
                // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything
                if (relatedEntityExistInDatabase)
                    return;
                const ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here
                const inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here
                // create a new subject for insert operation of junction rows
                const junctionSubject = new Subject_3.Subject({
                    metadata: relation.junctionEntityMetadata,
                    parentSubject: subject,
                    canBeInserted: true,
                });
                this.subjects.push(junctionSubject);
                relation.junctionEntityMetadata.ownerColumns.forEach(column => {
                    junctionSubject.changeMaps.push({
                        column: column,
                        value: ownerValue,
                    });
                });
                relation.junctionEntityMetadata.inverseColumns.forEach(column => {
                    junctionSubject.changeMaps.push({
                        column: column,
                        value: inverseValue,
                    });
                });
            });
            // get all inverse entities relation ids that are "bind" to the currently persisted entity
            const changedInverseEntityRelationIds = [];
            relatedEntities.forEach(relatedEntity => {
                // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)
                let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);
                // try to find a subject of this related entity, maybe it was loaded or was marked for persistence
                const relatedEntitySubject = this.subjects.find(subject => {
                    return subject.entity === relatedEntity;
                });
                // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved
                if (relatedEntitySubject)
                    relatedEntityRelationIdMap = relatedEntitySubject.identifier;
                if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)
                    changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);
            });
            // now from all entities in the persisted entity find only those which aren't found in the db
            const removedJunctionEntityIds = databaseRelatedEntityIds.filter(existRelationId => {
                return !changedInverseEntityRelationIds.find(changedRelationId => {
                    return OrmUtils_10.OrmUtils.compareIds(changedRelationId, existRelationId);
                });
            });
            // finally create a new junction remove operations for missing related entities
            removedJunctionEntityIds.forEach(removedEntityRelationId => {
                const junctionSubject = new Subject_3.Subject({
                    metadata: relation.junctionEntityMetadata,
                    parentSubject: subject,
                    mustBeRemoved: true,
                    identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)
                });
                this.subjects.push(junctionSubject);
            });
        }
        /**
         * Creates identifiers for junction table.
         * Example: { postId: 1, categoryId: 2 }
         */
        buildJunctionIdentifier(subject, relation, relationId) {
            const ownerEntityMap = relation.isOwning ? subject.entity : relationId;
            const inverseEntityMap = relation.isOwning ? relationId : subject.entity;
            const identifier = {};
            relation.junctionEntityMetadata.ownerColumns.forEach(column => {
                OrmUtils_10.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));
            });
            relation.junctionEntityMetadata.inverseColumns.forEach(column => {
                OrmUtils_10.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));
            });
            return identifier;
        }
    }
    exports.ManyToManySubjectBuilder = ManyToManySubjectBuilder;
});
define("typeorm/persistence/SubjectDatabaseEntityLoader", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectDatabaseEntityLoader = void 0;
    /**
     * Loads database entities for all operate subjects which do not have database entity set.
     * All entities that we load database entities for are marked as updated or inserted.
     * To understand which of them really needs to be inserted or updated we need to load
     * their original representations from the database.
     */
    class SubjectDatabaseEntityLoader {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(queryRunner, subjects) {
            this.queryRunner = queryRunner;
            this.subjects = subjects;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Loads database entities for all subjects.
         *
         * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.
         * This option is used for deletion.
         */
        async load(operationType) {
            // we are grouping subjects by target to perform more optimized queries using WHERE IN operator
            // go through the groups and perform loading of database entities of each subject in the group
            const promises = this.groupByEntityTargets().map(async (subjectGroup) => {
                // prepare entity ids of the subjects we need to load
                const allIds = [];
                const allSubjects = [];
                subjectGroup.subjects.forEach(subject => {
                    // we don't load if subject already has a database entity loaded
                    if (subject.databaseEntity || !subject.identifier)
                        return;
                    allIds.push(subject.identifier);
                    allSubjects.push(subject);
                });
                // if there no ids found (means all entities are new and have generated ids) - then nothing to load there
                if (!allIds.length)
                    return;
                const loadRelationPropertyPaths = [];
                // for the save, soft-remove and recover operation
                // extract all property paths of the relations we need to load relation ids for
                // this is for optimization purpose - this way we don't load relation ids for entities
                // whose relations are undefined, and since they are undefined its really pointless to
                // load something for them, since undefined properties are skipped by the orm
                if (operationType === "save" || operationType === "soft-remove" || operationType === "recover") {
                    subjectGroup.subjects.forEach(subject => {
                        // gets all relation property paths that exist in the persisted entity.
                        subject.metadata.relations.forEach(relation => {
                            const value = relation.getEntityValue(subject.entityWithFulfilledIds);
                            if (value === undefined)
                                return;
                            if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1)
                                loadRelationPropertyPaths.push(relation.propertyPath);
                        });
                    });
                }
                else { // remove
                    // for remove operation
                    // we only need to load junction relation ids since only they are removed by cascades
                    loadRelationPropertyPaths.push(...subjectGroup.subjects[0].metadata.manyToManyRelations.map(relation => relation.propertyPath));
                }
                const findOptions = {
                    loadEagerRelations: false,
                    loadRelationIds: {
                        relations: loadRelationPropertyPaths,
                        disableMixedMap: true
                    },
                    // the soft-deleted entities should be included in the loaded entities for recover operation
                    withDeleted: true
                };
                // load database entities for all given ids
                const entities = await this.queryRunner.manager
                    .getRepository(subjectGroup.target)
                    .findByIds(allIds, findOptions);
                // now when we have entities we need to find subject of each entity
                // and insert that entity into database entity of the found subjects
                entities.forEach(entity => {
                    const subjects = this.findByPersistEntityLike(subjectGroup.target, entity);
                    subjects.forEach(subject => {
                        subject.databaseEntity = entity;
                        if (!subject.identifier)
                            subject.identifier = subject.metadata.hasAllPrimaryKeys(entity) ? subject.metadata.getEntityIdMap(entity) : undefined;
                    });
                });
                // this way we tell what subjects we tried to load database entities of
                for (let subject of allSubjects) {
                    subject.databaseEntityLoaded = true;
                }
            });
            await Promise.all(promises);
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Finds subjects where entity like given subject's entity.
         * Comparision made by entity id.
         * Multiple subjects may be returned if duplicates are present in the subject array.
         * This will likely result in the same row being updated multiple times during a transaction.
         */
        findByPersistEntityLike(entityTarget, entity) {
            return this.subjects.filter(subject => {
                if (!subject.entity)
                    return false;
                if (subject.entity === entity)
                    return true;
                return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);
            });
        }
        /**
         * Groups given Subject objects into groups separated by entity targets.
         */
        groupByEntityTargets() {
            return this.subjects.reduce((groups, operatedEntity) => {
                let group = groups.find(group => group.target === operatedEntity.metadata.target);
                if (!group) {
                    group = { target: operatedEntity.metadata.target, subjects: [] };
                    groups.push(group);
                }
                group.subjects.push(operatedEntity);
                return groups;
            }, []);
        }
    }
    exports.SubjectDatabaseEntityLoader = SubjectDatabaseEntityLoader;
});
define("typeorm/persistence/subject-builder/CascadesSubjectBuilder", ["require", "exports", "typeorm/persistence/Subject"], function (require, exports, Subject_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CascadesSubjectBuilder = void 0;
    /**
     * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,
     * e.g. builds a cascade tree and creates a subjects for them.
     */
    class CascadesSubjectBuilder {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(allSubjects) {
            this.allSubjects = allSubjects;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Builds a cascade subjects tree and pushes them in into the given array of subjects.
         */
        build(subject, operationType) {
            subject.metadata
                .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations
                .forEach(([relation, relationEntity, relationEntityMetadata]) => {
                // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set
                if (relationEntity === undefined ||
                    relationEntity === null ||
                    (!relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover))
                    return;
                // if relation entity is just a relation id set (for example post.tag = 1)
                // then we don't really need to check cascades since there is no object to insert or update
                if (!(relationEntity instanceof Object))
                    return;
                // if we already has this entity in list of operated subjects then skip it to avoid recursion
                const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);
                if (alreadyExistRelationEntitySubject) {
                    if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet
                        alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === "save";
                    if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet
                        alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === "save";
                    if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false) // if its not marked for removal yet
                        alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === "soft-remove";
                    if (alreadyExistRelationEntitySubject.canBeRecovered === false) // if its not marked for recovery yet
                        alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === "recover";
                    return;
                }
                // mark subject with what we can do with it
                // and add to the array of subjects to load only if there is no same entity there already
                const relationEntitySubject = new Subject_4.Subject({
                    metadata: relationEntityMetadata,
                    parentSubject: subject,
                    entity: relationEntity,
                    canBeInserted: relation.isCascadeInsert === true && operationType === "save",
                    canBeUpdated: relation.isCascadeUpdate === true && operationType === "save",
                    canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === "soft-remove",
                    canBeRecovered: relation.isCascadeRecover === true && operationType === "recover"
                });
                this.allSubjects.push(relationEntitySubject);
                // go recursively and find other entities we need to insert/update
                this.build(relationEntitySubject, operationType);
            });
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Finds subject where entity like given subject's entity.
         * Comparision made by entity id.
         */
        findByPersistEntityLike(entityTarget, entity) {
            return this.allSubjects.find(subject => {
                if (!subject.entity)
                    return false;
                if (subject.entity === entity)
                    return true;
                return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);
            });
        }
    }
    exports.CascadesSubjectBuilder = CascadesSubjectBuilder;
});
define("typeorm/persistence/EntityPersistExecutor", ["require", "exports", "typeorm/error/MustBeEntityError", "typeorm/persistence/SubjectExecutor", "typeorm/error/CannotDetermineEntityError", "typeorm/persistence/Subject", "typeorm/persistence/subject-builder/OneToManySubjectBuilder", "typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder", "typeorm/persistence/subject-builder/ManyToManySubjectBuilder", "typeorm/persistence/SubjectDatabaseEntityLoader", "typeorm/persistence/subject-builder/CascadesSubjectBuilder", "typeorm/util/OrmUtils"], function (require, exports, MustBeEntityError_1, SubjectExecutor_1, CannotDetermineEntityError_1, Subject_5, OneToManySubjectBuilder_1, OneToOneInverseSideSubjectBuilder_1, ManyToManySubjectBuilder_1, SubjectDatabaseEntityLoader_1, CascadesSubjectBuilder_1, OrmUtils_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityPersistExecutor = void 0;
    /**
     * Persists a single entity or multiple entities - saves or removes them.
     */
    class EntityPersistExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner, mode, target, entity, options) {
            this.connection = connection;
            this.queryRunner = queryRunner;
            this.mode = mode;
            this.target = target;
            this.entity = entity;
            this.options = options;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Executes persistence operation ob given entity or entities.
         */
        async execute() {
            // check if entity we are going to save is valid and is an object
            if (!this.entity || typeof this.entity !== "object")
                return Promise.reject(new MustBeEntityError_1.MustBeEntityError(this.mode, this.entity));
            // we MUST call "fake" resolve here to make sure all properties of lazily loaded relations are resolved
            await Promise.resolve();
            // if query runner is already defined in this class, it means this entity manager was already created for a single connection
            // if its not defined we create a new query runner - single connection where we'll execute all our operations
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            // save data in the query runner - this is useful functionality to share data from outside of the world
            // with third classes - like subscribers and listener methods
            if (this.options && this.options.data)
                queryRunner.data = this.options.data;
            try {
                // collect all operate subjects
                const entities = Array.isArray(this.entity) ? this.entity : [this.entity];
                const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils_11.OrmUtils.chunk(entities, this.options.chunk) : [entities];
                // console.time("building subject executors...");
                const executors = await Promise.all(entitiesInChunks.map(async (entities) => {
                    const subjects = [];
                    // create subjects for all entities we received for the persistence
                    entities.forEach(entity => {
                        const entityTarget = this.target ? this.target : entity.constructor;
                        if (entityTarget === Object)
                            throw new CannotDetermineEntityError_1.CannotDetermineEntityError(this.mode);
                        subjects.push(new Subject_5.Subject({
                            metadata: this.connection.getMetadata(entityTarget),
                            entity: entity,
                            canBeInserted: this.mode === "save",
                            canBeUpdated: this.mode === "save",
                            mustBeRemoved: this.mode === "remove",
                            canBeSoftRemoved: this.mode === "soft-remove",
                            canBeRecovered: this.mode === "recover"
                        }));
                    });
                    // console.time("building cascades...");
                    // go through each entity with metadata and create subjects and subjects by cascades for them
                    const cascadesSubjectBuilder = new CascadesSubjectBuilder_1.CascadesSubjectBuilder(subjects);
                    subjects.forEach(subject => {
                        // next step we build list of subjects we will operate with
                        // these subjects are subjects that we need to insert or update alongside with main persisted entity
                        cascadesSubjectBuilder.build(subject, this.mode);
                    });
                    // console.timeEnd("building cascades...");
                    // load database entities for all subjects we have
                    // next step is to load database entities for all operate subjects
                    // console.time("loading...");
                    await new SubjectDatabaseEntityLoader_1.SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);
                    // console.timeEnd("loading...");
                    // console.time("other subjects...");
                    // build all related subjects and change maps
                    if (this.mode === "save" || this.mode === "soft-remove" || this.mode === "recover") {
                        new OneToManySubjectBuilder_1.OneToManySubjectBuilder(subjects).build();
                        new OneToOneInverseSideSubjectBuilder_1.OneToOneInverseSideSubjectBuilder(subjects).build();
                        new ManyToManySubjectBuilder_1.ManyToManySubjectBuilder(subjects).build();
                    }
                    else {
                        subjects.forEach(subject => {
                            if (subject.mustBeRemoved) {
                                new ManyToManySubjectBuilder_1.ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);
                            }
                        });
                    }
                    // console.timeEnd("other subjects...");
                    // console.timeEnd("building subjects...");
                    // console.log("subjects", subjects);
                    // create a subject executor
                    return new SubjectExecutor_1.SubjectExecutor(queryRunner, subjects, this.options);
                }));
                // console.timeEnd("building subject executors...");
                // make sure we have at least one executable operation before we create a transaction and proceed
                // if we don't have operations it means we don't really need to update or remove something
                const executorsWithExecutableOperations = executors.filter(executor => executor.hasExecutableOperations);
                if (executorsWithExecutableOperations.length === 0)
                    return;
                // start execute queries in a transaction
                // if transaction is already opened in this query runner then we don't touch it
                // if its not opened yet then we open it here, and once we finish - we close it
                let isTransactionStartedByUs = false;
                try {
                    // open transaction if its not opened yet
                    if (!queryRunner.isTransactionActive) {
                        if (!this.options || this.options.transaction !== false) { // start transaction until it was not explicitly disabled
                            isTransactionStartedByUs = true;
                            await queryRunner.startTransaction();
                        }
                    }
                    // execute all persistence operations for all entities we have
                    // console.time("executing subject executors...");
                    for (const executor of executorsWithExecutableOperations) {
                        await executor.execute();
                    }
                    // console.timeEnd("executing subject executors...");
                    // commit transaction if it was started by us
                    // console.time("commit");
                    if (isTransactionStartedByUs === true)
                        await queryRunner.commitTransaction();
                    // console.timeEnd("commit");
                }
                catch (error) {
                    // rollback transaction if it was started by us
                    if (isTransactionStartedByUs) {
                        try {
                            await queryRunner.rollbackTransaction();
                        }
                        catch (rollbackError) { }
                    }
                    throw error;
                }
            }
            finally {
                // release query runner only if its created by us
                if (!this.queryRunner)
                    await queryRunner.release();
            }
        }
    }
    exports.EntityPersistExecutor = EntityPersistExecutor;
});
define("typeorm/entity-manager/EntityManager", ["require", "exports", "typeorm/error/EntityNotFoundError", "typeorm/error/QueryRunnerProviderAlreadyReleasedError", "typeorm/error/NoNeedToReleaseEntityManagerError", "typeorm/repository/TreeRepository", "typeorm/repository/Repository", "typeorm/find-options/FindOptionsUtils", "typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer", "typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer", "typeorm/error/CustomRepositoryNotFoundError", "typeorm/index", "typeorm/repository/AbstractRepository", "typeorm/error/CustomRepositoryCannotInheritRepositoryError", "typeorm/driver/mongodb/MongoDriver", "typeorm/error/RepositoryNotFoundError", "typeorm/error/RepositoryNotTreeError", "typeorm/repository/RepositoryFactory", "typeorm/error/TreeRepositoryNotSupportedError", "typeorm/persistence/EntityPersistExecutor", "typeorm/util/ObjectUtils"], function (require, exports, EntityNotFoundError_1, QueryRunnerProviderAlreadyReleasedError_1, NoNeedToReleaseEntityManagerError_1, TreeRepository_2, Repository_4, FindOptionsUtils_2, PlainObjectToNewEntityTransformer_1, PlainObjectToDatabaseEntityTransformer_1, CustomRepositoryNotFoundError_2, index_5, AbstractRepository_1, CustomRepositoryCannotInheritRepositoryError_1, MongoDriver_3, RepositoryNotFoundError_1, RepositoryNotTreeError_1, RepositoryFactory_1, TreeRepositoryNotSupportedError_1, EntityPersistExecutor_1, ObjectUtils_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityManager = void 0;
    /**
     * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
     * whatever entity type are you passing.
     */
    class EntityManager {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner) {
            // -------------------------------------------------------------------------
            // Protected Properties
            // -------------------------------------------------------------------------
            /**
             * Once created and then reused by en repositories.
             */
            this.repositories = [];
            /**
             * Plain to object transformer used in create and merge operations.
             */
            this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer_1.PlainObjectToNewEntityTransformer();
            this.connection = connection;
            if (queryRunner) {
                this.queryRunner = queryRunner;
                // dynamic: this.queryRunner = manager;
                ObjectUtils_3.ObjectUtils.assign(this.queryRunner, { manager: this });
            }
        }
        /**
         * Wraps given function execution (and all operations made there) in a transaction.
         * All database operations must be executed using provided entity manager.
         */
        async transaction(isolationOrRunInTransaction, runInTransactionParam) {
            const isolation = typeof isolationOrRunInTransaction === "string" ? isolationOrRunInTransaction : undefined;
            const runInTransaction = typeof isolationOrRunInTransaction === "function" ? isolationOrRunInTransaction : runInTransactionParam;
            if (!runInTransaction) {
                throw new Error(`Transaction method requires callback in second paramter if isolation level is supplied.`);
            }
            if (this.connection.driver instanceof MongoDriver_3.MongoDriver)
                throw new Error(`Transactions aren't supported by MongoDB.`);
            if (this.queryRunner && this.queryRunner.isReleased)
                throw new QueryRunnerProviderAlreadyReleasedError_1.QueryRunnerProviderAlreadyReleasedError();
            if (this.queryRunner && this.queryRunner.isTransactionActive)
                throw new Error(`Cannot start transaction because its already started`);
            // if query runner is already defined in this class, it means this entity manager was already created for a single connection
            // if its not defined we create a new query runner - single connection where we'll execute all our operations
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            try {
                if (isolation) {
                    await queryRunner.startTransaction(isolation);
                }
                else {
                    await queryRunner.startTransaction();
                }
                const result = await runInTransaction(queryRunner.manager);
                await queryRunner.commitTransaction();
                return result;
            }
            catch (err) {
                try { // we throw original error even if rollback thrown an error
                    await queryRunner.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw err;
            }
            finally {
                if (!this.queryRunner) // if we used a new query runner provider then release it
                    await queryRunner.release();
            }
        }
        /**
         * Executes raw SQL query and returns raw database results.
         */
        async query(query, parameters) {
            return this.connection.query(query, parameters, this.queryRunner);
        }
        /**
         * Creates a new query builder that can be used to build a sql query.
         */
        createQueryBuilder(entityClass, alias, queryRunner) {
            if (alias) {
                return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);
            }
            else {
                return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);
            }
        }
        /**
         * Checks if entity has an id by its Function type or schema name.
         */
        hasId(targetOrEntity, maybeEntity) {
            const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;
            const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;
            const metadata = this.connection.getMetadata(target);
            return metadata.hasId(entity);
        }
        /**
         * Gets entity mixed id.
         */
        getId(targetOrEntity, maybeEntity) {
            const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;
            const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;
            const metadata = this.connection.getMetadata(target);
            return metadata.getEntityIdMixedMap(entity);
        }
        /**
         * Creates a new entity instance or instances.
         * Can copy properties from the given object into new entities.
         */
        create(entityClass, plainObjectOrObjects) {
            const metadata = this.connection.getMetadata(entityClass);
            if (!plainObjectOrObjects)
                return metadata.create(this.queryRunner);
            if (Array.isArray(plainObjectOrObjects))
                return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));
            const mergeIntoEntity = metadata.create(this.queryRunner);
            this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);
            return mergeIntoEntity;
        }
        /**
         * Merges two entities into one new entity.
         */
        merge(entityClass, mergeIntoEntity, ...entityLikes) {
            const metadata = this.connection.getMetadata(entityClass);
            entityLikes.forEach(object => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));
            return mergeIntoEntity;
        }
        /**
         * Creates a new entity from the given plain javascript object. If entity already exist in the database, then
         * it loads it (and everything related to it), replaces all values with the new ones from the given object
         * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
         * replaced from the new object.
         */
        async preload(entityClass, entityLike) {
            const metadata = this.connection.getMetadata(entityClass);
            const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer_1.PlainObjectToDatabaseEntityTransformer(this.connection.manager);
            const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);
            if (transformedEntity)
                return this.merge(entityClass, transformedEntity, entityLike);
            return undefined;
        }
        /**
         * Saves a given entity in the database.
         */
        save(targetOrEntity, maybeEntityOrOptions, maybeOptions) {
            // normalize mixed parameters
            let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof index_5.EntitySchema || typeof targetOrEntity === "string")) ? targetOrEntity : undefined;
            const entity = target ? maybeEntityOrOptions : targetOrEntity;
            const options = target ? maybeOptions : maybeEntityOrOptions;
            if (target instanceof index_5.EntitySchema)
                target = target.options.name;
            // if user passed empty array of entities then we don't need to do anything
            if (Array.isArray(entity) && entity.length === 0)
                return Promise.resolve(entity);
            // execute save operation
            return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, "save", target, entity, options)
                .execute()
                .then(() => entity);
        }
        /**
         * Removes a given entity from the database.
         */
        remove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {
            // normalize mixed parameters
            const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === "string")) ? targetOrEntity : undefined;
            const entity = target ? maybeEntityOrOptions : targetOrEntity;
            const options = target ? maybeOptions : maybeEntityOrOptions;
            // if user passed empty array of entities then we don't need to do anything
            if (Array.isArray(entity) && entity.length === 0)
                return Promise.resolve(entity);
            // execute save operation
            return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, "remove", target, entity, options)
                .execute()
                .then(() => entity);
        }
        /**
         * Records the delete date of one or many given entities.
         */
        softRemove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {
            // normalize mixed parameters
            let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof index_5.EntitySchema || typeof targetOrEntity === "string")) ? targetOrEntity : undefined;
            const entity = target ? maybeEntityOrOptions : targetOrEntity;
            const options = target ? maybeOptions : maybeEntityOrOptions;
            if (target instanceof index_5.EntitySchema)
                target = target.options.name;
            // if user passed empty array of entities then we don't need to do anything
            if (Array.isArray(entity) && entity.length === 0)
                return Promise.resolve(entity);
            // execute soft-remove operation
            return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, "soft-remove", target, entity, options)
                .execute()
                .then(() => entity);
        }
        /**
         * Recovers one or many given entities.
         */
        recover(targetOrEntity, maybeEntityOrOptions, maybeOptions) {
            // normalize mixed parameters
            let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof index_5.EntitySchema || typeof targetOrEntity === "string")) ? targetOrEntity : undefined;
            const entity = target ? maybeEntityOrOptions : targetOrEntity;
            const options = target ? maybeOptions : maybeEntityOrOptions;
            if (target instanceof index_5.EntitySchema)
                target = target.options.name;
            // if user passed empty array of entities then we don't need to do anything
            if (Array.isArray(entity) && entity.length === 0)
                return Promise.resolve(entity);
            // execute recover operation
            return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, "recover", target, entity, options)
                .execute()
                .then(() => entity);
        }
        /**
         * Inserts a given entity into the database.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient INSERT query.
         * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
         * You can execute bulk inserts using this method.
         */
        async insert(target, entity) {
            return this.createQueryBuilder()
                .insert()
                .into(target)
                .values(entity)
                .execute();
        }
        /**
         * Updates entity partially. Entity can be found by a given condition(s).
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient UPDATE query.
         * Does not check if entity exist in the database.
         * Condition(s) cannot be empty.
         */
        update(target, criteria, partialEntity) {
            // if user passed empty criteria or empty list of criterias, then throw an error
            if (criteria === undefined ||
                criteria === null ||
                criteria === "" ||
                (Array.isArray(criteria) && criteria.length === 0)) {
                return Promise.reject(new Error(`Empty criteria(s) are not allowed for the update method.`));
            }
            if (typeof criteria === "string" ||
                typeof criteria === "number" ||
                criteria instanceof Date ||
                Array.isArray(criteria)) {
                return this.createQueryBuilder()
                    .update(target)
                    .set(partialEntity)
                    .whereInIds(criteria)
                    .execute();
            }
            else {
                return this.createQueryBuilder()
                    .update(target)
                    .set(partialEntity)
                    .where(criteria)
                    .execute();
            }
        }
        /**
         * Deletes entities by a given condition(s).
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         * Condition(s) cannot be empty.
         */
        delete(targetOrEntity, criteria) {
            // if user passed empty criteria or empty list of criterias, then throw an error
            if (criteria === undefined ||
                criteria === null ||
                criteria === "" ||
                (Array.isArray(criteria) && criteria.length === 0)) {
                return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));
            }
            if (typeof criteria === "string" ||
                typeof criteria === "number" ||
                criteria instanceof Date ||
                Array.isArray(criteria)) {
                return this.createQueryBuilder()
                    .delete()
                    .from(targetOrEntity)
                    .whereInIds(criteria)
                    .execute();
            }
            else {
                return this.createQueryBuilder()
                    .delete()
                    .from(targetOrEntity)
                    .where(criteria)
                    .execute();
            }
        }
        /**
         * Records the delete date of entities by a given condition(s).
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         * Condition(s) cannot be empty.
         */
        softDelete(targetOrEntity, criteria) {
            // if user passed empty criteria or empty list of criterias, then throw an error
            if (criteria === undefined ||
                criteria === null ||
                criteria === "" ||
                (Array.isArray(criteria) && criteria.length === 0)) {
                return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));
            }
            if (typeof criteria === "string" ||
                typeof criteria === "number" ||
                criteria instanceof Date ||
                Array.isArray(criteria)) {
                return this.createQueryBuilder()
                    .softDelete()
                    .from(targetOrEntity)
                    .whereInIds(criteria)
                    .execute();
            }
            else {
                return this.createQueryBuilder()
                    .softDelete()
                    .from(targetOrEntity)
                    .where(criteria)
                    .execute();
            }
        }
        /**
         * Restores entities by a given condition(s).
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         * Condition(s) cannot be empty.
         */
        restore(targetOrEntity, criteria) {
            // if user passed empty criteria or empty list of criterias, then throw an error
            if (criteria === undefined ||
                criteria === null ||
                criteria === "" ||
                (Array.isArray(criteria) && criteria.length === 0)) {
                return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));
            }
            if (typeof criteria === "string" ||
                typeof criteria === "number" ||
                criteria instanceof Date ||
                Array.isArray(criteria)) {
                return this.createQueryBuilder()
                    .restore()
                    .from(targetOrEntity)
                    .whereInIds(criteria)
                    .execute();
            }
            else {
                return this.createQueryBuilder()
                    .restore()
                    .from(targetOrEntity)
                    .where(criteria)
                    .execute();
            }
        }
        /**
         * Counts entities that match given find options or conditions.
         * Useful for pagination.
         */
        async count(entityClass, optionsOrConditions) {
            const metadata = this.connection.getMetadata(entityClass);
            const qb = this.createQueryBuilder(entityClass, FindOptionsUtils_2.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
            return FindOptionsUtils_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();
        }
        /**
         * Finds entities that match given find options or conditions.
         */
        async find(entityClass, optionsOrConditions) {
            const metadata = this.connection.getMetadata(entityClass);
            const qb = this.createQueryBuilder(entityClass, FindOptionsUtils_2.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
            if (!FindOptionsUtils_2.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)
                FindOptionsUtils_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);
            return FindOptionsUtils_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();
        }
        /**
         * Finds entities that match given find options and conditions.
         * Also counts all entities that match given conditions,
         * but ignores pagination settings (from and take options).
         */
        async findAndCount(entityClass, optionsOrConditions) {
            const metadata = this.connection.getMetadata(entityClass);
            const qb = this.createQueryBuilder(entityClass, FindOptionsUtils_2.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
            if (!FindOptionsUtils_2.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)
                FindOptionsUtils_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);
            return FindOptionsUtils_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();
        }
        /**
         * Finds entities with ids.
         * Optionally find options or conditions can be applied.
         */
        async findByIds(entityClass, ids, optionsOrConditions) {
            // if no ids passed, no need to execute a query - just return an empty array of values
            if (!ids.length)
                return Promise.resolve([]);
            const metadata = this.connection.getMetadata(entityClass);
            const qb = this.createQueryBuilder(entityClass, FindOptionsUtils_2.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);
            FindOptionsUtils_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);
            if (!FindOptionsUtils_2.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)
                FindOptionsUtils_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);
            return qb.andWhereInIds(ids).getMany();
        }
        /**
         * Finds first entity that matches given conditions.
         */
        async findOne(entityClass, idOrOptionsOrConditions, maybeOptions) {
            let findOptions = undefined;
            if (FindOptionsUtils_2.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {
                findOptions = idOrOptionsOrConditions;
            }
            else if (maybeOptions && FindOptionsUtils_2.FindOptionsUtils.isFindOneOptions(maybeOptions)) {
                findOptions = maybeOptions;
            }
            let options = undefined;
            if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils_2.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))
                options = idOrOptionsOrConditions;
            const metadata = this.connection.getMetadata(entityClass);
            let alias = metadata.name;
            if (findOptions && findOptions.join) {
                alias = findOptions.join.alias;
            }
            else if (maybeOptions && FindOptionsUtils_2.FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {
                alias = maybeOptions.join.alias;
            }
            const qb = this.createQueryBuilder(entityClass, alias);
            if (!findOptions || findOptions.loadEagerRelations !== false)
                FindOptionsUtils_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);
            const passedId = typeof idOrOptionsOrConditions === "string" || typeof idOrOptionsOrConditions === "number" || idOrOptionsOrConditions instanceof Date;
            if (!passedId) {
                findOptions = Object.assign(Object.assign({}, (findOptions || {})), { take: 1 });
            }
            FindOptionsUtils_2.FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);
            if (options) {
                qb.where(options);
            }
            else if (passedId) {
                qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));
            }
            return qb.getOne();
        }
        /**
         * Finds first entity that matches given conditions or rejects the returned promise on error.
         */
        async findOneOrFail(entityClass, idOrOptionsOrConditions, maybeOptions) {
            return this.findOne(entityClass, idOrOptionsOrConditions, maybeOptions).then((value) => {
                if (value === undefined) {
                    return Promise.reject(new EntityNotFoundError_1.EntityNotFoundError(entityClass, idOrOptionsOrConditions));
                }
                return Promise.resolve(value);
            });
        }
        /**
         * Clears all the data from the given table (truncates/drops it).
         *
         * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.
         * @see https://stackoverflow.com/a/5972738/925151
         */
        async clear(entityClass) {
            const metadata = this.connection.getMetadata(entityClass);
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            try {
                return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally
            }
            finally {
                if (!this.queryRunner)
                    await queryRunner.release();
            }
        }
        /**
         * Increments some column by provided value of the entities matched given conditions.
         */
        async increment(entityClass, conditions, propertyPath, value) {
            const metadata = this.connection.getMetadata(entityClass);
            const column = metadata.findColumnWithPropertyPath(propertyPath);
            if (!column)
                throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);
            if (isNaN(Number(value)))
                throw new Error(`Value "${value}" is not a number.`);
            // convert possible embeded path "social.likes" into object { social: { like: () => value } }
            const values = propertyPath
                .split(".")
                .reduceRight((value, key) => ({ [key]: value }), () => this.connection.driver.escape(column.databaseName) + " + " + value);
            return this
                .createQueryBuilder(entityClass, "entity")
                .update(entityClass)
                .set(values)
                .where(conditions)
                .execute();
        }
        /**
         * Decrements some column by provided value of the entities matched given conditions.
         */
        async decrement(entityClass, conditions, propertyPath, value) {
            const metadata = this.connection.getMetadata(entityClass);
            const column = metadata.findColumnWithPropertyPath(propertyPath);
            if (!column)
                throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);
            if (isNaN(Number(value)))
                throw new Error(`Value "${value}" is not a number.`);
            // convert possible embeded path "social.likes" into object { social: { like: () => value } }
            const values = propertyPath
                .split(".")
                .reduceRight((value, key) => ({ [key]: value }), () => this.connection.driver.escape(column.databaseName) + " - " + value);
            return this
                .createQueryBuilder(entityClass, "entity")
                .update(entityClass)
                .set(values)
                .where(conditions)
                .execute();
        }
        /**
         * Gets repository for the given entity class or name.
         * If single database connection mode is used, then repository is obtained from the
         * repository aggregator, where each repository is individually created for this entity manager.
         * When single database connection is not used, repository is being obtained from the connection.
         */
        getRepository(target) {
            // throw exception if there is no repository with this target registered
            if (!this.connection.hasMetadata(target))
                throw new RepositoryNotFoundError_1.RepositoryNotFoundError(this.connection.name, target);
            // find already created repository instance and return it if found
            const metadata = this.connection.getMetadata(target);
            const repository = this.repositories.find(repository => repository.metadata === metadata);
            if (repository)
                return repository;
            // if repository was not found then create it, store its instance and return it
            const newRepository = new RepositoryFactory_1.RepositoryFactory().create(this, metadata, this.queryRunner);
            this.repositories.push(newRepository);
            return newRepository;
        }
        /**
         * Gets tree repository for the given entity class or name.
         * If single database connection mode is used, then repository is obtained from the
         * repository aggregator, where each repository is individually created for this entity manager.
         * When single database connection is not used, repository is being obtained from the connection.
         */
        getTreeRepository(target) {
            // tree tables aren't supported by some drivers (mongodb)
            if (this.connection.driver.treeSupport === false)
                throw new TreeRepositoryNotSupportedError_1.TreeRepositoryNotSupportedError(this.connection.driver);
            // check if repository is real tree repository
            const repository = this.getRepository(target);
            if (!(repository instanceof TreeRepository_2.TreeRepository))
                throw new RepositoryNotTreeError_1.RepositoryNotTreeError(target);
            return repository;
        }
        /**
         * Gets mongodb repository for the given entity class.
         */
        getMongoRepository(target) {
            return this.connection.getMongoRepository(target);
        }
        /**
         * Gets custom entity repository marked with @EntityRepository decorator.
         */
        getCustomRepository(customRepository) {
            const entityRepositoryMetadataArgs = index_5.getMetadataArgsStorage().entityRepositories.find(repository => {
                return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);
            });
            if (!entityRepositoryMetadataArgs)
                throw new CustomRepositoryNotFoundError_2.CustomRepositoryNotFoundError(customRepository);
            const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;
            const entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata);
            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,
            // however we need these properties for internal work of the class
            if (entityRepositoryInstance instanceof AbstractRepository_1.AbstractRepository) {
                if (!entityRepositoryInstance["manager"])
                    entityRepositoryInstance["manager"] = this;
            }
            if (entityRepositoryInstance instanceof Repository_4.Repository) {
                if (!entityMetadata)
                    throw new CustomRepositoryCannotInheritRepositoryError_1.CustomRepositoryCannotInheritRepositoryError(customRepository);
                entityRepositoryInstance["manager"] = this;
                entityRepositoryInstance["metadata"] = entityMetadata;
            }
            return entityRepositoryInstance;
        }
        /**
         * Releases all resources used by entity manager.
         * This is used when entity manager is created with a single query runner,
         * and this single query runner needs to be released after job with entity manager is done.
         */
        async release() {
            if (!this.queryRunner)
                throw new NoNeedToReleaseEntityManagerError_1.NoNeedToReleaseEntityManagerError();
            return this.queryRunner.release();
        }
    }
    exports.EntityManager = EntityManager;
});
define("typeorm/subscriber/event/TransactionCommitEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/TransactionRollbackEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/TransactionStartEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/UpdateEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/RemoveEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/InsertEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/event/LoadEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/EntitySubscriberInterface", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/subscriber/Broadcaster", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Broadcaster = void 0;
    /**
     * Broadcaster provides a helper methods to broadcast events to the subscribers.
     */
    class Broadcaster {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner) {
            this.queryRunner = queryRunner;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Broadcasts "BEFORE_INSERT" event.
         * Before insert event is executed before entity is being inserted to the database for the first time.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastBeforeInsertEvent(result, metadata, entity) {
            if (entity && metadata.beforeInsertListeners.length) {
                metadata.beforeInsertListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeInsert) {
                        const executionResult = subscriber.beforeInsert({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "BEFORE_UPDATE" event.
         * Before update event is executed before entity is being updated in the database.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastBeforeUpdateEvent(result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {
            if (entity && metadata.beforeUpdateListeners.length) {
                metadata.beforeUpdateListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeUpdate) {
                        const executionResult = subscriber.beforeUpdate({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata,
                            databaseEntity: databaseEntity,
                            updatedColumns: updatedColumns || [],
                            updatedRelations: updatedRelations || []
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "BEFORE_REMOVE" event.
         * Before remove event is executed before entity is being removed from the database.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastBeforeRemoveEvent(result, metadata, entity, databaseEntity) {
            if (entity && metadata.beforeRemoveListeners.length) {
                metadata.beforeRemoveListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeRemove) {
                        const executionResult = subscriber.beforeRemove({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata,
                            databaseEntity: databaseEntity,
                            entityId: metadata.getEntityIdMixedMap(databaseEntity)
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_INSERT" event.
         * After insert event is executed after entity is being persisted to the database for the first time.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastAfterInsertEvent(result, metadata, entity) {
            if (entity && metadata.afterInsertListeners.length) {
                metadata.afterInsertListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterInsert) {
                        const executionResult = subscriber.afterInsert({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "BEFORE_TRANSACTION_START" event.
         */
        broadcastBeforeTransactionStartEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.beforeTransactionStart) {
                        const executionResult = subscriber.beforeTransactionStart({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_TRANSACTION_START" event.
         */
        broadcastAfterTransactionStartEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.afterTransactionStart) {
                        const executionResult = subscriber.afterTransactionStart({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "BEFORE_TRANSACTION_COMMIT" event.
         */
        broadcastBeforeTransactionCommitEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.beforeTransactionCommit) {
                        const executionResult = subscriber.beforeTransactionCommit({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_TRANSACTION_COMMIT" event.
         */
        broadcastAfterTransactionCommitEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.afterTransactionCommit) {
                        const executionResult = subscriber.afterTransactionCommit({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "BEFORE_TRANSACTION_ROLLBACK" event.
         */
        broadcastBeforeTransactionRollbackEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.beforeTransactionRollback) {
                        const executionResult = subscriber.beforeTransactionRollback({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_TRANSACTION_ROLLBACK" event.
         */
        broadcastAfterTransactionRollbackEvent(result) {
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (subscriber.afterTransactionRollback) {
                        const executionResult = subscriber.afterTransactionRollback({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_UPDATE" event.
         * After update event is executed after entity is being updated in the database.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastAfterUpdateEvent(result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {
            if (entity && metadata.afterUpdateListeners.length) {
                metadata.afterUpdateListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterUpdate) {
                        const executionResult = subscriber.afterUpdate({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata,
                            databaseEntity: databaseEntity,
                            updatedColumns: updatedColumns || [],
                            updatedRelations: updatedRelations || []
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_REMOVE" event.
         * After remove event is executed after entity is being removed from the database.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastAfterRemoveEvent(result, metadata, entity, databaseEntity) {
            if (entity && metadata.afterRemoveListeners.length) {
                metadata.afterRemoveListeners.forEach(listener => {
                    if (listener.isAllowed(entity)) {
                        const executionResult = listener.execute(entity);
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
            if (this.queryRunner.connection.subscribers.length) {
                this.queryRunner.connection.subscribers.forEach(subscriber => {
                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterRemove) {
                        const executionResult = subscriber.afterRemove({
                            connection: this.queryRunner.connection,
                            queryRunner: this.queryRunner,
                            manager: this.queryRunner.manager,
                            entity: entity,
                            metadata: metadata,
                            databaseEntity: databaseEntity,
                            entityId: metadata.getEntityIdMixedMap(databaseEntity)
                        });
                        if (executionResult instanceof Promise)
                            result.promises.push(executionResult);
                        result.count++;
                    }
                });
            }
        }
        /**
         * Broadcasts "AFTER_LOAD" event for all given entities, and their sub-entities.
         * After load event is executed after entity has been loaded from the database.
         * All subscribers and entity listeners who listened to this event will be executed at this point.
         * Subscribers and entity listeners can return promises, it will wait until they are resolved.
         *
         * Note: this method has a performance-optimized code organization, do not change code structure.
         */
        broadcastLoadEventsForAll(result, metadata, entities) {
            entities.forEach(entity => {
                if (entity instanceof Promise) // todo: check why need this?
                    return;
                // collect load events for all children entities that were loaded with the main entity
                if (metadata.relations.length) {
                    metadata.relations.forEach(relation => {
                        // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query
                        if (relation.isLazy && !entity.hasOwnProperty(relation.propertyName))
                            return;
                        const value = relation.getEntityValue(entity);
                        if (value instanceof Object)
                            this.broadcastLoadEventsForAll(result, relation.inverseEntityMetadata, Array.isArray(value) ? value : [value]);
                    });
                }
                if (metadata.afterLoadListeners.length) {
                    metadata.afterLoadListeners.forEach(listener => {
                        if (listener.isAllowed(entity)) {
                            const executionResult = listener.execute(entity);
                            if (executionResult instanceof Promise)
                                result.promises.push(executionResult);
                            result.count++;
                        }
                    });
                }
                if (this.queryRunner.connection.subscribers.length) {
                    this.queryRunner.connection.subscribers.forEach(subscriber => {
                        if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterLoad) {
                            const executionResult = subscriber.afterLoad(entity, {
                                connection: this.queryRunner.connection,
                                queryRunner: this.queryRunner,
                                manager: this.queryRunner.manager,
                                entity: entity,
                                metadata: metadata
                            });
                            if (executionResult instanceof Promise)
                                result.promises.push(executionResult);
                            result.count++;
                        }
                    });
                }
            });
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,
         * or listens our entity.
         */
        isAllowedSubscriber(subscriber, target) {
            return !subscriber.listenTo ||
                !subscriber.listenTo() ||
                subscriber.listenTo() === Object ||
                subscriber.listenTo() === target ||
                subscriber.listenTo().isPrototypeOf(target);
        }
    }
    exports.Broadcaster = Broadcaster;
});
define("typeorm/schema-builder/options/TableIndexOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/cockroachdb/CockroachQueryRunner", ["require", "exports", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableForeignKey", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/schema-builder/view/View", "typeorm/driver/Query", "typeorm/error/QueryFailedError", "typeorm/subscriber/Broadcaster", "typeorm/schema-builder/table/TableUnique", "typeorm/query-runner/BaseQueryRunner", "typeorm/util/OrmUtils", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableExclusion", "typeorm/subscriber/BroadcasterResult"], function (require, exports, TransactionAlreadyStartedError_2, TransactionNotStartedError_2, TableColumn_2, Table_2, TableIndex_2, TableForeignKey_2, QueryRunnerAlreadyReleasedError_2, View_2, Query_3, QueryFailedError_2, Broadcaster_3, TableUnique_2, BaseQueryRunner_2, OrmUtils_12, TableCheck_2, TableExclusion_1, BroadcasterResult_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CockroachQueryRunner = void 0;
    /**
     * Runs queries on a single postgres database connection.
     */
    class CockroachQueryRunner extends BaseQueryRunner_2.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            /**
             * Stores all executed queries to be able to run them again if transaction fails.
             */
            this.queries = [];
            /**
             * Indicates if running queries must be stored
             */
            this.storeQueries = false;
            this.driver = driver;
            this.connection = driver.connection;
            this.mode = mode;
            this.broadcaster = new Broadcaster_3.Broadcaster(this);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            if (this.databaseConnection)
                return Promise.resolve(this.databaseConnection);
            if (this.databaseConnectionPromise)
                return this.databaseConnectionPromise;
            if (this.mode === "slave" && this.driver.isReplicated) {
                this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    this.releaseCallback = release;
                    return this.databaseConnection;
                });
            }
            else { // master
                this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    this.releaseCallback = release;
                    return this.databaseConnection;
                });
            }
            return this.databaseConnectionPromise;
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            this.isReleased = true;
            if (this.releaseCallback)
                this.releaseCallback();
            const index = this.driver.connectedQueryRunners.indexOf(this);
            if (index !== -1)
                this.driver.connectedQueryRunners.splice(index);
            return Promise.resolve();
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_2.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            await this.query("START TRANSACTION");
            await this.query("SAVEPOINT cockroach_restart");
            if (isolationLevel) {
                await this.query("SET TRANSACTION ISOLATION LEVEL " + isolationLevel);
            }
            this.storeQueries = true;
            const afterBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_2.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.storeQueries = false;
            try {
                await this.query("RELEASE SAVEPOINT cockroach_restart");
                await this.query("COMMIT");
                this.queries = [];
                this.isTransactionActive = false;
            }
            catch (e) {
                if (e.code === "40001") {
                    await this.query("ROLLBACK TO SAVEPOINT cockroach_restart");
                    for (const q of this.queries) {
                        await this.query(q.query, q.parameters);
                    }
                    await this.commitTransaction();
                }
            }
            const afterBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_2.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.storeQueries = false;
            await this.query("ROLLBACK");
            this.queries = [];
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_4.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters, options) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_2.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const queryStartTime = +new Date();
                    databaseConnection.query(query, parameters, (err, result) => {
                        if (this.isTransactionActive && this.storeQueries)
                            this.queries.push({ query, parameters });
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        if (err) {
                            if (err.code !== "40001")
                                this.driver.connection.logger.logQueryError(err, query, parameters, this);
                            fail(new QueryFailedError_2.QueryFailedError(query, parameters, err));
                        }
                        else {
                            switch (result.command) {
                                case "DELETE":
                                    // for DELETE query additionally return number of affected rows
                                    ok([result.rows, result.rowCount]);
                                    break;
                                default:
                                    ok(result.rows);
                            }
                        }
                    });
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            const QueryStream = this.driver.loadStreamDependency();
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_2.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const stream = databaseConnection.query(new QueryStream(query, parameters));
                    if (onEnd)
                        stream.on("end", onEnd);
                    if (onError)
                        stream.on("error", onError);
                    ok(stream);
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            return Promise.resolve([]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            const result = await this.query(`SELECT * FROM "pg_database" WHERE "datname" = '${database}'`);
            return result.length ? true : false;
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            const result = await this.query(`SELECT * FROM "information_schema"."schemata" WHERE "schema_name" = '${schema}'`);
            return result.length ? true : false;
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "information_schema"."tables" WHERE "table_schema" = ${parsedTableName.schema} AND "table_name" = ${parsedTableName.tableName}`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "information_schema"."columns" WHERE "table_schema" = ${parsedTableName.schema} AND "table_name" = ${parsedTableName.tableName} AND "column_name" = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            const up = `CREATE DATABASE ${ifNotExist ? "IF NOT EXISTS " : ""} "${database}"`;
            const down = `DROP DATABASE "${database}"`;
            await this.executeQueries(new Query_3.Query(up), new Query_3.Query(down));
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            const up = `DROP DATABASE ${ifExist ? "IF EXISTS " : ""} "${database}"`;
            const down = `CREATE DATABASE "${database}"`;
            await this.executeQueries(new Query_3.Query(up), new Query_3.Query(down));
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS "${schema}"` : `CREATE SCHEMA "${schema}"`;
            const down = `DROP SCHEMA "${schema}" CASCADE`;
            await this.executeQueries(new Query_3.Query(up), new Query_3.Query(down));
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist, isCascade) {
            const schema = schemaPath.indexOf(".") === -1 ? schemaPath : schemaPath.split(".")[0];
            const up = ifExist ? `DROP SCHEMA IF EXISTS "${schema}" ${isCascade ? "CASCADE" : ""}` : `DROP SCHEMA "${schema}" ${isCascade ? "CASCADE" : ""}`;
            const down = `CREATE SCHEMA "${schema}"`;
            await this.executeQueries(new Query_3.Query(up), new Query_3.Query(down));
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            table.columns
                .filter(column => column.isGenerated && column.generationStrategy === "increment")
                .forEach(column => {
                upQueries.push(new Query_3.Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));
                downQueries.push(new Query_3.Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));
            });
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (createIndices) {
                table.indices
                    .filter(index => !index.isUnique)
                    .forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(table, index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(target, ifExist, dropForeignKeys = true, dropIndices = true) {
            // to perform drop queries for foreign keys and indices.
            if (ifExist) {
                const isTableExist = await this.hasTable(target);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const tableName = target instanceof Table_2.Table ? target.name : target;
            const table = await this.getCachedTable(tableName);
            const upQueries = [];
            const downQueries = [];
            // foreign keys must be dropped before indices, because fk's rely on indices
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(table, index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            table.columns
                .filter(column => column.isGenerated && column.generationStrategy === "increment")
                .forEach(column => {
                upQueries.push(new Query_3.Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));
                downQueries.push(new Query_3.Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));
            });
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_2.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames the given table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_2.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            const oldTableName = oldTable.name.indexOf(".") === -1 ? oldTable.name : oldTable.name.split(".")[1];
            const schemaName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;
            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO "${newTableName}"`));
            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO "${oldTableName}"`));
            // rename column primary key constraint
            if (newTable.primaryColumns.length > 0) {
                const columnNames = newTable.primaryColumns.map(column => column.name);
                const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
                const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
            }
            // rename unique constraints
            newTable.uniques.forEach(unique => {
                // build new constraint name
                const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
                // build queries
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                // replace constraint name
                unique.name = newUniqueName;
            });
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const schema = this.extractSchema(newTable);
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                const up = schema ? `ALTER INDEX "${schema}"."${index.name}" RENAME TO "${newIndexName}"` : `ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`;
                const down = schema ? `ALTER INDEX "${schema}"."${newIndexName}" RENAME TO "${index.name}"` : `ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`;
                upQueries.push(new Query_3.Query(up));
                downQueries.push(new Query_3.Query(down));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraints
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // build queries
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            if (column.generationStrategy === "increment") {
                throw new Error(`Adding sequential generated columns into existing table is not supported`);
            }
            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));
            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            // create or update primary key constraint
            if (column.isPrimary) {
                const primaryColumns = clonedTable.primaryColumns;
                // if table already have primary key, me must drop it and recreate again
                // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141
                if (primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                    const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                    upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                }
                primaryColumns.push(column);
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                // CockroachDB stores unique indices as UNIQUE constraints
                if (columnIndex.isUnique) {
                    const unique = new TableUnique_2.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, columnIndex.columnNames),
                        columnNames: columnIndex.columnNames
                    });
                    upQueries.push(this.createUniqueConstraintSql(table, unique));
                    downQueries.push(this.dropIndexSql(table, unique));
                    clonedTable.uniques.push(unique);
                }
                else {
                    upQueries.push(this.createIndexSql(table, columnIndex));
                    downQueries.push(this.dropIndexSql(table, columnIndex));
                }
            }
            // create unique constraint
            if (column.isUnique) {
                const uniqueConstraint = new TableUnique_2.TableUnique({
                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                    columnNames: [column.name]
                });
                clonedTable.uniques.push(uniqueConstraint);
                upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));
                downQueries.push(this.dropIndexSql(table, uniqueConstraint.name)); // CockroachDB creates indices for unique constraints
            }
            // create column's comment
            if (column.comment) {
                upQueries.push(new Query_3.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${column.name}" IS ${this.escapeComment(column.comment)}`));
                downQueries.push(new Query_3.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${column.name}" IS ${this.escapeComment(column.comment)}`));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_2.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn;
            if (newTableColumnOrName instanceof TableColumn_2.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            return this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldTableColumnOrName instanceof TableColumn_2.TableColumn
                ? oldTableColumnOrName
                : table.columns.find(column => column.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {
                // To avoid data conversion, we just recreate column
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (oldColumn.name !== newColumn.name) {
                    // rename column
                    upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN "${oldColumn.name}" TO "${newColumn.name}"`));
                    downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN "${newColumn.name}" TO "${oldColumn.name}"`));
                    // rename column primary key constraint
                    if (oldColumn.isPrimary === true) {
                        const primaryColumns = clonedTable.primaryColumns;
                        // build old primary constraint name
                        const columnNames = primaryColumns.map(column => column.name);
                        const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // replace old column name with new column name
                        columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                        columnNames.push(newColumn.name);
                        // build new primary constraint name
                        const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
                    }
                    // rename unique constraints
                    clonedTable.findColumnUniques(oldColumn).forEach(unique => {
                        // build new constraint name
                        unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);
                        unique.columnNames.push(newColumn.name);
                        const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);
                        // build queries
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                        // replace constraint name
                        unique.name = newUniqueName;
                    });
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const schema = this.extractSchema(table);
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        const up = schema ? `ALTER INDEX "${schema}"."${index.name}" RENAME TO "${newIndexName}"` : `ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`;
                        const down = schema ? `ALTER INDEX "${schema}"."${newIndexName}" RENAME TO "${index.name}"` : `ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`;
                        upQueries.push(new Query_3.Query(up));
                        downQueries.push(new Query_3.Query(down));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        // build queries
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {
                    upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(newColumn)}`));
                    downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(oldColumn)}`));
                }
                if (oldColumn.isNullable !== newColumn.isNullable) {
                    if (newColumn.isNullable) {
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" DROP NOT NULL`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" SET NOT NULL`));
                    }
                    else {
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" SET NOT NULL`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" DROP NOT NULL`));
                    }
                }
                if (oldColumn.comment !== newColumn.comment) {
                    upQueries.push(new Query_3.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${oldColumn.name}" IS ${this.escapeComment(newColumn.comment)}`));
                    downQueries.push(new Query_3.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${newColumn.name}" IS ${this.escapeComment(oldColumn.comment)}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                            const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        }
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique) {
                        const uniqueConstraint = new TableUnique_2.TableUnique({
                            name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name]
                        });
                        clonedTable.uniques.push(uniqueConstraint);
                        upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));
                        // CockroachDB creates index for UNIQUE constraint.
                        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.
                        downQueries.push(this.dropIndexSql(table, uniqueConstraint));
                    }
                    else {
                        const uniqueConstraint = clonedTable.uniques.find(unique => {
                            return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);
                        // CockroachDB creates index for UNIQUE constraint.
                        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.
                        upQueries.push(this.dropIndexSql(table, uniqueConstraint));
                        downQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));
                    }
                }
                if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== "uuid") {
                    if (newColumn.isGenerated) {
                        if (newColumn.generationStrategy === "increment") {
                            throw new Error(`Adding sequential generated columns into existing table is not supported`);
                        }
                        else if (newColumn.generationStrategy === "rowid") {
                            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT unique_rowid()`));
                            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        }
                    }
                    else {
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT unique_rowid()`));
                    }
                }
                if (newColumn.default !== oldColumn.default) {
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${newColumn.default}`));
                        if (oldColumn.default !== null && oldColumn.default !== undefined) {
                            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${oldColumn.default}`));
                        }
                        else {
                            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        }
                    }
                    else if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${oldColumn.default}`));
                    }
                }
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_2.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141
            if (column.isPrimary) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                    upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            // drop column check
            const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);
            if (columnCheck) {
                clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
                upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
                downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }
            // drop column unique
            const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
            if (columnUnique) {
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);
                upQueries.push(this.dropIndexSql(table, columnUnique.name)); // CockroachDB creates indices for unique constraints
                downQueries.push(this.createUniqueConstraintSql(table, columnUnique));
            }
            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));
            if (column.generationStrategy === "increment") {
                upQueries.push(new Query_3.Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));
                downQueries.push(new Query_3.Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            const down = this.dropPrimaryKeySql(clonedTable);
            await this.executeQueries(up, down);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNamesString = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            upQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!uniqueConstraint.name)
                uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);
            const up = this.createUniqueConstraintSql(table, uniqueConstraint);
            // CockroachDB creates index for UNIQUE constraint.
            // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.
            const down = this.dropIndexSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.addUniqueConstraint(uniqueConstraint);
        }
        /**
         * Creates new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            for (const uniqueConstraint of uniqueConstraints) {
                await this.createUniqueConstraint(tableOrName, uniqueConstraint);
            }
        }
        /**
         * Drops unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const uniqueConstraint = uniqueOrName instanceof TableUnique_2.TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);
            if (!uniqueConstraint)
                throw new Error(`Supplied unique constraint was not found in table ${table.name}`);
            // CockroachDB creates index for UNIQUE constraint.
            // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.
            const up = this.dropIndexSql(table, uniqueConstraint);
            const down = this.createUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.removeUniqueConstraint(uniqueConstraint);
        }
        /**
         * Drops unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            for (const uniqueConstraint of uniqueConstraints) {
                await this.dropUniqueConstraint(tableOrName, uniqueConstraint);
            }
        }
        /**
         * Creates new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!checkConstraint.name)
                checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            const up = this.createCheckConstraintSql(table, checkConstraint);
            const down = this.dropCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.addCheckConstraint(checkConstraint);
        }
        /**
         * Creates new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_2.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            const up = this.dropCheckConstraintSql(table, checkConstraint);
            const down = this.createCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.removeCheckConstraint(checkConstraint);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`CockroachDB does not support exclusion constraints.`);
        }
        /**
         * Creates new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`CockroachDB does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`CockroachDB does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`CockroachDB does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            for (const foreignKey of foreignKeys) {
                await this.createForeignKey(tableOrName, foreignKey);
            }
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_2.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            for (const foreignKey of foreignKeys) {
                await this.dropForeignKey(tableOrName, foreignKey);
            }
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            // CockroachDB stores unique indices and UNIQUE constraints
            if (index.isUnique) {
                const unique = new TableUnique_2.TableUnique({
                    name: index.name,
                    columnNames: index.columnNames
                });
                const up = this.createUniqueConstraintSql(table, unique);
                // CockroachDB also creates index for UNIQUE constraints.
                // We can't drop UNIQUE constraint with DROP CONSTRAINT. We must use DROP INDEX ... CASCADE instead.
                const down = this.dropIndexSql(table, unique);
                await this.executeQueries(up, down);
                table.addUniqueConstraint(unique);
            }
            else {
                const up = this.createIndexSql(table, index);
                const down = this.dropIndexSql(table, index);
                await this.executeQueries(up, down);
                table.addIndex(index);
            }
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            for (const index of indices) {
                await this.createIndex(tableOrName, index);
            }
        }
        /**
         * Drops an index from the table.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_2.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_2.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            for (const index of indices) {
                await this.dropIndex(tableOrName, index);
            }
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableName) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase() {
            const schemas = [];
            this.connection.entityMetadatas
                .filter(metadata => metadata.schema)
                .forEach(metadata => {
                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);
                if (!isSchemaExist)
                    schemas.push(metadata.schema);
            });
            schemas.push(this.driver.options.schema || "current_schema()");
            const schemaNamesString = schemas.map(name => {
                return name === "current_schema()" ? name : "'" + name + "'";
            }).join(", ");
            await this.startTransaction();
            try {
                const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS "' || schemaname || '"."' || viewname || '" CASCADE;' as "query" ` +
                    `FROM "pg_views" WHERE "schemaname" IN (${schemaNamesString})`;
                const dropViewQueries = await this.query(selectViewDropsQuery);
                await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS "' || table_schema || '"."' || table_name || '" CASCADE;' as "query" FROM "information_schema"."tables" WHERE "table_schema" IN (${schemaNamesString})`;
                const dropQueries = await this.query(selectDropsQuery);
                await Promise.all(dropQueries.map(q => this.query(q["query"])));
                const selectSequenceDropsQuery = `SELECT 'DROP SEQUENCE "' || sequence_schema || '"."' || sequence_name || '";' as "query" FROM "information_schema"."sequences" WHERE "sequence_schema" IN (${schemaNamesString})`;
                const sequenceDropQueries = await this.query(selectSequenceDropsQuery);
                await Promise.all(sequenceDropQueries.map(q => this.query(q["query"])));
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const viewsCondition = viewNames.map(viewName => {
                let [schema, name] = viewName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("t"."schema" = '${schema}' AND "t"."name" = '${name}')`;
            }).join(" OR ");
            const query = `SELECT "t".*, "v"."check_option" FROM ${this.escapePath(this.getTypeormMetadataTableName())} "t" ` +
                `INNER JOIN "information_schema"."views" "v" ON "v"."table_schema" = "t"."schema" AND "v"."table_name" = "t"."name" WHERE "t"."type" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_2.View();
                const schema = dbView["schema"] === currentSchema && !this.driver.options.schema ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], schema);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const tablesCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("table_schema" = '${schema}' AND "table_name" = '${name}')`;
            }).join(" OR ");
            const tablesSql = `SELECT * FROM "information_schema"."tables" WHERE ` + tablesCondition;
            const columnsSql = `
            SELECT
                *,
                pg_catalog.col_description(('"' || table_catalog || '"."' || table_schema || '"."' || table_name || '"')::regclass::oid, ordinal_position) as description
            FROM "information_schema"."columns"
            WHERE "is_hidden" = 'NO' AND ` + tablesCondition;
            const constraintsCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("ns"."nspname" = '${schema}' AND "t"."relname" = '${name}')`;
            }).join(" OR ");
            const constraintsSql = `SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "cnst"."conname" AS "constraint_name", ` +
                `pg_get_constraintdef("cnst"."oid") AS "expression", ` +
                `CASE "cnst"."contype" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS "constraint_type", "a"."attname" AS "column_name" ` +
                `FROM "pg_constraint" "cnst" ` +
                `INNER JOIN "pg_class" "t" ON "t"."oid" = "cnst"."conrelid" ` +
                `INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "cnst"."connamespace" ` +
                `LEFT JOIN "pg_attribute" "a" ON "a"."attrelid" = "cnst"."conrelid" AND "a"."attnum" = ANY ("cnst"."conkey") ` +
                `WHERE "t"."relkind" = 'r' AND (${constraintsCondition})`;
            const indicesSql = `SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "i"."relname" AS "constraint_name", "a"."attname" AS "column_name", ` +
                `CASE "ix"."indisunique" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS "is_unique", pg_get_expr("ix"."indpred", "ix"."indrelid") AS "condition", ` +
                `"types"."typname" AS "type_name" ` +
                `FROM "pg_class" "t" ` +
                `INNER JOIN "pg_index" "ix" ON "ix"."indrelid" = "t"."oid" ` +
                `INNER JOIN "pg_attribute" "a" ON "a"."attrelid" = "t"."oid"  AND "a"."attnum" = ANY ("ix"."indkey") ` +
                `INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "t"."relnamespace" ` +
                `INNER JOIN "pg_class" "i" ON "i"."oid" = "ix"."indexrelid" ` +
                `INNER JOIN "pg_type" "types" ON "types"."oid" = "a"."atttypid" ` +
                `LEFT JOIN "pg_constraint" "cnst" ON "cnst"."conname" = "i"."relname" ` +
                `WHERE "t"."relkind" = 'r' AND "cnst"."contype" IS NULL AND (${constraintsCondition})`;
            const foreignKeysCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("ns"."nspname" = '${schema}' AND "cl"."relname" = '${name}')`;
            }).join(" OR ");
            const foreignKeysSql = `SELECT "con"."conname" AS "constraint_name", "con"."nspname" AS "table_schema", "con"."relname" AS "table_name", "att2"."attname" AS "column_name", ` +
                `"ns"."nspname" AS "referenced_table_schema", "cl"."relname" AS "referenced_table_name", "att"."attname" AS "referenced_column_name", "con"."confdeltype" AS "on_delete", "con"."confupdtype" AS "on_update" ` +
                `FROM ( ` +
                `SELECT UNNEST ("con1"."conkey") AS "parent", UNNEST ("con1"."confkey") AS "child", "con1"."confrelid", "con1"."conrelid", "con1"."conname", "con1"."contype", "ns"."nspname", "cl"."relname", ` +
                `CASE "con1"."confdeltype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confdeltype", ` +
                `CASE "con1"."confupdtype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confupdtype" ` +
                `FROM "pg_class" "cl" ` +
                `INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" ` +
                `INNER JOIN "pg_constraint" "con1" ON "con1"."conrelid" = "cl"."oid" ` +
                `WHERE "con1"."contype" = 'f' AND (${foreignKeysCondition}) ` +
                `) "con" ` +
                `INNER JOIN "pg_attribute" "att" ON "att"."attrelid" = "con"."confrelid" AND "att"."attnum" = "con"."child" ` +
                `INNER JOIN "pg_class" "cl" ON "cl"."oid" = "con"."confrelid" ` +
                `INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" ` +
                `INNER JOIN "pg_attribute" "att2" ON "att2"."attrelid" = "con"."conrelid" AND "att2"."attnum" = "con"."parent"`;
            const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(constraintsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql),
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create tables for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_2.Table();
                // We do not need to join schema name, when database is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const schema = dbTable["table_schema"] === currentSchema && !this.driver.options.schema ? undefined : dbTable["table_schema"];
                table.name = this.driver.buildTableName(dbTable["table_name"], schema);
                const tableFullName = this.driver.buildTableName(dbTable["table_name"], dbTable["table_schema"]);
                // create columns from the loaded columns
                table.columns = await Promise.all(dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["table_name"], dbColumn["table_schema"]) === tableFullName)
                    .map(async (dbColumn) => {
                    const columnConstraints = dbConstraints.filter(dbConstraint => {
                        return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["column_name"] === dbColumn["column_name"];
                    });
                    const tableColumn = new TableColumn_2.TableColumn();
                    tableColumn.name = dbColumn["column_name"];
                    tableColumn.type = dbColumn["crdb_sql_type"].toLowerCase();
                    if (dbColumn["crdb_sql_type"].indexOf("COLLATE") !== -1) {
                        tableColumn.collation = dbColumn["crdb_sql_type"].substr(dbColumn["crdb_sql_type"].indexOf("COLLATE") + "COLLATE".length + 1, dbColumn["crdb_sql_type"].length);
                        tableColumn.type = tableColumn.type.substr(0, dbColumn["crdb_sql_type"].indexOf("COLLATE") - 1);
                    }
                    if (tableColumn.type.indexOf("(") !== -1)
                        tableColumn.type = tableColumn.type.substr(0, tableColumn.type.indexOf("("));
                    if (tableColumn.type === "numeric" || tableColumn.type === "decimal") {
                        if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                            tableColumn.precision = parseInt(dbColumn["numeric_precision"]);
                        }
                        else if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                            tableColumn.precision = undefined;
                        }
                        if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                            tableColumn.scale = parseInt(dbColumn["numeric_scale"]);
                        }
                        else if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                            tableColumn.scale = undefined;
                        }
                    }
                    if (dbColumn["data_type"].toLowerCase() === "array") {
                        tableColumn.isArray = true;
                        const type = dbColumn["crdb_sql_type"].replace("[]", "").toLowerCase();
                        tableColumn.type = this.connection.driver.normalizeType({ type: type });
                    }
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["character_maximum_length"]) {
                        const length = dbColumn["character_maximum_length"].toString();
                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                    }
                    tableColumn.isNullable = dbColumn["is_nullable"] === "YES";
                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint["constraint_type"] === "PRIMARY");
                    const uniqueConstraint = columnConstraints.find(constraint => constraint["constraint_type"] === "UNIQUE");
                    const isConstraintComposite = uniqueConstraint
                        ? !!dbConstraints.find(dbConstraint => dbConstraint["constraint_type"] === "UNIQUE"
                            && dbConstraint["constraint_name"] === uniqueConstraint["constraint_name"]
                            && dbConstraint["column_name"] !== dbColumn["column_name"])
                        : false;
                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;
                    if (dbColumn["column_default"] !== null && dbColumn["column_default"] !== undefined) {
                        if (dbColumn["column_default"] === "unique_rowid()") {
                            tableColumn.isGenerated = true;
                            tableColumn.generationStrategy = "rowid";
                        }
                        else if (dbColumn["column_default"].indexOf("nextval") !== -1) {
                            tableColumn.isGenerated = true;
                            tableColumn.generationStrategy = "increment";
                        }
                        else if (dbColumn["column_default"] === "gen_random_uuid()") {
                            tableColumn.isGenerated = true;
                            tableColumn.generationStrategy = "uuid";
                        }
                        else {
                            tableColumn.default = dbColumn["column_default"].replace(/:::.*/, "");
                            tableColumn.default = tableColumn.default.replace(/^(-?[\d\.]+)$/, "($1)");
                        }
                    }
                    tableColumn.comment = dbColumn["description"] == null ? undefined : dbColumn["description"];
                    if (dbColumn["character_set_name"])
                        tableColumn.charset = dbColumn["character_set_name"];
                    return tableColumn;
                }));
                // find unique constraints of table, group them by constraint name and build TableUnique.
                const tableUniqueConstraints = OrmUtils_12.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "UNIQUE";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.uniques = tableUniqueConstraints.map(constraint => {
                    const uniques = dbConstraints.filter(dbC => dbC["constraint_name"] === constraint["constraint_name"]);
                    return new TableUnique_2.TableUnique({
                        name: constraint["constraint_name"],
                        columnNames: uniques.map(u => u["column_name"])
                    });
                });
                // find check constraints of table, group them by constraint name and build TableCheck.
                const tableCheckConstraints = OrmUtils_12.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "CHECK";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.checks = tableCheckConstraints.map(constraint => {
                    const checks = dbConstraints.filter(dbC => dbC["constraint_name"] === constraint["constraint_name"]);
                    return new TableCheck_2.TableCheck({
                        name: constraint["constraint_name"],
                        columnNames: checks.map(c => c["column_name"]),
                        expression: constraint["expression"].replace(/^\s*CHECK\s*\((.*)\)\s*$/i, "$1")
                    });
                });
                // find exclusion constraints of table, group them by constraint name and build TableExclusion.
                const tableExclusionConstraints = OrmUtils_12.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "EXCLUDE";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.exclusions = tableExclusionConstraints.map(constraint => {
                    return new TableExclusion_1.TableExclusion({
                        name: constraint["constraint_name"],
                        expression: constraint["expression"].substring(8) // trim EXCLUDE from start of expression
                    });
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_12.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["table_name"], dbForeignKey["table_schema"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["constraint_name"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["constraint_name"] === dbForeignKey["constraint_name"]);
                    // if referenced table located in currently used schema, we don't need to concat schema name to table name.
                    const schema = dbForeignKey["referenced_table_schema"] === currentSchema ? undefined : dbForeignKey["referenced_table_schema"];
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["referenced_table_name"], schema);
                    return new TableForeignKey_2.TableForeignKey({
                        name: dbForeignKey["constraint_name"],
                        columnNames: foreignKeys.map(dbFk => dbFk["column_name"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["referenced_column_name"]),
                        onDelete: dbForeignKey["on_delete"],
                        onUpdate: dbForeignKey["on_update"]
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_12.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["table_name"], dbIndex["table_schema"]) === tableFullName;
                }), dbIndex => dbIndex["constraint_name"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => index["constraint_name"] === constraint["constraint_name"]);
                    return new TableIndex_2.TableIndex({
                        table: table,
                        name: constraint["constraint_name"],
                        columnNames: indices.map(i => i["column_name"]),
                        isUnique: constraint["is_unique"] === "TRUE",
                        where: constraint["condition"],
                        isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i["type_name"]) >= 0),
                        isFulltext: false
                    });
                });
                return table;
            }));
        }
        /**
         * Builds create table sql.
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
                if (!isUniqueExist)
                    table.uniques.push(new TableUnique_2.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name]
                    }));
            });
            table.indices
                .filter(index => index.isUnique)
                .forEach(index => {
                table.uniques.push(new TableUnique_2.TableUnique({
                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, index.columnNames),
                    columnNames: index.columnNames
                }));
            });
            if (table.uniques.length > 0) {
                const uniquesSql = table.uniques.map(unique => {
                    const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
                    const columnNames = unique.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    return `CONSTRAINT "${uniqueName}" UNIQUE (${columnNames})`;
                }).join(", ");
                sql += `, ${uniquesSql}`;
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            if (primaryColumns.length > 0) {
                const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            table.columns
                .filter(it => it.comment)
                .forEach(it => sql += `; COMMENT ON COLUMN ${this.escapePath(table)}."${it.name}" IS ${this.escapeComment(it.comment)}`);
            return new Query_3.Query(sql);
        }
        /**
         * Extracts schema name from given Table object or table name string.
         */
        extractSchema(target) {
            const tableName = target instanceof Table_2.Table ? target.name : target;
            return tableName.indexOf(".") === -1 ? this.driver.options.schema : tableName.split(".")[0];
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrPath) {
            return new Query_3.Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_3.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);
            }
            else {
                return new Query_3.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const splittedName = view.name.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = view.name;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", schema: schema, name: name, value: expression })
                .getQueryAndParameters();
            return new Query_3.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_3.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const viewName = viewOrPath instanceof View_2.View ? viewOrPath.name : viewOrPath;
            const splittedName = viewName.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = viewName;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("schema")} = :schema`, { schema })
                .andWhere(`${qb.escape("name")} = :name`, { name })
                .getQueryAndParameters();
            return new Query_3.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         * UNIQUE indices creates as UNIQUE constraints.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_3.Query(`CREATE INDEX "${index.name}" ON ${this.escapePath(table)} (${columns}) ${index.where ? "WHERE " + index.where : ""}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = (indexOrName instanceof TableIndex_2.TableIndex || indexOrName instanceof TableUnique_2.TableUnique) ? indexOrName.name : indexOrName;
            return new Query_3.Query(`DROP INDEX ${this.escapePath(table)}@"${indexName}" CASCADE`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            const columnNames = table.primaryColumns.map(column => column.name);
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${primaryKeyName}"`);
        }
        /**
         * Builds create unique constraint sql.
         */
        createUniqueConstraintSql(table, uniqueConstraint) {
            const columnNames = uniqueConstraint.columnNames.map(column => `"` + column + `"`).join(", ");
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE (${columnNames})`);
        }
        /**
         * Builds drop unique constraint sql.
         */
        dropUniqueConstraintSql(table, uniqueOrName) {
            const uniqueName = uniqueOrName instanceof TableUnique_2.TableUnique ? uniqueOrName.name : uniqueOrName;
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueName}"`);
        }
        /**
         * Builds create check constraint sql.
         */
        createCheckConstraintSql(table, checkConstraint) {
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${checkConstraint.name}" CHECK (${checkConstraint.expression})`);
        }
        /**
         * Builds drop check constraint sql.
         */
        dropCheckConstraintSql(table, checkOrName) {
            const checkName = checkOrName instanceof TableCheck_2.TableCheck ? checkOrName.name : checkOrName;
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${checkName}"`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `"` + column + `"`).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `"` + column + `"`).join(",");
            let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${foreignKey.name}" FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            if (foreignKey.onDelete)
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            if (foreignKey.onUpdate)
                sql += ` ON UPDATE ${foreignKey.onUpdate}`;
            return new Query_3.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_2.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_3.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${foreignKeyName}"`);
        }
        /**
         * Builds sequence name from given table and column.
         */
        buildSequenceName(table, columnOrName, disableEscape) {
            const columnName = columnOrName instanceof TableColumn_2.TableColumn ? columnOrName.name : columnOrName;
            return disableEscape ? `${table.name}_${columnName}_seq` : `"${table.name}_${columnName}_seq"`;
        }
        /**
         * Escapes a given comment so it's safe to include in a query.
         */
        escapeComment(comment) {
            if (comment === undefined || comment.length === 0) {
                return 'NULL';
            }
            comment = comment
                .replace("'", "''")
                .replace("\0", ""); // Null bytes aren't allowed in comments
            return `'${comment}'`;
        }
        /**
         * Escapes given table or view path.
         */
        escapePath(target, disableEscape) {
            let tableName = target instanceof Table_2.Table || target instanceof View_2.View ? target.name : target;
            tableName = tableName.indexOf(".") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;
            return tableName.split(".").map(i => {
                return disableEscape ? i : `"${i}"`;
            }).join(".");
        }
        /**
         * Returns object with table schema and table name.
         */
        parseTableName(target) {
            const tableName = target instanceof Table_2.Table ? target.name : target;
            if (tableName.indexOf(".") === -1) {
                return {
                    schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : "current_schema()",
                    tableName: `'${tableName}'`
                };
            }
            else {
                return {
                    schema: `'${tableName.split(".")[0]}'`,
                    tableName: `'${tableName.split(".")[1]}'`
                };
            }
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(table, column) {
            let c = "\"" + column.name + "\"";
            if (column.isGenerated) {
                if (column.generationStrategy === "increment") {
                    c += ` INT DEFAULT nextval('${this.buildSequenceName(table, column)}')`;
                }
                else if (column.generationStrategy === "rowid") {
                    c += " INT DEFAULT unique_rowid()";
                }
                else if (column.generationStrategy === "uuid") {
                    c += " UUID DEFAULT gen_random_uuid()";
                }
            }
            if (!column.isGenerated)
                c += " " + this.connection.driver.createFullType(column);
            if (column.charset)
                c += " CHARACTER SET \"" + column.charset + "\"";
            if (column.collation)
                c += " COLLATE \"" + column.collation + "\"";
            if (!column.isNullable)
                c += " NOT NULL";
            if (!column.isGenerated && column.default !== undefined && column.default !== null)
                c += " DEFAULT " + column.default;
            return c;
        }
    }
    exports.CockroachQueryRunner = CockroachQueryRunner;
});
define("typeorm/driver/cockroachdb/CockroachDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/DriverUtils", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/OrmUtils", "typeorm/driver/cockroachdb/CockroachQueryRunner", "typeorm/util/ApplyValueTransformers"], function (require, exports, ConnectionIsNotSetError_3, DriverPackageNotInstalledError_3, DriverUtils_3, DateUtils_4, PlatformTools_5, RdbmsSchemaBuilder_3, OrmUtils_13, CockroachQueryRunner_1, ApplyValueTransformers_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CockroachDriver = void 0;
    /**
     * Organizes communication with Cockroach DBMS.
     */
    class CockroachDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Pool for slave databases.
             * Used in replication.
             */
            this.slaves = [];
            /**
             * We store all created query runners because we need to release them.
             */
            this.connectedQueryRunners = [];
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.cockroachlabs.com/docs/stable/data-types.html
             */
            this.supportedDataTypes = [
                "array",
                "bool",
                "boolean",
                "bytes",
                "bytea",
                "blob",
                "date",
                "numeric",
                "decimal",
                "dec",
                "float",
                "float4",
                "float8",
                "double precision",
                "real",
                "inet",
                "int",
                "int4",
                "integer",
                "int2",
                "int8",
                "int64",
                "smallint",
                "bigint",
                "interval",
                "string",
                "character varying",
                "character",
                "char",
                "char varying",
                "varchar",
                "text",
                "time",
                "time without time zone",
                "timestamp",
                "timestamptz",
                "timestamp without time zone",
                "timestamp with time zone",
                "json",
                "jsonb",
                "uuid",
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "character varying",
                "char varying",
                "varchar",
                "character",
                "char",
                "string",
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "numeric",
                "decimal",
                "dec",
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "numeric",
                "decimal",
                "dec"
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "timestamptz",
                createDateDefault: "now()",
                updateDate: "timestamptz",
                updateDateDefault: "now()",
                deleteDate: "timestamptz",
                deleteDateNullable: true,
                version: Number,
                treeLevel: Number,
                migrationId: Number,
                migrationName: "varchar",
                migrationTimestamp: "int8",
                cacheId: Number,
                cacheIdentifier: "varchar",
                cacheTime: "int8",
                cacheDuration: Number,
                cacheQuery: "string",
                cacheResult: "string",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "string",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "char": { length: 1 },
            };
            this.connection = connection;
            this.options = connection.options;
            this.isReplicated = this.options.replication ? true : false;
            // load postgres package
            this.loadDependencies();
            // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way
            // validate options to make sure everything is set
            // todo: revisit validation with replication in mind
            // if (!this.options.host)
            //     throw new DriverOptionNotSetError("host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.database)
            //     throw new DriverOptionNotSetError("database");
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
            if (this.options.replication) {
                this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {
                    return this.createPool(this.options, slave);
                }));
                this.master = await this.createPool(this.options, this.options.replication.master);
                this.database = this.options.replication.master.database;
            }
            else {
                this.master = await this.createPool(this.options, this.options);
                this.database = this.options.database;
            }
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        async afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with database.
         */
        async disconnect() {
            if (!this.master)
                return Promise.reject(new ConnectionIsNotSetError_3.ConnectionIsNotSetError("cockroachdb"));
            await this.closePool(this.master);
            await Promise.all(this.slaves.map(slave => this.closePool(slave)));
            this.master = undefined;
            this.slaves = [];
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_3.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new CockroachQueryRunner_1.CockroachQueryRunner(this, mode);
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_5.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_4.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_4.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamptz"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp without time zone") {
                return DateUtils_4.DateUtils.mixedDateToDate(value);
            }
            else if (["json", "jsonb", ...this.spatialTypes].indexOf(columnMetadata.type) >= 0) {
                return JSON.stringify(value);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_4.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_4.DateUtils.simpleJsonToString(value);
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_5.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            // unique_rowid() generates bigint value and should not be converted to number
            if (([Number, "int4", "smallint", "int2"].some(v => v === columnMetadata.type)
                && !columnMetadata.isArray) || columnMetadata.generationStrategy === "increment") {
                value = parseInt(value);
            }
            else if (columnMetadata.type === Boolean) {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamptz"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp without time zone") {
                value = DateUtils_4.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_4.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_4.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_4.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_4.DateUtils.stringToSimpleJson(value);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_5.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const builtParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);
            if (!parameters || !Object.keys(parameters).length)
                return [sql, builtParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v) => {
                        builtParameters.push(v);
                        return "$" + builtParameters.length;
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else {
                    builtParameters.push(value);
                    return "$" + builtParameters.length;
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, builtParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return "\"" + columnName + "\"";
        }
        /**
         * Build full table name with schema name and table name.
         * E.g. "mySchema"."myTable"
         */
        buildTableName(tableName, schema) {
            return schema ? `${schema}.${tableName}` : tableName;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "integer" || column.type === "int" || column.type === "bigint" || column.type === "int64") {
                return "int8";
            }
            else if (column.type === String || column.type === "character varying" || column.type === "char varying") {
                return "varchar";
            }
            else if (column.type === Date || column.type === "timestamp without time zone") {
                return "timestamp";
            }
            else if (column.type === "timestamp with time zone") {
                return "timestamptz";
            }
            else if (column.type === "time without time zone") {
                return "time";
            }
            else if (column.type === Boolean || column.type === "boolean") {
                return "bool";
            }
            else if (column.type === "simple-array" || column.type === "simple-json" || column.type === "text") {
                return "string";
            }
            else if (column.type === "bytea" || column.type === "blob") {
                return "bytes";
            }
            else if (column.type === "smallint") {
                return "int2";
            }
            else if (column.type === "numeric" || column.type === "dec") {
                return "decimal";
            }
            else if (column.type === "double precision" || column.type === "float") {
                return "float8";
            }
            else if (column.type === "real") {
                return "float4";
            }
            else if (column.type === "character") {
                return "char";
            }
            else if (column.type === "json") {
                return "jsonb";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            const arrayCast = columnMetadata.isArray ? `::${columnMetadata.type}[]` : "";
            if (typeof defaultValue === "number") {
                return `(${defaultValue})`;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "true" : "false";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'${arrayCast}`;
            }
            else if (typeof defaultValue === "object" && defaultValue !== null) {
                return `'${JSON.stringify(defaultValue)}'`;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            return column.length ? column.length.toString() : "";
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            if (column.length) {
                type += "(" + column.length + ")";
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += "(" + column.precision + "," + column.scale + ")";
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += "(" + column.precision + ")";
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return new Promise((ok, fail) => {
                this.master.connect((err, connection, release) => {
                    err ? fail(err) : ok([connection, release]);
                });
            });
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.slaves.length)
                return this.obtainMasterConnection();
            return new Promise((ok, fail) => {
                const random = Math.floor(Math.random() * this.slaves.length);
                this.slaves[random].connect((err, connection, release) => {
                    err ? fail(err) : ok([connection, release]);
                });
            });
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         *
         * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts
         */
        createGeneratedMap(metadata, insertResult) {
            if (!insertResult)
                return undefined;
            return Object.keys(insertResult).reduce((map, key) => {
                const column = metadata.findColumnWithDatabaseName(key);
                if (column) {
                    OrmUtils_13.OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));
                }
                return map;
            }, {});
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                // console.log("table:", columnMetadata.entityMetadata.tableName);
                // console.log("name:", tableColumn.name, columnMetadata.databaseName);
                // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                // console.log("length:", tableColumn.length, columnMetadata.length);
                // console.log("width:", tableColumn.width, columnMetadata.width);
                // console.log("precision:", tableColumn.precision, columnMetadata.precision);
                // console.log("scale:", tableColumn.scale, columnMetadata.scale);
                // console.log("comment:", tableColumn.comment, columnMetadata.comment);
                // console.log("default:", tableColumn.default, columnMetadata.default);
                // console.log("default changed:", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));
                // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                // console.log("==========================================");
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadata.length
                    || tableColumn.precision !== columnMetadata.precision
                    || (columnMetadata.scale !== undefined && tableColumn.scale !== columnMetadata.scale)
                    || tableColumn.comment !== columnMetadata.comment
                    || (!tableColumn.isGenerated && this.lowerDefaultValueIfNecessary(this.normalizeDefault(columnMetadata)) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || tableColumn.isGenerated !== columnMetadata.isGenerated;
            });
        }
        lowerDefaultValueIfNecessary(value) {
            if (!value) {
                return value;
            }
            return value.split(`'`).map((v, i) => {
                return i % 2 === 1 ? v : v.toLowerCase();
            }).join(`'`);
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return true;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return true;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "$" + (index + 1);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Loads postgres query stream package.
         */
        loadStreamDependency() {
            try {
                return PlatformTools_5.PlatformTools.load("pg-query-stream");
            }
            catch (e) { // todo: better error for browser env
                throw new Error(`To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.`);
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.postgres = PlatformTools_5.PlatformTools.load("pg");
                try {
                    const pgNative = PlatformTools_5.PlatformTools.load("pg-native");
                    if (pgNative && this.postgres.native)
                        this.postgres = this.postgres.native;
                }
                catch (e) { }
            }
            catch (e) { // todo: better error for browser env
                throw new DriverPackageNotInstalledError_3.DriverPackageNotInstalledError("Postgres", "pg");
            }
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        async createPool(options, credentials) {
            credentials = Object.assign({}, credentials, DriverUtils_3.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way
            // build connection options for the driver
            const connectionOptions = Object.assign({}, {
                host: credentials.host,
                user: credentials.username,
                password: credentials.password,
                database: credentials.database,
                port: credentials.port,
                ssl: credentials.ssl
            }, options.extra || {});
            // create a connection pool
            const pool = new this.postgres.Pool(connectionOptions);
            const { logger } = this.connection;
            const poolErrorHandler = options.poolErrorHandler || ((error) => logger.log("warn", `Postgres pool raised an error. ${error}`));
            /*
              Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and
              cause the hosting app to crash.
             */
            pool.on("error", poolErrorHandler);
            return new Promise((ok, fail) => {
                pool.connect((err, connection, release) => {
                    if (err)
                        return fail(err);
                    release();
                    ok(pool);
                });
            });
        }
        /**
         * Closes connection pool.
         */
        async closePool(pool) {
            await Promise.all(this.connectedQueryRunners.map(queryRunner => queryRunner.release()));
            return new Promise((ok, fail) => {
                pool.end((err) => err ? fail(err) : ok());
            });
        }
    }
    exports.CockroachDriver = CockroachDriver;
});
define("typeorm/schema-builder/util/TableUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableUtils = void 0;
    class TableUtils {
        static createTableColumnOptions(columnMetadata, driver) {
            return {
                name: columnMetadata.databaseName,
                length: columnMetadata.length,
                width: columnMetadata.width,
                charset: columnMetadata.charset,
                collation: columnMetadata.collation,
                precision: columnMetadata.precision,
                scale: columnMetadata.scale,
                zerofill: columnMetadata.zerofill,
                unsigned: columnMetadata.unsigned,
                asExpression: columnMetadata.asExpression,
                generatedType: columnMetadata.generatedType,
                default: driver.normalizeDefault(columnMetadata),
                onUpdate: columnMetadata.onUpdate,
                comment: columnMetadata.comment,
                isGenerated: columnMetadata.isGenerated,
                generationStrategy: columnMetadata.generationStrategy,
                isNullable: columnMetadata.isNullable,
                type: driver.normalizeType(columnMetadata),
                isPrimary: columnMetadata.isPrimary,
                isUnique: driver.normalizeIsUnique(columnMetadata),
                isArray: columnMetadata.isArray || false,
                enum: columnMetadata.enum ? columnMetadata.enum.map(val => val + "") : columnMetadata.enum,
                enumName: columnMetadata.enumName,
                spatialFeatureType: columnMetadata.spatialFeatureType,
                srid: columnMetadata.srid
            };
        }
    }
    exports.TableUtils = TableUtils;
});
define("typeorm/driver/sqlserver/MssqlParameter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MssqlParameter = void 0;
    /**
     * Sql server driver requires parameter types to be specified fo input parameters used in the query.
     *
     * @see https://github.com/patriksimek/node-mssql#data-types
     */
    class MssqlParameter {
        constructor(value, type, ...params) {
            this.value = value;
            this.type = type;
            // -------------------------------------------------------------------------
            // Public Properties
            // -------------------------------------------------------------------------
            this.params = [];
            this.params = params || [];
        }
    }
    exports.MssqlParameter = MssqlParameter;
});
define("typeorm/driver/sqlserver/SqlServerQueryRunner", ["require", "exports", "typeorm/error/QueryFailedError", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/query-runner/BaseQueryRunner", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/view/View", "typeorm/subscriber/Broadcaster", "typeorm/util/OrmUtils", "typeorm/driver/Query", "typeorm/driver/sqlserver/MssqlParameter", "typeorm/subscriber/BroadcasterResult"], function (require, exports, QueryFailedError_3, QueryRunnerAlreadyReleasedError_3, TransactionAlreadyStartedError_3, TransactionNotStartedError_3, BaseQueryRunner_3, Table_3, TableCheck_3, TableColumn_3, TableForeignKey_3, TableIndex_3, TableUnique_3, View_3, Broadcaster_4, OrmUtils_14, Query_4, MssqlParameter_1, BroadcasterResult_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqlServerQueryRunner = void 0;
    /**
     * Runs queries on a single SQL Server database connection.
     */
    class SqlServerQueryRunner extends BaseQueryRunner_3.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            // -------------------------------------------------------------------------
            // Protected Properties
            // -------------------------------------------------------------------------
            /**
             * Last executed query in a transaction.
             * This is needed because in transaction mode mssql cannot execute parallel queries,
             * that's why we store last executed query promise to wait it when we execute next query.
             *
             * @see https://github.com/patriksimek/node-mssql/issues/491
             */
            this.queryResponsibilityChain = [];
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_4.Broadcaster(this);
            this.mode = mode;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            return Promise.resolve();
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            this.isReleased = true;
            return Promise.resolve();
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_3.QueryRunnerAlreadyReleasedError();
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_3.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            return new Promise(async (ok, fail) => {
                this.isTransactionActive = true;
                const pool = await (this.mode === "slave" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());
                this.databaseConnection = pool.transaction();
                const transactionCallback = (err) => {
                    if (err) {
                        this.isTransactionActive = false;
                        return fail(err);
                    }
                    ok();
                    this.connection.logger.logQuery("BEGIN TRANSACTION");
                    if (isolationLevel) {
                        this.connection.logger.logQuery("SET TRANSACTION ISOLATION LEVEL " + isolationLevel);
                    }
                };
                if (isolationLevel) {
                    this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);
                }
                else {
                    this.databaseConnection.begin(transactionCallback);
                }
                const afterBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
                this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
                if (afterBroadcastResult.promises.length > 0)
                    await Promise.all(afterBroadcastResult.promises);
            });
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_3.QueryRunnerAlreadyReleasedError();
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_3.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            return new Promise((ok, fail) => {
                this.databaseConnection.commit(async (err) => {
                    if (err)
                        return fail(err);
                    this.isTransactionActive = false;
                    this.databaseConnection = null;
                    const afterBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
                    this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
                    if (afterBroadcastResult.promises.length > 0)
                        await Promise.all(afterBroadcastResult.promises);
                    ok();
                    this.connection.logger.logQuery("COMMIT");
                });
            });
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_3.QueryRunnerAlreadyReleasedError();
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_3.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            return new Promise((ok, fail) => {
                this.databaseConnection.rollback(async (err) => {
                    if (err)
                        return fail(err);
                    this.isTransactionActive = false;
                    this.databaseConnection = null;
                    const afterBroadcastResult = new BroadcasterResult_5.BroadcasterResult();
                    this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
                    if (afterBroadcastResult.promises.length > 0)
                        await Promise.all(afterBroadcastResult.promises);
                    ok();
                    this.connection.logger.logQuery("ROLLBACK");
                });
            });
        }
        /**
         * Executes a given SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_3.QueryRunnerAlreadyReleasedError();
            let waitingOkay;
            const waitingPromise = new Promise((ok) => waitingOkay = ok);
            if (this.queryResponsibilityChain.length) {
                const otherWaitingPromises = [...this.queryResponsibilityChain];
                this.queryResponsibilityChain.push(waitingPromise);
                await Promise.all(otherWaitingPromises);
            }
            const promise = new Promise(async (ok, fail) => {
                try {
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const pool = await (this.mode === "slave" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());
                    const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);
                    if (parameters && parameters.length) {
                        parameters.forEach((parameter, index) => {
                            const parameterName = index.toString();
                            if (parameter instanceof MssqlParameter_1.MssqlParameter) {
                                const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);
                                if (mssqlParameter) {
                                    request.input(parameterName, mssqlParameter, parameter.value);
                                }
                                else {
                                    request.input(parameterName, parameter.value);
                                }
                            }
                            else {
                                request.input(parameterName, parameter);
                            }
                        });
                    }
                    const queryStartTime = +new Date();
                    request.query(query, (err, result) => {
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        const resolveChain = () => {
                            if (promiseIndex !== -1)
                                this.queryResponsibilityChain.splice(promiseIndex, 1);
                            if (waitingPromiseIndex !== -1)
                                this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);
                            waitingOkay();
                        };
                        let promiseIndex = this.queryResponsibilityChain.indexOf(promise);
                        let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);
                        if (err) {
                            this.driver.connection.logger.logQueryError(err, query, parameters, this);
                            resolveChain();
                            return fail(new QueryFailedError_3.QueryFailedError(query, parameters, err));
                        }
                        const queryType = query.slice(0, query.indexOf(" "));
                        switch (queryType) {
                            case "DELETE":
                                // for DELETE query additionally return number of affected rows
                                ok([result.recordset, result.rowsAffected[0]]);
                                break;
                            default:
                                ok(result.recordset);
                        }
                        resolveChain();
                    });
                }
                catch (err) {
                    fail(err);
                }
            });
            // with this condition, Promise.all causes unexpected behavior.
            // if (this.isTransactionActive)
            this.queryResponsibilityChain.push(promise);
            return promise;
        }
        /**
         * Returns raw data stream.
         */
        async stream(query, parameters, onEnd, onError) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_3.QueryRunnerAlreadyReleasedError();
            let waitingOkay;
            const waitingPromise = new Promise((ok) => waitingOkay = ok);
            if (this.queryResponsibilityChain.length) {
                const otherWaitingPromises = [...this.queryResponsibilityChain];
                this.queryResponsibilityChain.push(waitingPromise);
                await Promise.all(otherWaitingPromises);
            }
            const promise = new Promise(async (ok, fail) => {
                this.driver.connection.logger.logQuery(query, parameters, this);
                const pool = await (this.mode === "slave" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());
                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);
                request.stream = true;
                if (parameters && parameters.length) {
                    parameters.forEach((parameter, index) => {
                        const parameterName = index.toString();
                        if (parameter instanceof MssqlParameter_1.MssqlParameter) {
                            request.input(parameterName, this.mssqlParameterToNativeParameter(parameter), parameter.value);
                        }
                        else {
                            request.input(parameterName, parameter);
                        }
                    });
                }
                request.query(query, (err, result) => {
                    const resolveChain = () => {
                        if (promiseIndex !== -1)
                            this.queryResponsibilityChain.splice(promiseIndex, 1);
                        if (waitingPromiseIndex !== -1)
                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);
                        waitingOkay();
                    };
                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);
                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);
                    if (err) {
                        this.driver.connection.logger.logQueryError(err, query, parameters, this);
                        resolveChain();
                        return fail(err);
                    }
                    ok(result.recordset);
                    resolveChain();
                });
                if (onEnd)
                    request.on("done", onEnd);
                if (onError)
                    request.on("error", onError);
                ok(request);
            });
            if (this.isTransactionActive)
                this.queryResponsibilityChain.push(promise);
            return promise;
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            const results = await this.query(`EXEC sp_databases`);
            return results.map(result => result["DATABASE_NAME"]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            const query = database ? `SELECT * FROM "${database}"."sys"."schema"` : `SELECT * FROM "sys"."schemas"`;
            const results = await this.query(query);
            return results.map(result => result["name"]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            const result = await this.query(`SELECT DB_ID('${database}') as "db_id"`);
            const dbId = result[0]["db_id"];
            return !!dbId;
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            const result = await this.query(`SELECT SCHEMA_ID('${schema}') as "schema_id"`);
            const schemaId = result[0]["schema_id"];
            return !!schemaId;
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const schema = parsedTableName.schema === "SCHEMA_NAME()" ? parsedTableName.schema : `'${parsedTableName.schema}'`;
            const sql = `SELECT * FROM "${parsedTableName.database}"."INFORMATION_SCHEMA"."TABLES" WHERE "TABLE_NAME" = '${parsedTableName.name}' AND "TABLE_SCHEMA" = ${schema}`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column exist in the table.
         */
        async hasColumn(tableOrName, columnName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const schema = parsedTableName.schema === "SCHEMA_NAME()" ? parsedTableName.schema : `'${parsedTableName.schema}'`;
            const sql = `SELECT * FROM "${parsedTableName.database}"."INFORMATION_SCHEMA"."COLUMNS" WHERE "TABLE_NAME" = '${parsedTableName.name}' AND "COLUMN_NAME" = '${columnName}' AND "TABLE_SCHEMA" = ${schema}`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE "${database}"` : `CREATE DATABASE "${database}"`;
            const down = `DROP DATABASE "${database}"`;
            await this.executeQueries(new Query_4.Query(up), new Query_4.Query(down));
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE "${database}"` : `DROP DATABASE "${database}"`;
            const down = `CREATE DATABASE "${database}"`;
            await this.executeQueries(new Query_4.Query(up), new Query_4.Query(down));
        }
        /**
         * Creates table schema.
         * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.
         */
        async createSchema(schemaPath, ifNotExist) {
            const upQueries = [];
            const downQueries = [];
            if (schemaPath.indexOf(".") === -1) {
                const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA "${schemaPath}"') END` : `CREATE SCHEMA "${schemaPath}"`;
                upQueries.push(new Query_4.Query(upQuery));
                downQueries.push(new Query_4.Query(`DROP SCHEMA "${schemaPath}"`));
            }
            else {
                const dbName = schemaPath.split(".")[0];
                const schema = schemaPath.split(".")[1];
                const currentDB = await this.getCurrentDatabase();
                upQueries.push(new Query_4.Query(`USE "${dbName}"`));
                downQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA "${schema}"') END` : `CREATE SCHEMA "${schema}"`;
                upQueries.push(new Query_4.Query(upQuery));
                downQueries.push(new Query_4.Query(`DROP SCHEMA "${schema}"`));
                upQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                downQueries.push(new Query_4.Query(`USE "${dbName}"`));
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops table schema.
         * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.
         */
        async dropSchema(schemaPath, ifExist) {
            const upQueries = [];
            const downQueries = [];
            if (schemaPath.indexOf(".") === -1) {
                const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA "${schemaPath}"') END` : `DROP SCHEMA "${schemaPath}"`;
                upQueries.push(new Query_4.Query(upQuery));
                downQueries.push(new Query_4.Query(`CREATE SCHEMA "${schemaPath}"`));
            }
            else {
                const dbName = schemaPath.split(".")[0];
                const schema = schemaPath.split(".")[1];
                const currentDB = await this.getCurrentDatabase();
                upQueries.push(new Query_4.Query(`USE "${dbName}"`));
                downQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA "${schema}"') END` : `DROP SCHEMA "${schema}"`;
                upQueries.push(new Query_4.Query(upQuery));
                downQueries.push(new Query_4.Query(`CREATE SCHEMA "${schema}"`));
                upQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                downQueries.push(new Query_4.Query(`USE "${dbName}"`));
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (createIndices) {
                table.indices.forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(table, index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(tableOrName, ifExist, dropForeignKeys = true, dropIndices = true) {
            if (ifExist) {
                const isTableExist = await this.hasTable(tableOrName);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const upQueries = [];
            const downQueries = [];
            // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need
            // to perform drop queries for foreign keys and indices.
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(table, index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_3.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames a table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_3.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            let newTable = oldTable.clone();
            // we need database name and schema name to rename FK constraints
            let dbName = undefined;
            let schemaName = undefined;
            let oldTableName = oldTable.name;
            const splittedName = oldTable.name.split(".");
            if (splittedName.length === 3) {
                dbName = splittedName[0];
                oldTableName = splittedName[2];
                if (splittedName[1] !== "")
                    schemaName = splittedName[1];
            }
            else if (splittedName.length === 2) {
                schemaName = splittedName[0];
                oldTableName = splittedName[1];
            }
            newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);
            // if we have tables with database which differs from database specified in config, we must change currently used database.
            // This need because we can not rename objects from another database.
            const currentDB = await this.getCurrentDatabase();
            if (dbName && dbName !== currentDB) {
                upQueries.push(new Query_4.Query(`USE "${dbName}"`));
                downQueries.push(new Query_4.Query(`USE "${currentDB}"`));
            }
            // rename table
            upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(oldTable, true)}", "${newTableName}"`));
            downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}", "${oldTableName}"`));
            // rename primary key constraint
            if (newTable.primaryColumns.length > 0) {
                const columnNames = newTable.primaryColumns.map(column => column.name);
                const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
                const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
                // rename primary constraint
                upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${oldPkName}", "${newPkName}"`));
                downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${newPkName}", "${oldPkName}"`));
            }
            // rename unique constraints
            newTable.uniques.forEach(unique => {
                // build new constraint name
                const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
                // build queries
                upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${unique.name}", "${newUniqueName}"`));
                downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${newUniqueName}", "${unique.name}"`));
                // replace constraint name
                unique.name = newUniqueName;
            });
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${index.name}", "${newIndexName}", "INDEX"`));
                downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(newTable, true)}.${newIndexName}", "${index.name}", "INDEX"`));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraints
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // build queries
                upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.buildForeignKeyName(foreignKey.name, schemaName, dbName)}", "${newForeignKeyName}"`));
                downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}", "${foreignKey.name}"`));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            // change currently used database back to default db.
            if (dbName && dbName !== currentDB) {
                upQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                downQueries.push(new Query_4.Query(`USE "${dbName}"`));
            }
            await this.executeQueries(upQueries, downQueries);
            // rename old table and replace it in cached tabled;
            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));
            downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            // create or update primary key constraint
            if (column.isPrimary) {
                const primaryColumns = clonedTable.primaryColumns;
                // if table already have primary key, me must drop it and recreate again
                if (primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                    const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                    upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                }
                primaryColumns.push(column);
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
            }
            // create unique constraint
            if (column.isUnique) {
                const uniqueConstraint = new TableUnique_3.TableUnique({
                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                    columnNames: [column.name]
                });
                clonedTable.uniques.push(uniqueConstraint);
                upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${column.name}")`));
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
            }
            // remove default constraint
            if (column.default !== null && column.default !== undefined) {
                const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${defaultName}"`));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_3.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_3.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            await this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldTableColumnOrName instanceof TableColumn_3.TableColumn
                ? oldTableColumnOrName
                : table.columns.find(column => column.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {
                // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.
                // Also, we recreate column if column type changed
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (newColumn.name !== oldColumn.name) {
                    // we need database name and schema name to rename FK constraints
                    let dbName = undefined;
                    let schemaName = undefined;
                    const splittedName = table.name.split(".");
                    if (splittedName.length === 3) {
                        dbName = splittedName[0];
                        if (splittedName[1] !== "")
                            schemaName = splittedName[1];
                    }
                    else if (splittedName.length === 2) {
                        schemaName = splittedName[0];
                    }
                    // if we have tables with database which differs from database specified in config, we must change currently used database.
                    // This need because we can not rename objects from another database.
                    const currentDB = await this.getCurrentDatabase();
                    if (dbName && dbName !== currentDB) {
                        upQueries.push(new Query_4.Query(`USE "${dbName}"`));
                        downQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                    }
                    // rename the column
                    upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(table, true)}.${oldColumn.name}", "${newColumn.name}"`));
                    downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(table, true)}.${newColumn.name}", "${oldColumn.name}"`));
                    if (oldColumn.isPrimary === true) {
                        const primaryColumns = clonedTable.primaryColumns;
                        // build old primary constraint name
                        const columnNames = primaryColumns.map(column => column.name);
                        const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // replace old column name with new column name
                        columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                        columnNames.push(newColumn.name);
                        // build new primary constraint name
                        const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // rename primary constraint
                        upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${oldPkName}", "${newPkName}"`));
                        downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${newPkName}", "${oldPkName}"`));
                    }
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${index.name}", "${newIndexName}", "INDEX"`));
                        downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${newIndexName}", "${index.name}", "INDEX"`));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        // build queries
                        upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.buildForeignKeyName(foreignKey.name, schemaName, dbName)}", "${newForeignKeyName}"`));
                        downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}", "${foreignKey.name}"`));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename check constraints
                    clonedTable.findColumnChecks(oldColumn).forEach(check => {
                        // build new constraint name
                        check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);
                        check.columnNames.push(newColumn.name);
                        const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression);
                        // build queries
                        upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${check.name}", "${newCheckName}"`));
                        downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${newCheckName}", "${check.name}"`));
                        // replace constraint name
                        check.name = newCheckName;
                    });
                    // rename unique constraints
                    clonedTable.findColumnUniques(oldColumn).forEach(unique => {
                        // build new constraint name
                        unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);
                        unique.columnNames.push(newColumn.name);
                        const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);
                        // build queries
                        upQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${unique.name}", "${newUniqueName}"`));
                        downQueries.push(new Query_4.Query(`EXEC sp_rename "${this.escapePath(clonedTable, true)}.${newUniqueName}", "${unique.name}"`));
                        // replace constraint name
                        unique.name = newUniqueName;
                    });
                    // rename default constraints
                    if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        const oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);
                        const newDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${oldDefaultName}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${oldDefaultName}" DEFAULT ${oldColumn.default} FOR "${newColumn.name}"`));
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${newDefaultName}" DEFAULT ${oldColumn.default} FOR "${newColumn.name}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${newDefaultName}"`));
                    }
                    // change currently used database back to default db.
                    if (dbName && dbName !== currentDB) {
                        upQueries.push(new Query_4.Query(`USE "${currentDB}"`));
                        downQueries.push(new Query_4.Query(`USE "${dbName}"`));
                    }
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (this.isColumnChanged(oldColumn, newColumn, false)) {
                    upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));
                    downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                            const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                            upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        }
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueConstraint = new TableUnique_3.TableUnique({
                            name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name]
                        });
                        clonedTable.uniques.push(uniqueConstraint);
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
                    }
                    else {
                        const uniqueConstraint = clonedTable.uniques.find(unique => {
                            return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                    }
                }
                if (newColumn.default !== oldColumn.default) {
                    // (note) if there is a previous default, we need to drop its constraint first
                    if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${defaultName}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${defaultName}" DEFAULT ${oldColumn.default} FOR "${oldColumn.name}"`));
                    }
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);
                        upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${defaultName}" DEFAULT ${newColumn.default} FOR "${newColumn.name}"`));
                        downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${defaultName}"`));
                    }
                }
                await this.executeQueries(upQueries, downQueries);
                this.replaceCachedTable(table, clonedTable);
            }
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_3.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                    upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            // drop column check
            const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);
            if (columnCheck) {
                clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
                upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
                downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }
            // drop column unique
            const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
            if (columnUnique) {
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);
                upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));
                downQueries.push(this.createUniqueConstraintSql(table, columnUnique));
            }
            // drop default constraint
            if (column.default !== null && column.default !== undefined) {
                const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);
                upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${defaultName}"`));
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${defaultName}" DEFAULT ${column.default} FOR "${column.name}"`));
            }
            upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            const down = this.dropPrimaryKeySql(clonedTable);
            await this.executeQueries(up, down);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNamesString = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            upQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!uniqueConstraint.name)
                uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);
            const up = this.createUniqueConstraintSql(table, uniqueConstraint);
            const down = this.dropUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.addUniqueConstraint(uniqueConstraint);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const uniqueConstraint = uniqueOrName instanceof TableUnique_3.TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);
            if (!uniqueConstraint)
                throw new Error(`Supplied unique constraint was not found in table ${table.name}`);
            const up = this.dropUniqueConstraintSql(table, uniqueConstraint);
            const down = this.createUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.removeUniqueConstraint(uniqueConstraint);
        }
        /**
         * Drops an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates a new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!checkConstraint.name)
                checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            const up = this.createCheckConstraintSql(table, checkConstraint);
            const down = this.dropCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.addCheckConstraint(checkConstraint);
        }
        /**
         * Creates a new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_3.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            const up = this.dropCheckConstraintSql(table, checkConstraint);
            const down = this.createCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.removeCheckConstraint(checkConstraint);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`SqlServer does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`SqlServer does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`SqlServer does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`SqlServer does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_3.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(table, index);
            await this.executeQueries(up, down);
            table.addIndex(index);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_3.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_3.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tablePath) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase(database) {
            if (database) {
                const isDatabaseExist = await this.hasDatabase(database);
                if (!isDatabaseExist)
                    return Promise.resolve();
            }
            await this.startTransaction();
            try {
                let allViewsSql = database
                    ? `SELECT * FROM "${database}"."INFORMATION_SCHEMA"."VIEWS"`
                    : `SELECT * FROM "INFORMATION_SCHEMA"."VIEWS"`;
                const allViewsResults = await this.query(allViewsSql);
                await Promise.all(allViewsResults.map(viewResult => {
                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.
                    const dropTableSql = `DROP VIEW "${viewResult["TABLE_SCHEMA"]}"."${viewResult["TABLE_NAME"]}"`;
                    return this.query(dropTableSql);
                }));
                let allTablesSql = database
                    ? `SELECT * FROM "${database}"."INFORMATION_SCHEMA"."TABLES" WHERE "TABLE_TYPE" = 'BASE TABLE'`
                    : `SELECT * FROM "INFORMATION_SCHEMA"."TABLES" WHERE "TABLE_TYPE" = 'BASE TABLE'`;
                const allTablesResults = await this.query(allTablesSql);
                await Promise.all(allTablesResults.map(async (tablesResult) => {
                    // const tableName = database ? `"${tablesResult["TABLE_CATALOG"]}"."sys"."foreign_keys"` : `"sys"."foreign_keys"`;
                    const dropForeignKeySql = `SELECT 'ALTER TABLE "${tablesResult["TABLE_CATALOG"]}"."' + OBJECT_SCHEMA_NAME("fk"."parent_object_id", DB_ID('${tablesResult["TABLE_CATALOG"]}')) + '"."' + OBJECT_NAME("fk"."parent_object_id", DB_ID('${tablesResult["TABLE_CATALOG"]}')) + '" ` +
                        `DROP CONSTRAINT "' + "fk"."name" + '"' as "query" FROM "${tablesResult["TABLE_CATALOG"]}"."sys"."foreign_keys" AS "fk" ` +
                        `WHERE "fk"."referenced_object_id" = OBJECT_ID('"${tablesResult["TABLE_CATALOG"]}"."${tablesResult["TABLE_SCHEMA"]}"."${tablesResult["TABLE_NAME"]}"')`;
                    const dropFkQueries = await this.query(dropForeignKeySql);
                    return Promise.all(dropFkQueries.map(result => result["query"]).map(dropQuery => this.query(dropQuery)));
                }));
                await Promise.all(allTablesResults.map(tablesResult => {
                    if (tablesResult["TABLE_NAME"].startsWith("#")) {
                        // don't try to drop temporary tables
                        return;
                    }
                    const dropTableSql = `DROP TABLE "${tablesResult["TABLE_CATALOG"]}"."${tablesResult["TABLE_SCHEMA"]}"."${tablesResult["TABLE_NAME"]}"`;
                    return this.query(dropTableSql);
                }));
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Return current database.
         */
        async getCurrentDatabase() {
            const currentDBQuery = await this.query(`SELECT DB_NAME() AS "db_name"`);
            return currentDBQuery[0]["db_name"];
        }
        /**
         * Return current schema.
         */
        async getCurrentSchema() {
            const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS "schema_name"`);
            return currentSchemaQuery[0]["schema_name"];
        }
        async loadViews(viewPaths) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentSchema = await this.getCurrentSchema();
            const currentDatabase = await this.getCurrentDatabase();
            const extractTableSchemaAndName = (tableName) => {
                let [database, schema, name] = tableName.split(".");
                // if name is empty, it means that tableName have only schema name and table name or only table name
                if (!name) {
                    // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have "schemaName"."tableName" string.
                    if (!schema) {
                        name = database;
                        schema = this.driver.options.schema || currentSchema;
                    }
                    else {
                        name = schema;
                        schema = database;
                    }
                }
                else if (schema === "") {
                    schema = this.driver.options.schema || currentSchema;
                }
                return [schema, name];
            };
            const dbNames = viewPaths
                .filter(viewPath => viewPath.split(".").length === 3)
                .map(viewPath => viewPath.split(".")[0]);
            if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))
                dbNames.push(this.driver.database);
            const viewsCondition = viewPaths.map(viewPath => {
                const [schema, name] = extractTableSchemaAndName(viewPath);
                return `("T"."SCHEMA" = '${schema}' AND "T"."NAME" = '${name}')`;
            }).join(" OR ");
            const query = dbNames.map(dbName => {
                return `SELECT "T".*, "V"."CHECK_OPTION" FROM ${this.escapePath(this.getTypeormMetadataTableName())} "t" ` +
                    `INNER JOIN "${dbName}"."INFORMATION_SCHEMA"."VIEWS" "V" ON "V"."TABLE_SCHEMA" = "T"."SCHEMA" AND "v"."TABLE_NAME" = "T"."NAME" WHERE "T"."TYPE" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            }).join(" UNION ALL ");
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_3.View();
                const db = dbView["TABLE_CATALOG"] === currentDatabase ? undefined : dbView["TABLE_CATALOG"];
                const schema = dbView["schema"] === currentSchema && !this.driver.options.schema ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], schema, db);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const schemaNames = [];
            const currentSchema = await this.getCurrentSchema();
            const currentDatabase = await this.getCurrentDatabase();
            const extractTableSchemaAndName = (tableName) => {
                let [database, schema, name] = tableName.split(".");
                // if name is empty, it means that tableName have only schema name and table name or only table name
                if (!name) {
                    // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have "schemaName"."tableName" string.
                    if (!schema) {
                        name = database;
                        schema = this.driver.options.schema || currentSchema;
                    }
                    else {
                        name = schema;
                        schema = database;
                    }
                }
                else if (schema === "") {
                    schema = this.driver.options.schema || currentSchema;
                }
                return [schema, name];
            };
            tableNames.filter(tablePath => tablePath.indexOf(".") !== -1)
                .forEach(tablePath => {
                if (tablePath.split(".").length === 3) {
                    if (tablePath.split(".")[1] !== "")
                        schemaNames.push(tablePath.split(".")[1]);
                }
                else {
                    schemaNames.push(tablePath.split(".")[0]);
                }
            });
            schemaNames.push(this.driver.options.schema || currentSchema);
            const dbNames = tableNames
                .filter(tablePath => tablePath.split(".").length === 3)
                .map(tablePath => tablePath.split(".")[0]);
            if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))
                dbNames.push(this.driver.database);
            // load tables, columns, indices and foreign keys
            const schemaNamesString = schemaNames.map(name => "'" + name + "'").join(", ");
            const tablesCondition = tableNames.map(tableName => {
                const [schema, name] = extractTableSchemaAndName(tableName);
                return `("TABLE_SCHEMA" = '${schema}' AND "TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            const tablesSql = dbNames.map(dbName => {
                return `SELECT * FROM "${dbName}"."INFORMATION_SCHEMA"."TABLES" WHERE ` + tablesCondition;
            }).join(" UNION ALL ");
            const columnsSql = dbNames.map(dbName => {
                return `SELECT * FROM "${dbName}"."INFORMATION_SCHEMA"."COLUMNS" WHERE ` + tablesCondition;
            }).join(" UNION ALL ");
            const constraintsCondition = tableNames.map(tableName => {
                const [schema, name] = extractTableSchemaAndName(tableName);
                return `("columnUsages"."TABLE_SCHEMA" = '${schema}' AND "columnUsages"."TABLE_NAME" = '${name}' ` +
                    `AND "tableConstraints"."TABLE_SCHEMA" = '${schema}' AND "tableConstraints"."TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            const constraintsSql = dbNames.map(dbName => {
                return `SELECT "columnUsages".*, "tableConstraints"."CONSTRAINT_TYPE", "chk"."definition" ` +
                    `FROM "${dbName}"."INFORMATION_SCHEMA"."CONSTRAINT_COLUMN_USAGE" "columnUsages" ` +
                    `INNER JOIN "${dbName}"."INFORMATION_SCHEMA"."TABLE_CONSTRAINTS" "tableConstraints" ON "tableConstraints"."CONSTRAINT_NAME" = "columnUsages"."CONSTRAINT_NAME" ` +
                    `LEFT JOIN "${dbName}"."sys"."check_constraints" "chk" ON "chk"."name" = "columnUsages"."CONSTRAINT_NAME" ` +
                    `WHERE (${constraintsCondition}) AND "tableConstraints"."CONSTRAINT_TYPE" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;
            }).join(" UNION ALL ");
            const foreignKeysSql = dbNames.map(dbName => {
                return `SELECT "fk"."name" AS "FK_NAME", '${dbName}' AS "TABLE_CATALOG", "s1"."name" AS "TABLE_SCHEMA", "t1"."name" AS "TABLE_NAME", ` +
                    `"col1"."name" AS "COLUMN_NAME", "s2"."name" AS "REF_SCHEMA", "t2"."name" AS "REF_TABLE", "col2"."name" AS "REF_COLUMN", ` +
                    `"fk"."delete_referential_action_desc" AS "ON_DELETE", "fk"."update_referential_action_desc" AS "ON_UPDATE" ` +
                    `FROM "${dbName}"."sys"."foreign_keys" "fk" ` +
                    `INNER JOIN "${dbName}"."sys"."foreign_key_columns" "fkc" ON "fkc"."constraint_object_id" = "fk"."object_id" ` +
                    `INNER JOIN "${dbName}"."sys"."tables" "t1" ON "t1"."object_id" = "fk"."parent_object_id" ` +
                    `INNER JOIN "${dbName}"."sys"."schemas" "s1" ON "s1"."schema_id" = "t1"."schema_id" ` +
                    `INNER JOIN "${dbName}"."sys"."tables" "t2" ON "t2"."object_id" = "fk"."referenced_object_id" ` +
                    `INNER JOIN "${dbName}"."sys"."schemas" "s2" ON "s2"."schema_id" = "t2"."schema_id" ` +
                    `INNER JOIN "${dbName}"."sys"."columns" "col1" ON "col1"."column_id" = "fkc"."parent_column_id" AND "col1"."object_id" = "fk"."parent_object_id" ` +
                    `INNER JOIN "${dbName}"."sys"."columns" "col2" ON "col2"."column_id" = "fkc"."referenced_column_id" AND "col2"."object_id" = "fk"."referenced_object_id"`;
            }).join(" UNION ALL ");
            const identityColumnsSql = dbNames.map(dbName => {
                return `SELECT "TABLE_CATALOG", "TABLE_SCHEMA", "COLUMN_NAME", "TABLE_NAME" ` +
                    `FROM "${dbName}"."INFORMATION_SCHEMA"."COLUMNS" ` +
                    `WHERE COLUMNPROPERTY(object_id("TABLE_CATALOG" + '.' + "TABLE_SCHEMA" + '.' + "TABLE_NAME"), "COLUMN_NAME", 'IsIdentity') = 1 AND "TABLE_SCHEMA" IN (${schemaNamesString})`;
            }).join(" UNION ALL ");
            const dbCollationsSql = `SELECT "NAME", "COLLATION_NAME" FROM "sys"."databases"`;
            const indicesSql = dbNames.map(dbName => {
                return `SELECT '${dbName}' AS "TABLE_CATALOG", "s"."name" AS "TABLE_SCHEMA", "t"."name" AS "TABLE_NAME", ` +
                    `"ind"."name" AS "INDEX_NAME", "col"."name" AS "COLUMN_NAME", "ind"."is_unique" AS "IS_UNIQUE", "ind"."filter_definition" as "CONDITION" ` +
                    `FROM "${dbName}"."sys"."indexes" "ind" ` +
                    `INNER JOIN "${dbName}"."sys"."index_columns" "ic" ON "ic"."object_id" = "ind"."object_id" AND "ic"."index_id" = "ind"."index_id" ` +
                    `INNER JOIN "${dbName}"."sys"."columns" "col" ON "col"."object_id" = "ic"."object_id" AND "col"."column_id" = "ic"."column_id" ` +
                    `INNER JOIN "${dbName}"."sys"."tables" "t" ON "t"."object_id" = "ind"."object_id" ` +
                    `INNER JOIN "${dbName}"."sys"."schemas" "s" ON "s"."schema_id" = "t"."schema_id" ` +
                    `WHERE "ind"."is_primary_key" = 0 AND "ind"."is_unique_constraint" = 0 AND "t"."is_ms_shipped" = 0`;
            }).join(" UNION ALL ");
            const [dbTables, dbColumns, dbConstraints, dbForeignKeys, dbIdentityColumns, dbCollations, dbIndices] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(constraintsSql),
                this.query(foreignKeysSql),
                this.query(identityColumnsSql),
                this.query(dbCollationsSql),
                this.query(indicesSql),
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create table schemas for loaded tables
            return await Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_3.Table();
                // We do not need to join schema and database names, when db or schema is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const db = dbTable["TABLE_CATALOG"] === currentDatabase ? undefined : dbTable["TABLE_CATALOG"];
                const schema = dbTable["TABLE_SCHEMA"] === currentSchema && !this.driver.options.schema ? undefined : dbTable["TABLE_SCHEMA"];
                table.name = this.driver.buildTableName(dbTable["TABLE_NAME"], schema, db);
                const tableFullName = this.driver.buildTableName(dbTable["TABLE_NAME"], dbTable["TABLE_SCHEMA"], dbTable["TABLE_CATALOG"]);
                const defaultCollation = dbCollations.find(dbCollation => dbCollation["NAME"] === dbTable["TABLE_CATALOG"]);
                // create columns from the loaded columns
                table.columns = dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["TABLE_NAME"], dbColumn["TABLE_SCHEMA"], dbColumn["TABLE_CATALOG"]) === tableFullName)
                    .map(dbColumn => {
                    const columnConstraints = dbConstraints.filter(dbConstraint => {
                        return this.driver.buildTableName(dbConstraint["TABLE_NAME"], dbConstraint["CONSTRAINT_SCHEMA"], dbConstraint["CONSTRAINT_CATALOG"]) === tableFullName
                            && dbConstraint["COLUMN_NAME"] === dbColumn["COLUMN_NAME"];
                    });
                    const uniqueConstraint = columnConstraints.find(constraint => constraint["CONSTRAINT_TYPE"] === "UNIQUE");
                    const isConstraintComposite = uniqueConstraint
                        ? !!dbConstraints.find(dbConstraint => dbConstraint["CONSTRAINT_TYPE"] === "UNIQUE"
                            && dbConstraint["CONSTRAINT_NAME"] === uniqueConstraint["CONSTRAINT_NAME"]
                            && dbConstraint["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"])
                        : false;
                    const isPrimary = !!columnConstraints.find(constraint => constraint["CONSTRAINT_TYPE"] === "PRIMARY KEY");
                    const isGenerated = !!dbIdentityColumns.find(column => {
                        return this.driver.buildTableName(column["TABLE_NAME"], column["TABLE_SCHEMA"], column["TABLE_CATALOG"]) === tableFullName
                            && column["COLUMN_NAME"] === dbColumn["COLUMN_NAME"];
                    });
                    const tableColumn = new TableColumn_3.TableColumn();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE"].toLowerCase();
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["CHARACTER_MAXIMUM_LENGTH"]) {
                        const length = dbColumn["CHARACTER_MAXIMUM_LENGTH"].toString();
                        if (length === "-1") {
                            tableColumn.length = "MAX";
                        }
                        else {
                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                        }
                    }
                    if (tableColumn.type === "decimal" || tableColumn.type === "numeric") {
                        if (dbColumn["NUMERIC_PRECISION"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["NUMERIC_PRECISION"]))
                            tableColumn.precision = dbColumn["NUMERIC_PRECISION"];
                        if (dbColumn["NUMERIC_SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["NUMERIC_SCALE"]))
                            tableColumn.scale = dbColumn["NUMERIC_SCALE"];
                    }
                    if (tableColumn.type === "nvarchar") {
                        // Check if this is an enum
                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint["CONSTRAINT_TYPE"] === "CHECK");
                        if (columnCheckConstraints.length) {
                            const isEnumRegexp = new RegExp("^\\(\\[" + tableColumn.name + "\\]='[^']+'(?: OR \\[" + tableColumn.name + "\\]='[^']+')*\\)$");
                            for (const checkConstraint of columnCheckConstraints) {
                                if (isEnumRegexp.test(checkConstraint["definition"])) {
                                    // This is an enum constraint, make column into an enum
                                    tableColumn.type = "simple-enum";
                                    tableColumn.enum = [];
                                    const enumValueRegexp = new RegExp("\\[" + tableColumn.name + "\\]='([^']+)'", "g");
                                    let result;
                                    while ((result = enumValueRegexp.exec(checkConstraint["definition"])) !== null) {
                                        tableColumn.enum.unshift(result[1]);
                                    }
                                    // Skip other column constraints
                                    break;
                                }
                            }
                        }
                    }
                    tableColumn.default = dbColumn["COLUMN_DEFAULT"] !== null && dbColumn["COLUMN_DEFAULT"] !== undefined
                        ? this.removeParenthesisFromDefault(dbColumn["COLUMN_DEFAULT"])
                        : undefined;
                    tableColumn.isNullable = dbColumn["IS_NULLABLE"] === "YES";
                    tableColumn.isPrimary = isPrimary;
                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;
                    tableColumn.isGenerated = isGenerated;
                    if (isGenerated)
                        tableColumn.generationStrategy = "increment";
                    if (tableColumn.default === "newsequentialid()") {
                        tableColumn.isGenerated = true;
                        tableColumn.generationStrategy = "uuid";
                        tableColumn.default = undefined;
                    }
                    // todo: unable to get default charset
                    // tableColumn.charset = dbColumn["CHARACTER_SET_NAME"];
                    if (dbColumn["COLLATION_NAME"])
                        tableColumn.collation = dbColumn["COLLATION_NAME"] === defaultCollation["COLLATION_NAME"] ? undefined : dbColumn["COLLATION_NAME"];
                    if (tableColumn.type === "datetime2" || tableColumn.type === "time" || tableColumn.type === "datetimeoffset") {
                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["DATETIME_PRECISION"]) ? dbColumn["DATETIME_PRECISION"] : undefined;
                    }
                    return tableColumn;
                });
                // find unique constraints of table, group them by constraint name and build TableUnique.
                const tableUniqueConstraints = OrmUtils_14.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["TABLE_NAME"], dbConstraint["CONSTRAINT_SCHEMA"], dbConstraint["CONSTRAINT_CATALOG"]) === tableFullName
                        && dbConstraint["CONSTRAINT_TYPE"] === "UNIQUE";
                }), dbConstraint => dbConstraint["CONSTRAINT_NAME"]);
                table.uniques = tableUniqueConstraints.map(constraint => {
                    const uniques = dbConstraints.filter(dbC => dbC["CONSTRAINT_NAME"] === constraint["CONSTRAINT_NAME"]);
                    return new TableUnique_3.TableUnique({
                        name: constraint["CONSTRAINT_NAME"],
                        columnNames: uniques.map(u => u["COLUMN_NAME"])
                    });
                });
                // find check constraints of table, group them by constraint name and build TableCheck.
                const tableCheckConstraints = OrmUtils_14.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["TABLE_NAME"], dbConstraint["CONSTRAINT_SCHEMA"], dbConstraint["CONSTRAINT_CATALOG"]) === tableFullName
                        && dbConstraint["CONSTRAINT_TYPE"] === "CHECK";
                }), dbConstraint => dbConstraint["CONSTRAINT_NAME"]);
                table.checks = tableCheckConstraints.map(constraint => {
                    const checks = dbConstraints.filter(dbC => dbC["CONSTRAINT_NAME"] === constraint["CONSTRAINT_NAME"]);
                    return new TableCheck_3.TableCheck({
                        name: constraint["CONSTRAINT_NAME"],
                        columnNames: checks.map(c => c["COLUMN_NAME"]),
                        expression: constraint["definition"]
                    });
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_14.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["TABLE_NAME"], dbForeignKey["TABLE_SCHEMA"], dbForeignKey["TABLE_CATALOG"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["FK_NAME"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["FK_NAME"] === dbForeignKey["FK_NAME"]);
                    // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.
                    const db = dbForeignKey["TABLE_CATALOG"] === currentDatabase ? undefined : dbForeignKey["TABLE_CATALOG"];
                    const schema = dbForeignKey["REF_SCHEMA"] === currentSchema ? undefined : dbForeignKey["REF_SCHEMA"];
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["REF_TABLE"], schema, db);
                    return new TableForeignKey_3.TableForeignKey({
                        name: dbForeignKey["FK_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REF_COLUMN"]),
                        onDelete: dbForeignKey["ON_DELETE"].replace("_", " "),
                        onUpdate: dbForeignKey["ON_UPDATE"].replace("_", " ") // SqlServer returns NO_ACTION, instead of NO ACTION
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_14.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["TABLE_NAME"], dbIndex["TABLE_SCHEMA"], dbIndex["TABLE_CATALOG"]) === tableFullName;
                }), dbIndex => dbIndex["INDEX_NAME"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => {
                        return index["TABLE_CATALOG"] === constraint["TABLE_CATALOG"]
                            && index["TABLE_SCHEMA"] === constraint["TABLE_SCHEMA"]
                            && index["TABLE_NAME"] === constraint["TABLE_NAME"]
                            && index["INDEX_NAME"] === constraint["INDEX_NAME"];
                    });
                    return new TableIndex_3.TableIndex({
                        table: table,
                        name: constraint["INDEX_NAME"],
                        columnNames: indices.map(i => i["COLUMN_NAME"]),
                        isUnique: constraint["IS_UNIQUE"],
                        where: constraint["CONDITION"]
                    });
                });
                return table;
            }));
        }
        /**
         * Builds and returns SQL for create table.
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
                if (!isUniqueExist)
                    table.uniques.push(new TableUnique_3.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name]
                    }));
            });
            if (table.uniques.length > 0) {
                const uniquesSql = table.uniques.map(unique => {
                    const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
                    const columnNames = unique.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    return `CONSTRAINT "${uniqueName}" UNIQUE (${columnNames})`;
                }).join(", ");
                sql += `, ${uniquesSql}`;
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            if (primaryColumns.length > 0) {
                const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            return new Query_4.Query(sql);
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrName, ifExist) {
            const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;
            return new Query_4.Query(query);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_4.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);
            }
            else {
                return new Query_4.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentSchema = await this.getCurrentSchema();
            const parsedTableName = this.parseTableName(view, currentSchema);
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", database: parsedTableName.database, schema: parsedTableName.schema, name: parsedTableName.name, value: expression })
                .getQueryAndParameters();
            return new Query_4.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_4.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentSchema = await this.getCurrentSchema();
            const parsedTableName = this.parseTableName(viewOrPath, currentSchema);
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("database")} = :database`, { database: parsedTableName.database })
                .andWhere(`${qb.escape("schema")} = :schema`, { schema: parsedTableName.schema })
                .andWhere(`${qb.escape("name")} = :name`, { name: parsedTableName.name })
                .getQueryAndParameters();
            return new Query_4.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_4.Query(`CREATE ${index.isUnique ? "UNIQUE " : ""}INDEX "${index.name}" ON ${this.escapePath(table)} (${columns}) ${index.where ? "WHERE " + index.where : ""}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = indexOrName instanceof TableIndex_3.TableIndex ? indexOrName.name : indexOrName;
            return new Query_4.Query(`DROP INDEX "${indexName}" ON ${this.escapePath(table)}`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            const columnNames = table.primaryColumns.map(column => column.name);
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${primaryKeyName}"`);
        }
        /**
         * Builds create unique constraint sql.
         */
        createUniqueConstraintSql(table, uniqueConstraint) {
            const columnNames = uniqueConstraint.columnNames.map(column => `"` + column + `"`).join(", ");
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE (${columnNames})`);
        }
        /**
         * Builds drop unique constraint sql.
         */
        dropUniqueConstraintSql(table, uniqueOrName) {
            const uniqueName = uniqueOrName instanceof TableUnique_3.TableUnique ? uniqueOrName.name : uniqueOrName;
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueName}"`);
        }
        /**
         * Builds create check constraint sql.
         */
        createCheckConstraintSql(table, checkConstraint) {
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${checkConstraint.name}" CHECK (${checkConstraint.expression})`);
        }
        /**
         * Builds drop check constraint sql.
         */
        dropCheckConstraintSql(table, checkOrName) {
            const checkName = checkOrName instanceof TableCheck_3.TableCheck ? checkOrName.name : checkOrName;
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${checkName}"`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `"` + column + `"`).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `"` + column + `"`).join(",");
            let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${foreignKey.name}" FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            if (foreignKey.onDelete)
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            if (foreignKey.onUpdate)
                sql += ` ON UPDATE ${foreignKey.onUpdate}`;
            return new Query_4.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_3.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_4.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${foreignKeyName}"`);
        }
        /**
         * Escapes given table or View path.
         */
        escapePath(target, disableEscape) {
            let name = target instanceof Table_3.Table || target instanceof View_3.View ? target.name : target;
            if (this.driver.options.schema) {
                if (name.indexOf(".") === -1) {
                    name = `${this.driver.options.schema}.${name}`;
                }
                else if (name.split(".").length === 3) {
                    const splittedName = name.split(".");
                    const dbName = splittedName[0];
                    const tableName = splittedName[2];
                    name = `${dbName}.${this.driver.options.schema}.${tableName}`;
                }
            }
            return name.split(".").map(i => {
                // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
                if (i === "")
                    return i;
                return disableEscape ? i : `"${i}"`;
            }).join(".");
        }
        parseTableName(target, schema) {
            const tableName = (target instanceof Table_3.Table || target instanceof View_3.View) ? target.name : target;
            if (tableName.split(".").length === 3) {
                return {
                    database: tableName.split(".")[0],
                    schema: tableName.split(".")[1] === "" ? schema || "SCHEMA_NAME()" : tableName.split(".")[1],
                    name: tableName.split(".")[2]
                };
            }
            else if (tableName.split(".").length === 2) {
                return {
                    database: this.driver.database,
                    schema: tableName.split(".")[0],
                    name: tableName.split(".")[1]
                };
            }
            else {
                return {
                    database: this.driver.database,
                    schema: this.driver.options.schema ? this.driver.options.schema : schema || "SCHEMA_NAME()",
                    name: tableName
                };
            }
        }
        /**
         * Concat database name and schema name to the foreign key name.
         * Needs because FK name is relevant to the schema and database.
         */
        buildForeignKeyName(fkName, schemaName, dbName) {
            let joinedFkName = fkName;
            if (schemaName)
                joinedFkName = schemaName + "." + joinedFkName;
            if (dbName)
                joinedFkName = dbName + "." + joinedFkName;
            return joinedFkName;
        }
        /**
         * Removes parenthesis around default value.
         * Sql server returns default value with parenthesis around, e.g.
         *  ('My text') - for string
         *  ((1)) - for number
         *  (newsequentialId()) - for function
         */
        removeParenthesisFromDefault(defaultValue) {
            if (defaultValue.substr(0, 1) !== "(")
                return defaultValue;
            const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(")") - 1);
            return this.removeParenthesisFromDefault(normalizedDefault);
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(table, column, skipIdentity, createDefault) {
            let c = `"${column.name}" ${this.connection.driver.createFullType(column)}`;
            if (column.enum)
                c += " CHECK( " + column.name + " IN (" + column.enum.map(val => "'" + val + "'").join(",") + ") )";
            if (column.collation)
                c += " COLLATE " + column.collation;
            if (column.isNullable !== true)
                c += " NOT NULL";
            if (column.isGenerated === true && column.generationStrategy === "increment" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.
                c += " IDENTITY(1,1)";
            if (column.default !== undefined && column.default !== null && createDefault) {
                // we create named constraint to be able to delete this constraint when column been dropped
                const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);
                c += ` CONSTRAINT "${defaultName}" DEFAULT ${column.default}`;
            }
            if (column.isGenerated && column.generationStrategy === "uuid" && !column.default) {
                // we create named constraint to be able to delete this constraint when column been dropped
                const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);
                c += ` CONSTRAINT "${defaultName}" DEFAULT NEWSEQUENTIALID()`;
            }
            return c;
        }
        /**
         * Converts MssqlParameter into real mssql parameter type.
         */
        mssqlParameterToNativeParameter(parameter) {
            switch (this.driver.normalizeType({ type: parameter.type })) {
                case "bit":
                    return this.driver.mssql.Bit;
                case "bigint":
                    return this.driver.mssql.BigInt;
                case "decimal":
                    return this.driver.mssql.Decimal(...parameter.params);
                case "float":
                    return this.driver.mssql.Float;
                case "int":
                    return this.driver.mssql.Int;
                case "money":
                    return this.driver.mssql.Money;
                case "numeric":
                    return this.driver.mssql.Numeric(...parameter.params);
                case "smallint":
                    return this.driver.mssql.SmallInt;
                case "smallmoney":
                    return this.driver.mssql.SmallMoney;
                case "real":
                    return this.driver.mssql.Real;
                case "tinyint":
                    return this.driver.mssql.TinyInt;
                case "char":
                    return this.driver.mssql.Char(...parameter.params);
                case "nchar":
                    return this.driver.mssql.NChar(...parameter.params);
                case "text":
                    return this.driver.mssql.Text;
                case "ntext":
                    return this.driver.mssql.Ntext;
                case "varchar":
                    return this.driver.mssql.VarChar(...parameter.params);
                case "nvarchar":
                    return this.driver.mssql.NVarChar(...parameter.params);
                case "xml":
                    return this.driver.mssql.Xml;
                case "time":
                    return this.driver.mssql.Time(...parameter.params);
                case "date":
                    return this.driver.mssql.Date;
                case "datetime":
                    return this.driver.mssql.DateTime;
                case "datetime2":
                    return this.driver.mssql.DateTime2(...parameter.params);
                case "datetimeoffset":
                    return this.driver.mssql.DateTimeOffset(...parameter.params);
                case "smalldatetime":
                    return this.driver.mssql.SmallDateTime;
                case "uniqueidentifier":
                    return this.driver.mssql.UniqueIdentifier;
                case "variant":
                    return this.driver.mssql.Variant;
                case "binary":
                    return this.driver.mssql.Binary;
                case "varbinary":
                    return this.driver.mssql.VarBinary(...parameter.params);
                case "image":
                    return this.driver.mssql.Image;
                case "udt":
                    return this.driver.mssql.UDT;
                case "rowversion":
                    return this.driver.mssql.RowVersion;
            }
        }
        /**
         * Converts string literal of isolation level to enum.
         * The underlying mssql driver requires an enum for the isolation level.
         */
        convertIsolationLevel(isolation) {
            const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;
            switch (isolation) {
                case "READ UNCOMMITTED":
                    return ISOLATION_LEVEL.READ_UNCOMMITTED;
                case "REPEATABLE READ":
                    return ISOLATION_LEVEL.REPEATABLE_READ;
                case "SERIALIZABLE":
                    return ISOLATION_LEVEL.SERIALIZABLE;
                case "READ COMMITTED":
                default:
                    return ISOLATION_LEVEL.READ_COMMITTED;
            }
        }
    }
    exports.SqlServerQueryRunner = SqlServerQueryRunner;
});
define("typeorm/driver/sqlserver/SqlServerDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/DriverUtils", "typeorm/driver/sqlserver/SqlServerQueryRunner", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/driver/sqlserver/MssqlParameter", "typeorm/schema-builder/table/TableColumn", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, ConnectionIsNotSetError_4, DriverPackageNotInstalledError_4, DriverUtils_4, SqlServerQueryRunner_1, DateUtils_5, PlatformTools_6, RdbmsSchemaBuilder_4, MssqlParameter_2, TableColumn_4, OrmUtils_15, ApplyValueTransformers_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqlServerDriver = void 0;
    /**
     * Organizes communication with SQL Server DBMS.
     */
    class SqlServerDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Pool for slave databases.
             * Used in replication.
             */
            this.slaves = [];
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql
             */
            this.supportedDataTypes = [
                "int",
                "bigint",
                "bit",
                "decimal",
                "money",
                "numeric",
                "smallint",
                "smallmoney",
                "tinyint",
                "float",
                "real",
                "date",
                "datetime2",
                "datetime",
                "datetimeoffset",
                "smalldatetime",
                "time",
                "char",
                "varchar",
                "text",
                "nchar",
                "nvarchar",
                "ntext",
                "binary",
                "image",
                "varbinary",
                "hierarchyid",
                "sql_variant",
                "timestamp",
                "uniqueidentifier",
                "xml",
                "geometry",
                "geography",
                "rowversion"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [
                "geometry",
                "geography"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "char",
                "varchar",
                "nchar",
                "nvarchar",
                "binary",
                "varbinary"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "decimal",
                "numeric",
                "time",
                "datetime2",
                "datetimeoffset"
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "decimal",
                "numeric"
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "datetime2",
                createDateDefault: "getdate()",
                updateDate: "datetime2",
                updateDateDefault: "getdate()",
                deleteDate: "datetime2",
                deleteDateNullable: true,
                version: "int",
                treeLevel: "int",
                migrationId: "int",
                migrationName: "varchar",
                migrationTimestamp: "bigint",
                cacheId: "int",
                cacheIdentifier: "nvarchar",
                cacheTime: "bigint",
                cacheDuration: "int",
                cacheQuery: "nvarchar(MAX)",
                cacheResult: "nvarchar(MAX)",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "nvarchar(MAX)",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "char": { length: 1 },
                "nchar": { length: 1 },
                "varchar": { length: 255 },
                "nvarchar": { length: 255 },
                "binary": { length: 1 },
                "varbinary": { length: 1 },
                "decimal": { precision: 18, scale: 0 },
                "numeric": { precision: 18, scale: 0 },
                "time": { precision: 7 },
                "datetime2": { precision: 7 },
                "datetimeoffset": { precision: 7 }
            };
            /**
             * Max length allowed by MSSQL Server for aliases (identifiers).
             * @see https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server
             */
            this.maxAliasLength = 128;
            this.connection = connection;
            this.options = connection.options;
            this.isReplicated = this.options.replication ? true : false;
            // load mssql package
            this.loadDependencies();
            // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way
            // validate options to make sure everything is set
            // if (!this.options.host)
            // throw new DriverOptionNotSetError("host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.database)
            //     throw new DriverOptionNotSetError("database");
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
            if (this.options.replication) {
                this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {
                    return this.createPool(this.options, slave);
                }));
                this.master = await this.createPool(this.options, this.options.replication.master);
                this.database = this.options.replication.master.database;
            }
            else {
                this.master = await this.createPool(this.options, this.options);
                this.database = this.options.database;
            }
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
            if (!this.master)
                return Promise.reject(new ConnectionIsNotSetError_4.ConnectionIsNotSetError("mssql"));
            await this.closePool(this.master);
            await Promise.all(this.slaves.map(slave => this.closePool(slave)));
            this.master = undefined;
            this.slaves = [];
        }
        /**
         * Closes connection pool.
         */
        async closePool(pool) {
            return new Promise((ok, fail) => {
                pool.close((err) => err ? fail(err) : ok());
            });
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_4.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new SqlServerQueryRunner_1.SqlServerQueryRunner(this, mode);
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const escapedParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);
            if (!parameters || !Object.keys(parameters).length)
                return [sql, escapedParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v) => {
                        escapedParameters.push(v);
                        return "@" + (escapedParameters.length - 1);
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else {
                    escapedParameters.push(value);
                    return "@" + (escapedParameters.length - 1);
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, escapedParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return `"${columnName}"`;
        }
        /**
         * Build full table name with database name, schema name and table name.
         * E.g. "myDB"."mySchema"."myTable"
         */
        buildTableName(tableName, schema, database) {
            let fullName = tableName;
            if (schema)
                fullName = schema + "." + tableName;
            if (database) {
                if (!schema) {
                    fullName = database + ".." + tableName;
                }
                else {
                    fullName = database + "." + fullName;
                }
            }
            return fullName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_6.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_5.DateUtils.mixedDateToDate(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_5.DateUtils.mixedTimeToDate(value);
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === "smalldatetime"
                || columnMetadata.type === Date) {
                return DateUtils_5.DateUtils.mixedDateToDate(value, false, false);
            }
            else if (columnMetadata.type === "datetime2"
                || columnMetadata.type === "datetimeoffset") {
                return DateUtils_5.DateUtils.mixedDateToDate(value, false, true);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_5.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_5.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                return DateUtils_5.DateUtils.simpleEnumToString(value);
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_6.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean) {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === Date
                || columnMetadata.type === "datetime2"
                || columnMetadata.type === "smalldatetime"
                || columnMetadata.type === "datetimeoffset") {
                value = DateUtils_5.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_5.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_5.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_5.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_5.DateUtils.stringToSimpleJson(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                value = DateUtils_5.DateUtils.stringToSimpleEnum(value, columnMetadata);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_6.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "integer") {
                return "int";
            }
            else if (column.type === String) {
                return "nvarchar";
            }
            else if (column.type === Date) {
                return "datetime";
            }
            else if (column.type === Boolean) {
                return "bit";
            }
            else if (column.type === Buffer) {
                return "binary";
            }
            else if (column.type === "uuid") {
                return "uniqueidentifier";
            }
            else if (column.type === "simple-array" || column.type === "simple-json") {
                return "ntext";
            }
            else if (column.type === "simple-enum") {
                return "nvarchar";
            }
            else if (column.type === "dec") {
                return "decimal";
            }
            else if (column.type === "double precision") {
                return "float";
            }
            else if (column.type === "rowversion") {
                return "timestamp"; // the rowversion type's name in SQL server metadata is timestamp
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if (typeof defaultValue === "number") {
                return "" + defaultValue;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "1" : "0";
            }
            else if (typeof defaultValue === "function") {
                return /*"(" + */ defaultValue() /* + ")"*/;
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            if (column.length)
                return column.length.toString();
            if (column.type === "varchar" || column.type === "nvarchar" || column.type === String)
                return "255";
            return "";
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.
            if (this.getColumnLength(column)) {
                type += `(${this.getColumnLength(column)})`;
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += `(${column.precision},${column.scale})`;
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += `(${column.precision})`;
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return Promise.resolve(this.master);
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.slaves.length)
                return this.obtainMasterConnection();
            const random = Math.floor(Math.random() * this.slaves.length);
            return Promise.resolve(this.slaves[random]);
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult) {
            if (!insertResult)
                return undefined;
            return Object.keys(insertResult).reduce((map, key) => {
                const column = metadata.findColumnWithDatabaseName(key);
                if (column) {
                    OrmUtils_15.OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));
                }
                return map;
            }, {});
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadata.length
                    || tableColumn.precision !== columnMetadata.precision
                    || tableColumn.scale !== columnMetadata.scale
                    // || tableColumn.comment !== columnMetadata.comment || // todo
                    || (!tableColumn.isGenerated && this.lowerDefaultValueIfNessesary(this.normalizeDefault(columnMetadata)) !== this.lowerDefaultValueIfNessesary(tableColumn.default)) // we included check for generated here, because generated columns already can have default values
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || tableColumn.isGenerated !== columnMetadata.isGenerated;
            });
        }
        lowerDefaultValueIfNessesary(value) {
            // SqlServer saves function calls in default value as lowercase https://github.com/typeorm/typeorm/issues/2733
            if (!value) {
                return value;
            }
            return value.split(`'`).map((v, i) => {
                return i % 2 === 1 ? v : v.toLowerCase();
            }).join(`'`);
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            if (this.options.options && this.options.options.disableOutputReturning) {
                return false;
            }
            return true;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return true;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "@" + index;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Sql server's parameters needs to be wrapped into special object with type information about this value.
         * This method wraps given value into MssqlParameter based on its column definition.
         */
        parametrizeValue(column, value) {
            // if its already MssqlParameter then simply return it
            if (value instanceof MssqlParameter_2.MssqlParameter)
                return value;
            const normalizedType = this.normalizeType({ type: column.type });
            if (column.length) {
                return new MssqlParameter_2.MssqlParameter(value, normalizedType, column.length);
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                return new MssqlParameter_2.MssqlParameter(value, normalizedType, column.precision, column.scale);
            }
            else if (column.precision !== null && column.precision !== undefined) {
                return new MssqlParameter_2.MssqlParameter(value, normalizedType, column.precision);
            }
            else if (column.scale !== null && column.scale !== undefined) {
                return new MssqlParameter_2.MssqlParameter(value, normalizedType, column.scale);
            }
            return new MssqlParameter_2.MssqlParameter(value, normalizedType);
        }
        /**
         * Sql server's parameters needs to be wrapped into special object with type information about this value.
         * This method wraps all values of the given object into MssqlParameter based on their column definitions in the given table.
         */
        parametrizeMap(tablePath, map) {
            // find metadata for the given table
            if (!this.connection.hasMetadata(tablePath)) // if no metadata found then we can't proceed because we don't have columns and their types
                return map;
            const metadata = this.connection.getMetadata(tablePath);
            return Object.keys(map).reduce((newMap, key) => {
                const value = map[key];
                // find column metadata
                const column = metadata.findColumnWithDatabaseName(key);
                if (!column) // if we didn't find a column then we can't proceed because we don't have a column type
                    return value;
                newMap[key] = this.parametrizeValue(column, value);
                return newMap;
            }, {});
        }
        buildTableVariableDeclaration(identifier, columns) {
            const outputColumns = columns.map(column => {
                return `${this.escape(column.databaseName)} ${this.createFullType(new TableColumn_4.TableColumn({
                    name: column.databaseName,
                    type: this.normalizeType(column),
                    length: column.length,
                    isNullable: column.isNullable,
                    isArray: column.isArray,
                }))}`;
            });
            return `DECLARE ${identifier} TABLE (${outputColumns.join(", ")})`;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.mssql = PlatformTools_6.PlatformTools.load("mssql");
            }
            catch (e) { // todo: better error for browser env
                throw new DriverPackageNotInstalledError_4.DriverPackageNotInstalledError("SQL Server", "mssql");
            }
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        createPool(options, credentials) {
            credentials = Object.assign({}, credentials, DriverUtils_4.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way
            // build connection options for the driver
            const connectionOptions = Object.assign({}, {
                connectionTimeout: this.options.connectionTimeout,
                requestTimeout: this.options.requestTimeout,
                stream: this.options.stream,
                pool: this.options.pool,
                options: this.options.options,
            }, {
                server: credentials.host,
                user: credentials.username,
                password: credentials.password,
                database: credentials.database,
                port: credentials.port,
                domain: credentials.domain,
            }, options.extra || {});
            // set default useUTC option if it hasn't been set
            if (!connectionOptions.options)
                connectionOptions.options = { useUTC: false };
            else if (!connectionOptions.options.useUTC)
                connectionOptions.options.useUTC = false;
            // pooling is enabled either when its set explicitly to true,
            // either when its not defined at all (e.g. enabled by default)
            return new Promise((ok, fail) => {
                const pool = new this.mssql.ConnectionPool(connectionOptions);
                const { logger } = this.connection;
                const poolErrorHandler = (options.pool && options.pool.errorHandler) || ((error) => logger.log("warn", `MSSQL pool raised an error. ${error}`));
                /*
                  Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and
                  cause the hosting app to crash.
                 */
                pool.on("error", poolErrorHandler);
                const connection = pool.connect((err) => {
                    if (err)
                        return fail(err);
                    ok(connection);
                });
            });
        }
    }
    exports.SqlServerDriver = SqlServerDriver;
});
define("typeorm/util/VersionUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VersionUtils = void 0;
    class VersionUtils {
        static isGreaterOrEqual(version, targetVersion) {
            const v1 = parseVersion(version);
            const v2 = parseVersion(targetVersion);
            return v1[0] > v2[0] ||
                v1[0] === v2[0] && v1[1] > v2[1] ||
                v1[0] === v2[0] && v1[1] === v2[1] && v1[2] >= v2[2];
        }
    }
    exports.VersionUtils = VersionUtils;
    function parseVersion(version = "") {
        const v = [0, 0, 0];
        version.split(".").forEach((value, i) => v[i] = parseInt(value, 10));
        return v;
    }
});
define("typeorm/driver/mysql/MysqlQueryRunner", ["require", "exports", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/schema-builder/view/View", "typeorm/driver/Query", "typeorm/util/OrmUtils", "typeorm/error/QueryFailedError", "typeorm/schema-builder/table/TableUnique", "typeorm/query-runner/BaseQueryRunner", "typeorm/subscriber/Broadcaster", "typeorm/util/VersionUtils", "typeorm/subscriber/BroadcasterResult"], function (require, exports, TransactionAlreadyStartedError_4, TransactionNotStartedError_4, TableColumn_5, Table_4, TableForeignKey_4, TableIndex_4, QueryRunnerAlreadyReleasedError_4, View_4, Query_5, OrmUtils_16, QueryFailedError_4, TableUnique_4, BaseQueryRunner_4, Broadcaster_5, VersionUtils_1, BroadcasterResult_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MysqlQueryRunner = void 0;
    /**
     * Runs queries on a single mysql database connection.
     */
    class MysqlQueryRunner extends BaseQueryRunner_4.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_5.Broadcaster(this);
            this.mode = mode;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            if (this.databaseConnection)
                return Promise.resolve(this.databaseConnection);
            if (this.databaseConnectionPromise)
                return this.databaseConnectionPromise;
            if (this.mode === "slave" && this.driver.isReplicated) {
                this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {
                    this.databaseConnection = connection;
                    return this.databaseConnection;
                });
            }
            else { // master
                this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {
                    this.databaseConnection = connection;
                    return this.databaseConnection;
                });
            }
            return this.databaseConnectionPromise;
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            this.isReleased = true;
            if (this.databaseConnection)
                this.databaseConnection.release();
            return Promise.resolve();
        }
        /**
         * Starts transaction on the current connection.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_4.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            if (isolationLevel) {
                await this.query("SET TRANSACTION ISOLATION LEVEL " + isolationLevel);
                await this.query("START TRANSACTION");
            }
            else {
                await this.query("START TRANSACTION");
            }
            const afterBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_4.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("COMMIT");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_4.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("ROLLBACK");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_6.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a raw SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_4.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const queryStartTime = +new Date();
                    databaseConnection.query(query, parameters, (err, result) => {
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        if (err) {
                            this.driver.connection.logger.logQueryError(err, query, parameters, this);
                            return fail(new QueryFailedError_4.QueryFailedError(query, parameters, err));
                        }
                        ok(result);
                    });
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_4.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const databaseQuery = databaseConnection.query(query, parameters);
                    if (onEnd)
                        databaseQuery.on("end", onEnd);
                    if (onError)
                        databaseQuery.on("error", onError);
                    ok(databaseQuery.stream());
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            throw new Error(`MySql driver does not support table schemas`);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            const result = await this.query(`SELECT * FROM \`INFORMATION_SCHEMA\`.\`SCHEMATA\` WHERE \`SCHEMA_NAME\` = '${database}'`);
            return result.length ? true : false;
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            throw new Error(`MySql driver does not support table schemas`);
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`COLUMNS\` WHERE \`TABLE_SCHEMA\` = '${parsedTableName.database}' AND \`TABLE_NAME\` = '${parsedTableName.tableName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, column) {
            const parsedTableName = this.parseTableName(tableOrName);
            const columnName = column instanceof TableColumn_5.TableColumn ? column.name : column;
            const sql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`COLUMNS\` WHERE \`TABLE_SCHEMA\` = '${parsedTableName.database}' AND \`TABLE_NAME\` = '${parsedTableName.tableName}' AND \`COLUMN_NAME\` = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            const up = ifNotExist ? `CREATE DATABASE IF NOT EXISTS \`${database}\`` : `CREATE DATABASE \`${database}\``;
            const down = `DROP DATABASE \`${database}\``;
            await this.executeQueries(new Query_5.Query(up), new Query_5.Query(down));
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            const up = ifExist ? `DROP DATABASE IF EXISTS \`${database}\`` : `DROP DATABASE \`${database}\``;
            const down = `CREATE DATABASE \`${database}\``;
            await this.executeQueries(new Query_5.Query(up), new Query_5.Query(down));
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            throw new Error(`Schema create queries are not supported by MySql driver.`);
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist) {
            throw new Error(`Schema drop queries are not supported by MySql driver.`);
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order
            // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index
            // if it related to the foreign key.
            // createTable does not need separate method to create indices, because it create indices in the same query with table creation.
            table.indices.forEach(index => downQueries.push(this.dropIndexSql(table, index)));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            return this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drop the table.
         */
        async dropTable(target, ifExist, dropForeignKeys = true) {
            // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need
            // to perform drop queries for foreign keys and indices.
            if (ifExist) {
                const isTableExist = await this.hasTable(target);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const tableName = target instanceof Table_4.Table ? target.name : target;
            const table = await this.getCachedTable(tableName);
            const upQueries = [];
            const downQueries = [];
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            table.indices.forEach(index => upQueries.push(this.dropIndexSql(table, index)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_4.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames a table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_4.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            const dbName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = dbName ? `${dbName}.${newTableName}` : newTableName;
            // rename table
            upQueries.push(new Query_5.Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTable.name)}`));
            downQueries.push(new Query_5.Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTable.name)}`));
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const columnNames = index.columnNames.map(column => `\`${column}\``).join(", ");
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                let indexType = "";
                if (index.isUnique)
                    indexType += "UNIQUE ";
                if (index.isSpatial)
                    indexType += "SPATIAL ";
                if (index.isFulltext)
                    indexType += "FULLTEXT ";
                const indexParser = index.isFulltext && index.parser ? ` WITH PARSER ${index.parser}` : "";
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \`${index.name}\`, ADD ${indexType}INDEX \`${newIndexName}\` (${columnNames})${indexParser}`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \`${newIndexName}\`, ADD ${indexType}INDEX \`${index.name}\` (${columnNames})${indexParser}`));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraint
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
                const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // build queries
                let up = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \`${foreignKey.name}\`, ADD CONSTRAINT \`${newForeignKeyName}\` FOREIGN KEY (${columnNames}) ` +
                    `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                if (foreignKey.onDelete)
                    up += ` ON DELETE ${foreignKey.onDelete}`;
                if (foreignKey.onUpdate)
                    up += ` ON UPDATE ${foreignKey.onUpdate}`;
                let down = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \`${newForeignKeyName}\`, ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                    `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                if (foreignKey.onDelete)
                    down += ` ON DELETE ${foreignKey.onDelete}`;
                if (foreignKey.onUpdate)
                    down += ` ON UPDATE ${foreignKey.onUpdate}`;
                upQueries.push(new Query_5.Query(up));
                downQueries.push(new Query_5.Query(down));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            await this.executeQueries(upQueries, downQueries);
            // rename old table and replace it in cached tabled;
            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;
            upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`));
            downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \`${column.name}\``));
            // create or update primary key constraint
            if (column.isPrimary && skipColumnLevelPrimary) {
                // if we already have generated column, we must temporary drop AUTO_INCREMENT property.
                const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${column.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(column, true)}`));
                }
                const primaryColumns = clonedTable.primaryColumns;
                let columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                primaryColumns.push(column);
                columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                // if we previously dropped AUTO_INCREMENT property, we must bring it back
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(column, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${column.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                }
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                const uniqueIndex = new TableIndex_4.TableIndex({
                    name: this.connection.namingStrategy.indexName(table.name, [column.name]),
                    columnNames: [column.name],
                    isUnique: true
                });
                clonedTable.indices.push(uniqueIndex);
                clonedTable.uniques.push(new TableUnique_4.TableUnique({
                    name: uniqueIndex.name,
                    columnNames: uniqueIndex.columnNames
                }));
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${column.name}\`)`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_5.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_5.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            await this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldColumnOrName instanceof TableColumn_5.TableColumn
                ? oldColumnOrName
                : table.columns.find(column => column.name === oldColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldColumnOrName}" was not found in the "${table.name}" table.`);
            if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid")
                || oldColumn.type !== newColumn.type
                || oldColumn.length !== newColumn.length
                || oldColumn.generatedType !== newColumn.generatedType) {
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (newColumn.name !== oldColumn.name) {
                    // We don't change any column properties, just rename it.
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${oldColumn.name}\` \`${newColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newColumn.name}\` \`${oldColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const columnNames = index.columnNames.map(column => `\`${column}\``).join(", ");
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        let indexType = "";
                        if (index.isUnique)
                            indexType += "UNIQUE ";
                        if (index.isSpatial)
                            indexType += "SPATIAL ";
                        if (index.isFulltext)
                            indexType += "FULLTEXT ";
                        const indexParser = index.isFulltext && index.parser ? ` WITH PARSER ${index.parser}` : "";
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${index.name}\`, ADD ${indexType}INDEX \`${newIndexName}\` (${columnNames})${indexParser}`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${newIndexName}\`, ADD ${indexType}INDEX \`${index.name}\` (${columnNames})${indexParser}`));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
                        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        // build queries
                        let up = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${foreignKey.name}\`, ADD CONSTRAINT \`${newForeignKeyName}\` FOREIGN KEY (${columnNames}) ` +
                            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                        if (foreignKey.onDelete)
                            up += ` ON DELETE ${foreignKey.onDelete}`;
                        if (foreignKey.onUpdate)
                            up += ` ON UPDATE ${foreignKey.onUpdate}`;
                        let down = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${newForeignKeyName}\`, ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                        if (foreignKey.onDelete)
                            down += ` ON DELETE ${foreignKey.onDelete}`;
                        if (foreignKey.onUpdate)
                            down += ` ON UPDATE ${foreignKey.onUpdate}`;
                        upQueries.push(new Query_5.Query(up));
                        downQueries.push(new Query_5.Query(down));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (this.isColumnChanged(oldColumn, newColumn, true, true)) {
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${oldColumn.name}\` ${this.buildCreateColumnSql(newColumn, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true)}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
                    const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                    if (generatedColumn) {
                        const nonGeneratedColumn = generatedColumn.clone();
                        nonGeneratedColumn.isGenerated = false;
                        nonGeneratedColumn.generationStrategy = undefined;
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                    }
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                            upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                        }
                    }
                    // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back
                    if (generatedColumn) {
                        const nonGeneratedColumn = generatedColumn.clone();
                        nonGeneratedColumn.isGenerated = false;
                        nonGeneratedColumn.generationStrategy = undefined;
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueIndex = new TableIndex_4.TableIndex({
                            name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name],
                            isUnique: true
                        });
                        clonedTable.indices.push(uniqueIndex);
                        clonedTable.uniques.push(new TableUnique_4.TableUnique({
                            name: uniqueIndex.name,
                            columnNames: uniqueIndex.columnNames
                        }));
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${newColumn.name}\`)`));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
                    }
                    else {
                        const uniqueIndex = clonedTable.indices.find(index => {
                            return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);
                        const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex.name);
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);
                        upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
                        downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${newColumn.name}\`)`));
                    }
                }
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_5.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
                const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                }
                // dropping primary key constraint
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\`${primaryColumn.name}\``).join(", ");
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\`${primaryColumn.name}\``).join(", ");
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));
                }
                // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back
                if (generatedColumn && generatedColumn.name !== column.name) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                    downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                // we splice constraints both from table uniques and indices.
                const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);
                const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);
                if (foundUnique)
                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);
                const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);
                const foundIndex = clonedTable.indices.find(index => index.name === indexName);
                if (foundIndex)
                    clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${indexName}\``));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${indexName}\` (\`${column.name}\`)`));
            }
            upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \`${column.name}\``));
            downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, true)}`));
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            const down = this.dropPrimaryKeySql(table);
            await this.executeQueries(up, down);
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
            const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
            if (generatedColumn) {
                const nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
            }
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const columnNamesString = columnNames.map(columnName => `\`${columnName}\``).join(", ");
            upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
            // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back
            const newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(column => column.isGenerated && column.generationStrategy === "increment");
            if (newOrExistGeneratedColumn) {
                const nonGeneratedColumn = newOrExistGeneratedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`));
                downQueries.push(new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newOrExistGeneratedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                // if column changed to generated, we must update it in table
                const changedGeneratedColumn = clonedTable.columns.find(column => column.name === newOrExistGeneratedColumn.name);
                changedGeneratedColumn.isGenerated = true;
                changedGeneratedColumn.generationStrategy = "increment";
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops an unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Creates a new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Drops a foreign key.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_4.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(table, index);
            await this.executeQueries(up, down);
            table.addIndex(index, true);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_4.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_4.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index, true);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableOrName) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tableOrName)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         * Be careful using this method and avoid using it in production or migrations
         * (because it can clear all your database).
         */
        async clearDatabase(database) {
            const dbName = database ? database : this.driver.database;
            if (dbName) {
                const isDatabaseExist = await this.hasDatabase(dbName);
                if (!isDatabaseExist)
                    return Promise.resolve();
            }
            else {
                throw new Error(`Can not clear database. No database is specified`);
            }
            await this.startTransaction();
            try {
                const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \`', table_schema, '\`.\`', table_name, '\`') AS \`query\` FROM \`INFORMATION_SCHEMA\`.\`VIEWS\` WHERE \`TABLE_SCHEMA\` = '${dbName}'`;
                const dropViewQueries = await this.query(selectViewDropsQuery);
                await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;
                const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \`', table_schema, '\`.\`', table_name, '\`') AS \`query\` FROM \`INFORMATION_SCHEMA\`.\`TABLES\` WHERE \`TABLE_SCHEMA\` = '${dbName}'`;
                const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;
                await this.query(disableForeignKeysCheckQuery);
                const dropQueries = await this.query(dropTablesQuery);
                await Promise.all(dropQueries.map(query => this.query(query["query"])));
                await this.query(enableForeignKeysCheckQuery);
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Returns current database.
         */
        async getCurrentDatabase() {
            const currentDBQuery = await this.query(`SELECT DATABASE() AS \`db_name\``);
            return currentDBQuery[0]["db_name"];
        }
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentDatabase = await this.getCurrentDatabase();
            const viewsCondition = viewNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `(\`t\`.\`schema\` = '${database}' AND \`t\`.\`name\` = '${name}')`;
            }).join(" OR ");
            const query = `SELECT \`t\`.*, \`v\`.\`check_option\` FROM ${this.escapePath(this.getTypeormMetadataTableName())} \`t\` ` +
                `INNER JOIN \`information_schema\`.\`views\` \`v\` ON \`v\`.\`table_schema\` = \`t\`.\`schema\` AND \`v\`.\`table_name\` = \`t\`.\`name\` WHERE \`t\`.\`type\` = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_4.View();
                const db = dbView["schema"] === currentDatabase ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], undefined, db);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const currentDatabase = await this.getCurrentDatabase();
            // The following SQL brought to you by:
            //   A terrible understanding of https://dev.mysql.com/doc/refman/8.0/en/information-schema-optimization.html
            //
            // Short Version:
            // INFORMATION_SCHEMA is a weird metadata virtual table and follows VERY FEW of the normal
            // query optimization rules.  Depending on the columns you query against & the columns you're SELECTing
            // there can be a drastically different query performance - this is because the tables map to
            // data on the disk and some pieces of data require a scan of the data directory, the database files, etc
            // With most of these, you'll want to do an `EXPLAIN` when making changes to make sure
            // the changes you're making aren't changing the query performance profile negatively
            // When you do the explain you'll want to look at the `Extra` field -
            // It will look something like: "Using where; {FILE_OPENING}; Scanned {DB_NUM} databases"
            // FILE_OPENING will commonly be OPEN_FRM_ONLY or OPEN_FULL_TABLE - you want to aim to NOT do
            // an OPEN_FULL_TABLE unless necessary. DB_NUM may be a number or "all" - you really want to
            // keep this to 0 or 1.  Ideally 0. "All" means you've scanned all databases - not good.
            //
            // For more info, see the above link to the MySQL docs.
            //
            // Something not noted in the docs is that complex `WHERE` clauses - such as `OR` expressions -
            // will cause the query to not hit the optimizations & do full scans.  This is why
            // a number of queries below do `UNION`s of single `WHERE` clauses.
            // Avoid data directory scan: TABLE_SCHEMA
            // Avoid database directory scan: TABLE_NAME
            // Full columns: CARDINALITY & INDEX_TYPE - everything else is FRM only
            const statsSubquerySql = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `
                SELECT
                    *
                FROM \`INFORMATION_SCHEMA\`.\`STATISTICS\`
                WHERE
                    \`TABLE_SCHEMA\` = '${database}'
                    AND
                    \`TABLE_NAME\` = '${name}'
            `;
            }).join(" UNION ");
            // Avoid data directory scan: TABLE_SCHEMA
            // Avoid database directory scan: TABLE_NAME
            // All columns will hit the full table.
            const kcuSubquerySql = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `
                SELECT
                    *
                FROM \`INFORMATION_SCHEMA\`.\`KEY_COLUMN_USAGE\` \`kcu\`
                WHERE
                    \`kcu\`.\`TABLE_SCHEMA\` = '${database}'
                    AND
                    \`kcu\`.\`TABLE_NAME\` = '${name}'
            `;
            }).join(" UNION ");
            // Avoid data directory scan: CONSTRAINT_SCHEMA
            // Avoid database directory scan: TABLE_NAME
            // All columns will hit the full table.
            const rcSubquerySql = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `
                SELECT
                    *
                FROM \`INFORMATION_SCHEMA\`.\`REFERENTIAL_CONSTRAINTS\`
                WHERE
                    \`CONSTRAINT_SCHEMA\` = '${database}'
                    AND
                    \`TABLE_NAME\` = '${name}'
            `;
            }).join(" UNION ");
            // Avoid data directory scan: TABLE_SCHEMA
            // Avoid database directory scan: TABLE_NAME
            // We only use `TABLE_SCHEMA` and `TABLE_NAME` which is `SKIP_OPEN_TABLE`
            const tablesSql = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `
                SELECT
                    \`TABLE_SCHEMA\`,
                    \`TABLE_NAME\`
                FROM
                    \`INFORMATION_SCHEMA\`.\`TABLES\`
                WHERE
                    \`TABLE_SCHEMA\` = '${database}'
                    AND
                    \`TABLE_NAME\` = '${name}'
                `;
            }).join(" UNION ");
            // Avoid data directory scan: TABLE_SCHEMA
            // Avoid database directory scan: TABLE_NAME
            // OPEN_FRM_ONLY applies to all columns
            const columnsSql = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `
                SELECT
                    *
                FROM
                    \`INFORMATION_SCHEMA\`.\`COLUMNS\`
                WHERE
                    \`TABLE_SCHEMA\` = '${database}'
                    AND
                    \`TABLE_NAME\` = '${name}'
                `;
            }).join(" UNION ");
            // No Optimizations are available for COLLATIONS
            const collationsSql = `
            SELECT
                \`SCHEMA_NAME\`,
                \`DEFAULT_CHARACTER_SET_NAME\` as \`CHARSET\`,
                \`DEFAULT_COLLATION_NAME\` AS \`COLLATION\`
            FROM \`INFORMATION_SCHEMA\`.\`SCHEMATA\`
            `;
            // Key Column Usage but only for PKs
            const primaryKeySql = `SELECT * FROM (${kcuSubquerySql}) \`kcu\` WHERE \`CONSTRAINT_NAME\` = 'PRIMARY'`;
            // Combine stats & referential constraints
            const indicesSql = `
            SELECT
                \`s\`.*
            FROM (${statsSubquerySql}) \`s\`
            LEFT JOIN (${rcSubquerySql}) \`rc\`
                ON
                    \`s\`.\`INDEX_NAME\` = \`rc\`.\`CONSTRAINT_NAME\`
                    AND
                    \`s\`.\`TABLE_SCHEMA\` = \`rc\`.\`CONSTRAINT_SCHEMA\`
            WHERE
                \`s\`.\`INDEX_NAME\` != 'PRIMARY'
                AND
                \`rc\`.\`CONSTRAINT_NAME\` IS NULL
            `;
            // Combine Key Column Usage & Referential Constraints
            const foreignKeysSql = `
            SELECT
                \`kcu\`.\`TABLE_SCHEMA\`,
                \`kcu\`.\`TABLE_NAME\`,
                \`kcu\`.\`CONSTRAINT_NAME\`,
                \`kcu\`.\`COLUMN_NAME\`,
                \`kcu\`.\`REFERENCED_TABLE_SCHEMA\`,
                \`kcu\`.\`REFERENCED_TABLE_NAME\`,
                \`kcu\`.\`REFERENCED_COLUMN_NAME\`,
                \`rc\`.\`DELETE_RULE\` \`ON_DELETE\`,
                \`rc\`.\`UPDATE_RULE\` \`ON_UPDATE\`
            FROM (${kcuSubquerySql}) \`kcu\`
            INNER JOIN (${rcSubquerySql}) \`rc\`
                ON
                    \`rc\`.\`CONSTRAINT_SCHEMA\` = \`kcu\`.\`CONSTRAINT_SCHEMA\`
                    AND
                    \`rc\`.\`TABLE_NAME\` = \`kcu\`.\`TABLE_NAME\`
                    AND
                    \`rc\`.\`CONSTRAINT_NAME\` = \`kcu\`.\`CONSTRAINT_NAME\`
            `;
            const [dbTables, dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(primaryKeySql),
                this.query(collationsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql)
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            const isMariaDb = this.driver.options.type === "mariadb";
            const dbVersion = await this.getVersion();
            // create tables for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_4.Table();
                const dbCollation = dbCollations.find(coll => coll["SCHEMA_NAME"] === dbTable["TABLE_SCHEMA"]);
                const defaultCollation = dbCollation["COLLATION"];
                const defaultCharset = dbCollation["CHARSET"];
                // We do not need to join database name, when database is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const db = dbTable["TABLE_SCHEMA"] === currentDatabase ? undefined : dbTable["TABLE_SCHEMA"];
                table.name = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, db);
                const tableFullName = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, dbTable["TABLE_SCHEMA"]);
                // create columns from the loaded columns
                table.columns = dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["TABLE_NAME"], undefined, dbColumn["TABLE_SCHEMA"]) === tableFullName)
                    .map(dbColumn => {
                    const columnUniqueIndex = dbIndices.find(dbIndex => {
                        const indexTableFullName = this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]);
                        if (indexTableFullName !== tableFullName) {
                            return false;
                        }
                        // Index is not for this column
                        if (dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"]) {
                            return false;
                        }
                        const nonUnique = parseInt(dbIndex["NON_UNIQUE"], 10);
                        return nonUnique === 0;
                    });
                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);
                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices
                        .some(index => index.name === columnUniqueIndex["INDEX_NAME"] && index.synchronize === false);
                    const isConstraintComposite = columnUniqueIndex
                        ? !!dbIndices.find(dbIndex => dbIndex["INDEX_NAME"] === columnUniqueIndex["INDEX_NAME"] && dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"])
                        : false;
                    const tableColumn = new TableColumn_5.TableColumn();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE"].toLowerCase();
                    tableColumn.zerofill = dbColumn["COLUMN_TYPE"].indexOf("zerofill") !== -1;
                    tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn["COLUMN_TYPE"].indexOf("unsigned") !== -1;
                    if (this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {
                        const width = dbColumn["COLUMN_TYPE"].substring(dbColumn["COLUMN_TYPE"].indexOf("(") + 1, dbColumn["COLUMN_TYPE"].indexOf(")"));
                        tableColumn.width = width && !this.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;
                    }
                    if (dbColumn["COLUMN_DEFAULT"] === null
                        || dbColumn["COLUMN_DEFAULT"] === undefined
                        || (isMariaDb && dbColumn["COLUMN_DEFAULT"] === "NULL")) {
                        tableColumn.default = undefined;
                    }
                    else if (/^CURRENT_TIMESTAMP(\([0-9]*\))?$/i.test(dbColumn["COLUMN_DEFAULT"])) {
                        // New versions of MariaDB return expressions in lowercase.  We need to set it in
                        // uppercase so the comparison in MysqlDriver#compareDefaultValues does not fail.
                        tableColumn.default = dbColumn["COLUMN_DEFAULT"].toUpperCase();
                    }
                    else if (isMariaDb && VersionUtils_1.VersionUtils.isGreaterOrEqual(dbVersion, "10.2.7")) {
                        // MariaDB started adding quotes to literals in COLUMN_DEFAULT since version 10.2.7
                        // See https://mariadb.com/kb/en/library/information-schema-columns-table/
                        tableColumn.default = dbColumn["COLUMN_DEFAULT"];
                    }
                    else {
                        tableColumn.default = `'${dbColumn["COLUMN_DEFAULT"]}'`;
                    }
                    if (dbColumn["EXTRA"].indexOf("on update") !== -1) {
                        // New versions of MariaDB return expressions in lowercase.  We need to set it in
                        // uppercase so the comparison in MysqlDriver#compareExtraValues does not fail.
                        tableColumn.onUpdate = dbColumn["EXTRA"].substring(dbColumn["EXTRA"].indexOf("on update") + 10).toUpperCase();
                    }
                    if (dbColumn["GENERATION_EXPRESSION"]) {
                        tableColumn.asExpression = dbColumn["GENERATION_EXPRESSION"];
                        tableColumn.generatedType = dbColumn["EXTRA"].indexOf("VIRTUAL") !== -1 ? "VIRTUAL" : "STORED";
                    }
                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;
                    tableColumn.isNullable = dbColumn["IS_NULLABLE"] === "YES";
                    tableColumn.isPrimary = dbPrimaryKeys.some(dbPrimaryKey => {
                        return this.driver.buildTableName(dbPrimaryKey["TABLE_NAME"], undefined, dbPrimaryKey["TABLE_SCHEMA"]) === tableFullName && dbPrimaryKey["COLUMN_NAME"] === tableColumn.name;
                    });
                    tableColumn.isGenerated = dbColumn["EXTRA"].indexOf("auto_increment") !== -1;
                    if (tableColumn.isGenerated)
                        tableColumn.generationStrategy = "increment";
                    tableColumn.comment = (typeof dbColumn["COLUMN_COMMENT"] === "string" && dbColumn["COLUMN_COMMENT"].length === 0) ? undefined : dbColumn["COLUMN_COMMENT"];
                    if (dbColumn["CHARACTER_SET_NAME"])
                        tableColumn.charset = dbColumn["CHARACTER_SET_NAME"] === defaultCharset ? undefined : dbColumn["CHARACTER_SET_NAME"];
                    if (dbColumn["COLLATION_NAME"])
                        tableColumn.collation = dbColumn["COLLATION_NAME"] === defaultCollation ? undefined : dbColumn["COLLATION_NAME"];
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["CHARACTER_MAXIMUM_LENGTH"]) {
                        const length = dbColumn["CHARACTER_MAXIMUM_LENGTH"].toString();
                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                    }
                    if (tableColumn.type === "decimal" || tableColumn.type === "double" || tableColumn.type === "float") {
                        if (dbColumn["NUMERIC_PRECISION"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["NUMERIC_PRECISION"]))
                            tableColumn.precision = parseInt(dbColumn["NUMERIC_PRECISION"]);
                        if (dbColumn["NUMERIC_SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["NUMERIC_SCALE"]))
                            tableColumn.scale = parseInt(dbColumn["NUMERIC_SCALE"]);
                    }
                    if (tableColumn.type === "enum" || tableColumn.type === "simple-enum" || tableColumn.type === "set") {
                        const colType = dbColumn["COLUMN_TYPE"];
                        const items = colType.substring(colType.indexOf("(") + 1, colType.indexOf(")")).split(",");
                        tableColumn.enum = items.map(item => {
                            return item.substring(1, item.length - 1);
                        });
                        tableColumn.length = "";
                    }
                    if ((tableColumn.type === "datetime" || tableColumn.type === "time" || tableColumn.type === "timestamp")
                        && dbColumn["DATETIME_PRECISION"] !== null && dbColumn["DATETIME_PRECISION"] !== undefined
                        && !this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn["DATETIME_PRECISION"]))) {
                        tableColumn.precision = parseInt(dbColumn["DATETIME_PRECISION"]);
                    }
                    return tableColumn;
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_16.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["TABLE_NAME"], undefined, dbForeignKey["TABLE_SCHEMA"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["CONSTRAINT_NAME"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    // if referenced table located in currently used db, we don't need to concat db name to table name.
                    const database = dbForeignKey["REFERENCED_TABLE_SCHEMA"] === currentDatabase ? undefined : dbForeignKey["REFERENCED_TABLE_SCHEMA"];
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["REFERENCED_TABLE_NAME"], undefined, database);
                    return new TableForeignKey_4.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["ON_DELETE"],
                        onUpdate: dbForeignKey["ON_UPDATE"]
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_16.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]) === tableFullName;
                }), dbIndex => dbIndex["INDEX_NAME"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => {
                        return index["TABLE_SCHEMA"] === constraint["TABLE_SCHEMA"]
                            && index["TABLE_NAME"] === constraint["TABLE_NAME"]
                            && index["INDEX_NAME"] === constraint["INDEX_NAME"];
                    });
                    const nonUnique = parseInt(constraint["NON_UNIQUE"], 10);
                    return new TableIndex_4.TableIndex({
                        table: table,
                        name: constraint["INDEX_NAME"],
                        columnNames: indices.map(i => i["COLUMN_NAME"]),
                        isUnique: nonUnique === 0,
                        isSpatial: constraint["INDEX_TYPE"] === "SPATIAL",
                        isFulltext: constraint["INDEX_TYPE"] === "FULLTEXT"
                    });
                });
                return table;
            }));
        }
        /**
         * Builds create table sql
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, true)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.
            // if we mark column as Unique, it means that we create UNIQUE INDEX.
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueIndexExist = table.indices.some(index => {
                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;
                });
                const isUniqueConstraintExist = table.uniques.some(unique => {
                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;
                });
                if (!isUniqueIndexExist && !isUniqueConstraintExist)
                    table.indices.push(new TableIndex_4.TableIndex({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name],
                        isUnique: true
                    }));
            });
            // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.
            if (table.uniques.length > 0) {
                table.uniques.forEach(unique => {
                    const uniqueExist = table.indices.some(index => index.name === unique.name);
                    if (!uniqueExist) {
                        table.indices.push(new TableIndex_4.TableIndex({
                            name: unique.name,
                            columnNames: unique.columnNames,
                            isUnique: true
                        }));
                    }
                });
            }
            if (table.indices.length > 0) {
                const indicesSql = table.indices.map(index => {
                    const columnNames = index.columnNames.map(columnName => `\`${columnName}\``).join(", ");
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    let indexType = "";
                    if (index.isUnique)
                        indexType += "UNIQUE ";
                    if (index.isSpatial)
                        indexType += "SPATIAL ";
                    if (index.isFulltext)
                        indexType += "FULLTEXT ";
                    const indexParser = index.isFulltext && index.parser ? ` WITH PARSER ${index.parser}` : "";
                    return `${indexType}INDEX \`${index.name}\` (${columnNames})${indexParser}`;
                }).join(", ");
                sql += `, ${indicesSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `\`${columnName}\``).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\`${columnName}\``).join(", ");
                    let constraint = `CONSTRAINT \`${fk.name}\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            if (table.primaryColumns.length > 0) {
                const columnNames = table.primaryColumns.map(column => `\`${column.name}\``).join(", ");
                sql += `, PRIMARY KEY (${columnNames})`;
            }
            sql += `) ENGINE=${table.engine || "InnoDB"}`;
            return new Query_5.Query(sql);
        }
        /**
         * Builds drop table sql
         */
        dropTableSql(tableOrName) {
            return new Query_5.Query(`DROP TABLE ${this.escapePath(tableOrName)}`);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_5.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);
            }
            else {
                return new Query_5.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentDatabase = await this.getCurrentDatabase();
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", schema: currentDatabase, name: view.name, value: expression })
                .getQueryAndParameters();
            return new Query_5.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_5.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentDatabase = await this.getCurrentDatabase();
            const viewName = viewOrPath instanceof View_4.View ? viewOrPath.name : viewOrPath;
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("schema")} = :schema`, { schema: currentDatabase })
                .andWhere(`${qb.escape("name")} = :name`, { name: viewName })
                .getQueryAndParameters();
            return new Query_5.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `\`${columnName}\``).join(", ");
            let indexType = "";
            if (index.isUnique)
                indexType += "UNIQUE ";
            if (index.isSpatial)
                indexType += "SPATIAL ";
            if (index.isFulltext)
                indexType += "FULLTEXT ";
            const indexParser = index.isFulltext && index.parser ? ` WITH PARSER ${index.parser}` : "";
            return new Query_5.Query(`CREATE ${indexType}INDEX \`${index.name}\` ON ${this.escapePath(table)} (${columns})${indexParser}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = indexOrName instanceof TableIndex_4.TableIndex ? indexOrName.name : indexOrName;
            return new Query_5.Query(`DROP INDEX \`${indexName}\` ON ${this.escapePath(table)}`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const columnNamesString = columnNames.map(columnName => `\`${columnName}\``).join(", ");
            return new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            return new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
            let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            if (foreignKey.onDelete)
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            if (foreignKey.onUpdate)
                sql += ` ON UPDATE ${foreignKey.onUpdate}`;
            return new Query_5.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_4.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_5.Query(`ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${foreignKeyName}\``);
        }
        parseTableName(target) {
            const tableName = target instanceof Table_4.Table ? target.name : target;
            return {
                database: tableName.indexOf(".") !== -1 ? tableName.split(".")[0] : this.driver.database,
                tableName: tableName.indexOf(".") !== -1 ? tableName.split(".")[1] : tableName
            };
        }
        /**
         * Escapes a given comment so it's safe to include in a query.
         */
        escapeComment(comment) {
            if (!comment || comment.length === 0) {
                return `''`;
            }
            comment = comment
                .replace("\\", "\\\\") // MySQL allows escaping characters via backslashes
                .replace("'", "''")
                .replace("\0", ""); // Null bytes aren't allowed in comments
            return `'${comment}'`;
        }
        /**
         * Escapes given table or view path.
         */
        escapePath(target, disableEscape) {
            const tableName = target instanceof Table_4.Table || target instanceof View_4.View ? target.name : target;
            return tableName.split(".").map(i => disableEscape ? i : `\`${i}\``).join(".");
        }
        /**
         * Builds a part of query to create/change a column.
         */
        buildCreateColumnSql(column, skipPrimary, skipName = false) {
            let c = "";
            if (skipName) {
                c = this.connection.driver.createFullType(column);
            }
            else {
                c = `\`${column.name}\` ${this.connection.driver.createFullType(column)}`;
            }
            if (column.asExpression)
                c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : "VIRTUAL"}`;
            // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.
            if (column.zerofill) {
                c += " ZEROFILL";
            }
            else if (column.unsigned) {
                c += " UNSIGNED";
            }
            if (column.enum)
                c += ` (${column.enum.map(value => "'" + value.replace("'", "''") + "'").join(", ")})`;
            if (column.charset)
                c += ` CHARACTER SET "${column.charset}"`;
            if (column.collation)
                c += ` COLLATE "${column.collation}"`;
            const isMariaDb = this.driver.options.type === "mariadb";
            if (isMariaDb && column.asExpression && (column.generatedType || "VIRTUAL") === "VIRTUAL") {
                // do nothing - MariaDB does not support NULL/NOT NULL expressions for VIRTUAL columns
            }
            else {
                if (!column.isNullable)
                    c += " NOT NULL";
                if (column.isNullable)
                    c += " NULL";
            }
            if (column.isPrimary && !skipPrimary)
                c += " PRIMARY KEY";
            if (column.isGenerated && column.generationStrategy === "increment") // don't use skipPrimary here since updates can update already exist primary without auto inc.
                c += " AUTO_INCREMENT";
            if (column.comment && column.comment.length > 0)
                c += ` COMMENT ${this.escapeComment(column.comment)}`;
            if (column.default !== undefined && column.default !== null)
                c += ` DEFAULT ${column.default}`;
            if (column.onUpdate)
                c += ` ON UPDATE ${column.onUpdate}`;
            return c;
        }
        async getVersion() {
            const result = await this.query(`SELECT VERSION() AS \`version\``);
            return result[0]["version"];
        }
        /**
         * Checks if column display width is by default.
         */
        isDefaultColumnWidth(table, column, width) {
            // if table have metadata, we check if length is specified in column metadata
            if (this.connection.hasMetadata(table.name)) {
                const metadata = this.connection.getMetadata(table.name);
                const columnMetadata = metadata.findColumnWithDatabaseName(column.name);
                if (columnMetadata && columnMetadata.width)
                    return false;
            }
            const defaultWidthForType = this.connection.driver.dataTypeDefaults
                && this.connection.driver.dataTypeDefaults[column.type]
                && this.connection.driver.dataTypeDefaults[column.type].width;
            if (defaultWidthForType) {
                // In MariaDB & MySQL 5.7, the default widths of certain numeric types are 1 less than
                // the usual defaults when the column is unsigned.
                const typesWithReducedUnsignedDefault = ["int", "tinyint", "smallint", "mediumint"];
                const needsAdjustment = typesWithReducedUnsignedDefault.indexOf(column.type) !== -1;
                if (column.unsigned && needsAdjustment) {
                    return (defaultWidthForType - 1) === width;
                }
                else {
                    return defaultWidthForType === width;
                }
            }
            return false;
        }
    }
    exports.MysqlQueryRunner = MysqlQueryRunner;
});
define("typeorm/driver/mysql/MysqlDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/DriverUtils", "typeorm/driver/mysql/MysqlQueryRunner", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, ConnectionIsNotSetError_5, DriverPackageNotInstalledError_5, DriverUtils_5, MysqlQueryRunner_1, DateUtils_6, PlatformTools_7, RdbmsSchemaBuilder_5, OrmUtils_17, ApplyValueTransformers_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MysqlDriver = void 0;
    /**
     * Organizes communication with MySQL DBMS.
     */
    class MysqlDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm
             * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html
             */
            this.supportedDataTypes = [
                // numeric types
                "bit",
                "int",
                "integer",
                "tinyint",
                "smallint",
                "mediumint",
                "bigint",
                "float",
                "double",
                "double precision",
                "real",
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "bool",
                "boolean",
                // date and time types
                "date",
                "datetime",
                "timestamp",
                "time",
                "year",
                // string types
                "char",
                "nchar",
                "national char",
                "varchar",
                "nvarchar",
                "national varchar",
                "blob",
                "text",
                "tinyblob",
                "tinytext",
                "mediumblob",
                "mediumtext",
                "longblob",
                "longtext",
                "enum",
                "set",
                "binary",
                "varbinary",
                // json data type
                "json",
                // spatial data types
                "geometry",
                "point",
                "linestring",
                "polygon",
                "multipoint",
                "multilinestring",
                "multipolygon",
                "geometrycollection"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [
                "geometry",
                "point",
                "linestring",
                "polygon",
                "multipoint",
                "multilinestring",
                "multipolygon",
                "geometrycollection"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "char",
                "varchar",
                "nvarchar",
                "binary",
                "varbinary"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withWidthColumnTypes = [
                "bit",
                "tinyint",
                "smallint",
                "mediumint",
                "int",
                "integer",
                "bigint"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real",
                "time",
                "datetime",
                "timestamp"
            ];
            /**
             * Gets list of column data types that supports scale by a driver.
             */
            this.withScaleColumnTypes = [
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real"
            ];
            /**
             * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.
             */
            this.unsignedAndZerofillTypes = [
                "int",
                "integer",
                "smallint",
                "tinyint",
                "mediumint",
                "bigint",
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real"
            ];
            /**
             * ORM has special columns and we need to know what database column types should be for those columns.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "datetime",
                createDatePrecision: 6,
                createDateDefault: "CURRENT_TIMESTAMP(6)",
                updateDate: "datetime",
                updateDatePrecision: 6,
                updateDateDefault: "CURRENT_TIMESTAMP(6)",
                deleteDate: "datetime",
                deleteDatePrecision: 6,
                deleteDateNullable: true,
                version: "int",
                treeLevel: "int",
                migrationId: "int",
                migrationName: "varchar",
                migrationTimestamp: "bigint",
                cacheId: "int",
                cacheIdentifier: "varchar",
                cacheTime: "bigint",
                cacheDuration: "int",
                cacheQuery: "text",
                cacheResult: "text",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "text",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "varchar": { length: 255 },
                "nvarchar": { length: 255 },
                "national varchar": { length: 255 },
                "char": { length: 1 },
                "binary": { length: 1 },
                "varbinary": { length: 255 },
                "decimal": { precision: 10, scale: 0 },
                "dec": { precision: 10, scale: 0 },
                "numeric": { precision: 10, scale: 0 },
                "fixed": { precision: 10, scale: 0 },
                "float": { precision: 12 },
                "double": { precision: 22 },
                "time": { precision: 0 },
                "datetime": { precision: 0 },
                "timestamp": { precision: 0 },
                "bit": { width: 1 },
                "int": { width: 11 },
                "integer": { width: 11 },
                "tinyint": { width: 4 },
                "smallint": { width: 6 },
                "mediumint": { width: 9 },
                "bigint": { width: 20 }
            };
            /**
             * Max length allowed by MySQL for aliases.
             * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html
             */
            this.maxAliasLength = 63;
            this.connection = connection;
            this.options = Object.assign({ legacySpatialSupport: true }, connection.options);
            this.isReplicated = this.options.replication ? true : false;
            // load mysql package
            this.loadDependencies();
            this.database = this.options.replication ? this.options.replication.master.database : this.options.database;
            // validate options to make sure everything is set
            // todo: revisit validation with replication in mind
            // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)
            //     throw new DriverOptionNotSetError("socketPath and host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.database)
            //     throw new DriverOptionNotSetError("database");
            // todo: check what is going on when connection is setup without database and how to connect to a database then?
            // todo: provide options to auto-create a database if it does not exist yet
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         */
        async connect() {
            if (this.options.replication) {
                this.poolCluster = this.mysql.createPoolCluster(this.options.replication);
                this.options.replication.slaves.forEach((slave, index) => {
                    this.poolCluster.add("SLAVE" + index, this.createConnectionOptions(this.options, slave));
                });
                this.poolCluster.add("MASTER", this.createConnectionOptions(this.options, this.options.replication.master));
            }
            else {
                this.pool = await this.createPool(this.createConnectionOptions(this.options, this.options));
            }
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
            if (!this.poolCluster && !this.pool)
                return Promise.reject(new ConnectionIsNotSetError_5.ConnectionIsNotSetError("mysql"));
            if (this.poolCluster) {
                return new Promise((ok, fail) => {
                    this.poolCluster.end((err) => err ? fail(err) : ok());
                    this.poolCluster = undefined;
                });
            }
            if (this.pool) {
                return new Promise((ok, fail) => {
                    this.pool.end((err) => {
                        if (err)
                            return fail(err);
                        this.pool = undefined;
                        ok();
                    });
                });
            }
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_5.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new MysqlQueryRunner_1.MysqlQueryRunner(this, mode);
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const escapedParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);
            if (!parameters || !Object.keys(parameters).length)
                return [sql, escapedParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                if (key.substr(0, 4) === ":...") {
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (value instanceof Function) {
                    return value();
                }
                else {
                    escapedParameters.push(value);
                    return "?";
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, escapedParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return "`" + columnName + "`";
        }
        /**
         * Build full table name with database name, schema name and table name.
         * E.g. "myDB"."mySchema"."myTable"
         */
        buildTableName(tableName, schema, database) {
            return database ? `${database}.${tableName}` : tableName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_7.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_6.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_6.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "json") {
                return JSON.stringify(value);
            }
            else if (columnMetadata.type === "timestamp" || columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                return DateUtils_6.DateUtils.mixedDateToDate(value);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_6.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_6.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") {
                return "" + value;
            }
            else if (columnMetadata.type === "set") {
                return DateUtils_6.DateUtils.simpleArrayToString(value);
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_7.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean || columnMetadata.type === "bool" || columnMetadata.type === "boolean") {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                value = DateUtils_6.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_6.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "json") {
                value = typeof value === "string" ? JSON.parse(value) : value;
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_6.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_6.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_6.DateUtils.stringToSimpleJson(value);
            }
            else if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum")
                && columnMetadata.enum
                && !isNaN(value)
                && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {
                // convert to number if that exists in possible enum options
                value = parseInt(value);
            }
            else if (columnMetadata.type === "set") {
                value = DateUtils_6.DateUtils.stringToSimpleArray(value);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_7.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "integer") {
                return "int";
            }
            else if (column.type === String) {
                return "varchar";
            }
            else if (column.type === Date) {
                return "datetime";
            }
            else if (column.type === Buffer) {
                return "blob";
            }
            else if (column.type === Boolean) {
                return "tinyint";
            }
            else if (column.type === "uuid") {
                return "varchar";
            }
            else if (column.type === "json" && this.options.type === "mariadb") {
                /*
                 * MariaDB implements this as a LONGTEXT rather, as the JSON data type contradicts the SQL standard,
                 * and MariaDB's benchmarks indicate that performance is at least equivalent.
                 *
                 * @see https://mariadb.com/kb/en/json-data-type/
                 */
                return "longtext";
            }
            else if (column.type === "simple-array" || column.type === "simple-json") {
                return "text";
            }
            else if (column.type === "simple-enum") {
                return "enum";
            }
            else if (column.type === "double precision" || column.type === "real") {
                return "double";
            }
            else if (column.type === "dec" || column.type === "numeric" || column.type === "fixed") {
                return "decimal";
            }
            else if (column.type === "bool" || column.type === "boolean") {
                return "tinyint";
            }
            else if (column.type === "nvarchar" || column.type === "national varchar") {
                return "varchar";
            }
            else if (column.type === "nchar" || column.type === "national char") {
                return "char";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") && defaultValue !== undefined) {
                return `'${defaultValue}'`;
            }
            if ((columnMetadata.type === "set") && defaultValue !== undefined) {
                return `'${DateUtils_6.DateUtils.simpleArrayToString(defaultValue)}'`;
            }
            if (typeof defaultValue === "number") {
                return `'${defaultValue.toFixed(columnMetadata.scale)}'`;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "1" : "0";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else if (defaultValue === null) {
                return undefined;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            if (column.length)
                return column.length.toString();
            /**
             * fix https://github.com/typeorm/typeorm/issues/1139
             */
            if (column.generationStrategy === "uuid")
                return "36";
            switch (column.type) {
                case String:
                case "varchar":
                case "nvarchar":
                case "national varchar":
                    return "255";
                case "varbinary":
                    return "255";
                default:
                    return "";
            }
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types
            if (this.getColumnLength(column)) {
                type += `(${this.getColumnLength(column)})`;
            }
            else if (column.width) {
                type += `(${column.width})`;
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += `(${column.precision},${column.scale})`;
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += `(${column.precision})`;
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return new Promise((ok, fail) => {
                if (this.poolCluster) {
                    this.poolCluster.getConnection("MASTER", (err, dbConnection) => {
                        err ? fail(err) : ok(this.prepareDbConnection(dbConnection));
                    });
                }
                else if (this.pool) {
                    this.pool.getConnection((err, dbConnection) => {
                        err ? fail(err) : ok(this.prepareDbConnection(dbConnection));
                    });
                }
                else {
                    fail(new Error(`Connection is not established with mysql database`));
                }
            });
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.poolCluster)
                return this.obtainMasterConnection();
            return new Promise((ok, fail) => {
                this.poolCluster.getConnection("SLAVE*", (err, dbConnection) => {
                    err ? fail(err) : ok(dbConnection);
                });
            });
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult, entityIndex) {
            const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {
                let value;
                if (generatedColumn.generationStrategy === "increment" && insertResult.insertId) {
                    // NOTE: When multiple rows is inserted by a single INSERT statement,
                    // `insertId` is the value generated for the first inserted row only.
                    value = insertResult.insertId + entityIndex;
                    // } else if (generatedColumn.generationStrategy === "uuid") {
                    //     console.log("getting db value:", generatedColumn.databaseName);
                    //     value = generatedColumn.getEntityValue(uuidMap);
                }
                return OrmUtils_17.OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
            }, {});
            return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                // console.log("table:", columnMetadata.entityMetadata.tableName);
                // console.log("name:", tableColumn.name, columnMetadata.databaseName);
                // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                // console.log("length:", tableColumn.length, columnMetadata.length);
                // console.log("width:", tableColumn.width, columnMetadata.width);
                // console.log("precision:", tableColumn.precision, columnMetadata.precision);
                // console.log("scale:", tableColumn.scale, columnMetadata.scale);
                // console.log("zerofill:", tableColumn.zerofill, columnMetadata.zerofill);
                // console.log("unsigned:", tableColumn.unsigned, columnMetadata.unsigned);
                // console.log("asExpression:", tableColumn.asExpression, columnMetadata.asExpression);
                // console.log("generatedType:", tableColumn.generatedType, columnMetadata.generatedType);
                // console.log("comment:", tableColumn.comment, columnMetadata.comment);
                // console.log("default:", tableColumn.default, columnMetadata.default);
                // console.log("enum:", tableColumn.enum, columnMetadata.enum);
                // console.log("default changed:", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));
                // console.log("onUpdate:", tableColumn.onUpdate, columnMetadata.onUpdate);
                // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                // console.log((columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated));
                // console.log("==========================================");
                let columnMetadataLength = columnMetadata.length;
                if (!columnMetadataLength && columnMetadata.generationStrategy === "uuid") { // fixing #3374
                    columnMetadataLength = this.getColumnLength(columnMetadata);
                }
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadataLength
                    || tableColumn.width !== columnMetadata.width
                    || (columnMetadata.precision !== undefined && tableColumn.precision !== columnMetadata.precision)
                    || (columnMetadata.scale !== undefined && tableColumn.scale !== columnMetadata.scale)
                    || tableColumn.zerofill !== columnMetadata.zerofill
                    || tableColumn.unsigned !== columnMetadata.unsigned
                    || tableColumn.asExpression !== columnMetadata.asExpression
                    || tableColumn.generatedType !== columnMetadata.generatedType
                    || tableColumn.comment !== columnMetadata.comment
                    || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)
                    || (tableColumn.enum && columnMetadata.enum && !OrmUtils_17.OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + "")))
                    || tableColumn.onUpdate !== columnMetadata.onUpdate
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated);
            });
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return false;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return true;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "?";
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Loads all driver dependencies.
         */
        loadDependencies() {
            try {
                this.mysql = PlatformTools_7.PlatformTools.load("mysql"); // try to load first supported package
                /*
                 * Some frameworks (such as Jest) may mess up Node's require cache and provide garbage for the 'mysql' module
                 * if it was not installed. We check that the object we got actually contains something otherwise we treat
                 * it as if the `require` call failed.
                 *
                 * @see https://github.com/typeorm/typeorm/issues/1373
                 */
                if (Object.keys(this.mysql).length === 0) {
                    throw new Error("'mysql' was found but it is empty. Falling back to 'mysql2'.");
                }
            }
            catch (e) {
                try {
                    this.mysql = PlatformTools_7.PlatformTools.load("mysql2"); // try to load second supported package
                }
                catch (e) {
                    throw new DriverPackageNotInstalledError_5.DriverPackageNotInstalledError("Mysql", "mysql");
                }
            }
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        createConnectionOptions(options, credentials) {
            credentials = Object.assign({}, credentials, DriverUtils_5.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way
            // build connection options for the driver
            return Object.assign({}, {
                charset: options.charset,
                timezone: options.timezone,
                connectTimeout: options.connectTimeout,
                insecureAuth: options.insecureAuth,
                supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,
                bigNumberStrings: options.bigNumberStrings !== undefined ? options.bigNumberStrings : true,
                dateStrings: options.dateStrings,
                debug: options.debug,
                trace: options.trace,
                multipleStatements: options.multipleStatements,
                flags: options.flags
            }, {
                host: credentials.host,
                user: credentials.username,
                password: credentials.password,
                database: credentials.database,
                port: credentials.port,
                ssl: options.ssl
            }, options.acquireTimeout === undefined
                ? {}
                : { acquireTimeout: options.acquireTimeout }, options.extra || {});
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        createPool(connectionOptions) {
            // create a connection pool
            const pool = this.mysql.createPool(connectionOptions);
            // make sure connection is working fine
            return new Promise((ok, fail) => {
                // (issue #610) we make first connection to database to make sure if connection credentials are wrong
                // we give error before calling any other method that creates actual query runner
                pool.getConnection((err, connection) => {
                    if (err)
                        return pool.end(() => fail(err));
                    connection.release();
                    ok(pool);
                });
            });
        }
        /**
         * Attaches all required base handlers to a database connection, such as the unhandled error handler.
         */
        prepareDbConnection(connection) {
            const { logger } = this.connection;
            /*
              Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and
              cause the hosting app to crash.
             */
            if (connection.listeners("error").length === 0) {
                connection.on("error", (error) => logger.log("warn", `MySQL connection raised an error. ${error}`));
            }
            return connection;
        }
        /**
         * Checks if "DEFAULT" values in the column metadata and in the database are equal.
         */
        compareDefaultValues(columnMetadataValue, databaseValue) {
            if (typeof columnMetadataValue === "string" && typeof databaseValue === "string") {
                // we need to cut out "'" because in mysql we can understand returned value is a string or a function
                // as result compare cannot understand if default is really changed or not
                columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, "");
                databaseValue = databaseValue.replace(/^'+|'+$/g, "");
            }
            return columnMetadataValue === databaseValue;
        }
    }
    exports.MysqlDriver = MysqlDriver;
});
define("typeorm/driver/aurora-data-api/AuroraDataApiQueryRunner", ["require", "exports", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/schema-builder/view/View", "typeorm/driver/Query", "typeorm/util/OrmUtils", "typeorm/schema-builder/table/TableUnique", "typeorm/query-runner/BaseQueryRunner", "typeorm/subscriber/Broadcaster", "typeorm/subscriber/BroadcasterResult"], function (require, exports, TransactionAlreadyStartedError_5, TransactionNotStartedError_5, TableColumn_6, Table_5, TableForeignKey_5, TableIndex_5, QueryRunnerAlreadyReleasedError_5, View_5, Query_6, OrmUtils_18, TableUnique_5, BaseQueryRunner_5, Broadcaster_6, BroadcasterResult_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuroraDataApiQueryRunner = void 0;
    /**
     * Runs queries on a single mysql database connection.
     */
    class AuroraDataApiQueryRunner extends BaseQueryRunner_5.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, client) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.client = client;
            this.broadcaster = new Broadcaster_6.Broadcaster(this);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        async connect() {
            return {};
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            this.isReleased = true;
            if (this.databaseConnection)
                this.databaseConnection.release();
            return Promise.resolve();
        }
        /**
         * Starts transaction on the current connection.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_5.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            await this.client.startTransaction();
            const afterBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_5.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.client.commitTransaction();
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_5.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.client.rollbackTransaction();
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_7.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a raw SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_5.QueryRunnerAlreadyReleasedError();
            const result = await this.client.query(query, parameters);
            if (result.records) {
                return result.records;
            }
            return result;
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_5.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    const stream = databaseConnection.query(query, parameters);
                    if (onEnd)
                        stream.on("end", onEnd);
                    if (onError)
                        stream.on("error", onError);
                    ok(stream);
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            throw new Error(`MySql driver does not support table schemas`);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            const result = await this.query(`SELECT * FROM \`INFORMATION_SCHEMA\`.\`SCHEMATA\` WHERE \`SCHEMA_NAME\` = '${database}'`);
            return result.length ? true : false;
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            throw new Error(`MySql driver does not support table schemas`);
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`COLUMNS\` WHERE \`TABLE_SCHEMA\` = '${parsedTableName.database}' AND \`TABLE_NAME\` = '${parsedTableName.tableName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, column) {
            const parsedTableName = this.parseTableName(tableOrName);
            const columnName = column instanceof TableColumn_6.TableColumn ? column.name : column;
            const sql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`COLUMNS\` WHERE \`TABLE_SCHEMA\` = '${parsedTableName.database}' AND \`TABLE_NAME\` = '${parsedTableName.tableName}' AND \`COLUMN_NAME\` = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            const up = ifNotExist ? `CREATE DATABASE IF NOT EXISTS \`${database}\`` : `CREATE DATABASE \`${database}\``;
            const down = `DROP DATABASE \`${database}\``;
            await this.executeQueries(new Query_6.Query(up), new Query_6.Query(down));
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            const up = ifExist ? `DROP DATABASE IF EXISTS \`${database}\`` : `DROP DATABASE \`${database}\``;
            const down = `CREATE DATABASE \`${database}\``;
            await this.executeQueries(new Query_6.Query(up), new Query_6.Query(down));
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            throw new Error(`Schema create queries are not supported by MySql driver.`);
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist) {
            throw new Error(`Schema drop queries are not supported by MySql driver.`);
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order
            // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index
            // if it related to the foreign key.
            // createTable does not need separate method to create indices, because it create indices in the same query with table creation.
            table.indices.forEach(index => downQueries.push(this.dropIndexSql(table, index)));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            return this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drop the table.
         */
        async dropTable(target, ifExist, dropForeignKeys = true) {
            // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need
            // to perform drop queries for foreign keys and indices.
            if (ifExist) {
                const isTableExist = await this.hasTable(target);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const tableName = target instanceof Table_5.Table ? target.name : target;
            const table = await this.getCachedTable(tableName);
            const upQueries = [];
            const downQueries = [];
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            table.indices.forEach(index => upQueries.push(this.dropIndexSql(table, index)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_5.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames a table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_5.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            const dbName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = dbName ? `${dbName}.${newTableName}` : newTableName;
            // rename table
            upQueries.push(new Query_6.Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTable.name)}`));
            downQueries.push(new Query_6.Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTable.name)}`));
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const columnNames = index.columnNames.map(column => `\`${column}\``).join(", ");
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                let indexType = "";
                if (index.isUnique)
                    indexType += "UNIQUE ";
                if (index.isSpatial)
                    indexType += "SPATIAL ";
                if (index.isFulltext)
                    indexType += "FULLTEXT ";
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \`${index.name}\`, ADD ${indexType}INDEX \`${newIndexName}\` (${columnNames})`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \`${newIndexName}\`, ADD ${indexType}INDEX \`${index.name}\` (${columnNames})`));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraint
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
                const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);
                // build queries
                let up = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \`${foreignKey.name}\`, ADD CONSTRAINT \`${newForeignKeyName}\` FOREIGN KEY (${columnNames}) ` +
                    `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                if (foreignKey.onDelete)
                    up += ` ON DELETE ${foreignKey.onDelete}`;
                if (foreignKey.onUpdate)
                    up += ` ON UPDATE ${foreignKey.onUpdate}`;
                let down = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \`${newForeignKeyName}\`, ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                    `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                if (foreignKey.onDelete)
                    down += ` ON DELETE ${foreignKey.onDelete}`;
                if (foreignKey.onUpdate)
                    down += ` ON UPDATE ${foreignKey.onUpdate}`;
                upQueries.push(new Query_6.Query(up));
                downQueries.push(new Query_6.Query(down));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            await this.executeQueries(upQueries, downQueries);
            // rename old table and replace it in cached tabled;
            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;
            upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`));
            downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \`${column.name}\``));
            // create or update primary key constraint
            if (column.isPrimary && skipColumnLevelPrimary) {
                // if we already have generated column, we must temporary drop AUTO_INCREMENT property.
                const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${column.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(column, true)}`));
                }
                const primaryColumns = clonedTable.primaryColumns;
                let columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                primaryColumns.push(column);
                columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                // if we previously dropped AUTO_INCREMENT property, we must bring it back
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(column, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${column.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                }
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                const uniqueIndex = new TableIndex_5.TableIndex({
                    name: this.connection.namingStrategy.indexName(table.name, [column.name]),
                    columnNames: [column.name],
                    isUnique: true
                });
                clonedTable.indices.push(uniqueIndex);
                clonedTable.uniques.push(new TableUnique_5.TableUnique({
                    name: uniqueIndex.name,
                    columnNames: uniqueIndex.columnNames
                }));
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${column.name}\`)`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_6.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_6.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            await this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldColumnOrName instanceof TableColumn_6.TableColumn
                ? oldColumnOrName
                : table.columns.find(column => column.name === oldColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldColumnOrName}" was not found in the "${table.name}" table.`);
            if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid")
                || oldColumn.type !== newColumn.type
                || oldColumn.length !== newColumn.length
                || oldColumn.generatedType !== newColumn.generatedType) {
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (newColumn.name !== oldColumn.name) {
                    // We don't change any column properties, just rename it.
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${oldColumn.name}\` \`${newColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newColumn.name}\` \`${oldColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const columnNames = index.columnNames.map(column => `\`${column}\``).join(", ");
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        let indexType = "";
                        if (index.isUnique)
                            indexType += "UNIQUE ";
                        if (index.isSpatial)
                            indexType += "SPATIAL ";
                        if (index.isFulltext)
                            indexType += "FULLTEXT ";
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${index.name}\`, ADD ${indexType}INDEX \`${newIndexName}\` (${columnNames})`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${newIndexName}\`, ADD ${indexType}INDEX \`${index.name}\` (${columnNames})`));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
                        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);
                        // build queries
                        let up = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${foreignKey.name}\`, ADD CONSTRAINT \`${newForeignKeyName}\` FOREIGN KEY (${columnNames}) ` +
                            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                        if (foreignKey.onDelete)
                            up += ` ON DELETE ${foreignKey.onDelete}`;
                        if (foreignKey.onUpdate)
                            up += ` ON UPDATE ${foreignKey.onUpdate}`;
                        let down = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${newForeignKeyName}\`, ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
                        if (foreignKey.onDelete)
                            down += ` ON DELETE ${foreignKey.onDelete}`;
                        if (foreignKey.onUpdate)
                            down += ` ON UPDATE ${foreignKey.onUpdate}`;
                        upQueries.push(new Query_6.Query(up));
                        downQueries.push(new Query_6.Query(down));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (this.isColumnChanged(oldColumn, newColumn, true)) {
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${oldColumn.name}\` ${this.buildCreateColumnSql(newColumn, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newColumn.name}\` ${this.buildCreateColumnSql(oldColumn, true)}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
                    const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                    if (generatedColumn) {
                        const nonGeneratedColumn = generatedColumn.clone();
                        nonGeneratedColumn.isGenerated = false;
                        nonGeneratedColumn.generationStrategy = undefined;
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                    }
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                            upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                        }
                    }
                    // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back
                    if (generatedColumn) {
                        const nonGeneratedColumn = generatedColumn.clone();
                        nonGeneratedColumn.isGenerated = false;
                        nonGeneratedColumn.generationStrategy = undefined;
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueIndex = new TableIndex_5.TableIndex({
                            name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name],
                            isUnique: true
                        });
                        clonedTable.indices.push(uniqueIndex);
                        clonedTable.uniques.push(new TableUnique_5.TableUnique({
                            name: uniqueIndex.name,
                            columnNames: uniqueIndex.columnNames
                        }));
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${newColumn.name}\`)`));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
                    }
                    else {
                        const uniqueIndex = clonedTable.indices.find(index => {
                            return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);
                        const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex.name);
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);
                        upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${uniqueIndex.name}\``));
                        downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${uniqueIndex.name}\` (\`${newColumn.name}\`)`));
                    }
                }
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_6.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
                const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
                if (generatedColumn) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                }
                // dropping primary key constraint
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\`${primaryColumn.name}\``).join(", ");
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\`${primaryColumn.name}\``).join(", ");
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));
                }
                // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back
                if (generatedColumn && generatedColumn.name !== column.name) {
                    const nonGeneratedColumn = generatedColumn.clone();
                    nonGeneratedColumn.isGenerated = false;
                    nonGeneratedColumn.generationStrategy = undefined;
                    upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
                    downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                // we splice constraints both from table uniques and indices.
                const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);
                const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);
                if (foundUnique)
                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);
                const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);
                const foundIndex = clonedTable.indices.find(index => index.name === indexName);
                if (foundIndex)
                    clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \`${indexName}\``));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \`${indexName}\` (\`${column.name}\`)`));
            }
            upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \`${column.name}\``));
            downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, true)}`));
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            const down = this.dropPrimaryKeySql(table);
            await this.executeQueries(up, down);
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.
            const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === "increment");
            if (generatedColumn) {
                const nonGeneratedColumn = generatedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${generatedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(generatedColumn, true)}`));
            }
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const columnNames = primaryColumns.map(column => `\`${column.name}\``).join(", ");
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const columnNamesString = columnNames.map(columnName => `\`${columnName}\``).join(", ");
            upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));
            // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back
            const newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(column => column.isGenerated && column.generationStrategy === "increment");
            if (newOrExistGeneratedColumn) {
                const nonGeneratedColumn = newOrExistGeneratedColumn.clone();
                nonGeneratedColumn.isGenerated = false;
                nonGeneratedColumn.generationStrategy = undefined;
                upQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${nonGeneratedColumn.name}\` ${this.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`));
                downQueries.push(new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \`${newOrExistGeneratedColumn.name}\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));
                // if column changed to generated, we must update it in table
                const changedGeneratedColumn = clonedTable.columns.find(column => column.name === newOrExistGeneratedColumn.name);
                changedGeneratedColumn.isGenerated = true;
                changedGeneratedColumn.generationStrategy = "increment";
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops an unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`MySql does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Creates a new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            throw new Error(`MySql does not support check constraints.`);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`MySql does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Drops a foreign key.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_5.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(table, index);
            await this.executeQueries(up, down);
            table.addIndex(index, true);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_5.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_5.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index, true);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableOrName) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tableOrName)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         * Be careful using this method and avoid using it in production or migrations
         * (because it can clear all your database).
         */
        async clearDatabase(database) {
            const dbName = database ? database : this.driver.database;
            if (dbName) {
                const isDatabaseExist = await this.hasDatabase(dbName);
                if (!isDatabaseExist)
                    return Promise.resolve();
            }
            else {
                throw new Error(`Can not clear database. No database is specified`);
            }
            await this.startTransaction();
            try {
                const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \`', table_schema, '\`.\`', table_name, '\`') AS \`query\` FROM \`INFORMATION_SCHEMA\`.\`VIEWS\` WHERE \`TABLE_SCHEMA\` = '${dbName}'`;
                const dropViewQueries = await this.query(selectViewDropsQuery);
                await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;
                const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \`', table_schema, '\`.\`', table_name, '\`') AS \`query\` FROM \`INFORMATION_SCHEMA\`.\`TABLES\` WHERE \`TABLE_SCHEMA\` = '${dbName}'`;
                const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;
                await this.query(disableForeignKeysCheckQuery);
                const dropQueries = await this.query(dropTablesQuery);
                await Promise.all(dropQueries.map(query => this.query(query["query"])));
                await this.query(enableForeignKeysCheckQuery);
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Returns current database.
         */
        async getCurrentDatabase() {
            const currentDBQuery = await this.query(`SELECT DATABASE() AS \`db_name\``);
            return currentDBQuery[0]["db_name"];
        }
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentDatabase = await this.getCurrentDatabase();
            const viewsCondition = viewNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `(\`t\`.\`schema\` = '${database}' AND \`t\`.\`name\` = '${name}')`;
            }).join(" OR ");
            const query = `SELECT \`t\`.*, \`v\`.\`check_option\` FROM ${this.escapePath(this.getTypeormMetadataTableName())} \`t\` ` +
                `INNER JOIN \`information_schema\`.\`views\` \`v\` ON \`v\`.\`table_schema\` = \`t\`.\`schema\` AND \`v\`.\`table_name\` = \`t\`.\`name\` WHERE \`t\`.\`type\` = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_5.View();
                const db = dbView["schema"] === currentDatabase ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], undefined, db);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const currentDatabase = await this.getCurrentDatabase();
            const tablesCondition = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `(\`TABLE_SCHEMA\` = '${database}' AND \`TABLE_NAME\` = '${name}')`;
            }).join(" OR ");
            const tablesSql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`TABLES\` WHERE ` + tablesCondition;
            const columnsSql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`COLUMNS\` WHERE ` + tablesCondition;
            const primaryKeySql = `SELECT * FROM \`INFORMATION_SCHEMA\`.\`KEY_COLUMN_USAGE\` WHERE \`CONSTRAINT_NAME\` = 'PRIMARY' AND (${tablesCondition})`;
            const collationsSql = `SELECT \`SCHEMA_NAME\`, \`DEFAULT_CHARACTER_SET_NAME\` as \`CHARSET\`, \`DEFAULT_COLLATION_NAME\` AS \`COLLATION\` FROM \`INFORMATION_SCHEMA\`.\`SCHEMATA\``;
            const indicesCondition = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `(\`s\`.\`TABLE_SCHEMA\` = '${database}' AND \`s\`.\`TABLE_NAME\` = '${name}')`;
            }).join(" OR ");
            const indicesSql = `SELECT \`s\`.* FROM \`INFORMATION_SCHEMA\`.\`STATISTICS\` \`s\` ` +
                `LEFT JOIN \`INFORMATION_SCHEMA\`.\`REFERENTIAL_CONSTRAINTS\` \`rc\` ON \`s\`.\`INDEX_NAME\` = \`rc\`.\`CONSTRAINT_NAME\` ` +
                `WHERE (${indicesCondition}) AND \`s\`.\`INDEX_NAME\` != 'PRIMARY' AND \`rc\`.\`CONSTRAINT_NAME\` IS NULL`;
            const foreignKeysCondition = tableNames.map(tableName => {
                let [database, name] = tableName.split(".");
                if (!name) {
                    name = database;
                    database = this.driver.database || currentDatabase;
                }
                return `(\`kcu\`.\`TABLE_SCHEMA\` = '${database}' AND \`kcu\`.\`TABLE_NAME\` = '${name}')`;
            }).join(" OR ");
            const foreignKeysSql = `SELECT \`kcu\`.\`TABLE_SCHEMA\`, \`kcu\`.\`TABLE_NAME\`, \`kcu\`.\`CONSTRAINT_NAME\`, \`kcu\`.\`COLUMN_NAME\`, \`kcu\`.\`REFERENCED_TABLE_SCHEMA\`, ` +
                `\`kcu\`.\`REFERENCED_TABLE_NAME\`, \`kcu\`.\`REFERENCED_COLUMN_NAME\`, \`rc\`.\`DELETE_RULE\` \`ON_DELETE\`, \`rc\`.\`UPDATE_RULE\` \`ON_UPDATE\` ` +
                `FROM \`INFORMATION_SCHEMA\`.\`KEY_COLUMN_USAGE\` \`kcu\` ` +
                `INNER JOIN \`INFORMATION_SCHEMA\`.\`REFERENTIAL_CONSTRAINTS\` \`rc\` ON \`rc\`.\`constraint_name\` = \`kcu\`.\`constraint_name\` ` +
                `WHERE ` + foreignKeysCondition;
            const [dbTables, dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(primaryKeySql),
                this.query(collationsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql)
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create tables for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_5.Table();
                const dbCollation = dbCollations.find(coll => coll["SCHEMA_NAME"] === dbTable["TABLE_SCHEMA"]);
                const defaultCollation = dbCollation["COLLATION"];
                const defaultCharset = dbCollation["CHARSET"];
                // We do not need to join database name, when database is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const db = dbTable["TABLE_SCHEMA"] === currentDatabase ? undefined : dbTable["TABLE_SCHEMA"];
                table.name = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, db);
                const tableFullName = this.driver.buildTableName(dbTable["TABLE_NAME"], undefined, dbTable["TABLE_SCHEMA"]);
                // create columns from the loaded columns
                table.columns = dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["TABLE_NAME"], undefined, dbColumn["TABLE_SCHEMA"]) === tableFullName)
                    .map(dbColumn => {
                    const columnUniqueIndex = dbIndices.find(dbIndex => {
                        const indexTableFullName = this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]);
                        if (indexTableFullName !== tableFullName) {
                            return false;
                        }
                        // Index is not for this column
                        if (dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"]) {
                            return false;
                        }
                        const nonUnique = parseInt(dbIndex["NON_UNIQUE"], 10);
                        return nonUnique === 0;
                    });
                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);
                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices
                        .some(index => index.name === columnUniqueIndex["INDEX_NAME"] && index.synchronize === false);
                    const isConstraintComposite = columnUniqueIndex
                        ? !!dbIndices.find(dbIndex => dbIndex["INDEX_NAME"] === columnUniqueIndex["INDEX_NAME"] && dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"])
                        : false;
                    const tableColumn = new TableColumn_6.TableColumn();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE"].toLowerCase();
                    if (this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {
                        const width = dbColumn["COLUMN_TYPE"].substring(dbColumn["COLUMN_TYPE"].indexOf("(") + 1, dbColumn["COLUMN_TYPE"].indexOf(")"));
                        tableColumn.width = width && !this.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;
                    }
                    if (dbColumn["COLUMN_DEFAULT"] === null
                        || dbColumn["COLUMN_DEFAULT"] === undefined) {
                        tableColumn.default = undefined;
                    }
                    else {
                        tableColumn.default = dbColumn["COLUMN_DEFAULT"] === "CURRENT_TIMESTAMP" ? dbColumn["COLUMN_DEFAULT"] : `'${dbColumn["COLUMN_DEFAULT"]}'`;
                    }
                    if (dbColumn["EXTRA"].indexOf("on update") !== -1) {
                        tableColumn.onUpdate = dbColumn["EXTRA"].substring(dbColumn["EXTRA"].indexOf("on update") + 10);
                    }
                    if (dbColumn["GENERATION_EXPRESSION"]) {
                        tableColumn.asExpression = dbColumn["GENERATION_EXPRESSION"];
                        tableColumn.generatedType = dbColumn["EXTRA"].indexOf("VIRTUAL") !== -1 ? "VIRTUAL" : "STORED";
                    }
                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;
                    tableColumn.isNullable = dbColumn["IS_NULLABLE"] === "YES";
                    tableColumn.isPrimary = dbPrimaryKeys.some(dbPrimaryKey => {
                        return this.driver.buildTableName(dbPrimaryKey["TABLE_NAME"], undefined, dbPrimaryKey["TABLE_SCHEMA"]) === tableFullName && dbPrimaryKey["COLUMN_NAME"] === tableColumn.name;
                    });
                    tableColumn.zerofill = dbColumn["COLUMN_TYPE"].indexOf("zerofill") !== -1;
                    tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn["COLUMN_TYPE"].indexOf("unsigned") !== -1;
                    tableColumn.isGenerated = dbColumn["EXTRA"].indexOf("auto_increment") !== -1;
                    if (tableColumn.isGenerated)
                        tableColumn.generationStrategy = "increment";
                    tableColumn.comment = dbColumn["COLUMN_COMMENT"];
                    if (dbColumn["CHARACTER_SET_NAME"])
                        tableColumn.charset = dbColumn["CHARACTER_SET_NAME"] === defaultCharset ? undefined : dbColumn["CHARACTER_SET_NAME"];
                    if (dbColumn["COLLATION_NAME"])
                        tableColumn.collation = dbColumn["COLLATION_NAME"] === defaultCollation ? undefined : dbColumn["COLLATION_NAME"];
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["CHARACTER_MAXIMUM_LENGTH"]) {
                        const length = dbColumn["CHARACTER_MAXIMUM_LENGTH"].toString();
                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                    }
                    if (tableColumn.type === "decimal" || tableColumn.type === "double" || tableColumn.type === "float") {
                        if (dbColumn["NUMERIC_PRECISION"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["NUMERIC_PRECISION"]))
                            tableColumn.precision = parseInt(dbColumn["NUMERIC_PRECISION"]);
                        if (dbColumn["NUMERIC_SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["NUMERIC_SCALE"]))
                            tableColumn.scale = parseInt(dbColumn["NUMERIC_SCALE"]);
                    }
                    if (tableColumn.type === "enum" || tableColumn.type === "simple-enum") {
                        const colType = dbColumn["COLUMN_TYPE"];
                        const items = colType.substring(colType.indexOf("(") + 1, colType.indexOf(")")).split(",");
                        tableColumn.enum = items.map(item => {
                            return item.substring(1, item.length - 1);
                        });
                        tableColumn.length = "";
                    }
                    if ((tableColumn.type === "datetime" || tableColumn.type === "time" || tableColumn.type === "timestamp")
                        && dbColumn["DATETIME_PRECISION"] !== null && dbColumn["DATETIME_PRECISION"] !== undefined
                        && !this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn["DATETIME_PRECISION"]))) {
                        tableColumn.precision = parseInt(dbColumn["DATETIME_PRECISION"]);
                    }
                    return tableColumn;
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_18.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["TABLE_NAME"], undefined, dbForeignKey["TABLE_SCHEMA"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["CONSTRAINT_NAME"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    // if referenced table located in currently used db, we don't need to concat db name to table name.
                    const database = dbForeignKey["REFERENCED_TABLE_SCHEMA"] === currentDatabase ? undefined : dbForeignKey["REFERENCED_TABLE_SCHEMA"];
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["REFERENCED_TABLE_NAME"], undefined, database);
                    return new TableForeignKey_5.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["ON_DELETE"],
                        onUpdate: dbForeignKey["ON_UPDATE"]
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_18.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["TABLE_NAME"], undefined, dbIndex["TABLE_SCHEMA"]) === tableFullName;
                }), dbIndex => dbIndex["INDEX_NAME"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => {
                        return index["TABLE_SCHEMA"] === constraint["TABLE_SCHEMA"]
                            && index["TABLE_NAME"] === constraint["TABLE_NAME"]
                            && index["INDEX_NAME"] === constraint["INDEX_NAME"];
                    });
                    const nonUnique = parseInt(constraint["NON_UNIQUE"], 10);
                    return new TableIndex_5.TableIndex({
                        table: table,
                        name: constraint["INDEX_NAME"],
                        columnNames: indices.map(i => i["COLUMN_NAME"]),
                        isUnique: nonUnique === 0,
                        isSpatial: constraint["INDEX_TYPE"] === "SPATIAL",
                        isFulltext: constraint["INDEX_TYPE"] === "FULLTEXT"
                    });
                });
                return table;
            }));
        }
        /**
         * Builds create table sql
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, true)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.
            // if we mark column as Unique, it means that we create UNIQUE INDEX.
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueIndexExist = table.indices.some(index => {
                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;
                });
                const isUniqueConstraintExist = table.uniques.some(unique => {
                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;
                });
                if (!isUniqueIndexExist && !isUniqueConstraintExist)
                    table.indices.push(new TableIndex_5.TableIndex({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name],
                        isUnique: true
                    }));
            });
            // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.
            if (table.uniques.length > 0) {
                table.uniques.forEach(unique => {
                    const uniqueExist = table.indices.some(index => index.name === unique.name);
                    if (!uniqueExist) {
                        table.indices.push(new TableIndex_5.TableIndex({
                            name: unique.name,
                            columnNames: unique.columnNames,
                            isUnique: true
                        }));
                    }
                });
            }
            if (table.indices.length > 0) {
                const indicesSql = table.indices.map(index => {
                    const columnNames = index.columnNames.map(columnName => `\`${columnName}\``).join(", ");
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    let indexType = "";
                    if (index.isUnique)
                        indexType += "UNIQUE ";
                    if (index.isSpatial)
                        indexType += "SPATIAL ";
                    if (index.isFulltext)
                        indexType += "FULLTEXT ";
                    return `${indexType}INDEX \`${index.name}\` (${columnNames})`;
                }).join(", ");
                sql += `, ${indicesSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `\`${columnName}\``).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\`${columnName}\``).join(", ");
                    let constraint = `CONSTRAINT \`${fk.name}\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            if (table.primaryColumns.length > 0) {
                const columnNames = table.primaryColumns.map(column => `\`${column.name}\``).join(", ");
                sql += `, PRIMARY KEY (${columnNames})`;
            }
            sql += `) ENGINE=${table.engine || "InnoDB"}`;
            return new Query_6.Query(sql);
        }
        /**
         * Builds drop table sql
         */
        dropTableSql(tableOrName) {
            return new Query_6.Query(`DROP TABLE ${this.escapePath(tableOrName)}`);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_6.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);
            }
            else {
                return new Query_6.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentDatabase = await this.getCurrentDatabase();
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", schema: currentDatabase, name: view.name, value: expression })
                .getQueryAndParameters();
            return new Query_6.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_6.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentDatabase = await this.getCurrentDatabase();
            const viewName = viewOrPath instanceof View_5.View ? viewOrPath.name : viewOrPath;
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("schema")} = :schema`, { schema: currentDatabase })
                .andWhere(`${qb.escape("name")} = :name`, { name: viewName })
                .getQueryAndParameters();
            return new Query_6.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `\`${columnName}\``).join(", ");
            let indexType = "";
            if (index.isUnique)
                indexType += "UNIQUE ";
            if (index.isSpatial)
                indexType += "SPATIAL ";
            if (index.isFulltext)
                indexType += "FULLTEXT ";
            return new Query_6.Query(`CREATE ${indexType}INDEX \`${index.name}\` ON ${this.escapePath(table)} (${columns})`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = indexOrName instanceof TableIndex_5.TableIndex ? indexOrName.name : indexOrName;
            return new Query_6.Query(`DROP INDEX \`${indexName}\` ON ${this.escapePath(table)}`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const columnNamesString = columnNames.map(columnName => `\`${columnName}\``).join(", ");
            return new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            return new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `\`${column}\``).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\`${column}\``).join(",");
            let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \`${foreignKey.name}\` FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            if (foreignKey.onDelete)
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            if (foreignKey.onUpdate)
                sql += ` ON UPDATE ${foreignKey.onUpdate}`;
            return new Query_6.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_5.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_6.Query(`ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \`${foreignKeyName}\``);
        }
        parseTableName(target) {
            const tableName = target instanceof Table_5.Table ? target.name : target;
            return {
                database: tableName.indexOf(".") !== -1 ? tableName.split(".")[0] : this.driver.database,
                tableName: tableName.indexOf(".") !== -1 ? tableName.split(".")[1] : tableName
            };
        }
        /**
         * Escapes given table or view path.
         */
        escapePath(target, disableEscape) {
            const tableName = target instanceof Table_5.Table || target instanceof View_5.View ? target.name : target;
            return tableName.split(".").map(i => disableEscape ? i : `\`${i}\``).join(".");
        }
        /**
         * Builds a part of query to create/change a column.
         */
        buildCreateColumnSql(column, skipPrimary, skipName = false) {
            let c = "";
            if (skipName) {
                c = this.connection.driver.createFullType(column);
            }
            else {
                c = `\`${column.name}\` ${this.connection.driver.createFullType(column)}`;
            }
            if (column.asExpression)
                c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : "VIRTUAL"}`;
            // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.
            if (column.zerofill) {
                c += " ZEROFILL";
            }
            else if (column.unsigned) {
                c += " UNSIGNED";
            }
            if (column.enum)
                c += ` (${column.enum.map(value => "'" + value + "'").join(", ")})`;
            if (column.charset)
                c += ` CHARACTER SET "${column.charset}"`;
            if (column.collation)
                c += ` COLLATE "${column.collation}"`;
            if (!column.isNullable)
                c += " NOT NULL";
            if (column.isNullable)
                c += " NULL";
            if (column.isPrimary && !skipPrimary)
                c += " PRIMARY KEY";
            if (column.isGenerated && column.generationStrategy === "increment") // don't use skipPrimary here since updates can update already exist primary without auto inc.
                c += " AUTO_INCREMENT";
            if (column.comment)
                c += ` COMMENT '${column.comment}'`;
            if (column.default !== undefined && column.default !== null)
                c += ` DEFAULT ${column.default}`;
            if (column.onUpdate)
                c += ` ON UPDATE ${column.onUpdate}`;
            return c;
        }
        /**
         * Checks if column display width is by default.
         */
        isDefaultColumnWidth(table, column, width) {
            // if table have metadata, we check if length is specified in column metadata
            if (this.connection.hasMetadata(table.name)) {
                const metadata = this.connection.getMetadata(table.name);
                const columnMetadata = metadata.findColumnWithDatabaseName(column.name);
                if (columnMetadata && columnMetadata.width)
                    return false;
            }
            const defaultWidthForType = this.connection.driver.dataTypeDefaults
                && this.connection.driver.dataTypeDefaults[column.type]
                && this.connection.driver.dataTypeDefaults[column.type].width;
            if (defaultWidthForType) {
                return defaultWidthForType === width;
            }
            return false;
        }
    }
    exports.AuroraDataApiQueryRunner = AuroraDataApiQueryRunner;
});
define("typeorm/driver/aurora-data-api/AuroraDataApiDriver", ["require", "exports", "typeorm/driver/DriverUtils", "typeorm/driver/aurora-data-api/AuroraDataApiQueryRunner", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, DriverUtils_6, AuroraDataApiQueryRunner_1, DateUtils_7, PlatformTools_8, RdbmsSchemaBuilder_6, OrmUtils_19, ApplyValueTransformers_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuroraDataApiDriver = void 0;
    /**
     * Organizes communication with MySQL DBMS.
     */
    class AuroraDataApiDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm
             * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html
             */
            this.supportedDataTypes = [
                // numeric types
                "bit",
                "int",
                "integer",
                "tinyint",
                "smallint",
                "mediumint",
                "bigint",
                "float",
                "double",
                "double precision",
                "real",
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "bool",
                "boolean",
                // date and time types
                "date",
                "datetime",
                "timestamp",
                "time",
                "year",
                // string types
                "char",
                "nchar",
                "national char",
                "varchar",
                "nvarchar",
                "national varchar",
                "blob",
                "text",
                "tinyblob",
                "tinytext",
                "mediumblob",
                "mediumtext",
                "longblob",
                "longtext",
                "enum",
                "binary",
                "varbinary",
                // json data type
                "json",
                // spatial data types
                "geometry",
                "point",
                "linestring",
                "polygon",
                "multipoint",
                "multilinestring",
                "multipolygon",
                "geometrycollection"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [
                "geometry",
                "point",
                "linestring",
                "polygon",
                "multipoint",
                "multilinestring",
                "multipolygon",
                "geometrycollection"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "char",
                "varchar",
                "nvarchar",
                "binary",
                "varbinary"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withWidthColumnTypes = [
                "bit",
                "tinyint",
                "smallint",
                "mediumint",
                "int",
                "integer",
                "bigint"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real",
                "time",
                "datetime",
                "timestamp"
            ];
            /**
             * Gets list of column data types that supports scale by a driver.
             */
            this.withScaleColumnTypes = [
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real"
            ];
            /**
             * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.
             */
            this.unsignedAndZerofillTypes = [
                "int",
                "integer",
                "smallint",
                "tinyint",
                "mediumint",
                "bigint",
                "decimal",
                "dec",
                "numeric",
                "fixed",
                "float",
                "double",
                "double precision",
                "real"
            ];
            /**
             * ORM has special columns and we need to know what database column types should be for those columns.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "datetime",
                createDatePrecision: 6,
                createDateDefault: "CURRENT_TIMESTAMP(6)",
                updateDate: "datetime",
                updateDatePrecision: 6,
                updateDateDefault: "CURRENT_TIMESTAMP(6)",
                deleteDate: "datetime",
                deleteDatePrecision: 6,
                deleteDateNullable: true,
                version: "int",
                treeLevel: "int",
                migrationId: "int",
                migrationName: "varchar",
                migrationTimestamp: "bigint",
                cacheId: "int",
                cacheIdentifier: "varchar",
                cacheTime: "bigint",
                cacheDuration: "int",
                cacheQuery: "text",
                cacheResult: "text",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "text",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "varchar": { length: 255 },
                "nvarchar": { length: 255 },
                "national varchar": { length: 255 },
                "char": { length: 1 },
                "binary": { length: 1 },
                "varbinary": { length: 255 },
                "decimal": { precision: 10, scale: 0 },
                "dec": { precision: 10, scale: 0 },
                "numeric": { precision: 10, scale: 0 },
                "fixed": { precision: 10, scale: 0 },
                "float": { precision: 12 },
                "double": { precision: 22 },
                "time": { precision: 0 },
                "datetime": { precision: 0 },
                "timestamp": { precision: 0 },
                "bit": { width: 1 },
                "int": { width: 11 },
                "integer": { width: 11 },
                "tinyint": { width: 4 },
                "smallint": { width: 6 },
                "mediumint": { width: 9 },
                "bigint": { width: 20 }
            };
            /**
             * Max length allowed by MySQL for aliases.
             * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html
             */
            this.maxAliasLength = 63;
            this.connection = connection;
            this.options = connection.options;
            // load mysql package
            this.loadDependencies();
            // validate options to make sure everything is set
            // todo: revisit validation with replication in mind
            // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)
            //     throw new DriverOptionNotSetError("socketPath and host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.database)
            //     throw new DriverOptionNotSetError("database");
            // todo: check what is going on when connection is setup without database and how to connect to a database then?
            // todo: provide options to auto-create a database if it does not exist yet
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         */
        async connect() {
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_6.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new AuroraDataApiQueryRunner_1.AuroraDataApiQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions));
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const escapedParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);
            if (!parameters || !Object.keys(parameters).length)
                return [sql, escapedParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                if (key.substr(0, 4) === ":...") {
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (value instanceof Function) {
                    return value();
                }
                else {
                    escapedParameters.push(value);
                    return "?";
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, escapedParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return "`" + columnName + "`";
        }
        /**
         * Build full table name with database name, schema name and table name.
         * E.g. "myDB"."mySchema"."myTable"
         */
        buildTableName(tableName, schema, database) {
            return database ? `${database}.${tableName}` : tableName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_8.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_7.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_7.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "json") {
                return JSON.stringify(value);
            }
            else if (columnMetadata.type === "timestamp" || columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                return DateUtils_7.DateUtils.mixedDateToDate(value);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_7.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_7.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") {
                return "" + value;
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_8.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean || columnMetadata.type === "bool" || columnMetadata.type === "boolean") {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime" || columnMetadata.type === Date) {
                value = DateUtils_7.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_7.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "json") {
                value = typeof value === "string" ? JSON.parse(value) : value;
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_7.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_7.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_7.DateUtils.stringToSimpleJson(value);
            }
            else if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum")
                && columnMetadata.enum
                && !isNaN(value)
                && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {
                // convert to number if that exists in possible enum options
                value = parseInt(value);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_8.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "integer") {
                return "int";
            }
            else if (column.type === String) {
                return "varchar";
            }
            else if (column.type === Date) {
                return "datetime";
            }
            else if (column.type === Buffer) {
                return "blob";
            }
            else if (column.type === Boolean) {
                return "tinyint";
            }
            else if (column.type === "uuid") {
                return "varchar";
            }
            else if (column.type === "simple-array" || column.type === "simple-json") {
                return "text";
            }
            else if (column.type === "simple-enum") {
                return "enum";
            }
            else if (column.type === "double precision" || column.type === "real") {
                return "double";
            }
            else if (column.type === "dec" || column.type === "numeric" || column.type === "fixed") {
                return "decimal";
            }
            else if (column.type === "bool" || column.type === "boolean") {
                return "tinyint";
            }
            else if (column.type === "nvarchar" || column.type === "national varchar") {
                return "varchar";
            }
            else if (column.type === "nchar" || column.type === "national char") {
                return "char";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") && defaultValue !== undefined) {
                return `'${defaultValue}'`;
            }
            if (typeof defaultValue === "number") {
                return "" + defaultValue;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "1" : "0";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            if (column.length)
                return column.length.toString();
            /**
             * fix https://github.com/typeorm/typeorm/issues/1139
             */
            if (column.generationStrategy === "uuid")
                return "36";
            switch (column.type) {
                case String:
                case "varchar":
                case "nvarchar":
                case "national varchar":
                    return "255";
                case "varbinary":
                    return "255";
                default:
                    return "";
            }
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types
            if (this.getColumnLength(column)) {
                type += `(${this.getColumnLength(column)})`;
            }
            else if (column.width) {
                type += `(${column.width})`;
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += `(${column.precision},${column.scale})`;
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += `(${column.precision})`;
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return new Promise((ok, fail) => {
                if (this.poolCluster) {
                    this.poolCluster.getConnection("MASTER", (err, dbConnection) => {
                        err ? fail(err) : ok(this.prepareDbConnection(dbConnection));
                    });
                }
                else if (this.pool) {
                    this.pool.getConnection((err, dbConnection) => {
                        err ? fail(err) : ok(this.prepareDbConnection(dbConnection));
                    });
                }
                else {
                    fail(new Error(`Connection is not established with mysql database`));
                }
            });
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.poolCluster)
                return this.obtainMasterConnection();
            return new Promise((ok, fail) => {
                this.poolCluster.getConnection("SLAVE*", (err, dbConnection) => {
                    err ? fail(err) : ok(dbConnection);
                });
            });
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult) {
            const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {
                let value;
                if (generatedColumn.generationStrategy === "increment" && insertResult.insertId) {
                    value = insertResult.insertId;
                    // } else if (generatedColumn.generationStrategy === "uuid") {
                    //     console.log("getting db value:", generatedColumn.databaseName);
                    //     value = generatedColumn.getEntityValue(uuidMap);
                }
                return OrmUtils_19.OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
            }, {});
            return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                // console.log("table:", columnMetadata.entityMetadata.tableName);
                // console.log("name:", tableColumn.name, columnMetadata.databaseName);
                // console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                // console.log("length:", tableColumn.length, columnMetadata.length);
                // console.log("width:", tableColumn.width, columnMetadata.width);
                // console.log("precision:", tableColumn.precision, columnMetadata.precision);
                // console.log("scale:", tableColumn.scale, columnMetadata.scale);
                // console.log("zerofill:", tableColumn.zerofill, columnMetadata.zerofill);
                // console.log("unsigned:", tableColumn.unsigned, columnMetadata.unsigned);
                // console.log("asExpression:", tableColumn.asExpression, columnMetadata.asExpression);
                // console.log("generatedType:", tableColumn.generatedType, columnMetadata.generatedType);
                // console.log("comment:", tableColumn.comment, columnMetadata.comment);
                // console.log("default:", tableColumn.default, columnMetadata.default);
                // console.log("enum:", tableColumn.enum, columnMetadata.enum);
                // console.log("default changed:", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));
                // console.log("onUpdate:", tableColumn.onUpdate, columnMetadata.onUpdate);
                // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                // console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                // console.log((columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated));
                // console.log("==========================================");
                let columnMetadataLength = columnMetadata.length;
                if (!columnMetadataLength && columnMetadata.generationStrategy === "uuid") { // fixing #3374
                    columnMetadataLength = this.getColumnLength(columnMetadata);
                }
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadataLength
                    || tableColumn.width !== columnMetadata.width
                    || tableColumn.precision !== columnMetadata.precision
                    || tableColumn.scale !== columnMetadata.scale
                    || tableColumn.zerofill !== columnMetadata.zerofill
                    || tableColumn.unsigned !== columnMetadata.unsigned
                    || tableColumn.asExpression !== columnMetadata.asExpression
                    || tableColumn.generatedType !== columnMetadata.generatedType
                    // || tableColumn.comment !== columnMetadata.comment // todo
                    || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)
                    || (tableColumn.enum && columnMetadata.enum && !OrmUtils_19.OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + "")))
                    || tableColumn.onUpdate !== columnMetadata.onUpdate
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated);
            });
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return false;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return true;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "?";
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Loads all driver dependencies.
         */
        loadDependencies() {
            this.DataApiDriver = PlatformTools_8.PlatformTools.load("typeorm-aurora-data-api-driver");
            // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack
            // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787
            this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        createConnectionOptions(options, credentials) {
            credentials = Object.assign({}, credentials, DriverUtils_6.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way
            // build connection options for the driver
            return Object.assign({}, {
                resourceArn: options.resourceArn,
                secretArn: options.secretArn,
                database: options.database,
                region: options.region,
                type: options.type,
            }, {
                host: credentials.host,
                user: credentials.username,
                password: credentials.password,
                database: credentials.database,
                port: credentials.port,
                ssl: options.ssl
            }, options.extra || {});
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        async createPool(connectionOptions) {
            return {};
        }
        /**
         * Attaches all required base handlers to a database connection, such as the unhandled error handler.
         */
        prepareDbConnection(connection) {
            const { logger } = this.connection;
            /*
              Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and
              cause the hosting app to crash.
             */
            if (connection.listeners("error").length === 0) {
                connection.on("error", (error) => logger.log("warn", `MySQL connection raised an error. ${error}`));
            }
            return connection;
        }
        /**
         * Checks if "DEFAULT" values in the column metadata and in the database are equal.
         */
        compareDefaultValues(columnMetadataValue, databaseValue) {
            if (typeof columnMetadataValue === "string" && typeof databaseValue === "string") {
                // we need to cut out "'" because in mysql we can understand returned value is a string or a function
                // as result compare cannot understand if default is really changed or not
                columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, "");
                databaseValue = databaseValue.replace(/^'+|'+$/g, "");
            }
            return columnMetadataValue === databaseValue;
        }
    }
    exports.AuroraDataApiDriver = AuroraDataApiDriver;
});
define("typeorm/schema-builder/RdbmsSchemaBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/util/TableUtils", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableExclusion", "typeorm/schema-builder/view/View", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, CockroachDriver_1, Table_6, TableColumn_7, TableForeignKey_6, TableIndex_6, TableUtils_1, PostgresDriver_1, MysqlDriver_1, TableUnique_6, TableCheck_4, TableExclusion_2, View_6, AuroraDataApiDriver_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdbmsSchemaBuilder = void 0;
    /**
     * Creates complete tables schemas in the database based on the entity metadatas.
     *
     * Steps how schema is being built:
     * 1. load list of all tables with complete column and keys information from the db
     * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata
     * 3. create new tables that does not exist in the db, but exist in the metadata
     * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata
     * 5. add columns from metadata which does not exist in the table
     * 6. update all exist columns which metadata has changed
     * 7. update primary keys - update old and create new primary key from changed columns
     * 8. create foreign keys which does not exist in the table yet
     * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore
     */
    class RdbmsSchemaBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates complete schemas for the given entity metadatas.
         */
        async build() {
            this.queryRunner = this.connection.createQueryRunner();
            // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.
            // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.
            if (!(this.connection.driver instanceof CockroachDriver_1.CockroachDriver))
                await this.queryRunner.startTransaction();
            try {
                const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);
                // TODO: typeorm_metadata table needs only for Views for now.
                //  Remove condition or add new conditions if necessary (for CHECK constraints for example).
                if (this.viewEntityToSyncMetadatas.length > 0)
                    await this.createTypeormMetadataTable();
                await this.queryRunner.getTables(tablePaths);
                await this.queryRunner.getViews([]);
                await this.executeSchemaSyncOperationsInProperOrder();
                // if cache is enabled then perform cache-synchronization as well
                if (this.connection.queryResultCache)
                    await this.connection.queryResultCache.synchronize(this.queryRunner);
                if (!(this.connection.driver instanceof CockroachDriver_1.CockroachDriver))
                    await this.queryRunner.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    if (!(this.connection.driver instanceof CockroachDriver_1.CockroachDriver))
                        await this.queryRunner.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
            finally {
                await this.queryRunner.release();
            }
        }
        /**
         * Returns sql queries to be executed by schema builder.
         */
        async log() {
            this.queryRunner = this.connection.createQueryRunner();
            try {
                const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);
                // TODO: typeorm_metadata table needs only for Views for now.
                //  Remove condition or add new conditions if necessary (for CHECK constraints for example).
                if (this.viewEntityToSyncMetadatas.length > 0)
                    await this.createTypeormMetadataTable();
                await this.queryRunner.getTables(tablePaths);
                await this.queryRunner.getViews([]);
                this.queryRunner.enableSqlMemory();
                await this.executeSchemaSyncOperationsInProperOrder();
                // if cache is enabled then perform cache-synchronization as well
                if (this.connection.queryResultCache) // todo: check this functionality
                    await this.connection.queryResultCache.synchronize(this.queryRunner);
                return this.queryRunner.getMemorySql();
            }
            finally {
                // its important to disable this mode despite the fact we are release query builder
                // because there exist drivers which reuse same query runner. Also its important to disable
                // sql memory after call of getMemorySql() method because last one flushes sql memory.
                this.queryRunner.disableSqlMemory();
                await this.queryRunner.release();
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Returns only entities that should be synced in the database.
         */
        get entityToSyncMetadatas() {
            return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== "entity-child" && metadata.tableType !== "view");
        }
        /**
         * Returns only entities that should be synced in the database.
         */
        get viewEntityToSyncMetadatas() {
            return this.connection.entityMetadatas.filter(metadata => metadata.tableType === "view" && metadata.synchronize);
        }
        /**
         * Executes schema sync operations in a proper order.
         * Order of operations matter here.
         */
        async executeSchemaSyncOperationsInProperOrder() {
            await this.dropOldViews();
            await this.dropOldForeignKeys();
            await this.dropOldIndices();
            await this.dropOldChecks();
            await this.dropOldExclusions();
            await this.dropCompositeUniqueConstraints();
            // await this.renameTables();
            await this.renameColumns();
            await this.createNewTables();
            await this.dropRemovedColumns();
            await this.addNewColumns();
            await this.updatePrimaryKeys();
            await this.updateExistColumns();
            await this.createNewIndices();
            await this.createNewChecks();
            await this.createNewExclusions();
            await this.createCompositeUniqueConstraints();
            await this.createForeignKeys();
            await this.createViews();
        }
        /**
         * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.
         */
        async dropOldForeignKeys() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                // find foreign keys that exist in the schemas but does not exist in the entity metadata
                const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {
                    const metadataFK = metadata.foreignKeys.find(metadataForeignKey => foreignKeysMatch(tableForeignKey, metadataForeignKey));
                    return !metadataFK
                        || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)
                        || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);
                });
                if (tableForeignKeysToDrop.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(", ")}`);
                // drop foreign keys from the database
                await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);
            }
        }
        /**
         * Rename tables
         */
        async renameTables() {
            // for (const metadata of this.entityToSyncMetadatas) {
            //     const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
            // }
        }
        /**
         * Renames columns.
         * Works if only one column per table was changed.
         * Changes only column name. If something besides name was changed, these changes will be ignored.
         */
        async renameColumns() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                if (metadata.columns.length !== table.columns.length)
                    continue;
                const renamedMetadataColumns = metadata.columns.filter(column => {
                    return !table.columns.find(tableColumn => {
                        return tableColumn.name === column.databaseName
                            && tableColumn.type === this.connection.driver.normalizeType(column)
                            && tableColumn.isNullable === column.isNullable
                            && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);
                    });
                });
                if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)
                    continue;
                const renamedTableColumns = table.columns.filter(tableColumn => {
                    return !metadata.columns.find(column => {
                        return column.databaseName === tableColumn.name
                            && this.connection.driver.normalizeType(column) === tableColumn.type
                            && column.isNullable === tableColumn.isNullable
                            && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;
                    });
                });
                if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)
                    continue;
                const renamedColumn = renamedTableColumns[0].clone();
                renamedColumn.name = renamedMetadataColumns[0].databaseName;
                this.connection.logger.logSchemaBuild(`renaming column "${renamedTableColumns[0].name}" in to "${renamedColumn.name}"`);
                await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);
            }
        }
        async dropOldIndices() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const dropQueries = table.indices
                    .filter(tableIndex => {
                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);
                    if (indexMetadata) {
                        if (indexMetadata.synchronize === false)
                            return false;
                        if (indexMetadata.isUnique !== tableIndex.isUnique)
                            return true;
                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)
                            return true;
                        if (this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext)
                            return true;
                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)
                            return true;
                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);
                    }
                    return true;
                })
                    .map(async (tableIndex) => {
                    this.connection.logger.logSchemaBuild(`dropping an index: "${tableIndex.name}" from table ${table.name}`);
                    await this.queryRunner.dropIndex(table, tableIndex);
                });
                await Promise.all(dropQueries);
            }
        }
        async dropOldChecks() {
            // Mysql does not support check constraints
            if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_1.AuroraDataApiDriver)
                return;
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const oldChecks = table.checks.filter(tableCheck => {
                    return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);
                });
                if (oldChecks.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `"${check.name}"`).join(", ")} from table "${table.name}"`);
                await this.queryRunner.dropCheckConstraints(table, oldChecks);
            }
        }
        async dropCompositeUniqueConstraints() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const compositeUniques = table.uniques.filter(tableUnique => {
                    return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);
                });
                if (compositeUniques.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `"${unique.name}"`).join(", ")} from table "${table.name}"`);
                await this.queryRunner.dropUniqueConstraints(table, compositeUniques);
            }
        }
        async dropOldExclusions() {
            // Only PostgreSQL supports exclusion constraints
            if (!(this.connection.driver instanceof PostgresDriver_1.PostgresDriver))
                return;
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const oldExclusions = table.exclusions.filter(tableExclusion => {
                    return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);
                });
                if (oldExclusions.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `"${exclusion.name}"`).join(", ")} from table "${table.name}"`);
                await this.queryRunner.dropExclusionConstraints(table, oldExclusions);
            }
        }
        /**
         * Creates tables that do not exist in the database yet.
         * New tables are created without foreign and primary keys.
         * Primary key only can be created in conclusion with auto generated column.
         */
        async createNewTables() {
            for (const metadata of this.entityToSyncMetadatas) {
                // check if table does not exist yet
                const existTable = this.queryRunner.loadedTables.find(table => {
                    const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;
                    const schema = metadata.schema || this.connection.driver.options.schema;
                    const fullTableName = this.connection.driver.buildTableName(metadata.tableName, schema, database);
                    return table.name === fullTableName;
                });
                if (existTable)
                    continue;
                this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tablePath}`);
                // create a new table and sync it in the database
                const table = Table_6.Table.create(metadata, this.connection.driver);
                await this.queryRunner.createTable(table, false, false);
                this.queryRunner.loadedTables.push(table);
            }
        }
        async createViews() {
            for (const metadata of this.viewEntityToSyncMetadatas) {
                // check if view does not exist yet
                const existView = this.queryRunner.loadedViews.find(view => {
                    const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;
                    const schema = metadata.schema || this.connection.driver.options.schema;
                    const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);
                    const viewExpression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
                    const metadataExpression = typeof metadata.expression === "string" ? metadata.expression.trim() : metadata.expression(this.connection).getQuery();
                    return view.name === fullViewName && viewExpression === metadataExpression;
                });
                if (existView)
                    continue;
                this.connection.logger.logSchemaBuild(`creating a new view: ${metadata.tablePath}`);
                // create a new view and sync it in the database
                const view = View_6.View.create(metadata, this.connection.driver);
                await this.queryRunner.createView(view);
                this.queryRunner.loadedViews.push(view);
            }
        }
        async dropOldViews() {
            for (const view of this.queryRunner.loadedViews) {
                const existViewMetadata = this.viewEntityToSyncMetadatas.find(metadata => {
                    const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;
                    const schema = metadata.schema || this.connection.driver.options.schema;
                    const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);
                    const viewExpression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
                    const metadataExpression = typeof metadata.expression === "string" ? metadata.expression.trim() : metadata.expression(this.connection).getQuery();
                    return view.name === fullViewName && viewExpression === metadataExpression;
                });
                if (existViewMetadata)
                    continue;
                this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);
                // drop an old view
                await this.queryRunner.dropView(view);
                this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);
            }
        }
        /**
         * Drops all columns that exist in the table, but does not exist in the metadata (left old).
         * We drop their keys too, since it should be safe.
         */
        async dropRemovedColumns() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                // find columns that exist in the database but does not exist in the metadata
                const droppedTableColumns = table.columns.filter(tableColumn => {
                    return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);
                });
                if (droppedTableColumns.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(", "));
                // drop columns from the database
                await this.queryRunner.dropColumns(table, droppedTableColumns);
            }
        }
        /**
         * Adds columns from metadata which does not exist in the table.
         * Columns are created without keys.
         */
        async addNewColumns() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                // find which columns are new
                const newColumnMetadatas = metadata.columns.filter(columnMetadata => {
                    return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);
                });
                if (newColumnMetadatas.length === 0)
                    continue;
                // create columns in the database
                const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);
                const newTableColumns = newTableColumnOptions.map(option => new TableColumn_7.TableColumn(option));
                if (newTableColumns.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(", "));
                await this.queryRunner.addColumns(table, newTableColumns);
            }
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);
                const primaryTableColumns = table.columns.filter(column => column.isPrimary);
                if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {
                    const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {
                        return new TableColumn_7.TableColumn(TableUtils_1.TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));
                    });
                    await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);
                }
            }
        }
        /**
         * Update all exist columns which metadata has changed.
         * Still don't create keys. Also we don't touch foreign keys of the changed columns.
         */
        async updateExistColumns() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);
                if (changedColumns.length === 0)
                    continue;
                // drop all foreign keys that point to this column
                for (const changedColumn of changedColumns) {
                    await this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName);
                }
                // drop all composite indices related to this column
                for (const changedColumn of changedColumns) {
                    await this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName);
                }
                // drop all composite uniques related to this column
                // Mysql does not support unique constraints.
                if (!(this.connection.driver instanceof MysqlDriver_1.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_1.AuroraDataApiDriver)) {
                    for (const changedColumn of changedColumns) {
                        await this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName);
                    }
                }
                // generate a map of new/old columns
                const newAndOldTableColumns = changedColumns.map(changedColumn => {
                    const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName);
                    const newTableColumnOptions = TableUtils_1.TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);
                    const newTableColumn = new TableColumn_7.TableColumn(newTableColumnOptions);
                    return {
                        oldColumn: oldTableColumn,
                        newColumn: newTableColumn
                    };
                });
                if (newAndOldTableColumns.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`columns changed in "${table.name}". updating: ` + changedColumns.map(column => column.databaseName).join(", "));
                await this.queryRunner.changeColumns(table, newAndOldTableColumns);
            }
        }
        /**
         * Creates composite indices which are missing in db yet.
         */
        async createNewIndices() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const newIndices = metadata.indices
                    .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)
                    .map(indexMetadata => TableIndex_6.TableIndex.create(indexMetadata));
                if (newIndices.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `"${index.name}"`).join(", ")} in table "${table.name}"`);
                await this.queryRunner.createIndices(table, newIndices);
            }
        }
        async createNewChecks() {
            // Mysql does not support check constraints
            if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_1.AuroraDataApiDriver)
                return;
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const newChecks = metadata.checks
                    .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))
                    .map(checkMetadata => TableCheck_4.TableCheck.create(checkMetadata));
                if (newChecks.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `"${index.name}"`).join(", ")} in table "${table.name}"`);
                await this.queryRunner.createCheckConstraints(table, newChecks);
            }
        }
        /**
         * Creates composite uniques which are missing in db yet.
         */
        async createCompositeUniqueConstraints() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const compositeUniques = metadata.uniques
                    .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))
                    .map(uniqueMetadata => TableUnique_6.TableUnique.create(uniqueMetadata));
                if (compositeUniques.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `"${unique.name}"`).join(", ")} in table "${table.name}"`);
                await this.queryRunner.createUniqueConstraints(table, compositeUniques);
            }
        }
        /**
         * Creates exclusions which are missing in db yet.
         */
        async createNewExclusions() {
            // Only PostgreSQL supports exclusion constraints
            if (!(this.connection.driver instanceof PostgresDriver_1.PostgresDriver))
                return;
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const newExclusions = metadata.exclusions
                    .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))
                    .map(exclusionMetadata => TableExclusion_2.TableExclusion.create(exclusionMetadata));
                if (newExclusions.length === 0)
                    continue;
                this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `"${exclusion.name}"`).join(", ")} in table "${table.name}"`);
                await this.queryRunner.createExclusionConstraints(table, newExclusions);
            }
        }
        /**
         * Creates foreign keys which does not exist in the table yet.
         */
        async createForeignKeys() {
            for (const metadata of this.entityToSyncMetadatas) {
                const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);
                if (!table)
                    continue;
                const newKeys = metadata.foreignKeys
                    .filter(foreignKey => {
                    return !table.foreignKeys.find(dbForeignKey => foreignKeysMatch(dbForeignKey, foreignKey));
                });
                if (newKeys.length === 0)
                    continue;
                const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey_6.TableForeignKey.create(foreignKeyMetadata));
                this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(", ")} on table "${table.name}"`);
                await this.queryRunner.createForeignKeys(table, dbForeignKeys);
            }
        }
        /**
         * Drops all foreign keys where given column of the given table is being used.
         */
        async dropColumnReferencedForeignKeys(tablePath, columnName) {
            const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);
            if (!table)
                return;
            const tablesWithFK = [];
            const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);
            if (columnForeignKey) {
                const clonedTable = table.clone();
                clonedTable.foreignKeys = [columnForeignKey];
                tablesWithFK.push(clonedTable);
                table.removeForeignKey(columnForeignKey);
            }
            this.queryRunner.loadedTables.forEach(loadedTable => {
                const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {
                    return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;
                });
                if (dependForeignKeys.length > 0) {
                    const clonedTable = loadedTable.clone();
                    clonedTable.foreignKeys = dependForeignKeys;
                    tablesWithFK.push(clonedTable);
                    dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));
                }
            });
            if (tablesWithFK.length > 0) {
                for (const tableWithFK of tablesWithFK) {
                    this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(", ")}`);
                    await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);
                }
            }
        }
        /**
         * Drops all composite indices, related to given column.
         */
        async dropColumnCompositeIndices(tablePath, columnName) {
            const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);
            if (!table)
                return;
            const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);
            if (relatedIndices.length === 0)
                return;
            this.connection.logger.logSchemaBuild(`dropping related indices of "${tablePath}"."${columnName}": ${relatedIndices.map(index => index.name).join(", ")}`);
            await this.queryRunner.dropIndices(table, relatedIndices);
        }
        /**
         * Drops all composite uniques, related to given column.
         */
        async dropColumnCompositeUniques(tablePath, columnName) {
            const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);
            if (!table)
                return;
            const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);
            if (relatedUniques.length === 0)
                return;
            this.connection.logger.logSchemaBuild(`dropping related unique constraints of "${tablePath}"."${columnName}": ${relatedUniques.map(unique => unique.name).join(", ")}`);
            await this.queryRunner.dropUniqueConstraints(table, relatedUniques);
        }
        /**
         * Creates new columns from the given column metadatas.
         */
        metadataColumnsToTableColumnOptions(columns) {
            return columns.map(columnMetadata => TableUtils_1.TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));
        }
        /**
         * Creates typeorm service table for storing user defined Views.
         */
        async createTypeormMetadataTable() {
            const options = this.connection.driver.options;
            const typeormMetadataTable = this.connection.driver.buildTableName("typeorm_metadata", options.schema, options.database);
            await this.queryRunner.createTable(new Table_6.Table({
                name: typeormMetadataTable,
                columns: [
                    {
                        name: "type",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataType }),
                        isNullable: false
                    },
                    {
                        name: "database",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataDatabase }),
                        isNullable: true
                    },
                    {
                        name: "schema",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataSchema }),
                        isNullable: true
                    },
                    {
                        name: "table",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataTable }),
                        isNullable: true
                    },
                    {
                        name: "name",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataName }),
                        isNullable: true
                    },
                    {
                        name: "value",
                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataValue }),
                        isNullable: true
                    },
                ]
            }), true);
        }
    }
    exports.RdbmsSchemaBuilder = RdbmsSchemaBuilder;
    function foreignKeysMatch(tableForeignKey, metadataForeignKey) {
        return (tableForeignKey.name === metadataForeignKey.name)
            && (tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath);
    }
});
define("typeorm/driver/sap/SapQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/index", "typeorm/query-runner/BaseQueryRunner", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/view/View", "typeorm/subscriber/Broadcaster", "typeorm/util/OrmUtils", "typeorm/driver/Query", "typeorm/subscriber/BroadcasterResult"], function (require, exports, QueryRunnerAlreadyReleasedError_6, TransactionAlreadyStartedError_6, TransactionNotStartedError_6, index_6, BaseQueryRunner_6, Table_7, TableCheck_5, TableColumn_8, TableForeignKey_7, TableIndex_7, TableUnique_7, View_7, Broadcaster_7, OrmUtils_20, Query_7, BroadcasterResult_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SapQueryRunner = void 0;
    /**
     * Runs queries on a single SQL Server database connection.
     */
    class SapQueryRunner extends BaseQueryRunner_6.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            // -------------------------------------------------------------------------
            // Protected Properties
            // -------------------------------------------------------------------------
            /**
             * Last executed query in a transaction.
             * This is needed because we cannot rely on parallel queries because we use second query
             * to select CURRENT_IDENTITY_VALUE()
             */
            this.queryResponsibilityChain = [];
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_7.Broadcaster(this);
            this.mode = mode;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        async connect() {
            if (this.databaseConnection)
                return this.databaseConnection;
            this.databaseConnection = await this.driver.obtainMasterConnection();
            return this.databaseConnection;
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            this.isReleased = true;
            if (this.databaseConnection) {
                return this.driver.master.release(this.databaseConnection);
            }
            return Promise.resolve();
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_6.QueryRunnerAlreadyReleasedError();
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_6.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            if (isolationLevel) {
                await this.query(`SET TRANSACTION ISOLATION LEVEL ${isolationLevel || ""}`);
            }
            const afterBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_6.QueryRunnerAlreadyReleasedError();
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_6.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("COMMIT");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_6.QueryRunnerAlreadyReleasedError();
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_6.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("ROLLBACK");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_8.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_6.QueryRunnerAlreadyReleasedError();
            let waitingOkay;
            const waitingPromise = new Promise((ok) => waitingOkay = ok);
            if (this.queryResponsibilityChain.length) {
                const otherWaitingPromises = [...this.queryResponsibilityChain];
                this.queryResponsibilityChain.push(waitingPromise);
                await Promise.all(otherWaitingPromises);
            }
            const promise = new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    // we disable autocommit because ROLLBACK does not work in autocommit mode
                    databaseConnection.setAutoCommit(!this.isTransactionActive);
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const queryStartTime = +new Date();
                    const isInsertQuery = query.substr(0, 11) === "INSERT INTO";
                    const statement = databaseConnection.prepare(query);
                    statement.exec(parameters, (err, result) => {
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        const resolveChain = () => {
                            if (promiseIndex !== -1)
                                this.queryResponsibilityChain.splice(promiseIndex, 1);
                            if (waitingPromiseIndex !== -1)
                                this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);
                            waitingOkay();
                        };
                        let promiseIndex = this.queryResponsibilityChain.indexOf(promise);
                        let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);
                        if (err) {
                            this.driver.connection.logger.logQueryError(err, query, parameters, this);
                            resolveChain();
                            return fail(new index_6.QueryFailedError(query, parameters, err));
                        }
                        else {
                            if (isInsertQuery) {
                                const lastIdQuery = `SELECT CURRENT_IDENTITY_VALUE() FROM "SYS"."DUMMY"`;
                                this.driver.connection.logger.logQuery(lastIdQuery, [], this);
                                databaseConnection.exec(lastIdQuery, (err, result) => {
                                    if (err) {
                                        this.driver.connection.logger.logQueryError(err, lastIdQuery, [], this);
                                        resolveChain();
                                        fail(new index_6.QueryFailedError(lastIdQuery, [], err));
                                        return;
                                    }
                                    ok(result[0]["CURRENT_IDENTITY_VALUE()"]);
                                    resolveChain();
                                });
                            }
                            else {
                                ok(result);
                                resolveChain();
                            }
                        }
                    });
                }
                catch (err) {
                    fail(err);
                }
            });
            // with this condition, Promise.all causes unexpected behavior.
            // if (this.isTransactionActive)
            this.queryResponsibilityChain.push(promise);
            return promise;
        }
        /**
         * Returns raw data stream.
         */
        async stream(query, parameters, onEnd, onError) {
            throw new Error(`Stream is not supported by SAP driver.`);
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            const results = await this.query(`SELECT DATABASE_NAME FROM "SYS"."M_DATABASES"`);
            return results.map(result => result["DATABASE_NAME"]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            const query = database ? `SELECT * FROM "${database}"."SYS"."SCHEMAS"` : `SELECT * FROM "SYS"."SCHEMAS"`;
            const results = await this.query(query);
            return results.map(result => result["SCHEMA_NAME"]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            const databases = await this.getDatabases();
            return databases.indexOf(database) !== -1;
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            const schemas = await this.getSchemas();
            return schemas.indexOf(schema) !== -1;
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "SYS"."TABLES" WHERE "SCHEMA_NAME" = ${parsedTableName.schema} AND "TABLE_NAME" = ${parsedTableName.tableName}`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "SYS"."TABLE_COLUMNS" WHERE "SCHEMA_NAME" = ${parsedTableName.schema} AND "TABLE_NAME" = ${parsedTableName.tableName} AND "COLUMN_NAME" = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            return Promise.resolve();
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            return Promise.resolve();
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            let exist = false;
            if (ifNotExist) {
                const result = await this.query(`SELECT * FROM "SYS"."SCHEMAS" WHERE "SCHEMA_NAME" = '${schema}'`);
                exist = !!result.length;
            }
            if (!ifNotExist || (ifNotExist && !exist)) {
                const up = `CREATE SCHEMA "${schema}"`;
                const down = `DROP SCHEMA "${schema}" CASCADE`;
                await this.executeQueries(new Query_7.Query(up), new Query_7.Query(down));
            }
        }
        /**
         * Drops table schema
         */
        async dropSchema(schemaPath, ifExist, isCascade) {
            const schema = schemaPath.indexOf(".") === -1 ? schemaPath : schemaPath.split(".")[0];
            let exist = false;
            if (ifExist) {
                const result = await this.query(`SELECT * FROM "SYS"."SCHEMAS" WHERE "SCHEMA_NAME" = '${schema}'`);
                exist = !!result.length;
            }
            if (!ifExist || (ifExist && exist)) {
                const up = `DROP SCHEMA "${schema}" ${isCascade ? "CASCADE" : ""}`;
                const down = `CREATE SCHEMA "${schema}"`;
                await this.executeQueries(new Query_7.Query(up), new Query_7.Query(down));
            }
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (createIndices) {
                table.indices.forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(table, index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(tableOrName, ifExist, dropForeignKeys = true, dropIndices = true) {
            if (ifExist) {
                const isTableExist = await this.hasTable(tableOrName);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const upQueries = [];
            const downQueries = [];
            // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need
            // to perform drop queries for foreign keys and indices.
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(table, index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_7.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames a table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_7.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            const oldTableName = oldTable.name.indexOf(".") === -1 ? oldTable.name : oldTable.name.split(".")[1];
            const schemaName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;
            // rename table
            upQueries.push(new Query_7.Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTableName)}`));
            downQueries.push(new Query_7.Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTableName)}`));
            // drop old FK's. Foreign keys must be dropped before the primary keys are dropped
            newTable.foreignKeys.forEach(foreignKey => {
                upQueries.push(this.dropForeignKeySql(newTable, foreignKey));
                downQueries.push(this.createForeignKeySql(newTable, foreignKey));
            });
            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.
            // To avoid this, we must drop all referential foreign keys and recreate them later
            const referencedForeignKeySql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE "REFERENCED_SCHEMA_NAME" = '${schemaName}' AND "REFERENCED_TABLE_NAME" = '${oldTableName}'`;
            const dbForeignKeys = await this.query(referencedForeignKeySql);
            let referencedForeignKeys = [];
            const referencedForeignKeyTableMapping = [];
            if (dbForeignKeys.length > 0) {
                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey["SCHEMA_NAME"]}.${dbForeignKey["TABLE_NAME"]}`, fkName: dbForeignKey["CONSTRAINT_NAME"] });
                    return new TableForeignKey_7.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: newTable.name,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                        onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                    });
                });
                // drop referenced foreign keys
                referencedForeignKeys.forEach(foreignKey => {
                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                    upQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                    downQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                });
            }
            // rename primary key constraint
            if (newTable.primaryColumns.length > 0) {
                const columnNames = newTable.primaryColumns.map(column => column.name);
                const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
                const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
                const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
                // drop old PK
                upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT "${oldPkName}"`));
                downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT "${oldPkName}" PRIMARY KEY (${columnNamesString})`));
                // create new PK
                upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT "${newPkName}" PRIMARY KEY (${columnNamesString})`));
                downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT "${newPkName}"`));
            }
            // recreate foreign keys with new constraint names
            newTable.foreignKeys.forEach(foreignKey => {
                // replace constraint name
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // create new FK's
                upQueries.push(this.createForeignKeySql(newTable, foreignKey));
                downQueries.push(this.dropForeignKeySql(newTable, foreignKey));
            });
            // restore referenced foreign keys
            referencedForeignKeys.forEach(foreignKey => {
                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                upQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                downQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
            });
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // drop old index
                upQueries.push(this.dropIndexSql(newTable, index));
                downQueries.push(this.createIndexSql(newTable, index));
                // replace constraint name
                index.name = newIndexName;
                // create new index
                upQueries.push(this.createIndexSql(newTable, index));
                downQueries.push(this.dropIndexSql(newTable, index));
            });
            await this.executeQueries(upQueries, downQueries);
            // rename old table and replace it in cached tabled;
            oldTable.name = newTable.name;
            this.replaceCachedTable(oldTable, newTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const parsedTableName = this.parseTableName(table);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            upQueries.push(new Query_7.Query(this.addColumnSql(table, column)));
            downQueries.push(new Query_7.Query(this.dropColumnSql(table, column)));
            // create or update primary key constraint
            if (column.isPrimary) {
                const primaryColumns = clonedTable.primaryColumns;
                // if table already have primary key, me must drop it and recreate again
                if (primaryColumns.length > 0) {
                    // SAP HANA does not allow to drop PK's which is referenced by foreign keys.
                    // To avoid this, we must drop all referential foreign keys and recreate them later
                    const referencedForeignKeySql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE "REFERENCED_SCHEMA_NAME" = ${parsedTableName.schema} AND "REFERENCED_TABLE_NAME" = ${parsedTableName.tableName}`;
                    const dbForeignKeys = await this.query(referencedForeignKeySql);
                    let referencedForeignKeys = [];
                    const referencedForeignKeyTableMapping = [];
                    if (dbForeignKeys.length > 0) {
                        referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {
                            const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                            referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey["SCHEMA_NAME"]}.${dbForeignKey["TABLE_NAME"]}`, fkName: dbForeignKey["CONSTRAINT_NAME"] });
                            return new TableForeignKey_7.TableForeignKey({
                                name: dbForeignKey["CONSTRAINT_NAME"],
                                columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                                referencedTableName: table.name,
                                referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                                onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                                onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                            });
                        });
                        // drop referenced foreign keys
                        referencedForeignKeys.forEach(foreignKey => {
                            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                            upQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                            downQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                        });
                    }
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                    const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                    upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    // restore referenced foreign keys
                    referencedForeignKeys.forEach(foreignKey => {
                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                        upQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                        downQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                    });
                }
                primaryColumns.push(column);
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                const uniqueIndex = new TableIndex_7.TableIndex({
                    name: this.connection.namingStrategy.indexName(table.name, [column.name]),
                    columnNames: [column.name],
                    isUnique: true
                });
                clonedTable.indices.push(uniqueIndex);
                clonedTable.uniques.push(new TableUnique_7.TableUnique({
                    name: uniqueIndex.name,
                    columnNames: uniqueIndex.columnNames
                }));
                upQueries.push(this.createIndexSql(table, uniqueIndex));
                downQueries.push(this.dropIndexSql(table, uniqueIndex));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_8.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_8.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            await this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldTableColumnOrName instanceof TableColumn_8.TableColumn
                ? oldTableColumnOrName
                : table.columns.find(column => column.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== "uuid") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {
                // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.
                // Also, we recreate column if column type changed
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (newColumn.name !== oldColumn.name) {
                    // rename column
                    upQueries.push(new Query_7.Query(`RENAME COLUMN ${this.escapePath(table)}."${oldColumn.name}" TO "${newColumn.name}"`));
                    downQueries.push(new Query_7.Query(`RENAME COLUMN ${this.escapePath(table)}."${newColumn.name}" TO "${oldColumn.name}"`));
                    if (oldColumn.isPrimary === true) {
                        const primaryColumns = clonedTable.primaryColumns;
                        // build old primary constraint name
                        const columnNames = primaryColumns.map(column => column.name);
                        const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // replace old column name with new column name
                        columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                        columnNames.push(newColumn.name);
                        const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
                        // drop old PK
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${oldPkName}"`));
                        downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${oldPkName}" PRIMARY KEY (${columnNamesString})`));
                        // build new primary constraint name
                        const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // create new PK
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${newPkName}" PRIMARY KEY (${columnNamesString})`));
                        downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${newPkName}"`));
                    }
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // drop old index
                        upQueries.push(this.dropIndexSql(clonedTable, index));
                        downQueries.push(this.createIndexSql(clonedTable, index));
                        // replace constraint name
                        index.name = newIndexName;
                        // create new index
                        upQueries.push(this.createIndexSql(clonedTable, index));
                        downQueries.push(this.dropIndexSql(clonedTable, index));
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        upQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));
                        downQueries.push(this.createForeignKeySql(clonedTable, foreignKey));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                        // create new FK's
                        upQueries.push(this.createForeignKeySql(clonedTable, foreignKey));
                        downQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));
                    });
                    // rename check constraints
                    clonedTable.findColumnChecks(oldColumn).forEach(check => {
                        // build new constraint name
                        check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);
                        check.columnNames.push(newColumn.name);
                        const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression);
                        upQueries.push(this.dropCheckConstraintSql(clonedTable, check));
                        downQueries.push(this.createCheckConstraintSql(clonedTable, check));
                        // replace constraint name
                        check.name = newCheckName;
                        upQueries.push(this.createCheckConstraintSql(clonedTable, check));
                        downQueries.push(this.dropCheckConstraintSql(clonedTable, check));
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (this.isColumnChanged(oldColumn, newColumn)) {
                    upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(newColumn)})`));
                    downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(oldColumn)})`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                            const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                            upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        }
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueIndex = new TableIndex_7.TableIndex({
                            name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name],
                            isUnique: true
                        });
                        clonedTable.indices.push(uniqueIndex);
                        clonedTable.uniques.push(new TableUnique_7.TableUnique({
                            name: uniqueIndex.name,
                            columnNames: uniqueIndex.columnNames
                        }));
                        upQueries.push(this.createIndexSql(table, uniqueIndex));
                        downQueries.push(this.dropIndexSql(table, uniqueIndex));
                    }
                    else {
                        const uniqueIndex = clonedTable.indices.find(index => {
                            return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);
                        const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex.name);
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);
                        upQueries.push(this.dropIndexSql(table, uniqueIndex));
                        downQueries.push(this.createIndexSql(table, uniqueIndex));
                    }
                }
                if (newColumn.default !== oldColumn.default) {
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER ("${newColumn.name}" ${this.connection.driver.createFullType(newColumn)} DEFAULT ${newColumn.default})`));
                        if (oldColumn.default !== null && oldColumn.default !== undefined) {
                            downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER ("${oldColumn.name}" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));
                        }
                        else {
                            downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER ("${oldColumn.name}" ${this.connection.driver.createFullType(oldColumn)} DEFAULT NULL)`));
                        }
                    }
                    else if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER ("${newColumn.name}" ${this.connection.driver.createFullType(newColumn)} DEFAULT NULL)`));
                        downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ALTER ("${oldColumn.name}" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));
                    }
                }
                await this.executeQueries(upQueries, downQueries);
                this.replaceCachedTable(table, clonedTable);
            }
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const parsedTableName = this.parseTableName(table);
            const column = columnOrName instanceof TableColumn_8.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                // SAP HANA does not allow to drop PK's which is referenced by foreign keys.
                // To avoid this, we must drop all referential foreign keys and recreate them later
                const referencedForeignKeySql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE "REFERENCED_SCHEMA_NAME" = ${parsedTableName.schema} AND "REFERENCED_TABLE_NAME" = ${parsedTableName.tableName}`;
                const dbForeignKeys = await this.query(referencedForeignKeySql);
                let referencedForeignKeys = [];
                const referencedForeignKeyTableMapping = [];
                if (dbForeignKeys.length > 0) {
                    referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {
                        const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                        referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey["SCHEMA_NAME"]}.${dbForeignKey["TABLE_NAME"]}`, fkName: dbForeignKey["CONSTRAINT_NAME"] });
                        return new TableForeignKey_7.TableForeignKey({
                            name: dbForeignKey["CONSTRAINT_NAME"],
                            columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                            referencedTableName: table.name,
                            referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                            onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                            onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                        });
                    });
                    // drop referenced foreign keys
                    referencedForeignKeys.forEach(foreignKey => {
                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                        upQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                        downQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                    });
                }
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                    upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                }
                // restore referenced foreign keys
                referencedForeignKeys.forEach(foreignKey => {
                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                    upQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                    downQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                });
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            else if (column.isUnique) {
                // we splice constraints both from table uniques and indices.
                const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);
                const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);
                if (foundUnique) {
                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);
                    upQueries.push(this.dropIndexSql(table, uniqueName));
                    downQueries.push(new Query_7.Query(`CREATE UNIQUE INDEX "${uniqueName}" ON ${this.escapePath(table)} ("${column.name}")`));
                }
                const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);
                const foundIndex = clonedTable.indices.find(index => index.name === indexName);
                if (foundIndex) {
                    clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);
                    upQueries.push(this.dropIndexSql(table, indexName));
                    downQueries.push(new Query_7.Query(`CREATE UNIQUE INDEX "${indexName}" ON ${this.escapePath(table)} ("${column.name}")`));
                }
            }
            // drop column check
            const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);
            if (columnCheck) {
                clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
                upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
                downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }
            upQueries.push(new Query_7.Query(this.dropColumnSql(table, column)));
            downQueries.push(new Query_7.Query(this.addColumnSql(table, column)));
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            const down = this.dropPrimaryKeySql(clonedTable);
            await this.executeQueries(up, down);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const parsedTableName = this.parseTableName(table);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.
            // To avoid this, we must drop all referential foreign keys and recreate them later
            const referencedForeignKeySql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE "REFERENCED_SCHEMA_NAME" = ${parsedTableName.schema} AND "REFERENCED_TABLE_NAME" = ${parsedTableName.tableName}`;
            const dbForeignKeys = await this.query(referencedForeignKeySql);
            let referencedForeignKeys = [];
            const referencedForeignKeyTableMapping = [];
            if (dbForeignKeys.length > 0) {
                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey["SCHEMA_NAME"]}.${dbForeignKey["TABLE_NAME"]}`, fkName: dbForeignKey["CONSTRAINT_NAME"] });
                    return new TableForeignKey_7.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: table.name,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                        onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                    });
                });
                // drop referenced foreign keys
                referencedForeignKeys.forEach(foreignKey => {
                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                    upQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                    downQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                });
            }
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNamesString = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            upQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            // restore referenced foreign keys
            referencedForeignKeys.forEach(foreignKey => {
                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                upQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                downQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
            });
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const parsedTableName = this.parseTableName(table);
            const upQueries = [];
            const downQueries = [];
            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.
            // To avoid this, we must drop all referential foreign keys and recreate them later
            const referencedForeignKeySql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE "REFERENCED_SCHEMA_NAME" = ${parsedTableName.schema} AND "REFERENCED_TABLE_NAME" = ${parsedTableName.tableName}`;
            const dbForeignKeys = await this.query(referencedForeignKeySql);
            let referencedForeignKeys = [];
            const referencedForeignKeyTableMapping = [];
            if (dbForeignKeys.length > 0) {
                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey["SCHEMA_NAME"]}.${dbForeignKey["TABLE_NAME"]}`, fkName: dbForeignKey["CONSTRAINT_NAME"] });
                    return new TableForeignKey_7.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: table.name,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                        onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                    });
                });
                // drop referenced foreign keys
                referencedForeignKeys.forEach(foreignKey => {
                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                    upQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
                    downQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                });
            }
            upQueries.push(this.dropPrimaryKeySql(table));
            downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name)));
            // restore referenced foreign keys
            referencedForeignKeys.forEach(foreignKey => {
                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);
                upQueries.push(this.createForeignKeySql(mapping.tableName, foreignKey));
                downQueries.push(this.dropForeignKeySql(mapping.tableName, foreignKey));
            });
            await this.executeQueries(upQueries, downQueries);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Drops an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);
        }
        /**
         * Creates a new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!checkConstraint.name)
                checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            const up = this.createCheckConstraintSql(table, checkConstraint);
            const down = this.dropCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.addCheckConstraint(checkConstraint);
        }
        /**
         * Creates a new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_5.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            const up = this.dropCheckConstraintSql(table, checkConstraint);
            const down = this.createCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.removeCheckConstraint(checkConstraint);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`SAP HANA does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`SAP HANA does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`SAP HANA does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`SAP HANA does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_7.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));
            await Promise.all(promises);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(table, index);
            await this.executeQueries(up, down);
            table.addIndex(index);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_7.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_7.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tablePath) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase() {
            const schemas = [];
            this.connection.entityMetadatas
                .filter(metadata => metadata.schema)
                .forEach(metadata => {
                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);
                if (!isSchemaExist)
                    schemas.push(metadata.schema);
            });
            schemas.push(this.driver.options.schema || "current_schema");
            const schemaNamesString = schemas.map(name => {
                return name === "current_schema" ? name : "'" + name + "'";
            }).join(", ");
            await this.startTransaction();
            try {
                // const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS "' || schemaname || '"."' || viewname || '" CASCADE;' as "query" ` +
                //     `FROM "pg_views" WHERE "schemaname" IN (${schemaNamesString}) AND "viewname" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;
                // const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);
                // await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                // ignore spatial_ref_sys; it's a special table supporting PostGIS
                const selectTableDropsQuery = `SELECT 'DROP TABLE "' || schema_name || '"."' || table_name || '" CASCADE;' as "query" FROM "SYS"."TABLES" WHERE "SCHEMA_NAME" IN (${schemaNamesString}) AND "TABLE_NAME" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND "IS_COLUMN_TABLE" = 'TRUE'`;
                const dropTableQueries = await this.query(selectTableDropsQuery);
                await Promise.all(dropTableQueries.map(q => this.query(q["query"])));
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Return current database.
         */
        async getCurrentDatabase() {
            const currentDBQuery = await this.query(`SELECT "VALUE" AS "db_name" FROM "SYS"."M_SYSTEM_OVERVIEW" WHERE "SECTION" = 'System' and "NAME" = 'Instance ID'`);
            return currentDBQuery[0]["db_name"];
        }
        /**
         * Return current schema.
         */
        async getCurrentSchema() {
            const currentSchemaQuery = await this.query(`SELECT CURRENT_SCHEMA AS "schema_name" FROM "SYS"."DUMMY"`);
            return currentSchemaQuery[0]["schema_name"];
        }
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentSchema = await this.getCurrentSchema();
            const viewsCondition = viewNames.map(viewName => {
                let [schema, name] = viewName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("t"."schema" = '${schema}' AND "t"."name" = '${name}')`;
            }).join(" OR ");
            const query = `SELECT "t".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} "t" WHERE "t"."type" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_7.View();
                const schema = dbView["schema"] === currentSchema && !this.driver.options.schema ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], schema);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const currentSchema = await this.getCurrentSchema();
            const tablesCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("SCHEMA_NAME" = '${schema}' AND "TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            const tablesSql = `SELECT * FROM "SYS"."TABLES" WHERE ` + tablesCondition;
            const columnsSql = `SELECT * FROM "SYS"."TABLE_COLUMNS" WHERE ` + tablesCondition + ` ORDER BY "POSITION"`;
            const constraintsCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("SCHEMA_NAME" = '${schema}' AND "TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            const constraintsSql = `SELECT * FROM "SYS"."CONSTRAINTS" WHERE (${constraintsCondition}) ORDER BY "POSITION"`;
            const indicesCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("I"."SCHEMA_NAME" = '${schema}' AND "I"."TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            // excluding primary key and autogenerated fulltext indices
            const indicesSql = `SELECT "I"."INDEX_TYPE", "I"."SCHEMA_NAME", "I"."TABLE_NAME", "I"."INDEX_NAME", "IC"."COLUMN_NAME", "I"."CONSTRAINT" ` +
                `FROM "SYS"."INDEXES" "I" INNER JOIN "SYS"."INDEX_COLUMNS" "IC" ON "IC"."INDEX_OID" = "I"."INDEX_OID" ` +
                `WHERE (${indicesCondition}) AND ("I"."CONSTRAINT" IS NULL OR "I"."CONSTRAINT" != 'PRIMARY KEY') AND "I"."INDEX_NAME" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY "IC"."POSITION"`;
            const foreignKeysCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("SCHEMA_NAME" = '${schema}' AND "TABLE_NAME" = '${name}')`;
            }).join(" OR ");
            const foreignKeysSql = `SELECT * FROM "SYS"."REFERENTIAL_CONSTRAINTS" WHERE (${foreignKeysCondition}) ORDER BY "POSITION"`;
            const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(constraintsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql),
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create tables for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_7.Table();
                // We do not need to join schema name, when database is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const schema = dbTable["SCHEMA_NAME"] === currentSchema && !this.driver.options.schema ? undefined : dbTable["SCHEMA_NAME"];
                table.name = this.driver.buildTableName(dbTable["TABLE_NAME"], schema);
                const tableFullName = this.driver.buildTableName(dbTable["TABLE_NAME"], dbTable["SCHEMA_NAME"]);
                // create columns from the loaded columns
                table.columns = await Promise.all(dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["TABLE_NAME"], dbColumn["SCHEMA_NAME"]) === tableFullName)
                    .map(async (dbColumn) => {
                    const columnConstraints = dbConstraints.filter(dbConstraint => {
                        return this.driver.buildTableName(dbConstraint["TABLE_NAME"], dbConstraint["SCHEMA_NAME"]) === tableFullName && dbConstraint["COLUMN_NAME"] === dbColumn["COLUMN_NAME"];
                    });
                    const columnUniqueIndex = dbIndices.find(dbIndex => {
                        const indexTableFullName = this.driver.buildTableName(dbIndex["TABLE_NAME"], dbIndex["SCHEMA_NAME"]);
                        if (indexTableFullName !== tableFullName) {
                            return false;
                        }
                        // Index is not for this column
                        if (dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"]) {
                            return false;
                        }
                        return dbIndex["CONSTRAINT"] && dbIndex["CONSTRAINT"].indexOf("UNIQUE") !== -1;
                    });
                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);
                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices
                        .some(index => index.name === columnUniqueIndex["INDEX_NAME"] && index.synchronize === false);
                    const isConstraintComposite = columnUniqueIndex
                        ? !!dbIndices.find(dbIndex => dbIndex["INDEX_NAME"] === columnUniqueIndex["INDEX_NAME"] && dbIndex["COLUMN_NAME"] !== dbColumn["COLUMN_NAME"])
                        : false;
                    const tableColumn = new TableColumn_8.TableColumn();
                    tableColumn.name = dbColumn["COLUMN_NAME"];
                    tableColumn.type = dbColumn["DATA_TYPE_NAME"].toLowerCase();
                    if (tableColumn.type === "dec" || tableColumn.type === "decimal") {
                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property
                        // we set 'undefined' in to unspecified property to avoid changing column on sync
                        if (dbColumn["LENGTH"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["LENGTH"])) {
                            tableColumn.precision = dbColumn["LENGTH"];
                        }
                        else if (dbColumn["SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["SCALE"])) {
                            tableColumn.precision = undefined;
                        }
                        if (dbColumn["SCALE"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["SCALE"])) {
                            tableColumn.scale = dbColumn["SCALE"];
                        }
                        else if (dbColumn["LENGTH"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["LENGTH"])) {
                            tableColumn.scale = undefined;
                        }
                    }
                    if (dbColumn["DATA_TYPE_NAME"].toLowerCase() === "array") {
                        tableColumn.isArray = true;
                        tableColumn.type = dbColumn["CS_DATA_TYPE_NAME"].toLowerCase();
                    }
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn["LENGTH"]) {
                        const length = dbColumn["LENGTH"].toString();
                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                    }
                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;
                    tableColumn.isNullable = dbColumn["IS_NULLABLE"] === "TRUE";
                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint["IS_PRIMARY_KEY"] === "TRUE");
                    tableColumn.isGenerated = dbColumn["GENERATION_TYPE"] === "ALWAYS AS IDENTITY";
                    if (tableColumn.isGenerated)
                        tableColumn.generationStrategy = "increment";
                    if (dbColumn["DEFAULT_VALUE"] === null
                        || dbColumn["DEFAULT_VALUE"] === undefined) {
                        tableColumn.default = undefined;
                    }
                    else {
                        if (tableColumn.type === "char" || tableColumn.type === "nchar" || tableColumn.type === "varchar" ||
                            tableColumn.type === "nvarchar" || tableColumn.type === "alphanum" || tableColumn.type === "shorttext") {
                            tableColumn.default = `'${dbColumn["DEFAULT_VALUE"]}'`;
                        }
                        else if (tableColumn.type === "boolean") {
                            tableColumn.default = dbColumn["DEFAULT_VALUE"] === "1" ? "true" : "false";
                        }
                        else {
                            tableColumn.default = dbColumn["DEFAULT_VALUE"];
                        }
                    }
                    tableColumn.comment = ""; // dbColumn["COLUMN_COMMENT"];
                    if (dbColumn["character_set_name"])
                        tableColumn.charset = dbColumn["character_set_name"];
                    if (dbColumn["collation_name"])
                        tableColumn.collation = dbColumn["collation_name"];
                    return tableColumn;
                }));
                // find check constraints of table, group them by constraint name and build TableCheck.
                const tableCheckConstraints = OrmUtils_20.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["TABLE_NAME"], dbConstraint["SCHEMA_NAME"]) === tableFullName
                        && dbConstraint["CHECK_CONDITION"] !== null && dbConstraint["CHECK_CONDITION"] !== undefined;
                }), dbConstraint => dbConstraint["CONSTRAINT_NAME"]);
                table.checks = tableCheckConstraints.map(constraint => {
                    const checks = dbConstraints.filter(dbC => dbC["CONSTRAINT_NAME"] === constraint["CONSTRAINT_NAME"]);
                    return new TableCheck_5.TableCheck({
                        name: constraint["CONSTRAINT_NAME"],
                        columnNames: checks.map(c => c["COLUMN_NAME"]),
                        expression: constraint["CHECK_CONDITION"],
                    });
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_20.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["TABLE_NAME"], dbForeignKey["SCHEMA_NAME"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["CONSTRAINT_NAME"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["CONSTRAINT_NAME"] === dbForeignKey["CONSTRAINT_NAME"]);
                    // if referenced table located in currently used schema, we don't need to concat schema name to table name.
                    const schema = dbForeignKey["REFERENCED_SCHEMA_NAME"] === currentSchema ? undefined : dbForeignKey["REFERENCED_SCHEMA_NAME"];
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["REFERENCED_TABLE_NAME"], schema);
                    return new TableForeignKey_7.TableForeignKey({
                        name: dbForeignKey["CONSTRAINT_NAME"],
                        columnNames: foreignKeys.map(dbFk => dbFk["COLUMN_NAME"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["REFERENCED_COLUMN_NAME"]),
                        onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],
                        onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_20.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["TABLE_NAME"], dbIndex["SCHEMA_NAME"]) === tableFullName;
                }), dbIndex => dbIndex["INDEX_NAME"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => {
                        return index["SCHEMA_NAME"] === constraint["SCHEMA_NAME"]
                            && index["TABLE_NAME"] === constraint["TABLE_NAME"]
                            && index["INDEX_NAME"] === constraint["INDEX_NAME"];
                    });
                    return new TableIndex_7.TableIndex({
                        table: table,
                        name: constraint["INDEX_NAME"],
                        columnNames: indices.map(i => i["COLUMN_NAME"]),
                        isUnique: constraint["CONSTRAINT"] && constraint["CONSTRAINT"].indexOf("UNIQUE") !== -1,
                        isFulltext: constraint["INDEX_TYPE"] === "FULLTEXT"
                    });
                });
                return table;
            }));
        }
        /**
         * Builds and returns SQL for create table.
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.
            // if we mark column as Unique, it means that we create UNIQUE INDEX.
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueIndexExist = table.indices.some(index => {
                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;
                });
                const isUniqueConstraintExist = table.uniques.some(unique => {
                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;
                });
                if (!isUniqueIndexExist && !isUniqueConstraintExist)
                    table.indices.push(new TableIndex_7.TableIndex({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name],
                        isUnique: true
                    }));
            });
            // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.
            if (table.uniques.length > 0) {
                table.uniques.forEach(unique => {
                    const uniqueExist = table.indices.some(index => index.name === unique.name);
                    if (!uniqueExist) {
                        table.indices.push(new TableIndex_7.TableIndex({
                            name: unique.name,
                            columnNames: unique.columnNames,
                            isUnique: true
                        }));
                    }
                });
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    // SAP HANA does not have "NO ACTION" option for FK's
                    if (fk.onDelete) {
                        const onDelete = fk.onDelete === "NO ACTION" ? "RESTRICT" : fk.onDelete;
                        constraint += ` ON DELETE ${onDelete}`;
                    }
                    if (fk.onUpdate) {
                        const onUpdate = fk.onUpdate === "NO ACTION" ? "RESTRICT" : fk.onUpdate;
                        constraint += ` ON UPDATE ${onUpdate}`;
                    }
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            if (primaryColumns.length > 0) {
                const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            return new Query_7.Query(sql);
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrName, ifExist) {
            const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;
            return new Query_7.Query(query);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_7.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);
            }
            else {
                return new Query_7.Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentSchema = await this.getCurrentSchema();
            const splittedName = view.name.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = view.name;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", schema: schema, name: name, value: expression })
                .getQueryAndParameters();
            return new Query_7.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_7.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentSchema = await this.getCurrentSchema();
            const viewName = viewOrPath instanceof View_7.View ? viewOrPath.name : viewOrPath;
            const splittedName = viewName.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = viewName;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("schema")} = :schema`, { schema })
                .andWhere(`${qb.escape("name")} = :name`, { name })
                .getQueryAndParameters();
            return new Query_7.Query(query, parameters);
        }
        addColumnSql(table, column) {
            return `ALTER TABLE ${this.escapePath(table)} ADD (${this.buildCreateColumnSql(column)})`;
        }
        dropColumnSql(table, column) {
            return `ALTER TABLE ${this.escapePath(table)} DROP ("${column.name}")`;
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            let indexType = "";
            if (index.isUnique) {
                indexType += "UNIQUE ";
            }
            if (index.isFulltext) {
                indexType += "FULLTEXT ";
            }
            return new Query_7.Query(`CREATE ${indexType}INDEX "${index.name}" ON ${this.escapePath(table)} (${columns}) ${index.where ? "WHERE " + index.where : ""}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = indexOrName instanceof TableIndex_7.TableIndex ? indexOrName.name : indexOrName;
            const parsedTableName = this.parseTableName(table);
            if (parsedTableName.schema === "current_schema") {
                return new Query_7.Query(`DROP INDEX "${indexName}"`);
            }
            else {
                return new Query_7.Query(`DROP INDEX "${parsedTableName.schema.replace(/'/g, "")}"."${indexName}"`);
            }
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            const columnNames = table.primaryColumns.map(column => column.name);
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            return new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${primaryKeyName}"`);
        }
        /**
         * Builds create check constraint sql.
         */
        createCheckConstraintSql(table, checkConstraint) {
            return new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${checkConstraint.name}" CHECK (${checkConstraint.expression})`);
        }
        /**
         * Builds drop check constraint sql.
         */
        dropCheckConstraintSql(table, checkOrName) {
            const checkName = checkOrName instanceof TableCheck_5.TableCheck ? checkOrName.name : checkOrName;
            return new Query_7.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${checkName}"`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(tableOrName, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `"` + column + `"`).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `"` + column + `"`).join(",");
            let sql = `ALTER TABLE ${this.escapePath(tableOrName)} ADD CONSTRAINT "${foreignKey.name}" FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            // SAP HANA does not have "NO ACTION" option for FK's
            if (foreignKey.onDelete) {
                const onDelete = foreignKey.onDelete === "NO ACTION" ? "RESTRICT" : foreignKey.onDelete;
                sql += ` ON DELETE ${onDelete}`;
            }
            if (foreignKey.onUpdate) {
                const onUpdate = foreignKey.onUpdate === "NO ACTION" ? "RESTRICT" : foreignKey.onUpdate;
                sql += ` ON UPDATE ${onUpdate}`;
            }
            return new Query_7.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(tableOrName, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_7.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_7.Query(`ALTER TABLE ${this.escapePath(tableOrName)} DROP CONSTRAINT "${foreignKeyName}"`);
        }
        /**
         * Escapes given table or view path.
         */
        escapePath(target, disableEscape) {
            let tableName = target instanceof Table_7.Table || target instanceof View_7.View ? target.name : target;
            tableName = tableName.indexOf(".") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;
            return tableName.split(".").map(i => {
                return disableEscape ? i : `"${i}"`;
            }).join(".");
        }
        /**
         * Returns object with table schema and table name.
         */
        parseTableName(target) {
            const tableName = target instanceof Table_7.Table ? target.name : target;
            if (tableName.indexOf(".") === -1) {
                return {
                    schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : "current_schema",
                    tableName: `'${tableName}'`
                };
            }
            else {
                return {
                    schema: `'${tableName.split(".")[0]}'`,
                    tableName: `'${tableName.split(".")[1]}'`
                };
            }
        }
        /**
         * Concat database name and schema name to the foreign key name.
         * Needs because FK name is relevant to the schema and database.
         */
        buildForeignKeyName(fkName, schemaName, dbName) {
            let joinedFkName = fkName;
            if (schemaName)
                joinedFkName = schemaName + "." + joinedFkName;
            if (dbName)
                joinedFkName = dbName + "." + joinedFkName;
            return joinedFkName;
        }
        /**
         * Removes parenthesis around default value.
         * Sql server returns default value with parenthesis around, e.g.
         *  ('My text') - for string
         *  ((1)) - for number
         *  (newsequentialId()) - for function
         */
        removeParenthesisFromDefault(defaultValue) {
            if (defaultValue.substr(0, 1) !== "(")
                return defaultValue;
            const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(")") - 1);
            return this.removeParenthesisFromDefault(normalizedDefault);
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(column) {
            let c = `"${column.name}" ` + this.connection.driver.createFullType(column);
            if (column.charset)
                c += " CHARACTER SET " + column.charset;
            if (column.collation)
                c += " COLLATE " + column.collation;
            if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL
                c += " DEFAULT " + column.default;
            if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED
                c += " NOT NULL";
            if (column.isGenerated === true && column.generationStrategy === "increment")
                c += " GENERATED ALWAYS AS IDENTITY";
            return c;
        }
    }
    exports.SapQueryRunner = SapQueryRunner;
});
define("typeorm/driver/sap/SapDriver", ["require", "exports", "typeorm/error/DriverPackageNotInstalledError", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/ApplyValueTransformers", "typeorm/util/DateUtils", "typeorm/util/OrmUtils", "typeorm/driver/sap/SapQueryRunner"], function (require, exports, DriverPackageNotInstalledError_6, PlatformTools_9, RdbmsSchemaBuilder_7, ApplyValueTransformers_9, DateUtils_8, OrmUtils_21, SapQueryRunner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SapDriver = void 0;
    /**
     * Organizes communication with SAP Hana DBMS.
     *
     * todo: looks like there is no built in support for connection pooling, we need to figure out something
     */
    class SapDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Pool for slave databases.
             * Used in replication.
             */
            this.slaves = [];
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html
             */
            this.supportedDataTypes = [
                "tinyint",
                "smallint",
                "int",
                "integer",
                "bigint",
                "smalldecimal",
                "decimal",
                "dec",
                "real",
                "double",
                "float",
                "date",
                "time",
                "seconddate",
                "timestamp",
                "boolean",
                "char",
                "nchar",
                "varchar",
                "nvarchar",
                "text",
                "alphanum",
                "shorttext",
                "array",
                "varbinary",
                "blob",
                "clob",
                "nclob",
                "st_geometry",
                "st_point",
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [
                "st_geometry",
                "st_point",
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "varchar",
                "nvarchar",
                "alphanum",
                "shorttext",
                "varbinary"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "decimal",
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "decimal",
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "timestamp",
                createDateDefault: "CURRENT_TIMESTAMP",
                updateDate: "timestamp",
                updateDateDefault: "CURRENT_TIMESTAMP",
                deleteDate: "timestamp",
                deleteDateNullable: true,
                version: "integer",
                treeLevel: "integer",
                migrationId: "integer",
                migrationName: "nvarchar",
                migrationTimestamp: "bigint",
                cacheId: "integer",
                cacheIdentifier: "nvarchar",
                cacheTime: "bigint",
                cacheDuration: "integer",
                cacheQuery: "nvarchar(5000)",
                cacheResult: "text",
                metadataType: "nvarchar",
                metadataDatabase: "nvarchar",
                metadataSchema: "nvarchar",
                metadataTable: "nvarchar",
                metadataName: "nvarchar",
                metadataValue: "nvarchar(5000)",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "char": { length: 1 },
                "nchar": { length: 1 },
                "varchar": { length: 255 },
                "nvarchar": { length: 255 },
                "shorttext": { length: 255 },
                "varbinary": { length: 255 },
                "decimal": { precision: 18, scale: 0 },
            };
            /**
             * Max length allowed by SAP HANA for aliases (identifiers).
             * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html
             */
            this.maxAliasLength = 128;
            this.connection = connection;
            this.options = connection.options;
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
            // HANA connection info
            const dbParams = Object.assign({ hostName: this.options.host, port: this.options.port, userName: this.options.username, password: this.options.password }, this.options.extra);
            if (this.options.database)
                dbParams.databaseName = this.options.database;
            if (this.options.encrypt)
                dbParams.encrypt = this.options.encrypt;
            if (this.options.sslValidateCertificate)
                dbParams.validateCertificate = this.options.sslValidateCertificate;
            if (this.options.key)
                dbParams.key = this.options.key;
            if (this.options.cert)
                dbParams.cert = this.options.cert;
            if (this.options.ca)
                dbParams.ca = this.options.ca;
            // pool options
            const options = {
                min: this.options.pool && this.options.pool.min ? this.options.pool.min : 1,
                max: this.options.pool && this.options.pool.max ? this.options.pool.max : 10,
            };
            if (this.options.pool && this.options.pool.checkInterval)
                options.checkInterval = this.options.pool.checkInterval;
            if (this.options.pool && this.options.pool.maxWaitingRequests)
                options.maxWaitingRequests = this.options.pool.maxWaitingRequests;
            if (this.options.pool && this.options.pool.requestTimeout)
                options.requestTimeout = this.options.pool.requestTimeout;
            if (this.options.pool && this.options.pool.idleTimeout)
                options.idleTimeout = this.options.pool.idleTimeout;
            const { logger } = this.connection;
            const poolErrorHandler = options.poolErrorHandler || ((error) => logger.log("warn", `SAP Hana pool raised an error. ${error}`));
            this.client.eventEmitter.on("poolError", poolErrorHandler);
            // create the pool
            this.master = this.client.createPool(dbParams, options);
            this.database = this.options.database;
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        afterConnect() {
            return Promise.resolve();
        }
        /**
         * Closes connection with the database.
         */
        async disconnect() {
            const promise = this.master.clear();
            this.master = undefined;
            return promise;
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_7.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new SapQueryRunner_1.SapQueryRunner(this, mode);
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const builtParameters = Object.keys(nativeParameters).map(key => {
                if (nativeParameters[key] instanceof Date)
                    return DateUtils_8.DateUtils.mixedDateToDatetimeString(nativeParameters[key], true);
                return nativeParameters[key];
            });
            if (!parameters || !Object.keys(parameters).length)
                return [sql, builtParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v) => {
                        builtParameters.push(v);
                        return "?";
                        // return "$" + builtParameters.length;
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else if (value instanceof Date) {
                    return DateUtils_8.DateUtils.mixedDateToDatetimeString(value, true);
                }
                else {
                    builtParameters.push(value);
                    return "?";
                    // return "$" + builtParameters.length;
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, builtParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return `"${columnName}"`;
        }
        /**
         * Build full table name with schema name and table name.
         * E.g. "mySchema"."myTable"
         */
        buildTableName(tableName, schema) {
            return schema ? `${schema}.${tableName}` : tableName;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_9.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_8.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_8.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "timestamp"
                || columnMetadata.type === Date) {
                return DateUtils_8.DateUtils.mixedDateToDatetimeString(value, true);
            }
            else if (columnMetadata.type === "seconddate") {
                return DateUtils_8.DateUtils.mixedDateToDatetimeString(value, false);
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_8.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_8.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                return DateUtils_8.DateUtils.simpleEnumToString(value);
            }
            else if (columnMetadata.isArray) {
                return () => `ARRAY(${value.map((it) => `'${it}'`)})`;
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_9.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean) {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "timestamp"
                || columnMetadata.type === "seconddate"
                || columnMetadata.type === Date) {
                value = DateUtils_8.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_8.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_8.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_8.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_8.DateUtils.stringToSimpleJson(value);
            }
            else if (columnMetadata.type === "simple-enum") {
                value = DateUtils_8.DateUtils.stringToSimpleEnum(value, columnMetadata);
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_9.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "int") {
                return "integer";
            }
            else if (column.type === String) {
                return "nvarchar";
            }
            else if (column.type === Date) {
                return "timestamp";
            }
            else if (column.type === Boolean) {
                return "boolean";
            }
            else if (column.type === Buffer) {
                return "blob";
            }
            else if (column.type === "uuid") {
                return "nvarchar";
            }
            else if (column.type === "simple-array" || column.type === "simple-json") {
                return "text";
            }
            else if (column.type === "simple-enum") {
                return "nvarchar";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if (typeof defaultValue === "number") {
                return "" + defaultValue;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "true" : "false";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            if (column.length)
                return column.length.toString();
            if (column.generationStrategy === "uuid")
                return "36";
            switch (column.type) {
                case "varchar":
                case "nvarchar":
                case "shorttext":
                case String:
                    return "255";
                case "alphanum":
                    return "127";
                case "varbinary":
                    return "255";
            }
            return "";
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.
            if (this.getColumnLength(column)) {
                type += `(${this.getColumnLength(column)})`;
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += `(${column.precision},${column.scale})`;
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += `(${column.precision})`;
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return this.master.getConnection();
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            return this.obtainMasterConnection();
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult) {
            const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {
                let value;
                if (generatedColumn.generationStrategy === "increment" && insertResult) {
                    value = insertResult;
                    // } else if (generatedColumn.generationStrategy === "uuid") {
                    //     console.log("getting db value:", generatedColumn.databaseName);
                    //     value = generatedColumn.getEntityValue(uuidMap);
                }
                return OrmUtils_21.OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
            }, {});
            return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                // console.log("table:", columnMetadata.entityMetadata.tableName);
                // console.log("name:", tableColumn.name, columnMetadata.databaseName);
                // console.log("type:", tableColumn.type, _this.normalizeType(columnMetadata));
                // console.log("length:", tableColumn.length, _this.getColumnLength(columnMetadata));
                // console.log("width:", tableColumn.width, columnMetadata.width);
                // console.log("precision:", tableColumn.precision, columnMetadata.precision);
                // console.log("scale:", tableColumn.scale, columnMetadata.scale);
                // console.log("default:", tableColumn.default, columnMetadata.default);
                // console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                // console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                // console.log("isUnique:", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));
                // console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                // console.log((columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated));
                // console.log("==========================================");
                const normalizeDefault = this.normalizeDefault(columnMetadata);
                const hanaNullComapatibleDefault = normalizeDefault == null ? undefined : normalizeDefault;
                return tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || columnMetadata.length && tableColumn.length !== this.getColumnLength(columnMetadata)
                    || tableColumn.precision !== columnMetadata.precision
                    || tableColumn.scale !== columnMetadata.scale
                    // || tableColumn.comment !== columnMetadata.comment || // todo
                    || (!tableColumn.isGenerated && (hanaNullComapatibleDefault !== tableColumn.default)) // we included check for generated here, because generated columns already can have default values
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (columnMetadata.generationStrategy !== "uuid" && tableColumn.isGenerated !== columnMetadata.isGenerated);
            });
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return false;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return false;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return true;
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "?";
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.client = PlatformTools_9.PlatformTools.load("hdb-pool");
            }
            catch (e) { // todo: better error for browser env
                throw new DriverPackageNotInstalledError_6.DriverPackageNotInstalledError("SAP Hana", "hdb-pool");
            }
            try {
                PlatformTools_9.PlatformTools.load("@sap/hana-client");
            }
            catch (e) { // todo: better error for browser env
                throw new DriverPackageNotInstalledError_6.DriverPackageNotInstalledError("SAP Hana", "@sap/hana-client");
            }
        }
    }
    exports.SapDriver = SapDriver;
});
define("typeorm/query-builder/QueryBuilderUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryBuilderUtils = void 0;
    /**
     * Helper utility functions for QueryBuilder.
     */
    class QueryBuilderUtils {
        /**
         * Checks if given value is a string representation of alias property,
         * e.g. "post.category" or "post.id".
         */
        static isAliasProperty(str) {
            // alias property must be a string and must have a dot separator
            if (typeof str !== "string" || str.indexOf(".") === -1)
                return false;
            // extra alias and its property relation
            const [aliasName, propertyName] = str.split("."); // todo: what about relations in embedded?
            if (!aliasName || !propertyName)
                return false;
            // alias and property must be represented in a special format
            // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;
            // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))
            //     return false;
            // make sure string is not a subquery
            if (str.indexOf("(") !== -1 || str.indexOf(")") !== -1)
                return false;
            return true;
        }
    }
    exports.QueryBuilderUtils = QueryBuilderUtils;
});
define("typeorm/query-builder/Alias", ["require", "exports", "typeorm/util/ObjectUtils"], function (require, exports, ObjectUtils_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Alias = void 0;
    /**
     */
    class Alias {
        constructor(alias) {
            ObjectUtils_4.ObjectUtils.assign(this, alias || {});
        }
        get target() {
            return this.metadata.target;
        }
        get hasMetadata() {
            return !!this._metadata;
        }
        set metadata(metadata) {
            this._metadata = metadata;
        }
        get metadata() {
            if (!this._metadata)
                throw new Error(`Cannot get entity metadata for the given alias "${this.name}"`);
            return this._metadata;
        }
    }
    exports.Alias = Alias;
});
define("typeorm/query-builder/JoinAttribute", ["require", "exports", "typeorm/query-builder/QueryBuilderUtils", "typeorm/util/ObjectUtils"], function (require, exports, QueryBuilderUtils_1, ObjectUtils_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoinAttribute = void 0;
    /**
     * Stores all join attributes which will be used to build a JOIN query.
     */
    class JoinAttribute {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryExpressionMap, joinAttribute) {
            this.connection = connection;
            this.queryExpressionMap = queryExpressionMap;
            this.isSelectedEvaluated = false;
            this.relationEvaluated = false;
            ObjectUtils_5.ObjectUtils.assign(this, joinAttribute || {});
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        get isMany() {
            if (this.isMappingMany !== undefined)
                return this.isMappingMany;
            if (this.relation)
                return this.relation.isManyToMany || this.relation.isOneToMany;
            return false;
        }
        /**
         * Indicates if this join is selected.
         */
        get isSelected() {
            if (!this.isSelectedEvaluated) {
                let getValue = () => {
                    for (const select of this.queryExpressionMap.selects) {
                        if (select.selection === this.alias.name)
                            return true;
                        if (this.metadata && !!this.metadata.columns.find(column => select.selection === this.alias.name + "." + column.propertyPath))
                            return true;
                    }
                    return false;
                };
                this.isSelectedCache = getValue();
                this.isSelectedEvaluated = true;
            }
            return this.isSelectedCache;
        }
        /**
         * Name of the table which we should join.
         */
        get tablePath() {
            return this.metadata ? this.metadata.tablePath : this.entityOrProperty;
        }
        /**
         * Alias of the parent of this join.
         * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get parentAlias() {
            if (!QueryBuilderUtils_1.QueryBuilderUtils.isAliasProperty(this.entityOrProperty))
                return undefined;
            return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf("."));
        }
        /**
         * Relation property name of the parent.
         * This is used to understand what is joined.
         * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get relationPropertyPath() {
            if (!QueryBuilderUtils_1.QueryBuilderUtils.isAliasProperty(this.entityOrProperty))
                return undefined;
            return this.entityOrProperty.substr(this.entityOrProperty.indexOf(".") + 1);
        }
        /**
         * Relation of the parent.
         * This is used to understand what is joined.
         * This is available when join was made using "post.category" syntax.
         * Relation can be undefined if entityOrProperty is regular entity or custom table.
         */
        get relation() {
            if (!this.relationEvaluated) {
                let getValue = () => {
                    if (!QueryBuilderUtils_1.QueryBuilderUtils.isAliasProperty(this.entityOrProperty))
                        return undefined;
                    const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);
                    let relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);
                    if (relation) {
                        return relation;
                    }
                    if (relationOwnerSelection.metadata.parentEntityMetadata) {
                        relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath);
                        if (relation) {
                            return relation;
                        }
                    }
                    throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);
                };
                this.relationCache = getValue.bind(this)();
                this.relationEvaluated = true;
            }
            return this.relationCache;
        }
        /**
         * Metadata of the joined entity.
         * If table without entity was joined, then it will return undefined.
         */
        get metadata() {
            // entityOrProperty is relation, e.g. "post.category"
            if (this.relation)
                return this.relation.inverseEntityMetadata;
            // entityOrProperty is Entity class
            if (this.connection.hasMetadata(this.entityOrProperty))
                return this.connection.getMetadata(this.entityOrProperty);
            return undefined;
            /*if (typeof this.entityOrProperty === "string") { // entityOrProperty is a custom table
    
                // first try to find entity with such name, this is needed when entity does not have a target class,
                // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)
                const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);
                if (metadata)
                    return metadata;
    
                // check if we have entity with such table name, and use its metadata if found
                return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);
            }*/
        }
        /**
         * Generates alias of junction table, whose ids we get.
         */
        get junctionAlias() {
            if (!this.relation)
                throw new Error(`Cannot get junction table for join without relation.`);
            return this.relation.isOwning ? this.parentAlias + "_" + this.alias.name : this.alias.name + "_" + this.parentAlias;
        }
        get mapToPropertyParentAlias() {
            if (!this.mapToProperty)
                return undefined;
            return this.mapToProperty.split(".")[0];
        }
        get mapToPropertyPropertyName() {
            if (!this.mapToProperty)
                return undefined;
            return this.mapToProperty.split(".")[1];
        }
    }
    exports.JoinAttribute = JoinAttribute;
});
define("typeorm/query-builder/relation-count/RelationCountAttribute", ["require", "exports", "typeorm/query-builder/QueryBuilderUtils", "typeorm/util/ObjectUtils"], function (require, exports, QueryBuilderUtils_2, ObjectUtils_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationCountAttribute = void 0;
    class RelationCountAttribute {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(expressionMap, relationCountAttribute) {
            this.expressionMap = expressionMap;
            ObjectUtils_6.ObjectUtils.assign(this, relationCountAttribute || {});
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        get joinInverseSideMetadata() {
            return this.relation.inverseEntityMetadata;
        }
        /**
         * Alias of the parent of this join.
         * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get parentAlias() {
            if (!QueryBuilderUtils_2.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value must be a string representation of alias property`);
            return this.relationName.split(".")[0];
        }
        /**
         * Relation property name of the parent.
         * This is used to understand what is joined.
         * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get relationProperty() {
            if (!QueryBuilderUtils_2.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value is a string representation of alias property`);
            return this.relationName.split(".")[1];
        }
        get junctionAlias() {
            const [parentAlias, relationProperty] = this.relationName.split(".");
            return parentAlias + "_" + relationProperty + "_rc";
        }
        /**
         * Relation of the parent.
         * This is used to understand what is joined.
         * This is available when join was made using "post.category" syntax.
         */
        get relation() {
            if (!QueryBuilderUtils_2.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value is a string representation of alias property`);
            const [parentAlias, propertyPath] = this.relationName.split(".");
            const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);
            const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);
            if (!relation)
                throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);
            return relation;
        }
        /**
         * Metadata of the joined entity.
         * If table without entity was joined, then it will return undefined.
         */
        get metadata() {
            if (!QueryBuilderUtils_2.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value is a string representation of alias property`);
            const parentAlias = this.relationName.split(".")[0];
            const selection = this.expressionMap.findAliasByName(parentAlias);
            return selection.metadata;
        }
        get mapToPropertyPropertyName() {
            return this.mapToProperty.split(".")[1];
        }
    }
    exports.RelationCountAttribute = RelationCountAttribute;
});
define("typeorm/query-builder/SelectQuery", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/query-builder/Brackets", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Brackets = void 0;
    /**
     * Syntax sugar.
     * Allows to use brackets in WHERE expressions for better syntax.
     */
    class Brackets {
        /**
         * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.
         */
        constructor(whereFactory) {
            this.whereFactory = whereFactory;
        }
    }
    exports.Brackets = Brackets;
});
define("typeorm/query-builder/WhereExpression", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/error/ReturningStatementNotSupportedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReturningStatementNotSupportedError = void 0;
    /**
     * Thrown when user tries to build a query with RETURNING / OUTPUT statement,
     * but used database does not support it.
     */
    class ReturningStatementNotSupportedError extends Error {
        constructor() {
            super();
            this.name = "ReturningStatementNotSupportedError";
            Object.setPrototypeOf(this, ReturningStatementNotSupportedError.prototype);
            this.message = `OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL databases.`;
        }
    }
    exports.ReturningStatementNotSupportedError = ReturningStatementNotSupportedError;
});
define("typeorm/query-builder/ReturningResultsEntityUpdator", ["require", "exports", "typeorm/util/OrmUtils", "typeorm/driver/oracle/OracleDriver"], function (require, exports, OrmUtils_22, OracleDriver_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReturningResultsEntityUpdator = void 0;
    /**
     * Updates entity with returning results in the entity insert and update operations.
     */
    class ReturningResultsEntityUpdator {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryRunner, expressionMap) {
            this.queryRunner = queryRunner;
            this.expressionMap = expressionMap;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Updates entities with a special columns after updation query execution.
         */
        async update(updateResult, entities) {
            const metadata = this.expressionMap.mainAlias.metadata;
            await Promise.all(entities.map(async (entity, entityIndex) => {
                // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query
                if (this.queryRunner.connection.driver.isReturningSqlSupported()) {
                    if (this.queryRunner.connection.driver instanceof OracleDriver_2.OracleDriver && Array.isArray(updateResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {
                        updateResult.raw = updateResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {
                            newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];
                            return newRaw;
                        }, {});
                    }
                    const result = Array.isArray(updateResult.raw) ? updateResult.raw[entityIndex] : updateResult.raw;
                    const returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);
                    if (returningColumns) {
                        this.queryRunner.manager.merge(metadata.target, entity, returningColumns);
                        updateResult.generatedMaps.push(returningColumns);
                    }
                }
                else {
                    // for driver which do not support returning/output statement we need to perform separate query and load what we need
                    const updationColumns = this.getUpdationReturningColumns();
                    if (updationColumns.length > 0) {
                        // get entity id by which we will get needed data
                        const entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);
                        if (!entityId)
                            throw new Error(`Cannot update entity because entity id is not set in the entity.`);
                        // execute query to get needed data
                        const loadedReturningColumns = await this.queryRunner.manager
                            .createQueryBuilder()
                            .select(metadata.primaryColumns.map(column => metadata.targetName + "." + column.propertyPath))
                            .addSelect(this.getUpdationReturningColumns().map(column => metadata.targetName + "." + column.propertyPath))
                            .from(metadata.target, metadata.targetName)
                            .where(entityId)
                            .setOption("create-pojo") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process
                            .getOne();
                        if (loadedReturningColumns) {
                            this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);
                            updateResult.generatedMaps.push(loadedReturningColumns);
                        }
                    }
                }
            }));
        }
        /**
         * Updates entities with a special columns after insertion query execution.
         */
        async insert(insertResult, entities) {
            const metadata = this.expressionMap.mainAlias.metadata;
            const insertionColumns = this.getInsertionReturningColumns();
            const generatedMaps = entities.map((entity, entityIndex) => {
                if (this.queryRunner.connection.driver instanceof OracleDriver_2.OracleDriver && Array.isArray(insertResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {
                    insertResult.raw = insertResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {
                        newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];
                        return newRaw;
                    }, {});
                }
                // get all values generated by a database for us
                const result = Array.isArray(insertResult.raw) ? insertResult.raw[entityIndex] : insertResult.raw;
                const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, result, entityIndex, entities.length) || {};
                // if database does not support uuid generation we need to get uuid values
                // generated by orm and set them to the generatedMap
                if (this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {
                    metadata.generatedColumns.forEach(generatedColumn => {
                        if (generatedColumn.generationStrategy === "uuid") {
                            // uuid can be defined by user in a model, that's why first we get it
                            let uuid = generatedColumn.getEntityValue(entity);
                            if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value
                                uuid = this.expressionMap.nativeParameters["uuid_" + generatedColumn.databaseName + entityIndex];
                            OrmUtils_22.OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));
                        }
                    });
                }
                this.queryRunner.manager.merge(metadata.target, entity, generatedMap); // todo: this should not be here, but problem with below line
                return generatedMap;
            });
            // for postgres and mssql we use returning/output statement to get values of inserted default and generated values
            // for other drivers we have to re-select this data from the database
            if (this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0) {
                const entityIds = entities.map((entity) => {
                    const entityId = metadata.getEntityIdMap(entity);
                    // We have to check for an empty `entityId` - if we don't, the query against the database
                    // effectively drops the `where` clause entirely and the first record will be returned -
                    // not what we want at all.
                    if (!entityId)
                        throw new Error(`Cannot update entity because entity id is not set in the entity.`);
                    return entityId;
                });
                // to select just inserted entities we need a criteria to select by.
                // for newly inserted entities in drivers which do not support returning statement
                // row identifier can only be an increment column
                // (since its the only thing that can be generated by those databases)
                // or (and) other primary key which is defined by a user and inserted value has it
                const returningResult = await this.queryRunner.manager
                    .createQueryBuilder()
                    .select(metadata.primaryColumns.map(column => metadata.targetName + "." + column.propertyPath))
                    .addSelect(insertionColumns.map(column => metadata.targetName + "." + column.propertyPath))
                    .from(metadata.target, metadata.targetName)
                    .where(entityIds)
                    .setOption("create-pojo") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process
                    .getMany();
                entities.forEach((entity, entityIndex) => {
                    this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult[entityIndex]);
                });
            }
            entities.forEach((entity, entityIndex) => {
                const entityId = metadata.getEntityIdMap(entity);
                insertResult.identifiers.push(entityId);
                insertResult.generatedMaps.push(generatedMaps[entityIndex]);
                this.queryRunner.manager.merge(this.expressionMap.mainAlias.metadata.target, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!
            });
        }
        /**
         * Columns we need to be returned from the database when we insert entity.
         */
        getInsertionReturningColumns() {
            // for databases which support returning statement we need to return extra columns like id
            // for other databases we don't need to return id column since its returned by a driver already
            const needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();
            // filter out the columns of which we need database inserted values to update our entity
            return this.expressionMap.mainAlias.metadata.columns.filter(column => {
                return column.default !== undefined ||
                    (needToCheckGenerated && column.isGenerated) ||
                    column.isCreateDate ||
                    column.isUpdateDate ||
                    column.isDeleteDate ||
                    column.isVersion;
            });
        }
        /**
         * Columns we need to be returned from the database when we update entity.
         */
        getUpdationReturningColumns() {
            return this.expressionMap.mainAlias.metadata.columns.filter(column => {
                return column.isUpdateDate || column.isVersion;
            });
        }
    }
    exports.ReturningResultsEntityUpdator = ReturningResultsEntityUpdator;
});
define("typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", ["require", "exports", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/schema-builder/table/TableColumn", "typeorm/metadata/ColumnMetadata", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/view/View", "typeorm/subscriber/BroadcasterResult", "typeorm/driver/Query", "typeorm/schema-builder/table/TableUnique", "typeorm/query-runner/BaseQueryRunner", "typeorm/util/OrmUtils", "typeorm/schema-builder/table/TableCheck"], function (require, exports, TransactionAlreadyStartedError_7, TransactionNotStartedError_7, TableColumn_9, ColumnMetadata_1, Table_8, TableIndex_8, TableForeignKey_8, View_8, BroadcasterResult_9, Query_8, TableUnique_8, BaseQueryRunner_7, OrmUtils_23, TableCheck_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractSqliteQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class AbstractSqliteQueryRunner extends BaseQueryRunner_7.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor() {
            super();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            return Promise.resolve(this.driver.databaseConnection);
        }
        /**
         * Releases used database connection.
         * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.
         */
        release() {
            this.loadedTables = [];
            this.clearSqlMemory();
            return Promise.resolve();
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_7.TransactionAlreadyStartedError();
            if (isolationLevel) {
                if (isolationLevel !== "READ UNCOMMITTED" && isolationLevel !== "SERIALIZABLE") {
                    throw new Error(`SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`);
                }
                if (isolationLevel === "READ UNCOMMITTED") {
                    await this.query("PRAGMA read_uncommitted = true");
                }
                else {
                    await this.query("PRAGMA read_uncommitted = false");
                }
            }
            const beforeBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            await this.query("BEGIN TRANSACTION");
            const afterBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_7.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("COMMIT");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_7.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("ROLLBACK");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_9.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            throw new Error(`Stream is not supported by sqlite driver.`);
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            return Promise.resolve([]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            return Promise.resolve(false);
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            throw new Error(`This driver does not support table schemas`);
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const tableName = tableOrName instanceof Table_8.Table ? tableOrName.name : tableOrName;
            const sql = `SELECT * FROM "sqlite_master" WHERE "type" = 'table' AND "name" = '${tableName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            const tableName = tableOrName instanceof Table_8.Table ? tableOrName.name : tableOrName;
            const sql = `PRAGMA table_info("${tableName}")`;
            const columns = await this.query(sql);
            return !!columns.find(column => column["name"] === columnName);
        }
        /**
         * Creates a new database.
         */
        async createDatabase(database, ifNotExist) {
            return Promise.resolve();
        }
        /**
         * Drops database.
         */
        async dropDatabase(database, ifExist) {
            return Promise.resolve();
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            return Promise.resolve();
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist) {
            return Promise.resolve();
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            const upQueries = [];
            const downQueries = [];
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            if (createIndices) {
                table.indices.forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(tableOrName, ifExist, dropForeignKeys = true, dropIndices = true) {
            if (ifExist) {
                const isTableExist = await this.hasTable(tableOrName);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const upQueries = [];
            const downQueries = [];
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            upQueries.push(this.dropTableSql(table, ifExist));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_8.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames the given table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const oldTable = oldTableOrName instanceof Table_8.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            newTable.name = newTableName;
            // rename table
            const up = new Query_8.Query(`ALTER TABLE "${oldTable.name}" RENAME TO "${newTableName}"`);
            const down = new Query_8.Query(`ALTER TABLE "${newTableName}" RENAME TO "${oldTable.name}"`);
            await this.executeQueries(up, down);
            // rename old table;
            oldTable.name = newTable.name;
            // rename unique constraints
            newTable.uniques.forEach(unique => {
                unique.name = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
            });
            // rename foreign key constraints
            newTable.foreignKeys.forEach(foreignKey => {
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            });
            // rename indices
            newTable.indices.forEach(index => {
                index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
            });
            // recreate table with new constraint names
            await this.recreateTable(newTable, oldTable);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            return this.addColumns(table, [column]);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const changedTable = table.clone();
            columns.forEach(column => changedTable.addColumn(column));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_9.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn = undefined;
            if (newTableColumnOrName instanceof TableColumn_9.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            return this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_9.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            await this.changeColumns(table, [{ oldColumn, newColumn }]);
        }
        /**
         * Changes a column in the table.
         * Changed column looses all its keys in the db.
         */
        async changeColumns(tableOrName, changedColumns) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const changedTable = table.clone();
            changedColumns.forEach(changedColumnSet => {
                if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {
                    changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(unique => {
                        unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                        unique.columnNames.push(changedColumnSet.newColumn.name);
                        unique.name = this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);
                    });
                    changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(fk => {
                        fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                        fk.columnNames.push(changedColumnSet.newColumn.name);
                        fk.name = this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    });
                    changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(index => {
                        index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);
                        index.columnNames.push(changedColumnSet.newColumn.name);
                        index.name = this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);
                    });
                }
                const originalColumn = changedTable.columns.find(column => column.name === changedColumnSet.oldColumn.name);
                if (originalColumn)
                    changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;
            });
            await this.recreateTable(changedTable, table);
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_9.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            await this.dropColumns(table, [column]);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and remove column and its constraints from cloned table
            const changedTable = table.clone();
            columns.forEach(column => {
                changedTable.removeColumn(column);
                changedTable.findColumnUniques(column).forEach(unique => changedTable.removeUniqueConstraint(unique));
                changedTable.findColumnIndices(column).forEach(index => changedTable.removeIndex(index));
                changedTable.findColumnForeignKeys(column).forEach(fk => changedTable.removeForeignKey(fk));
            });
            await this.recreateTable(changedTable, table);
            // remove column and its constraints from original table.
            columns.forEach(column => {
                table.removeColumn(column);
                table.findColumnUniques(column).forEach(unique => table.removeUniqueConstraint(unique));
                table.findColumnIndices(column).forEach(index => table.removeIndex(index));
                table.findColumnForeignKeys(column).forEach(fk => table.removeForeignKey(fk));
            });
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and mark columns as primary
            const changedTable = table.clone();
            changedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            await this.recreateTable(changedTable, table);
            // mark columns as primary in original table
            table.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            await Promise.resolve();
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and mark primary columns as non-primary
            const changedTable = table.clone();
            changedTable.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
            await this.recreateTable(changedTable, table);
            // mark primary columns as non-primary in original table
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates a new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            await this.createUniqueConstraints(tableOrName, [uniqueConstraint]);
        }
        /**
         * Creates a new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and add unique constraints in to cloned table
            const changedTable = table.clone();
            uniqueConstraints.forEach(uniqueConstraint => changedTable.addUniqueConstraint(uniqueConstraint));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Drops an unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const uniqueConstraint = uniqueOrName instanceof TableUnique_8.TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);
            if (!uniqueConstraint)
                throw new Error(`Supplied unique constraint was not found in table ${table.name}`);
            await this.dropUniqueConstraints(table, [uniqueConstraint]);
        }
        /**
         * Creates an unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and remove unique constraints from cloned table
            const changedTable = table.clone();
            uniqueConstraints.forEach(uniqueConstraint => changedTable.removeUniqueConstraint(uniqueConstraint));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Creates new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            await this.createCheckConstraints(tableOrName, [checkConstraint]);
        }
        /**
         * Creates new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and add check constraints in to cloned table
            const changedTable = table.clone();
            checkConstraints.forEach(checkConstraint => changedTable.addCheckConstraint(checkConstraint));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_6.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            await this.dropCheckConstraints(table, [checkConstraint]);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and remove check constraints from cloned table
            const changedTable = table.clone();
            checkConstraints.forEach(checkConstraint => changedTable.removeCheckConstraint(checkConstraint));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Creates a new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            throw new Error(`Sqlite does not support exclusion constraints.`);
        }
        /**
         * Creates a new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Sqlite does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            throw new Error(`Sqlite does not support exclusion constraints.`);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            throw new Error(`Sqlite does not support exclusion constraints.`);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            await this.createForeignKeys(tableOrName, [foreignKey]);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and add foreign keys in to cloned table
            const changedTable = table.clone();
            foreignKeys.forEach(foreignKey => changedTable.addForeignKey(foreignKey));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_8.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            await this.dropForeignKeys(tableOrName, [foreignKey]);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // clone original table and remove foreign keys from cloned table
            const changedTable = table.clone();
            foreignKeys.forEach(foreignKey => changedTable.removeForeignKey(foreignKey));
            await this.recreateTable(changedTable, table);
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(index);
            await this.executeQueries(up, down);
            table.addIndex(index);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            const promises = indices.map(index => this.createIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Drops an index from the table.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_8.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_8.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            const promises = indices.map(index => this.dropIndex(tableOrName, index));
            await Promise.all(promises);
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableName) {
            await this.query(`DELETE FROM "${tableName}"`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase() {
            await this.query(`PRAGMA foreign_keys = OFF;`);
            await this.startTransaction();
            try {
                const selectViewDropsQuery = `SELECT 'DROP VIEW "' || name || '";' as query FROM "sqlite_master" WHERE "type" = 'view'`;
                const dropViewQueries = await this.query(selectViewDropsQuery);
                await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                const selectTableDropsQuery = `SELECT 'DROP TABLE "' || name || '";' as query FROM "sqlite_master" WHERE "type" = 'table' AND "name" != 'sqlite_sequence'`;
                const dropTableQueries = await this.query(selectTableDropsQuery);
                await Promise.all(dropTableQueries.map(q => this.query(q["query"])));
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
            finally {
                await this.query(`PRAGMA foreign_keys = ON;`);
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const viewNamesString = viewNames.map(name => "'" + name + "'").join(", ");
            let query = `SELECT "t".* FROM "${this.getTypeormMetadataTableName()}" "t" INNER JOIN "sqlite_master" s ON "s"."name" = "t"."name" AND "s"."type" = 'view' WHERE "t"."type" = 'VIEW'`;
            if (viewNamesString.length > 0)
                query += ` AND "t"."name" IN (${viewNamesString})`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_8.View();
                view.name = dbView["name"];
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(", ");
            // load tables
            const dbTables = await this.query(`SELECT * FROM "sqlite_master" WHERE "type" = 'table' AND "name" IN (${tableNamesString})`);
            // load indices
            const dbIndicesDef = await this.query(`SELECT * FROM "sqlite_master" WHERE "type" = 'index' AND "tbl_name" IN (${tableNamesString})`);
            // if tables were not found in the db, no need to proceed
            if (!dbTables || !dbTables.length)
                return [];
            // create table schemas for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_8.Table({ name: dbTable["name"] });
                const sql = dbTable["sql"];
                // load columns and indices
                const [dbColumns, dbIndices, dbForeignKeys] = await Promise.all([
                    this.query(`PRAGMA table_info("${dbTable["name"]}")`),
                    this.query(`PRAGMA index_list("${dbTable["name"]}")`),
                    this.query(`PRAGMA foreign_key_list("${dbTable["name"]}")`),
                ]);
                // find column name with auto increment
                let autoIncrementColumnName = undefined;
                const tableSql = dbTable["sql"];
                let autoIncrementIndex = tableSql.toUpperCase().indexOf("AUTOINCREMENT");
                if (autoIncrementIndex !== -1) {
                    autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);
                    const comma = autoIncrementColumnName.lastIndexOf(",");
                    const bracket = autoIncrementColumnName.lastIndexOf("(");
                    if (comma !== -1) {
                        autoIncrementColumnName = autoIncrementColumnName.substr(comma);
                        autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf("\""));
                        autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf("\"") + 1);
                    }
                    else if (bracket !== -1) {
                        autoIncrementColumnName = autoIncrementColumnName.substr(bracket);
                        autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf("\""));
                        autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf("\"") + 1);
                    }
                }
                // create columns from the loaded columns
                table.columns = dbColumns.map(dbColumn => {
                    const tableColumn = new TableColumn_9.TableColumn();
                    tableColumn.name = dbColumn["name"];
                    tableColumn.type = dbColumn["type"].toLowerCase();
                    tableColumn.default = dbColumn["dflt_value"] !== null && dbColumn["dflt_value"] !== undefined ? dbColumn["dflt_value"] : undefined;
                    tableColumn.isNullable = dbColumn["notnull"] === 0;
                    // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0
                    tableColumn.isPrimary = dbColumn["pk"] > 0;
                    tableColumn.comment = ""; // SQLite does not support column comments
                    tableColumn.isGenerated = autoIncrementColumnName === dbColumn["name"];
                    if (tableColumn.isGenerated) {
                        tableColumn.generationStrategy = "increment";
                    }
                    if (tableColumn.type === "varchar") {
                        // Check if this is an enum
                        const enumMatch = sql.match(new RegExp("\"(" + tableColumn.name + ")\" varchar CHECK\\s*\\(\\s*\\1\\s+IN\\s*\\(('[^']+'(?:\\s*,\\s*'[^']+')+)\\s*\\)\\s*\\)"));
                        if (enumMatch) {
                            // This is an enum
                            tableColumn.type = "simple-enum";
                            tableColumn.enum = enumMatch[2].substr(1, enumMatch[2].length - 2).split("','");
                        }
                    }
                    // parse datatype and attempt to retrieve length, precision and scale
                    let pos = tableColumn.type.indexOf("(");
                    if (pos !== -1) {
                        const fullType = tableColumn.type;
                        let dataType = fullType.substr(0, pos);
                        if (!!this.driver.withLengthColumnTypes.find(col => col === dataType)) {
                            let len = parseInt(fullType.substring(pos + 1, fullType.length - 1));
                            if (len) {
                                tableColumn.length = len.toString();
                                tableColumn.type = dataType; // remove the length part from the datatype
                            }
                        }
                        if (!!this.driver.withPrecisionColumnTypes.find(col => col === dataType)) {
                            const re = new RegExp(`^${dataType}\\((\\d+),?\\s?(\\d+)?\\)`);
                            const matches = fullType.match(re);
                            if (matches && matches[1]) {
                                tableColumn.precision = +matches[1];
                            }
                            if (!!this.driver.withScaleColumnTypes.find(col => col === dataType)) {
                                if (matches && matches[2]) {
                                    tableColumn.scale = +matches[2];
                                }
                            }
                            tableColumn.type = dataType; // remove the precision/scale part from the datatype
                        }
                    }
                    return tableColumn;
                });
                // build foreign keys
                const tableForeignKeyConstraints = OrmUtils_23.OrmUtils.uniq(dbForeignKeys, dbForeignKey => dbForeignKey["id"]);
                table.foreignKeys = tableForeignKeyConstraints.map(foreignKey => {
                    const ownForeignKeys = dbForeignKeys.filter(dbForeignKey => dbForeignKey["id"] === foreignKey["id"] && dbForeignKey["table"] === foreignKey["table"]);
                    const columnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey["from"]);
                    const referencedColumnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey["to"]);
                    // build foreign key name, because we can not get it directly.
                    const fkName = this.connection.namingStrategy.foreignKeyName(table, columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                    return new TableForeignKey_8.TableForeignKey({
                        name: fkName,
                        columnNames: columnNames,
                        referencedTableName: foreignKey["table"],
                        referencedColumnNames: referencedColumnNames,
                        onDelete: foreignKey["on_delete"],
                        onUpdate: foreignKey["on_update"]
                    });
                });
                // build unique constraints
                const tableUniquePromises = dbIndices
                    .filter(dbIndex => dbIndex["origin"] === "u")
                    .map(dbIndex => dbIndex["name"])
                    .filter((value, index, self) => self.indexOf(value) === index)
                    .map(async (dbIndexName) => {
                    const dbIndex = dbIndices.find(dbIndex => dbIndex["name"] === dbIndexName);
                    const indexInfos = await this.query(`PRAGMA index_info("${dbIndex["name"]}")`);
                    const indexColumns = indexInfos
                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1["seqno"]) - parseInt(indexInfo2["seqno"]))
                        .map(indexInfo => indexInfo["name"]);
                    if (indexColumns.length === 1) {
                        const column = table.columns.find(column => {
                            return !!indexColumns.find(indexColumn => indexColumn === column.name);
                        });
                        if (column)
                            column.isUnique = true;
                    }
                    // Sqlite does not store unique constraint name, so we generate its name manually.
                    return new TableUnique_8.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),
                        columnNames: indexColumns
                    });
                });
                table.uniques = (await Promise.all(tableUniquePromises));
                // build checks
                let result;
                const regexp = /CONSTRAINT "([^"]*)" CHECK (\(.*?\))([,]|[)]$)/g;
                while (((result = regexp.exec(sql)) !== null)) {
                    table.checks.push(new TableCheck_6.TableCheck({ name: result[1], expression: result[2] }));
                }
                // build indices
                const indicesPromises = dbIndices
                    .filter(dbIndex => dbIndex["origin"] === "c")
                    .map(dbIndex => dbIndex["name"])
                    .filter((value, index, self) => self.indexOf(value) === index) // unqiue
                    .map(async (dbIndexName) => {
                    const indexDef = dbIndicesDef.find(dbIndexDef => dbIndexDef["name"] === dbIndexName);
                    const condition = /WHERE (.*)/.exec(indexDef["sql"]);
                    const dbIndex = dbIndices.find(dbIndex => dbIndex["name"] === dbIndexName);
                    const indexInfos = await this.query(`PRAGMA index_info("${dbIndex["name"]}")`);
                    const indexColumns = indexInfos
                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1["seqno"]) - parseInt(indexInfo2["seqno"]))
                        .map(indexInfo => indexInfo["name"]);
                    const isUnique = dbIndex["unique"] === "1" || dbIndex["unique"] === 1;
                    return new TableIndex_8.TableIndex({
                        table: table,
                        name: dbIndex["name"],
                        columnNames: indexColumns,
                        isUnique: isUnique,
                        where: condition ? condition[1] : undefined
                    });
                });
                const indices = await Promise.all(indicesPromises);
                table.indices = indices.filter(index => !!index);
                return table;
            }));
        }
        /**
         * Builds create table sql.
         */
        createTableSql(table, createForeignKeys) {
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            const hasAutoIncrement = primaryColumns.find(column => column.isGenerated && column.generationStrategy === "increment");
            const skipPrimary = primaryColumns.length > 1;
            if (skipPrimary && hasAutoIncrement)
                throw new Error(`Sqlite does not support AUTOINCREMENT on composite primary key`);
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, skipPrimary)).join(", ");
            let sql = `CREATE TABLE "${table.name}" (${columnDefinitions}`;
            // need for `addColumn()` method, because it recreates table.
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
                if (!isUniqueExist)
                    table.uniques.push(new TableUnique_8.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name]
                    }));
            });
            if (table.uniques.length > 0) {
                const uniquesSql = table.uniques.map(unique => {
                    const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
                    const columnNames = unique.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    return `CONSTRAINT "${uniqueName}" UNIQUE (${columnNames})`;
                }).join(", ");
                sql += `, ${uniquesSql}`;
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES "${fk.referencedTableName}" (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            if (primaryColumns.length > 1) {
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === table.name);
            if (tableMetadata && tableMetadata.withoutRowid) {
                sql += " WITHOUT ROWID";
            }
            return new Query_8.Query(sql);
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrName, ifExist) {
            const tableName = tableOrName instanceof Table_8.Table ? tableOrName.name : tableOrName;
            const query = ifExist ? `DROP TABLE IF EXISTS "${tableName}"` : `DROP TABLE "${tableName}"`;
            return new Query_8.Query(query);
        }
        createViewSql(view) {
            if (typeof view.expression === "string") {
                return new Query_8.Query(`CREATE VIEW "${view.name}" AS ${view.expression}`);
            }
            else {
                return new Query_8.Query(`CREATE VIEW "${view.name}" AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        insertViewDefinitionSql(view) {
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", name: view.name, value: expression })
                .getQueryAndParameters();
            return new Query_8.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            const viewName = viewOrPath instanceof View_8.View ? viewOrPath.name : viewOrPath;
            return new Query_8.Query(`DROP VIEW "${viewName}"`);
        }
        /**
         * Builds remove view sql.
         */
        deleteViewDefinitionSql(viewOrPath) {
            const viewName = viewOrPath instanceof View_8.View ? viewOrPath.name : viewOrPath;
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("name")} = :name`, { name: viewName })
                .getQueryAndParameters();
            return new Query_8.Query(query, parameters);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_8.Query(`CREATE ${index.isUnique ? "UNIQUE " : ""}INDEX "${index.name}" ON "${table.name}" (${columns}) ${index.where ? "WHERE " + index.where : ""}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(indexOrName) {
            let indexName = indexOrName instanceof TableIndex_8.TableIndex ? indexOrName.name : indexOrName;
            return new Query_8.Query(`DROP INDEX "${indexName}"`);
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(column, skipPrimary) {
            let c = "\"" + column.name + "\"";
            if (column instanceof ColumnMetadata_1.ColumnMetadata) {
                c += " " + this.driver.normalizeType(column);
            }
            else {
                c += " " + this.connection.driver.createFullType(column);
            }
            if (column.enum)
                c += " CHECK( " + column.name + " IN (" + column.enum.map(val => "'" + val + "'").join(",") + ") )";
            if (column.isPrimary && !skipPrimary)
                c += " PRIMARY KEY";
            if (column.isGenerated === true && column.generationStrategy === "increment") // don't use skipPrimary here since updates can update already exist primary without auto inc.
                c += " AUTOINCREMENT";
            if (column.collation)
                c += " COLLATE " + column.collation;
            if (column.isNullable !== true)
                c += " NOT NULL";
            if (column.default !== undefined && column.default !== null)
                c += " DEFAULT (" + column.default + ")";
            return c;
        }
        async recreateTable(newTable, oldTable, migrateData = true) {
            const upQueries = [];
            const downQueries = [];
            // drop old table indices
            oldTable.indices.forEach(index => {
                upQueries.push(this.dropIndexSql(index));
                downQueries.push(this.createIndexSql(oldTable, index));
            });
            // change table name into 'temporary_table'
            newTable.name = "temporary_" + newTable.name;
            // create new table
            upQueries.push(this.createTableSql(newTable, true));
            downQueries.push(this.dropTableSql(newTable));
            // migrate all data from the old table into new table
            if (migrateData) {
                let newColumnNames = newTable.columns.map(column => `"${column.name}"`).join(", ");
                let oldColumnNames = oldTable.columns.map(column => `"${column.name}"`).join(", ");
                if (oldTable.columns.length < newTable.columns.length) {
                    newColumnNames = newTable.columns.filter(column => {
                        return oldTable.columns.find(c => c.name === column.name);
                    }).map(column => `"${column.name}"`).join(", ");
                }
                else if (oldTable.columns.length > newTable.columns.length) {
                    oldColumnNames = oldTable.columns.filter(column => {
                        return newTable.columns.find(c => c.name === column.name);
                    }).map(column => `"${column.name}"`).join(", ");
                }
                upQueries.push(new Query_8.Query(`INSERT INTO "${newTable.name}"(${newColumnNames}) SELECT ${oldColumnNames} FROM "${oldTable.name}"`));
                downQueries.push(new Query_8.Query(`INSERT INTO "${oldTable.name}"(${oldColumnNames}) SELECT ${newColumnNames} FROM "${newTable.name}"`));
            }
            // drop old table
            upQueries.push(this.dropTableSql(oldTable));
            downQueries.push(this.createTableSql(oldTable, true));
            // rename old table
            upQueries.push(new Query_8.Query(`ALTER TABLE "${newTable.name}" RENAME TO "${oldTable.name}"`));
            downQueries.push(new Query_8.Query(`ALTER TABLE "${oldTable.name}" RENAME TO "${newTable.name}"`));
            newTable.name = oldTable.name;
            // recreate table indices
            newTable.indices.forEach(index => {
                // new index may be passed without name. In this case we generate index name manually.
                if (!index.name)
                    index.name = this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);
                upQueries.push(this.createIndexSql(newTable, index));
                downQueries.push(this.dropIndexSql(index));
            });
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(oldTable, newTable);
        }
    }
    exports.AbstractSqliteQueryRunner = AbstractSqliteQueryRunner;
});
define("typeorm/driver/sqljs/SqljsQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster", "typeorm/error/QueryFailedError"], function (require, exports, QueryRunnerAlreadyReleasedError_7, AbstractSqliteQueryRunner_1, Broadcaster_8, QueryFailedError_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqljsQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class SqljsQueryRunner extends AbstractSqliteQueryRunner_1.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_8.Broadcaster(this);
        }
        // -------------------------------------------------------------------------
        // Public methods
        // -------------------------------------------------------------------------
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            await super.commitTransaction();
            await this.driver.autoSave();
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters = []) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_7.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                const databaseConnection = this.driver.databaseConnection;
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                let statement;
                try {
                    statement = databaseConnection.prepare(query);
                    if (parameters) {
                        parameters = parameters.map(p => typeof p !== 'undefined' ? p : null);
                        statement.bind(parameters);
                    }
                    // log slow queries if maxQueryExecution time is set
                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                    const queryEndTime = +new Date();
                    const queryExecutionTime = queryEndTime - queryStartTime;
                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                    const result = [];
                    while (statement.step()) {
                        result.push(statement.getAsObject());
                    }
                    statement.free();
                    ok(result);
                }
                catch (e) {
                    if (statement) {
                        statement.free();
                    }
                    this.driver.connection.logger.logQueryError(e, query, parameters, this);
                    fail(new QueryFailedError_5.QueryFailedError(query, parameters, e));
                }
            });
        }
    }
    exports.SqljsQueryRunner = SqljsQueryRunner;
});
define("typeorm/error/DriverOptionNotSetError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DriverOptionNotSetError = void 0;
    /**
     * Thrown if some required driver's option is not set.
     */
    class DriverOptionNotSetError extends Error {
        constructor(optionName) {
            super();
            this.name = "DriverOptionNotSetError";
            Object.setPrototypeOf(this, DriverOptionNotSetError.prototype);
            this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;
        }
    }
    exports.DriverOptionNotSetError = DriverOptionNotSetError;
});
define("typeorm/driver/sqljs/SqljsDriver", ["require", "exports", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/sqljs/SqljsQueryRunner", "typeorm/error/DriverPackageNotInstalledError", "typeorm/error/DriverOptionNotSetError", "typeorm/platform/PlatformTools", "typeorm/util/OrmUtils"], function (require, exports, AbstractSqliteDriver_2, SqljsQueryRunner_1, DriverPackageNotInstalledError_7, DriverOptionNotSetError_1, PlatformTools_10, OrmUtils_24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqljsDriver = void 0;
    class SqljsDriver extends AbstractSqliteDriver_2.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            // If autoSave is enabled by user, location or autoSaveCallback have to be set
            // because either autoSave saves to location or calls autoSaveCallback.
            if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {
                throw new DriverOptionNotSetError_1.DriverOptionNotSetError(`location or autoSaveCallback`);
            }
            // load sql.js package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         */
        async connect() {
            this.databaseConnection = await this.createDatabaseConnection();
        }
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                try {
                    this.queryRunner = undefined;
                    this.databaseConnection.close();
                    ok();
                }
                catch (e) {
                    fail(e);
                }
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new SqljsQueryRunner_1.SqljsQueryRunner(this);
            return this.queryRunner;
        }
        /**
         * Loads a database from a given file (Node.js), local storage key (browser) or array.
         * This will delete the current database!
         */
        async load(fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists = true) {
            if (typeof fileNameOrLocalStorageOrData === "string") {
                // content has to be loaded
                if (PlatformTools_10.PlatformTools.type === "node") {
                    // Node.js
                    // fileNameOrLocalStorageOrData should be a path to the file
                    if (PlatformTools_10.PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {
                        const database = PlatformTools_10.PlatformTools.readFileSync(fileNameOrLocalStorageOrData);
                        return this.createDatabaseConnectionWithImport(database);
                    }
                    else if (checkIfFileOrLocalStorageExists) {
                        throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);
                    }
                    else {
                        // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.
                        // Therefore open a database without importing an existing file.
                        // File will be written on first write operation.
                        return this.createDatabaseConnectionWithImport();
                    }
                }
                else {
                    // browser
                    // fileNameOrLocalStorageOrData should be a local storage / indexedDB key
                    let localStorageContent = null;
                    if (this.options.useLocalForage) {
                        if (window.localforage) {
                            localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);
                        }
                        else {
                            throw new Error(`localforage is not defined - please import localforage.js into your site`);
                        }
                    }
                    else {
                        localStorageContent = PlatformTools_10.PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);
                    }
                    if (localStorageContent != null) {
                        // localStorage value exists.
                        return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));
                    }
                    else if (checkIfFileOrLocalStorageExists) {
                        throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);
                    }
                    else {
                        // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.
                        // Therefore open a database without importing anything.
                        // localStorage value will be written on first write operation.
                        return this.createDatabaseConnectionWithImport();
                    }
                }
            }
            else {
                return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);
            }
        }
        /**
         * Saved the current database to the given file (Node.js), local storage key (browser) or
         * indexedDB key (browser with enabled useLocalForage option).
         * If no location path is given, the location path in the options (if specified) will be used.
         */
        async save(location) {
            if (!location && !this.options.location) {
                throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);
            }
            let path = "";
            if (location) {
                path = location;
            }
            else if (this.options.location) {
                path = this.options.location;
            }
            if (PlatformTools_10.PlatformTools.type === "node") {
                try {
                    const content = Buffer.from(this.databaseConnection.export());
                    await PlatformTools_10.PlatformTools.writeFile(path, content);
                }
                catch (e) {
                    throw new Error(`Could not save database, error: ${e}`);
                }
            }
            else {
                const database = this.databaseConnection.export();
                // convert Uint8Array to number array to improve local-storage storage
                const databaseArray = [].slice.call(database);
                if (this.options.useLocalForage) {
                    if (window.localforage) {
                        await window.localforage.setItem(path, JSON.stringify(databaseArray));
                    }
                    else {
                        throw new Error(`localforage is not defined - please import localforage.js into your site`);
                    }
                }
                else {
                    PlatformTools_10.PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));
                }
            }
        }
        /**
         * This gets called by the QueryRunner when a change to the database is made.
         * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,
         * otherwise the save method is called which saves it to file (Node.js), local storage (browser)
         * or indexedDB (browser with enabled useLocalForage option).
         */
        async autoSave() {
            if (this.options.autoSave) {
                if (this.options.autoSaveCallback) {
                    await this.options.autoSaveCallback(this.export());
                }
                else {
                    await this.save();
                }
            }
        }
        /**
         * Returns the current database as Uint8Array.
         */
        export() {
            return this.databaseConnection.export();
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         */
        createGeneratedMap(metadata, insertResult) {
            const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {
                // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77
                if (generatedColumn.isPrimary && generatedColumn.generationStrategy === "increment") {
                    const query = "SELECT last_insert_rowid()";
                    try {
                        let result = this.databaseConnection.exec(query);
                        this.connection.logger.logQuery(query);
                        return OrmUtils_24.OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));
                    }
                    catch (e) {
                        this.connection.logger.logQueryError(e, query, []);
                    }
                }
                return map;
            }, {});
            return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         * If the location option is set, the database is loaded first.
         */
        createDatabaseConnection() {
            if (this.options.location) {
                return this.load(this.options.location, false);
            }
            return this.createDatabaseConnectionWithImport(this.options.database);
        }
        /**
         * Creates connection with an optional database.
         * If database is specified it is loaded, otherwise a new empty database is created.
         */
        async createDatabaseConnectionWithImport(database) {
            // sql.js < 1.0 exposes an object with a `Database` method.
            const isLegacyVersion = typeof this.sqlite.Database === "function";
            const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(this.options.sqlJsConfig);
            if (database && database.length > 0) {
                this.databaseConnection = new sqlite.Database(database);
            }
            else {
                this.databaseConnection = new sqlite.Database();
            }
            // Enable foreign keys for database
            return new Promise((ok, fail) => {
                try {
                    this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);
                    ok(this.databaseConnection);
                }
                catch (e) {
                    fail(e);
                }
            });
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            if (PlatformTools_10.PlatformTools.type === "browser") {
                this.sqlite = window.SQL;
            }
            else {
                try {
                    this.sqlite = PlatformTools_10.PlatformTools.load("sql.js");
                }
                catch (e) {
                    throw new DriverPackageNotInstalledError_7.DriverPackageNotInstalledError("sql.js", "sql.js");
                }
            }
        }
    }
    exports.SqljsDriver = SqljsDriver;
});
define("typeorm/error/LimitOnUpdateNotSupportedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LimitOnUpdateNotSupportedError = void 0;
    /**
     * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.
    */
    class LimitOnUpdateNotSupportedError extends Error {
        constructor() {
            super();
            this.name = "LimitOnUpdateNotSupportedError";
            Object.setPrototypeOf(this, LimitOnUpdateNotSupportedError.prototype);
            this.message = `Your database does not support LIMIT on UPDATE statements.`;
        }
    }
    exports.LimitOnUpdateNotSupportedError = LimitOnUpdateNotSupportedError;
});
define("typeorm/error/UpdateValuesMissingError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateValuesMissingError = void 0;
    /**
     * Thrown when user tries to update using QueryBuilder but do not specify what to update.
     */
    class UpdateValuesMissingError extends Error {
        constructor() {
            super();
            this.name = "UpdateValuesMissingError";
            Object.setPrototypeOf(this, UpdateValuesMissingError.prototype);
            this.message = `Cannot perform update query because update values are not defined. Call "qb.set(...)" method to specify updated values.`;
        }
    }
    exports.UpdateValuesMissingError = UpdateValuesMissingError;
});
define("typeorm/error/EntityColumnNotFound", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityColumnNotFound = void 0;
    /**
     *
     */
    class EntityColumnNotFound extends Error {
        constructor(propertyPath) {
            super();
            this.name = "EntityColumnNotFound";
            Object.setPrototypeOf(this, EntityColumnNotFound.prototype);
            this.message = `No entity column "${propertyPath}" was found.`;
        }
    }
    exports.EntityColumnNotFound = EntityColumnNotFound;
});
define("typeorm/driver/better-sqlite3/BetterSqlite3QueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster"], function (require, exports, QueryRunnerAlreadyReleasedError_8, QueryFailedError_6, AbstractSqliteQueryRunner_2, Broadcaster_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BetterSqlite3QueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     *
     * Does not support compose primary keys with autoincrement field.
     * todo: need to throw exception for this case.
     */
    class BetterSqlite3QueryRunner extends AbstractSqliteQueryRunner_2.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.stmtCache = new Map();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_9.Broadcaster(this);
            if (typeof this.driver.options.statementCacheSize === "number") {
                this.cacheSize = this.driver.options.statementCacheSize;
            }
            else {
                this.cacheSize = 100;
            }
        }
        async getStmt(query) {
            if (this.cacheSize > 0) {
                let stmt = this.stmtCache.get(query);
                if (!stmt) {
                    const databaseConnection = await this.connect();
                    stmt = databaseConnection.prepare(query);
                    this.stmtCache.set(query, stmt);
                    while (this.stmtCache.size > this.cacheSize) {
                        // since es6 map keeps the insertion order,
                        // it comes to be FIFO cache
                        const key = this.stmtCache.keys().next().value;
                        this.stmtCache.delete(key);
                    }
                }
                return stmt;
            }
            else {
                const databaseConnection = await this.connect();
                return databaseConnection.prepare(query);
            }
        }
        /**
         * Executes a given SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_8.QueryRunnerAlreadyReleasedError();
            const connection = this.driver.connection;
            parameters = parameters || [];
            for (let i = 0; i < parameters.length; i++) {
                // in "where" clauses the parameters are not escaped by the driver
                if (typeof parameters[i] === "boolean")
                    parameters[i] = +parameters[i];
            }
            this.driver.connection.logger.logQuery(query, parameters, this);
            const queryStartTime = +new Date();
            const stmt = await this.getStmt(query);
            try {
                let result;
                if (stmt.reader) {
                    result = stmt.all.apply(stmt, parameters);
                }
                else {
                    result = stmt.run.apply(stmt, parameters);
                    if (query.substr(0, 6) === "INSERT") {
                        result = result.lastInsertRowid;
                    }
                }
                // log slow queries if maxQueryExecution time is set
                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;
                const queryEndTime = +new Date();
                const queryExecutionTime = queryEndTime - queryStartTime;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                return result;
            }
            catch (err) {
                connection.logger.logQueryError(err, query, parameters, this);
                throw new QueryFailedError_6.QueryFailedError(query, parameters, err);
            }
        }
    }
    exports.BetterSqlite3QueryRunner = BetterSqlite3QueryRunner;
});
define("typeorm/driver/better-sqlite3/BetterSqlite3Driver", ["require", "exports", "mkdirp", "path", "typeorm/error/DriverPackageNotInstalledError", "typeorm/error/DriverOptionNotSetError", "typeorm/platform/PlatformTools", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/better-sqlite3/BetterSqlite3QueryRunner"], function (require, exports, mkdirp_1, path_1, DriverPackageNotInstalledError_8, DriverOptionNotSetError_2, PlatformTools_11, AbstractSqliteDriver_3, BetterSqlite3QueryRunner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BetterSqlite3Driver = void 0;
    /**
     * Organizes communication with sqlite DBMS.
     */
    class BetterSqlite3Driver extends AbstractSqliteDriver_3.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            this.connection = connection;
            this.options = connection.options;
            this.database = this.options.database;
            // validate options to make sure everything is set
            if (!this.options.database)
                throw new DriverOptionNotSetError_2.DriverOptionNotSetError("database");
            // load sqlite package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            this.queryRunner = undefined;
            this.databaseConnection.close();
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new BetterSqlite3QueryRunner_1.BetterSqlite3QueryRunner(this);
            return this.queryRunner;
        }
        normalizeType(column) {
            if (column.type === Buffer) {
                return "blob";
            }
            return super.normalizeType(column);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        async createDatabaseConnection() {
            // not to create database directory if is in memory
            if (this.options.database !== ":memory:")
                await this.createDatabaseDirectory(this.options.database);
            const { database, readonly = false, fileMustExist = false, timeout = 5000, verbose = null, prepareDatabase } = this.options;
            const databaseConnection = this.sqlite(database, { readonly, fileMustExist, timeout, verbose });
            // we need to enable foreign keys in sqlite to make sure all foreign key related features
            // working properly. this also makes onDelete to work with sqlite.
            databaseConnection.exec(`PRAGMA foreign_keys = ON`);
            // turn on WAL mode to enhance performance
            databaseConnection.exec(`PRAGMA journal_mode = WAL`);
            // in the options, if encryption key for SQLCipher is setted.
            if (this.options.key) {
                databaseConnection.exec(`PRAGMA key = ${JSON.stringify(this.options.key)}`);
            }
            if (typeof prepareDatabase === "function") {
                prepareDatabase(databaseConnection);
            }
            return databaseConnection;
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.sqlite = PlatformTools_11.PlatformTools.load("better-sqlite3");
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_8.DriverPackageNotInstalledError("SQLite", "better-sqlite3");
            }
        }
        /**
         * Auto creates database directory if it does not exist.
         */
        async createDatabaseDirectory(fullPath) {
            await mkdirp_1.default(path_1.default.dirname(fullPath));
        }
    }
    exports.BetterSqlite3Driver = BetterSqlite3Driver;
});
define("typeorm/query-builder/UpdateQueryBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/sap/SapDriver", "typeorm/query-builder/QueryBuilder", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/metadata/EntityMetadata", "typeorm/query-builder/result/UpdateResult", "typeorm/error/ReturningStatementNotSupportedError", "typeorm/query-builder/ReturningResultsEntityUpdator", "typeorm/driver/sqljs/SqljsDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/subscriber/BroadcasterResult", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/error/LimitOnUpdateNotSupportedError", "typeorm/driver/oracle/OracleDriver", "typeorm/error/UpdateValuesMissingError", "typeorm/error/EntityColumnNotFound", "typeorm/driver/aurora-data-api/AuroraDataApiDriver", "typeorm/driver/better-sqlite3/BetterSqlite3Driver"], function (require, exports, CockroachDriver_2, SapDriver_2, QueryBuilder_1, SqlServerDriver_1, PostgresDriver_2, EntityMetadata_3, UpdateResult_2, ReturningStatementNotSupportedError_1, ReturningResultsEntityUpdator_1, SqljsDriver_1, MysqlDriver_2, BroadcasterResult_10, AbstractSqliteDriver_4, LimitOnUpdateNotSupportedError_1, OracleDriver_3, UpdateValuesMissingError_1, EntityColumnNotFound_1, AuroraDataApiDriver_2, BetterSqlite3Driver_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateQueryBuilder = void 0;
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class UpdateQueryBuilder extends QueryBuilder_1.QueryBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connectionOrQueryBuilder, queryRunner) {
            super(connectionOrQueryBuilder, queryRunner);
            this.expressionMap.aliasNamePrefixingEnabled = false;
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            let sql = this.createComment();
            sql += this.createUpdateExpression();
            sql += this.createOrderByExpression();
            sql += this.createLimitExpression();
            return sql.trim();
        }
        /**
         * Executes sql generated by query builder and returns raw database results.
         */
        async execute() {
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                // call before updation methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_10.BroadcasterResult();
                    queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                let declareSql = null;
                let selectOutputSql = null;
                // if update entity mode is enabled we may need extra columns for the returning statement
                const returningResultsEntityUpdator = new ReturningResultsEntityUpdator_1.ReturningResultsEntityUpdator(queryRunner, this.expressionMap);
                if (this.expressionMap.updateEntity === true &&
                    this.expressionMap.mainAlias.hasMetadata &&
                    this.expressionMap.whereEntities.length > 0) {
                    this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();
                    if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {
                        declareSql = this.connection.driver.buildTableVariableDeclaration("@OutputTable", this.expressionMap.extraReturningColumns);
                        selectOutputSql = `SELECT * FROM @OutputTable`;
                    }
                }
                // execute update query
                const [updateSql, parameters] = this.getQueryAndParameters();
                const updateResult = new UpdateResult_2.UpdateResult();
                const statements = [declareSql, updateSql, selectOutputSql];
                const result = await queryRunner.query(statements.filter(sql => sql != null).join(";\n\n"), parameters);
                if (this.connection.driver instanceof PostgresDriver_2.PostgresDriver) {
                    updateResult.raw = result[0];
                    updateResult.affected = result[1];
                }
                else if (this.connection.driver instanceof MysqlDriver_2.MysqlDriver) {
                    updateResult.raw = result;
                    updateResult.affected = result.affectedRows;
                }
                else if (this.connection.driver instanceof BetterSqlite3Driver_1.BetterSqlite3Driver) { // only works for better-sqlite3
                    updateResult.raw = result;
                    updateResult.affected = result.changes;
                }
                else {
                    updateResult.raw = result;
                }
                // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)
                if (this.expressionMap.updateEntity === true &&
                    this.expressionMap.mainAlias.hasMetadata &&
                    this.expressionMap.whereEntities.length > 0) {
                    await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);
                }
                // call after updation methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_10.BroadcasterResult();
                    queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // close transaction if we started it
                if (transactionStartedByUs)
                    await queryRunner.commitTransaction();
                return updateResult;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
                if (this.connection.driver instanceof SqljsDriver_1.SqljsDriver && !queryRunner.isTransactionActive) {
                    await this.connection.driver.autoSave();
                }
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Values needs to be updated.
         */
        set(values) {
            this.expressionMap.valuesSet = values;
            return this;
        }
        /**
         * Sets WHERE condition in the query builder.
         * If you had previously WHERE expression defined,
         * calling this function will override previously set WHERE conditions.
         * Additionally you can add parameters used in where expression.
         */
        where(where, parameters) {
            this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions
            const condition = this.computeWhereParameter(where);
            if (condition)
                this.expressionMap.wheres = [{ type: "simple", condition: condition }];
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        andWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "and", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new OR WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        orWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "or", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        whereInIds(ids) {
            return this.where(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        andWhereInIds(ids) {
            return this.andWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new OR WHERE with conditions for the given ids.
         */
        orWhereInIds(ids) {
            return this.orWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Optional returning/output clause.
         */
        output(output) {
            return this.returning(output);
        }
        /**
         * Optional returning/output clause.
         */
        returning(returning) {
            // not all databases support returning/output cause
            if (!this.connection.driver.isReturningSqlSupported())
                throw new ReturningStatementNotSupportedError_1.ReturningStatementNotSupportedError();
            this.expressionMap.returning = returning;
            return this;
        }
        /**
         * Sets ORDER BY condition in the query builder.
         * If you had previously ORDER BY expression defined,
         * calling this function will override previously set ORDER BY conditions.
         */
        orderBy(sort, order = "ASC", nulls) {
            if (sort) {
                if (sort instanceof Object) {
                    this.expressionMap.orderBys = sort;
                }
                else {
                    if (nulls) {
                        this.expressionMap.orderBys = { [sort]: { order, nulls } };
                    }
                    else {
                        this.expressionMap.orderBys = { [sort]: order };
                    }
                }
            }
            else {
                this.expressionMap.orderBys = {};
            }
            return this;
        }
        /**
         * Adds ORDER BY condition in the query builder.
         */
        addOrderBy(sort, order = "ASC", nulls) {
            if (nulls) {
                this.expressionMap.orderBys[sort] = { order, nulls };
            }
            else {
                this.expressionMap.orderBys[sort] = order;
            }
            return this;
        }
        /**
         * Sets LIMIT - maximum number of rows to be selected.
         */
        limit(limit) {
            this.expressionMap.limit = limit;
            return this;
        }
        /**
         * Indicates if entity must be updated after update operation.
         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
         * Enabled by default.
         */
        whereEntity(entity) {
            if (!this.expressionMap.mainAlias.hasMetadata)
                throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);
            this.expressionMap.wheres = [];
            const entities = Array.isArray(entity) ? entity : [entity];
            entities.forEach(entity => {
                const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);
                if (!entityIdMap)
                    throw new Error(`Provided entity does not have ids set, cannot perform operation.`);
                this.orWhereInIds(entityIdMap);
            });
            this.expressionMap.whereEntities = entities;
            return this;
        }
        /**
         * Indicates if entity must be updated after update operation.
         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
         * Enabled by default.
         */
        updateEntity(enabled) {
            this.expressionMap.updateEntity = enabled;
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates UPDATE express used to perform insert query.
         */
        createUpdateExpression() {
            const valuesSet = this.getValueSet();
            const metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;
            // prepare columns and values to be updated
            const updateColumnAndValues = [];
            const updatedColumns = [];
            const newParameters = {};
            let parametersCount = this.connection.driver instanceof MysqlDriver_2.MysqlDriver ||
                this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver ||
                this.connection.driver instanceof OracleDriver_3.OracleDriver ||
                this.connection.driver instanceof AbstractSqliteDriver_4.AbstractSqliteDriver ||
                this.connection.driver instanceof SapDriver_2.SapDriver
                ? 0 : Object.keys(this.expressionMap.nativeParameters).length;
            if (metadata) {
                EntityMetadata_3.EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(propertyPath => {
                    // todo: make this and other query builder to work with properly with tables without metadata
                    const columns = metadata.findColumnsWithPropertyPath(propertyPath);
                    if (columns.length <= 0) {
                        throw new EntityColumnNotFound_1.EntityColumnNotFound(propertyPath);
                    }
                    columns.forEach(column => {
                        if (!column.isUpdate) {
                            return;
                        }
                        updatedColumns.push(column);
                        const paramName = "upd_" + column.databaseName;
                        //
                        let value = column.getEntityValue(valuesSet);
                        if (column.referencedColumn && value instanceof Object) {
                            value = column.referencedColumn.getEntityValue(value);
                        }
                        else if (!(value instanceof Function)) {
                            value = this.connection.driver.preparePersistentValue(value, column);
                        }
                        // todo: duplication zone
                        if (value instanceof Function) { // support for SQL expressions in update query
                            updateColumnAndValues.push(this.escape(column.databaseName) + " = " + value());
                        }
                        else if (this.connection.driver instanceof SapDriver_2.SapDriver && value === null) {
                            updateColumnAndValues.push(this.escape(column.databaseName) + " = NULL");
                        }
                        else {
                            if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {
                                value = this.connection.driver.parametrizeValue(column, value);
                                // } else if (value instanceof Array) {
                                //     value = new ArrayParameter(value);
                            }
                            if (this.connection.driver instanceof MysqlDriver_2.MysqlDriver ||
                                this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver ||
                                this.connection.driver instanceof OracleDriver_3.OracleDriver ||
                                this.connection.driver instanceof AbstractSqliteDriver_4.AbstractSqliteDriver ||
                                this.connection.driver instanceof SapDriver_2.SapDriver) {
                                newParameters[paramName] = value;
                            }
                            else {
                                this.expressionMap.nativeParameters[paramName] = value;
                            }
                            let expression = null;
                            if ((this.connection.driver instanceof MysqlDriver_2.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                const useLegacy = this.connection.driver.options.legacySpatialSupport;
                                const geomFromText = useLegacy ? "GeomFromText" : "ST_GeomFromText";
                                if (column.srid != null) {
                                    expression = `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)}, ${column.srid})`;
                                }
                                else {
                                    expression = `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)})`;
                                }
                            }
                            else if (this.connection.driver instanceof PostgresDriver_2.PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                if (column.srid != null) {
                                    expression = `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;
                                }
                                else {
                                    expression = `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;
                                }
                            }
                            else if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                expression = column.type + "::STGeomFromText(" + this.connection.driver.createParameter(paramName, parametersCount) + ", " + (column.srid || "0") + ")";
                            }
                            else {
                                expression = this.connection.driver.createParameter(paramName, parametersCount);
                            }
                            updateColumnAndValues.push(this.escape(column.databaseName) + " = " + expression);
                            parametersCount++;
                        }
                    });
                });
                if (metadata.versionColumn && updatedColumns.indexOf(metadata.versionColumn) === -1)
                    updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + " = " + this.escape(metadata.versionColumn.databaseName) + " + 1");
                if (metadata.updateDateColumn && updatedColumns.indexOf(metadata.updateDateColumn) === -1)
                    updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + " = CURRENT_TIMESTAMP"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can "DEFAULT" be used?!
            }
            else {
                Object.keys(valuesSet).map(key => {
                    let value = valuesSet[key];
                    // todo: duplication zone
                    if (value instanceof Function) { // support for SQL expressions in update query
                        updateColumnAndValues.push(this.escape(key) + " = " + value());
                    }
                    else if (this.connection.driver instanceof SapDriver_2.SapDriver && value === null) {
                        updateColumnAndValues.push(this.escape(key) + " = NULL");
                    }
                    else {
                        // we need to store array values in a special class to make sure parameter replacement will work correctly
                        // if (value instanceof Array)
                        //     value = new ArrayParameter(value);
                        if (this.connection.driver instanceof MysqlDriver_2.MysqlDriver ||
                            this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver ||
                            this.connection.driver instanceof OracleDriver_3.OracleDriver ||
                            this.connection.driver instanceof AbstractSqliteDriver_4.AbstractSqliteDriver ||
                            this.connection.driver instanceof SapDriver_2.SapDriver) {
                            newParameters[key] = value;
                        }
                        else {
                            this.expressionMap.nativeParameters[key] = value;
                        }
                        updateColumnAndValues.push(this.escape(key) + " = " + this.connection.driver.createParameter(key, parametersCount));
                        parametersCount++;
                    }
                });
            }
            if (updateColumnAndValues.length <= 0) {
                throw new UpdateValuesMissingError_1.UpdateValuesMissingError();
            }
            // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"
            // because some drivers like mysql depend on order of parameters
            if (this.connection.driver instanceof MysqlDriver_2.MysqlDriver ||
                this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver ||
                this.connection.driver instanceof OracleDriver_3.OracleDriver ||
                this.connection.driver instanceof AbstractSqliteDriver_4.AbstractSqliteDriver ||
                this.connection.driver instanceof SapDriver_2.SapDriver) {
                this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);
            }
            // get a table name and all column database names
            const whereExpression = this.createWhereExpression();
            const returningExpression = this.createReturningExpression();
            // generate and return sql update query
            if (returningExpression && (this.connection.driver instanceof PostgresDriver_2.PostgresDriver || this.connection.driver instanceof OracleDriver_3.OracleDriver || this.connection.driver instanceof CockroachDriver_2.CockroachDriver)) {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")}${whereExpression} RETURNING ${returningExpression}`;
            }
            else if (returningExpression && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")} OUTPUT ${returningExpression}${whereExpression}`;
            }
            else {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?
            }
        }
        /**
         * Creates "ORDER BY" part of SQL query.
         */
        createOrderByExpression() {
            const orderBys = this.expressionMap.orderBys;
            if (Object.keys(orderBys).length > 0)
                return " ORDER BY " + Object.keys(orderBys)
                    .map(columnName => {
                    if (typeof orderBys[columnName] === "string") {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName];
                    }
                    else {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
                    }
                })
                    .join(", ");
            return "";
        }
        /**
         * Creates "LIMIT" parts of SQL query.
         */
        createLimitExpression() {
            let limit = this.expressionMap.limit;
            if (limit) {
                if (this.connection.driver instanceof MysqlDriver_2.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_2.AuroraDataApiDriver) {
                    return " LIMIT " + limit;
                }
                else {
                    throw new LimitOnUpdateNotSupportedError_1.LimitOnUpdateNotSupportedError();
                }
            }
            return "";
        }
        /**
         * Gets array of values need to be inserted into the target table.
         */
        getValueSet() {
            if (this.expressionMap.valuesSet instanceof Object)
                return this.expressionMap.valuesSet;
            throw new UpdateValuesMissingError_1.UpdateValuesMissingError();
        }
    }
    exports.UpdateQueryBuilder = UpdateQueryBuilder;
});
define("typeorm/query-builder/DeleteQueryBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/oracle/OracleDriver", "typeorm/query-builder/QueryBuilder", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/query-builder/result/DeleteResult", "typeorm/error/ReturningStatementNotSupportedError", "typeorm/driver/sqljs/SqljsDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/subscriber/BroadcasterResult", "typeorm/index", "typeorm/driver/aurora-data-api/AuroraDataApiDriver", "typeorm/driver/better-sqlite3/BetterSqlite3Driver"], function (require, exports, CockroachDriver_3, OracleDriver_4, QueryBuilder_2, SqlServerDriver_2, PostgresDriver_3, DeleteResult_2, ReturningStatementNotSupportedError_2, SqljsDriver_2, MysqlDriver_3, BroadcasterResult_11, index_7, AuroraDataApiDriver_3, BetterSqlite3Driver_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteQueryBuilder = void 0;
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class DeleteQueryBuilder extends QueryBuilder_2.QueryBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connectionOrQueryBuilder, queryRunner) {
            super(connectionOrQueryBuilder, queryRunner);
            this.expressionMap.aliasNamePrefixingEnabled = false;
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            let sql = this.createComment();
            sql += this.createDeleteExpression();
            return sql.trim();
        }
        /**
         * Executes sql generated by query builder and returns raw database results.
         */
        async execute() {
            const [sql, parameters] = this.getQueryAndParameters();
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                // call before deletion methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_11.BroadcasterResult();
                    queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // execute query
                const deleteResult = new DeleteResult_2.DeleteResult();
                const result = await queryRunner.query(sql, parameters);
                const driver = queryRunner.connection.driver;
                if (driver instanceof MysqlDriver_3.MysqlDriver || driver instanceof AuroraDataApiDriver_3.AuroraDataApiDriver) {
                    deleteResult.raw = result;
                    deleteResult.affected = result.affectedRows;
                }
                else if (driver instanceof SqlServerDriver_2.SqlServerDriver || driver instanceof PostgresDriver_3.PostgresDriver || driver instanceof CockroachDriver_3.CockroachDriver) {
                    deleteResult.raw = result[0] ? result[0] : null;
                    // don't return 0 because it could confuse. null means that we did not receive this value
                    deleteResult.affected = typeof result[1] === "number" ? result[1] : null;
                }
                else if (driver instanceof OracleDriver_4.OracleDriver) {
                    deleteResult.affected = result;
                }
                else if (driver instanceof BetterSqlite3Driver_2.BetterSqlite3Driver) { // only works for better-sqlite3
                    deleteResult.raw = result;
                    deleteResult.affected = result.changes;
                }
                else {
                    deleteResult.raw = result;
                }
                // call after deletion methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_11.BroadcasterResult();
                    queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // close transaction if we started it
                if (transactionStartedByUs)
                    await queryRunner.commitTransaction();
                return deleteResult;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
                if (this.connection.driver instanceof SqljsDriver_2.SqljsDriver && !queryRunner.isTransactionActive) {
                    await this.connection.driver.autoSave();
                }
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Specifies FROM which entity's table select/update/delete will be executed.
         * Also sets a main string alias of the selection data.
         */
        from(entityTarget, aliasName) {
            entityTarget = entityTarget instanceof index_7.EntitySchema ? entityTarget.options.name : entityTarget;
            const mainAlias = this.createFromAlias(entityTarget, aliasName);
            this.expressionMap.setMainAlias(mainAlias);
            return this;
        }
        /**
         * Sets WHERE condition in the query builder.
         * If you had previously WHERE expression defined,
         * calling this function will override previously set WHERE conditions.
         * Additionally you can add parameters used in where expression.
         */
        where(where, parameters) {
            this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions
            const condition = this.computeWhereParameter(where);
            if (condition)
                this.expressionMap.wheres = [{ type: "simple", condition: condition }];
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        andWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "and", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new OR WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        orWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "or", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        whereInIds(ids) {
            return this.where(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        andWhereInIds(ids) {
            return this.andWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new OR WHERE with conditions for the given ids.
         */
        orWhereInIds(ids) {
            return this.orWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Optional returning/output clause.
         */
        output(output) {
            return this.returning(output);
        }
        /**
         * Optional returning/output clause.
         */
        returning(returning) {
            // not all databases support returning/output cause
            if (!this.connection.driver.isReturningSqlSupported())
                throw new ReturningStatementNotSupportedError_2.ReturningStatementNotSupportedError();
            this.expressionMap.returning = returning;
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates DELETE express used to perform query.
         */
        createDeleteExpression() {
            const tableName = this.getTableName(this.getMainTableName());
            const whereExpression = this.createWhereExpression();
            const returningExpression = this.createReturningExpression();
            if (returningExpression && (this.connection.driver instanceof PostgresDriver_3.PostgresDriver || this.connection.driver instanceof CockroachDriver_3.CockroachDriver)) {
                return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;
            }
            else if (returningExpression !== "" && this.connection.driver instanceof SqlServerDriver_2.SqlServerDriver) {
                return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;
            }
            else {
                return `DELETE FROM ${tableName}${whereExpression}`;
            }
        }
    }
    exports.DeleteQueryBuilder = DeleteQueryBuilder;
});
define("typeorm/error/MissingDeleteDateColumnError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingDeleteDateColumnError = void 0;
    /**
     */
    class MissingDeleteDateColumnError extends Error {
        constructor(entityMetadata) {
            super();
            this.name = "MissingDeleteDateColumnError";
            Object.setPrototypeOf(this, MissingDeleteDateColumnError.prototype);
            this.message = `Entity "${entityMetadata.name}" does not have delete date columns.`;
        }
    }
    exports.MissingDeleteDateColumnError = MissingDeleteDateColumnError;
});
define("typeorm/query-builder/SoftDeleteQueryBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/query-builder/QueryBuilder", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/query-builder/result/UpdateResult", "typeorm/error/ReturningStatementNotSupportedError", "typeorm/query-builder/ReturningResultsEntityUpdator", "typeorm/driver/sqljs/SqljsDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/subscriber/BroadcasterResult", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/error/LimitOnUpdateNotSupportedError", "typeorm/error/MissingDeleteDateColumnError", "typeorm/driver/oracle/OracleDriver", "typeorm/error/UpdateValuesMissingError", "typeorm/entity-schema/EntitySchema"], function (require, exports, CockroachDriver_4, QueryBuilder_3, SqlServerDriver_3, PostgresDriver_4, UpdateResult_3, ReturningStatementNotSupportedError_3, ReturningResultsEntityUpdator_2, SqljsDriver_3, MysqlDriver_4, BroadcasterResult_12, AbstractSqliteDriver_5, LimitOnUpdateNotSupportedError_2, MissingDeleteDateColumnError_1, OracleDriver_5, UpdateValuesMissingError_2, EntitySchema_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SoftDeleteQueryBuilder = void 0;
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class SoftDeleteQueryBuilder extends QueryBuilder_3.QueryBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connectionOrQueryBuilder, queryRunner) {
            super(connectionOrQueryBuilder, queryRunner);
            this.expressionMap.aliasNamePrefixingEnabled = false;
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            let sql = this.createUpdateExpression();
            sql += this.createOrderByExpression();
            sql += this.createLimitExpression();
            return sql.trim();
        }
        /**
         * Executes sql generated by query builder and returns raw database results.
         */
        async execute() {
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                // call before updation methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_12.BroadcasterResult();
                    queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // if update entity mode is enabled we may need extra columns for the returning statement
                const returningResultsEntityUpdator = new ReturningResultsEntityUpdator_2.ReturningResultsEntityUpdator(queryRunner, this.expressionMap);
                if (this.expressionMap.updateEntity === true &&
                    this.expressionMap.mainAlias.hasMetadata &&
                    this.expressionMap.whereEntities.length > 0) {
                    this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();
                }
                // execute update query
                const [sql, parameters] = this.getQueryAndParameters();
                const updateResult = new UpdateResult_3.UpdateResult();
                const result = await queryRunner.query(sql, parameters);
                const driver = queryRunner.connection.driver;
                if (driver instanceof PostgresDriver_4.PostgresDriver) {
                    updateResult.raw = result[0];
                    updateResult.affected = result[1];
                }
                else {
                    updateResult.raw = result;
                }
                // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)
                if (this.expressionMap.updateEntity === true &&
                    this.expressionMap.mainAlias.hasMetadata &&
                    this.expressionMap.whereEntities.length > 0) {
                    await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);
                }
                // call after updation methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_12.BroadcasterResult();
                    queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // close transaction if we started it
                if (transactionStartedByUs)
                    await queryRunner.commitTransaction();
                return updateResult;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
                if (this.connection.driver instanceof SqljsDriver_3.SqljsDriver && !queryRunner.isTransactionActive) {
                    await this.connection.driver.autoSave();
                }
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.
         * Also sets a main string alias of the selection data.
         */
        from(entityTarget, aliasName) {
            entityTarget = entityTarget instanceof EntitySchema_1.EntitySchema ? entityTarget.options.name : entityTarget;
            const mainAlias = this.createFromAlias(entityTarget, aliasName);
            this.expressionMap.setMainAlias(mainAlias);
            return this;
        }
        /**
         * Sets WHERE condition in the query builder.
         * If you had previously WHERE expression defined,
         * calling this function will override previously set WHERE conditions.
         * Additionally you can add parameters used in where expression.
         */
        where(where, parameters) {
            this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions
            const condition = this.computeWhereParameter(where);
            if (condition)
                this.expressionMap.wheres = [{ type: "simple", condition: condition }];
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        andWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "and", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new OR WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        orWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "or", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        whereInIds(ids) {
            return this.where(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         */
        andWhereInIds(ids) {
            return this.andWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new OR WHERE with conditions for the given ids.
         */
        orWhereInIds(ids) {
            return this.orWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Optional returning/output clause.
         */
        output(output) {
            return this.returning(output);
        }
        /**
         * Optional returning/output clause.
         */
        returning(returning) {
            // not all databases support returning/output cause
            if (!this.connection.driver.isReturningSqlSupported())
                throw new ReturningStatementNotSupportedError_3.ReturningStatementNotSupportedError();
            this.expressionMap.returning = returning;
            return this;
        }
        /**
         * Sets ORDER BY condition in the query builder.
         * If you had previously ORDER BY expression defined,
         * calling this function will override previously set ORDER BY conditions.
         */
        orderBy(sort, order = "ASC", nulls) {
            if (sort) {
                if (sort instanceof Object) {
                    this.expressionMap.orderBys = sort;
                }
                else {
                    if (nulls) {
                        this.expressionMap.orderBys = { [sort]: { order, nulls } };
                    }
                    else {
                        this.expressionMap.orderBys = { [sort]: order };
                    }
                }
            }
            else {
                this.expressionMap.orderBys = {};
            }
            return this;
        }
        /**
         * Adds ORDER BY condition in the query builder.
         */
        addOrderBy(sort, order = "ASC", nulls) {
            if (nulls) {
                this.expressionMap.orderBys[sort] = { order, nulls };
            }
            else {
                this.expressionMap.orderBys[sort] = order;
            }
            return this;
        }
        /**
         * Sets LIMIT - maximum number of rows to be selected.
         */
        limit(limit) {
            this.expressionMap.limit = limit;
            return this;
        }
        /**
         * Indicates if entity must be updated after update operation.
         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
         * Enabled by default.
         */
        whereEntity(entity) {
            if (!this.expressionMap.mainAlias.hasMetadata)
                throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);
            this.expressionMap.wheres = [];
            const entities = Array.isArray(entity) ? entity : [entity];
            entities.forEach(entity => {
                const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);
                if (!entityIdMap)
                    throw new Error(`Provided entity does not have ids set, cannot perform operation.`);
                this.orWhereInIds(entityIdMap);
            });
            this.expressionMap.whereEntities = entities;
            return this;
        }
        /**
         * Indicates if entity must be updated after update operation.
         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
         * Enabled by default.
         */
        updateEntity(enabled) {
            this.expressionMap.updateEntity = enabled;
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates UPDATE express used to perform insert query.
         */
        createUpdateExpression() {
            const metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;
            if (!metadata)
                throw new Error(`Cannot get entity metadata for the given alias "${this.expressionMap.mainAlias}"`);
            if (!metadata.deleteDateColumn) {
                throw new MissingDeleteDateColumnError_1.MissingDeleteDateColumnError(metadata);
            }
            // prepare columns and values to be updated
            const updateColumnAndValues = [];
            const newParameters = {};
            switch (this.expressionMap.queryType) {
                case "soft-delete":
                    updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + " = CURRENT_TIMESTAMP");
                    break;
                case "restore":
                    updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + " = NULL");
                    break;
                default:
                    throw new Error(`The queryType must be "soft-delete" or "restore"`);
            }
            if (metadata.versionColumn)
                updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + " = " + this.escape(metadata.versionColumn.databaseName) + " + 1");
            if (metadata.updateDateColumn)
                updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + " = CURRENT_TIMESTAMP"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can "DEFAULT" be used?!
            if (updateColumnAndValues.length <= 0) {
                throw new UpdateValuesMissingError_2.UpdateValuesMissingError();
            }
            // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"
            // because some drivers like mysql depend on order of parameters
            if (this.connection.driver instanceof MysqlDriver_4.MysqlDriver ||
                this.connection.driver instanceof OracleDriver_5.OracleDriver ||
                this.connection.driver instanceof AbstractSqliteDriver_5.AbstractSqliteDriver) {
                this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);
            }
            // get a table name and all column database names
            const whereExpression = this.createWhereExpression();
            const returningExpression = this.createReturningExpression();
            // generate and return sql update query
            if (returningExpression && (this.connection.driver instanceof PostgresDriver_4.PostgresDriver || this.connection.driver instanceof OracleDriver_5.OracleDriver || this.connection.driver instanceof CockroachDriver_4.CockroachDriver)) {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")}${whereExpression} RETURNING ${returningExpression}`;
            }
            else if (returningExpression && this.connection.driver instanceof SqlServerDriver_3.SqlServerDriver) {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")} OUTPUT ${returningExpression}${whereExpression}`;
            }
            else {
                return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(", ")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?
            }
        }
        /**
         * Creates "ORDER BY" part of SQL query.
         */
        createOrderByExpression() {
            const orderBys = this.expressionMap.orderBys;
            if (Object.keys(orderBys).length > 0)
                return " ORDER BY " + Object.keys(orderBys)
                    .map(columnName => {
                    if (typeof orderBys[columnName] === "string") {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName];
                    }
                    else {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
                    }
                })
                    .join(", ");
            return "";
        }
        /**
         * Creates "LIMIT" parts of SQL query.
         */
        createLimitExpression() {
            let limit = this.expressionMap.limit;
            if (limit) {
                if (this.connection.driver instanceof MysqlDriver_4.MysqlDriver) {
                    return " LIMIT " + limit;
                }
                else {
                    throw new LimitOnUpdateNotSupportedError_2.LimitOnUpdateNotSupportedError();
                }
            }
            return "";
        }
    }
    exports.SoftDeleteQueryBuilder = SoftDeleteQueryBuilder;
});
define("typeorm/util/RandomGenerator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RandomGenerator = void 0;
    class RandomGenerator {
        /**
         *  discuss at: http://locutus.io/php/sha1/
         * original by: Webtoolkit.info (http://www.webtoolkit.info/)
         * improved by: Michael White (http://getsprink.com)
         * improved by: Kevin van Zonneveld (http://kvz.io)
         *    input by: Brett Zamir (http://brett-zamir.me)
         *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then
         *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly
         *      note 1: in a steaming fashion for faster and more efficient hashing
         *   example 1: sha1('Kevin van Zonneveld')
         *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'
         */
        static sha1(str) {
            let _rotLeft = function (n, s) {
                let t4 = (n << s) | (n >>> (32 - s));
                return t4;
            };
            let _cvtHex = function (val) {
                let str = "";
                let i;
                let v;
                for (i = 7; i >= 0; i--) {
                    v = (val >>> (i * 4)) & 0x0f;
                    str += v.toString(16);
                }
                return str;
            };
            let blockstart;
            let i, j;
            let W = new Array(80);
            let H0 = 0x67452301;
            let H1 = 0xEFCDAB89;
            let H2 = 0x98BADCFE;
            let H3 = 0x10325476;
            let H4 = 0xC3D2E1F0;
            let A, B, C, D, E;
            let temp;
            // utf8_encode
            str = /*unescape*/ (encodeURIComponent(str));
            let strLen = str.length;
            let wordArray = [];
            for (i = 0; i < strLen - 3; i += 4) {
                j = str.charCodeAt(i) << 24 |
                    str.charCodeAt(i + 1) << 16 |
                    str.charCodeAt(i + 2) << 8 |
                    str.charCodeAt(i + 3);
                wordArray.push(j);
            }
            switch (strLen % 4) {
                case 0:
                    i = 0x080000000;
                    break;
                case 1:
                    i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;
                    break;
                case 2:
                    i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;
                    break;
                case 3:
                    i = str.charCodeAt(strLen - 3) << 24 |
                        str.charCodeAt(strLen - 2) << 16 |
                        str.charCodeAt(strLen - 1) <<
                            8 | 0x80;
                    break;
            }
            wordArray.push(i);
            while ((wordArray.length % 16) !== 14) {
                wordArray.push(0);
            }
            wordArray.push(strLen >>> 29);
            wordArray.push((strLen << 3) & 0x0ffffffff);
            for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {
                for (i = 0; i < 16; i++) {
                    W[i] = wordArray[blockstart + i];
                }
                for (i = 16; i <= 79; i++) {
                    W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
                }
                A = H0;
                B = H1;
                C = H2;
                D = H3;
                E = H4;
                for (i = 0; i <= 19; i++) {
                    temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = _rotLeft(B, 30);
                    B = A;
                    A = temp;
                }
                for (i = 20; i <= 39; i++) {
                    temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = _rotLeft(B, 30);
                    B = A;
                    A = temp;
                }
                for (i = 40; i <= 59; i++) {
                    temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = _rotLeft(B, 30);
                    B = A;
                    A = temp;
                }
                for (i = 60; i <= 79; i++) {
                    temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = _rotLeft(B, 30);
                    B = A;
                    A = temp;
                }
                H0 = (H0 + A) & 0x0ffffffff;
                H1 = (H1 + B) & 0x0ffffffff;
                H2 = (H2 + C) & 0x0ffffffff;
                H3 = (H3 + D) & 0x0ffffffff;
                H4 = (H4 + E) & 0x0ffffffff;
            }
            temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);
            return temp.toLowerCase();
        }
        /**
         * RFC4122 compliant UUID v4 generator.
         */
        static uuid4() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
                const r = Math.random() * 16 | 0, v = c === "x" ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
    }
    exports.RandomGenerator = RandomGenerator;
});
define("typeorm/error/InsertValuesMissingError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InsertValuesMissingError = void 0;
    /**
     * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.
     */
    class InsertValuesMissingError extends Error {
        constructor() {
            super();
            this.name = "InsertValuesMissingError";
            Object.setPrototypeOf(this, InsertValuesMissingError.prototype);
            this.message = `Cannot perform insert query because values are not defined. Call "qb.values(...)" method to specify inserted values.`;
        }
    }
    exports.InsertValuesMissingError = InsertValuesMissingError;
});
define("typeorm/query-builder/InsertQueryBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/sap/SapDriver", "typeorm/query-builder/QueryBuilder", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/util/RandomGenerator", "typeorm/query-builder/result/InsertResult", "typeorm/error/ReturningStatementNotSupportedError", "typeorm/error/InsertValuesMissingError", "typeorm/query-builder/ReturningResultsEntityUpdator", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/sqljs/SqljsDriver", "typeorm/subscriber/BroadcasterResult", "typeorm/entity-schema/EntitySchema", "typeorm/driver/oracle/OracleDriver", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, CockroachDriver_5, SapDriver_3, QueryBuilder_4, SqlServerDriver_4, PostgresDriver_5, MysqlDriver_5, RandomGenerator_1, InsertResult_2, ReturningStatementNotSupportedError_4, InsertValuesMissingError_1, ReturningResultsEntityUpdator_3, AbstractSqliteDriver_6, SqljsDriver_4, BroadcasterResult_13, EntitySchema_2, OracleDriver_6, AuroraDataApiDriver_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InsertQueryBuilder = void 0;
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class InsertQueryBuilder extends QueryBuilder_4.QueryBuilder {
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            let sql = this.createComment();
            sql += this.createInsertExpression();
            return sql.trim();
        }
        /**
         * Executes sql generated by query builder and returns raw database results.
         */
        async execute() {
            // console.time(".value sets");
            const valueSets = this.getValueSets();
            // console.timeEnd(".value sets");
            // If user passed empty array of entities then we don't need to do
            // anything.
            //
            // Fixes GitHub issues #3111 and #5734. If we were to let this through
            // we would run into problems downstream, like subscribers getting
            // invoked with the empty array where they expect an entity, and SQL
            // queries with an empty VALUES clause.
            if (valueSets.length === 0)
                return new InsertResult_2.InsertResult();
            // console.time("QueryBuilder.execute");
            // console.time(".database stuff");
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                // console.timeEnd(".database stuff");
                // call before insertion methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_13.BroadcasterResult();
                    valueSets.forEach(valueSet => {
                        queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);
                    });
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                let declareSql = null;
                let selectOutputSql = null;
                // if update entity mode is enabled we may need extra columns for the returning statement
                // console.time(".prepare returning statement");
                const returningResultsEntityUpdator = new ReturningResultsEntityUpdator_3.ReturningResultsEntityUpdator(queryRunner, this.expressionMap);
                if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {
                    if (!(valueSets.length > 1 && this.connection.driver instanceof OracleDriver_6.OracleDriver)) {
                        this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();
                    }
                    if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver) {
                        declareSql = this.connection.driver.buildTableVariableDeclaration("@OutputTable", this.expressionMap.extraReturningColumns);
                        selectOutputSql = `SELECT * FROM @OutputTable`;
                    }
                }
                // console.timeEnd(".prepare returning statement");
                // execute query
                // console.time(".getting query and parameters");
                const [insertSql, parameters] = this.getQueryAndParameters();
                // console.timeEnd(".getting query and parameters");
                const insertResult = new InsertResult_2.InsertResult();
                // console.time(".query execution by database");
                const statements = [declareSql, insertSql, selectOutputSql];
                insertResult.raw = await queryRunner.query(statements.filter(sql => sql != null).join(";\n\n"), parameters);
                // console.timeEnd(".query execution by database");
                // load returning results and set them to the entity if entity updation is enabled
                if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {
                    // console.time(".updating entity");
                    await returningResultsEntityUpdator.insert(insertResult, valueSets);
                    // console.timeEnd(".updating entity");
                }
                // call after insertion methods in listeners and subscribers
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_13.BroadcasterResult();
                    valueSets.forEach(valueSet => {
                        queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);
                    });
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
                // close transaction if we started it
                // console.time(".commit");
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                // console.timeEnd(".commit");
                return insertResult;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                // console.time(".releasing connection");
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
                if (this.connection.driver instanceof SqljsDriver_4.SqljsDriver && !queryRunner.isTransactionActive) {
                    await this.connection.driver.autoSave();
                }
                // console.timeEnd(".releasing connection");
                // console.timeEnd("QueryBuilder.execute");
            }
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Specifies INTO which entity's table insertion will be executed.
         */
        into(entityTarget, columns) {
            entityTarget = entityTarget instanceof EntitySchema_2.EntitySchema ? entityTarget.options.name : entityTarget;
            const mainAlias = this.createFromAlias(entityTarget);
            this.expressionMap.setMainAlias(mainAlias);
            this.expressionMap.insertColumns = columns || [];
            return this;
        }
        /**
         * Values needs to be inserted into table.
         */
        values(values) {
            this.expressionMap.valuesSet = values;
            return this;
        }
        /**
         * Optional returning/output clause.
         */
        output(output) {
            return this.returning(output);
        }
        /**
         * Optional returning/output clause.
         */
        returning(returning) {
            // not all databases support returning/output cause
            if (!this.connection.driver.isReturningSqlSupported())
                throw new ReturningStatementNotSupportedError_4.ReturningStatementNotSupportedError();
            this.expressionMap.returning = returning;
            return this;
        }
        /**
         * Indicates if entity must be updated after insertion operations.
         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
         * Enabled by default.
         */
        updateEntity(enabled) {
            this.expressionMap.updateEntity = enabled;
            return this;
        }
        /**
         * Adds additional ON CONFLICT statement supported in postgres and cockroach.
         */
        onConflict(statement) {
            this.expressionMap.onConflict = statement;
            return this;
        }
        /**
         * Adds additional ignore statement supported in databases.
         */
        orIgnore(statement = true) {
            this.expressionMap.onIgnore = statement;
            return this;
        }
        /**
         * Adds additional update statement supported in databases.
         */
        orUpdate(statement) {
            this.expressionMap.onUpdate = {};
            if (statement && Array.isArray(statement.conflict_target))
                this.expressionMap.onUpdate.conflict = ` ( ${statement.conflict_target.map((columnName) => this.escape(columnName)).join(", ")} ) `;
            if (statement && typeof statement.conflict_target === "string")
                this.expressionMap.onUpdate.conflict = ` ON CONSTRAINT ${this.escape(statement.conflict_target)} `;
            if (statement && Array.isArray(statement.columns))
                this.expressionMap.onUpdate.columns = statement.columns.map(column => `${this.escape(column)} = :${column}`).join(", ");
            if (statement && Array.isArray(statement.overwrite)) {
                if (this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver) {
                    this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${column} = VALUES(${column})`).join(", ");
                }
                else if (this.connection.driver instanceof PostgresDriver_5.PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver_6.AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver_5.CockroachDriver) {
                    this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${this.escape(column)} = EXCLUDED.${this.escape(column)}`).join(", ");
                }
            }
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates INSERT express used to perform insert query.
         */
        createInsertExpression() {
            const tableName = this.getTableName(this.getMainTableName());
            const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important
            const returningExpression = (this.connection.driver instanceof OracleDriver_6.OracleDriver && this.getValueSets().length > 1) ? null : this.createReturningExpression(); // oracle doesnt support returning with multi-row insert
            const columnsExpression = this.createColumnNamesExpression();
            let query = "INSERT ";
            if (this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver) {
                query += `${this.expressionMap.onIgnore ? " IGNORE " : ""}`;
            }
            query += `INTO ${tableName}`;
            // add columns expression
            if (columnsExpression) {
                query += `(${columnsExpression})`;
            }
            else {
                if (!valuesExpression && (this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver)) // special syntax for mysql DEFAULT VALUES insertion
                    query += "()";
            }
            // add OUTPUT expression
            if (returningExpression && this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver) {
                query += ` OUTPUT ${returningExpression}`;
            }
            // add VALUES expression
            if (valuesExpression) {
                if (this.connection.driver instanceof OracleDriver_6.OracleDriver && this.getValueSets().length > 1) {
                    query += ` ${valuesExpression}`;
                }
                else {
                    query += ` VALUES ${valuesExpression}`;
                }
            }
            else {
                if (this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver) { // special syntax for mysql DEFAULT VALUES insertion
                    query += " VALUES ()";
                }
                else {
                    query += ` DEFAULT VALUES`;
                }
            }
            if (this.connection.driver instanceof PostgresDriver_5.PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver_6.AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver_5.CockroachDriver) {
                query += `${this.expressionMap.onIgnore ? " ON CONFLICT DO NOTHING " : ""}`;
                query += `${this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : ""}`;
                if (this.expressionMap.onUpdate) {
                    const { overwrite, columns, conflict } = this.expressionMap.onUpdate;
                    query += `${columns ? " ON CONFLICT " + conflict + " DO UPDATE SET " + columns : ""}`;
                    query += `${overwrite ? " ON CONFLICT " + conflict + " DO UPDATE SET " + overwrite : ""}`;
                }
            }
            else if (this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver) {
                if (this.expressionMap.onUpdate) {
                    const { overwrite, columns } = this.expressionMap.onUpdate;
                    query += `${columns ? " ON DUPLICATE KEY UPDATE " + columns : ""}`;
                    query += `${overwrite ? " ON DUPLICATE KEY UPDATE " + overwrite : ""}`;
                }
            }
            // add RETURNING expression
            if (returningExpression && (this.connection.driver instanceof PostgresDriver_5.PostgresDriver || this.connection.driver instanceof OracleDriver_6.OracleDriver || this.connection.driver instanceof CockroachDriver_5.CockroachDriver)) {
                query += ` RETURNING ${returningExpression}`;
            }
            // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT
            // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)
            if (this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver
                && this.expressionMap.mainAlias.hasMetadata
                && this.expressionMap.mainAlias.metadata.columns
                    .filter((column) => this.expressionMap.insertColumns.length > 0 ? this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1 : column.isInsert)
                    .some((column) => this.isOverridingAutoIncrementBehavior(column))) {
                query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`;
            }
            return query;
        }
        /**
         * Gets list of columns where values must be inserted to.
         */
        getInsertedColumns() {
            if (!this.expressionMap.mainAlias.hasMetadata)
                return [];
            return this.expressionMap.mainAlias.metadata.columns.filter(column => {
                // if user specified list of columns he wants to insert to, then we filter only them
                if (this.expressionMap.insertColumns.length)
                    return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;
                // skip columns the user doesn't want included by default
                if (!column.isInsert) {
                    return false;
                }
                // if user did not specified such list then return all columns except auto-increment one
                // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression
                if (column.isGenerated && column.generationStrategy === "increment"
                    && !(this.connection.driver instanceof OracleDriver_6.OracleDriver)
                    && !(this.connection.driver instanceof AbstractSqliteDriver_6.AbstractSqliteDriver)
                    && !(this.connection.driver instanceof MysqlDriver_5.MysqlDriver)
                    && !(this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver)
                    && !(this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver && this.isOverridingAutoIncrementBehavior(column)))
                    return false;
                return true;
            });
        }
        /**
         * Creates a columns string where values must be inserted to for INSERT INTO expression.
         */
        createColumnNamesExpression() {
            const columns = this.getInsertedColumns();
            if (columns.length > 0)
                return columns.map(column => this.escape(column.databaseName)).join(", ");
            // in the case if there are no insert columns specified and table without metadata used
            // we get columns from the inserted value map, in the case if only one inserted map is specified
            if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {
                const valueSets = this.getValueSets();
                if (valueSets.length === 1)
                    return Object.keys(valueSets[0]).map(columnName => this.escape(columnName)).join(", ");
            }
            // get a table name and all column database names
            return this.expressionMap.insertColumns.map(columnName => this.escape(columnName)).join(", ");
        }
        /**
         * Creates list of values needs to be inserted in the VALUES expression.
         */
        createValuesExpression() {
            const valueSets = this.getValueSets();
            const columns = this.getInsertedColumns();
            // if column metadatas are given then apply all necessary operations with values
            if (columns.length > 0) {
                let expression = "";
                let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;
                valueSets.forEach((valueSet, valueSetIndex) => {
                    columns.forEach((column, columnIndex) => {
                        if (columnIndex === 0) {
                            if (this.connection.driver instanceof OracleDriver_6.OracleDriver && valueSets.length > 1) {
                                expression += " SELECT ";
                            }
                            else {
                                expression += "(";
                            }
                        }
                        const paramName = "i" + valueSetIndex + "_" + column.databaseName;
                        // extract real value from the entity
                        let value = column.getEntityValue(valueSet);
                        // if column is relational and value is an object then get real referenced column value from this object
                        // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }
                        // and we extract "1" from this object
                        /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code
                            value = column.referencedColumn.getEntityValue(value);
                        }*/
                        if (!(value instanceof Function)) {
                            // make sure our value is normalized by a driver
                            value = this.connection.driver.preparePersistentValue(value, column);
                        }
                        // newly inserted entities always have a version equal to 1 (first version)
                        // also, user-specified version must be empty
                        if (column.isVersion && value === undefined) {
                            expression += "1";
                            // } else if (column.isNestedSetLeft) {
                            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);
                            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);
                            //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;
                            //     expression += subQuery;
                            //
                            // } else if (column.isNestedSetRight) {
                            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);
                            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);
                            //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;
                            //     expression += subQuery;
                        }
                        else if (column.isDiscriminator) {
                            this.expressionMap.nativeParameters["discriminator_value_" + parametersCount] = this.expressionMap.mainAlias.metadata.discriminatorValue;
                            expression += this.connection.driver.createParameter("discriminator_value_" + parametersCount, parametersCount);
                            parametersCount++;
                            // return "1";
                            // for create and update dates we insert current date
                            // no, we don't do it because this constant is already in "default" value of the column
                            // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example
                            // } else if (column.isCreateDate || column.isUpdateDate) {
                            //     return "CURRENT_TIMESTAMP";
                            // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion
                        }
                        else if (column.isGenerated && column.generationStrategy === "uuid" && !this.connection.driver.isUUIDGenerationSupported() && value === undefined) {
                            const paramName = "uuid_" + column.databaseName + valueSetIndex;
                            value = RandomGenerator_1.RandomGenerator.uuid4();
                            this.expressionMap.nativeParameters[paramName] = value;
                            expression += this.connection.driver.createParameter(paramName, parametersCount);
                            parametersCount++;
                            // if value for this column was not provided then insert default value
                        }
                        else if (value === undefined) {
                            if ((this.connection.driver instanceof OracleDriver_6.OracleDriver && valueSets.length > 1) || this.connection.driver instanceof AbstractSqliteDriver_6.AbstractSqliteDriver || this.connection.driver instanceof SapDriver_3.SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries
                                if (column.default !== undefined && column.default !== null) { // try to use default defined in the column
                                    expression += this.connection.driver.normalizeDefault(column);
                                }
                                else {
                                    expression += "NULL"; // otherwise simply use NULL and pray if column is nullable
                                }
                            }
                            else {
                                expression += "DEFAULT";
                            }
                            // support for SQL expressions in queries
                        }
                        else if (value instanceof Function) {
                            expression += value();
                            // just any other regular value
                        }
                        else {
                            if (this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver)
                                value = this.connection.driver.parametrizeValue(column, value);
                            // we need to store array values in a special class to make sure parameter replacement will work correctly
                            // if (value instanceof Array)
                            //     value = new ArrayParameter(value);
                            this.expressionMap.nativeParameters[paramName] = value;
                            if ((this.connection.driver instanceof MysqlDriver_5.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_4.AuroraDataApiDriver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                const useLegacy = this.connection.driver.options.legacySpatialSupport;
                                const geomFromText = useLegacy ? "GeomFromText" : "ST_GeomFromText";
                                if (column.srid != null) {
                                    expression += `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)}, ${column.srid})`;
                                }
                                else {
                                    expression += `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)})`;
                                }
                            }
                            else if (this.connection.driver instanceof PostgresDriver_5.PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                if (column.srid != null) {
                                    expression += `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;
                                }
                                else {
                                    expression += `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;
                                }
                            }
                            else if (this.connection.driver instanceof SqlServerDriver_4.SqlServerDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                                expression += column.type + "::STGeomFromText(" + this.connection.driver.createParameter(paramName, parametersCount) + ", " + (column.srid || "0") + ")";
                            }
                            else {
                                expression += this.connection.driver.createParameter(paramName, parametersCount);
                            }
                            parametersCount++;
                        }
                        if (columnIndex === columns.length - 1) {
                            if (valueSetIndex === valueSets.length - 1) {
                                if (this.connection.driver instanceof OracleDriver_6.OracleDriver && valueSets.length > 1) {
                                    expression += " FROM DUAL ";
                                }
                                else {
                                    expression += ")";
                                }
                            }
                            else {
                                if (this.connection.driver instanceof OracleDriver_6.OracleDriver && valueSets.length > 1) {
                                    expression += " FROM DUAL UNION ALL ";
                                }
                                else {
                                    expression += "), ";
                                }
                            }
                        }
                        else {
                            expression += ", ";
                        }
                    });
                });
                if (expression === "()")
                    return "";
                return expression;
            }
            else { // for tables without metadata
                // get values needs to be inserted
                let expression = "";
                let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;
                valueSets.forEach((valueSet, insertionIndex) => {
                    const columns = Object.keys(valueSet);
                    columns.forEach((columnName, columnIndex) => {
                        if (columnIndex === 0) {
                            expression += "(";
                        }
                        const paramName = "i" + insertionIndex + "_" + columnName;
                        const value = valueSet[columnName];
                        // support for SQL expressions in queries
                        if (value instanceof Function) {
                            expression += value();
                            // if value for this column was not provided then insert default value
                        }
                        else if (value === undefined) {
                            if (this.connection.driver instanceof AbstractSqliteDriver_6.AbstractSqliteDriver || this.connection.driver instanceof SapDriver_3.SapDriver) {
                                expression += "NULL";
                            }
                            else {
                                expression += "DEFAULT";
                            }
                            // just any other regular value
                        }
                        else {
                            this.expressionMap.nativeParameters[paramName] = value;
                            expression += this.connection.driver.createParameter(paramName, parametersCount);
                            parametersCount++;
                        }
                        if (columnIndex === Object.keys(valueSet).length - 1) {
                            if (insertionIndex === valueSets.length - 1) {
                                expression += ")";
                            }
                            else {
                                expression += "), ";
                            }
                        }
                        else {
                            expression += ", ";
                        }
                    });
                });
                if (expression === "()")
                    return "";
                return expression;
            }
        }
        /**
         * Gets array of values need to be inserted into the target table.
         */
        getValueSets() {
            if (Array.isArray(this.expressionMap.valuesSet))
                return this.expressionMap.valuesSet;
            if (this.expressionMap.valuesSet instanceof Object)
                return [this.expressionMap.valuesSet];
            throw new InsertValuesMissingError_1.InsertValuesMissingError();
        }
        /**
         * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.
         *
         * @param column
         */
        isOverridingAutoIncrementBehavior(column) {
            return column.isPrimary
                && column.isGenerated
                && column.generationStrategy === "increment"
                && this.getValueSets().some((valueSet) => column.getEntityValue(valueSet) !== undefined
                    && column.getEntityValue(valueSet) !== null);
        }
    }
    exports.InsertQueryBuilder = InsertQueryBuilder;
});
define("typeorm/query-builder/RelationUpdater", ["require", "exports", "typeorm/driver/sap/SapDriver", "typeorm/driver/oracle/OracleDriver"], function (require, exports, SapDriver_4, OracleDriver_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationUpdater = void 0;
    /**
     * Allows to work with entity relations and perform specific operations with those relations.
     *
     * todo: add transactions everywhere
     */
    class RelationUpdater {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryBuilder, expressionMap) {
            this.queryBuilder = queryBuilder;
            this.expressionMap = expressionMap;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs set or add operation on a relation.
         */
        async update(value) {
            const relation = this.expressionMap.relationMetadata;
            if (relation.isManyToOne || relation.isOneToOneOwner) {
                const updateSet = relation.joinColumns.reduce((updateSet, joinColumn) => {
                    const relationValue = value instanceof Object ? joinColumn.referencedColumn.getEntityValue(value) : value;
                    joinColumn.setEntityValue(updateSet, relationValue);
                    return updateSet;
                }, {});
                if (!this.expressionMap.of || (Array.isArray(this.expressionMap.of) && !this.expressionMap.of.length))
                    return;
                await this.queryBuilder
                    .createQueryBuilder()
                    .update(relation.entityMetadata.target)
                    .set(updateSet)
                    .whereInIds(this.expressionMap.of)
                    .execute();
            }
            else if ((relation.isOneToOneNotOwner || relation.isOneToMany) && value === null) { // we handle null a bit different way
                const updateSet = {};
                relation.inverseRelation.joinColumns.forEach(column => {
                    updateSet[column.propertyName] = null;
                });
                const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
                const parameters = {};
                const conditions = [];
                ofs.forEach((of, ofIndex) => {
                    relation.inverseRelation.joinColumns.map((column, columnIndex) => {
                        const parameterName = "joinColumn_" + ofIndex + "_" + columnIndex;
                        parameters[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;
                        conditions.push(`${column.propertyPath} = :${parameterName}`);
                    });
                });
                const condition = conditions.map(str => "(" + str + ")").join(" OR ");
                if (!condition)
                    return;
                await this.queryBuilder
                    .createQueryBuilder()
                    .update(relation.inverseEntityMetadata.target)
                    .set(updateSet)
                    .where(condition)
                    .setParameters(parameters)
                    .execute();
            }
            else if (relation.isOneToOneNotOwner || relation.isOneToMany) {
                if (Array.isArray(this.expressionMap.of))
                    throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);
                const of = this.expressionMap.of;
                const updateSet = relation.inverseRelation.joinColumns.reduce((updateSet, joinColumn) => {
                    const relationValue = of instanceof Object ? joinColumn.referencedColumn.getEntityValue(of) : of;
                    joinColumn.setEntityValue(updateSet, relationValue);
                    return updateSet;
                }, {});
                if (!value || (Array.isArray(value) && !value.length))
                    return;
                await this.queryBuilder
                    .createQueryBuilder()
                    .update(relation.inverseEntityMetadata.target)
                    .set(updateSet)
                    .whereInIds(value)
                    .execute();
            }
            else { // many to many
                const junctionMetadata = relation.junctionEntityMetadata;
                const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
                const values = Array.isArray(value) ? value : [value];
                const firstColumnValues = relation.isManyToManyOwner ? ofs : values;
                const secondColumnValues = relation.isManyToManyOwner ? values : ofs;
                const bulkInserted = [];
                firstColumnValues.forEach(firstColumnVal => {
                    secondColumnValues.forEach(secondColumnVal => {
                        const inserted = {};
                        junctionMetadata.ownerColumns.forEach(column => {
                            inserted[column.databaseName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;
                        });
                        junctionMetadata.inverseColumns.forEach(column => {
                            inserted[column.databaseName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;
                        });
                        bulkInserted.push(inserted);
                    });
                });
                if (!bulkInserted.length)
                    return;
                if (this.queryBuilder.connection.driver instanceof OracleDriver_7.OracleDriver || this.queryBuilder.connection.driver instanceof SapDriver_4.SapDriver) {
                    await Promise.all(bulkInserted.map(value => {
                        return this.queryBuilder
                            .createQueryBuilder()
                            .insert()
                            .into(junctionMetadata.tableName)
                            .values(value)
                            .execute();
                    }));
                }
                else {
                    await this.queryBuilder
                        .createQueryBuilder()
                        .insert()
                        .into(junctionMetadata.tableName)
                        .values(bulkInserted)
                        .execute();
                }
            }
        }
    }
    exports.RelationUpdater = RelationUpdater;
});
define("typeorm/query-builder/RelationRemover", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationRemover = void 0;
    /**
     * Allows to work with entity relations and perform specific operations with those relations.
     *
     * todo: add transactions everywhere
     */
    class RelationRemover {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryBuilder, expressionMap) {
            this.queryBuilder = queryBuilder;
            this.expressionMap = expressionMap;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs remove operation on a relation.
         */
        async remove(value) {
            const relation = this.expressionMap.relationMetadata;
            if (relation.isOneToMany) {
                // if (this.expressionMap.of instanceof Array)
                //     throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);
                // DELETE FROM post WHERE post.categoryId = of AND post.id = id
                const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
                const values = Array.isArray(value) ? value : [value];
                const updateSet = {};
                relation.inverseRelation.joinColumns.forEach(column => {
                    updateSet[column.propertyName] = null;
                });
                const parameters = {};
                const conditions = [];
                ofs.forEach((of, ofIndex) => {
                    conditions.push(...values.map((value, valueIndex) => {
                        return [
                            ...relation.inverseRelation.joinColumns.map((column, columnIndex) => {
                                const parameterName = "joinColumn_" + ofIndex + "_" + valueIndex + "_" + columnIndex;
                                parameters[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;
                                return `${column.propertyPath} = :${parameterName}`;
                            }),
                            ...relation.inverseRelation.entityMetadata.primaryColumns.map((column, columnIndex) => {
                                const parameterName = "primaryColumn_" + valueIndex + "_" + valueIndex + "_" + columnIndex;
                                parameters[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;
                                return `${column.propertyPath} = :${parameterName}`;
                            })
                        ].join(" AND ");
                    }));
                });
                const condition = conditions.map(str => "(" + str + ")").join(" OR ");
                if (!condition)
                    return;
                await this.queryBuilder
                    .createQueryBuilder()
                    .update(relation.inverseEntityMetadata.target)
                    .set(updateSet)
                    .where(condition)
                    .setParameters(parameters)
                    .execute();
            }
            else { // many to many
                const junctionMetadata = relation.junctionEntityMetadata;
                const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];
                const values = Array.isArray(value) ? value : [value];
                const firstColumnValues = relation.isManyToManyOwner ? ofs : values;
                const secondColumnValues = relation.isManyToManyOwner ? values : ofs;
                const parameters = {};
                const conditions = [];
                firstColumnValues.forEach((firstColumnVal, firstColumnValIndex) => {
                    conditions.push(...secondColumnValues.map((secondColumnVal, secondColumnValIndex) => {
                        return [
                            ...junctionMetadata.ownerColumns.map((column, columnIndex) => {
                                const parameterName = "firstValue_" + firstColumnValIndex + "_" + secondColumnValIndex + "_" + columnIndex;
                                parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;
                                return `${column.databaseName} = :${parameterName}`;
                            }),
                            ...junctionMetadata.inverseColumns.map((column, columnIndex) => {
                                const parameterName = "secondValue_" + firstColumnValIndex + "_" + secondColumnValIndex + "_" + columnIndex;
                                parameters[parameterName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;
                                return `${column.databaseName} = :${parameterName}`;
                            })
                        ].join(" AND ");
                    }));
                });
                const condition = conditions.map(str => "(" + str + ")").join(" OR ");
                await this.queryBuilder
                    .createQueryBuilder()
                    .delete()
                    .from(junctionMetadata.tableName)
                    .where(condition)
                    .setParameters(parameters)
                    .execute();
            }
        }
    }
    exports.RelationRemover = RelationRemover;
});
define("typeorm/query-builder/RelationQueryBuilder", ["require", "exports", "typeorm/query-builder/QueryBuilder", "typeorm/query-builder/RelationUpdater", "typeorm/query-builder/RelationRemover"], function (require, exports, QueryBuilder_5, RelationUpdater_1, RelationRemover_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationQueryBuilder = void 0;
    /**
     * Allows to work with entity relations and perform specific operations with those relations.
     *
     * todo: add transactions everywhere
     */
    class RelationQueryBuilder extends QueryBuilder_5.QueryBuilder {
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            return "";
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Sets entity (target) which relations will be updated.
         */
        of(entity) {
            this.expressionMap.of = entity;
            return this;
        }
        /**
         * Sets entity relation's value.
         * Value can be entity, entity id or entity id map (if entity has composite ids).
         * Works only for many-to-one and one-to-one relations.
         * For many-to-many and one-to-many relations use #add and #remove methods instead.
         */
        async set(value) {
            const relation = this.expressionMap.relationMetadata;
            if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
                throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);
            if (relation.isManyToMany || relation.isOneToMany)
                throw new Error(`Set operation is only supported for many-to-one and one-to-one relations. ` +
                    `However given "${relation.propertyPath}" has ${relation.relationType} relation. ` +
                    `Use .add() method instead.`);
            // if there are multiple join columns then user must send id map as "value" argument. check if he really did it
            if (relation.joinColumns &&
                relation.joinColumns.length > 1 &&
                (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))
                throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: "...", lastName: "..." })`);
            const updater = new RelationUpdater_1.RelationUpdater(this, this.expressionMap);
            return updater.update(value);
        }
        /**
         * Adds (binds) given value to entity relation.
         * Value can be entity, entity id or entity id map (if entity has composite ids).
         * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
         * Works only for many-to-many and one-to-many relations.
         * For many-to-one and one-to-one use #set method instead.
         */
        async add(value) {
            if (Array.isArray(value) && value.length === 0)
                return;
            const relation = this.expressionMap.relationMetadata;
            if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
                throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);
            if (relation.isManyToOne || relation.isOneToOne)
                throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +
                    `However given "${relation.propertyPath}" has ${relation.relationType} relation. ` +
                    `Use .set() method instead.`);
            // if there are multiple join columns then user must send id map as "value" argument. check if he really did it
            if (relation.joinColumns &&
                relation.joinColumns.length > 1 &&
                (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))
                throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: "...", lastName: "..." })`);
            const updater = new RelationUpdater_1.RelationUpdater(this, this.expressionMap);
            return updater.update(value);
        }
        /**
         * Removes (unbinds) given value from entity relation.
         * Value can be entity, entity id or entity id map (if entity has composite ids).
         * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
         * Works only for many-to-many and one-to-many relations.
         * For many-to-one and one-to-one use #set method instead.
         */
        async remove(value) {
            if (Array.isArray(value) && value.length === 0)
                return;
            const relation = this.expressionMap.relationMetadata;
            if (!this.expressionMap.of) // todo: move this check before relation query builder creation?
                throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);
            if (relation.isManyToOne || relation.isOneToOne)
                throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +
                    `However given "${relation.propertyPath}" has ${relation.relationType} relation. ` +
                    `Use .set(null) method instead.`);
            const remover = new RelationRemover_1.RelationRemover(this, this.expressionMap);
            return remover.remove(value);
        }
        /**
         * Adds (binds) and removes (unbinds) given values to/from entity relation.
         * Value can be entity, entity id or entity id map (if entity has composite ids).
         * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).
         * Works only for many-to-many and one-to-many relations.
         * For many-to-one and one-to-one use #set method instead.
         */
        async addAndRemove(added, removed) {
            await this.remove(removed);
            await this.add(added);
        }
        /**
         * Gets entity's relation id.
        async getId(): Promise<any> {
    
        }*/
        /**
         * Gets entity's relation ids.
        async getIds(): Promise<any[]> {
            return [];
        }*/
        /**
         * Loads a single entity (relational) from the relation.
         * You can also provide id of relational entity to filter by.
         */
        async loadOne() {
            return this.loadMany().then(results => results[0]);
        }
        /**
         * Loads many entities (relational) from the relation.
         * You can also provide ids of relational entities to filter by.
         */
        async loadMany() {
            let of = this.expressionMap.of;
            if (!(of instanceof Object)) {
                const metadata = this.expressionMap.mainAlias.metadata;
                if (metadata.hasMultiplePrimaryKeys)
                    throw new Error(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);
                of = metadata.primaryColumns[0].createValueMap(of);
            }
            return this.connection.relationLoader.load(this.expressionMap.relationMetadata, of);
        }
    }
    exports.RelationQueryBuilder = RelationQueryBuilder;
});
define("typeorm/find-options/operator/In", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.In = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: In([...]) }
     */
    function In(value) {
        return new FindOperator_1.FindOperator("in", value, true, true);
    }
    exports.In = In;
});
define("typeorm/query-builder/QueryBuilder", ["require", "exports", "typeorm/query-builder/QueryExpressionMap", "typeorm/query-builder/Brackets", "typeorm/metadata/EntityMetadata", "typeorm/driver/sqljs/SqljsDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/oracle/OracleDriver", "typeorm/index", "typeorm/find-options/FindOperator", "typeorm/find-options/operator/In", "typeorm/error/EntityColumnNotFound"], function (require, exports, QueryExpressionMap_1, Brackets_1, EntityMetadata_4, SqljsDriver_5, PostgresDriver_6, CockroachDriver_6, SqlServerDriver_5, OracleDriver_8, __1, FindOperator_2, In_1, EntityColumnNotFound_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryBuilder = void 0;
    // todo: completely cover query builder with tests
    // todo: entityOrProperty can be target name. implement proper behaviour if it is.
    // todo: check in persistment if id exist on object and throw exception (can be in partial selection?)
    // todo: fix problem with long aliases eg getMaxIdentifierLength
    // todo: fix replacing in .select("COUNT(post.id) AS cnt") statement
    // todo: implement joinAlways in relations and relationId
    // todo: finish partial selection
    // todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...
    // todo: implement @Select decorator
    // todo: add select and map functions
    // todo: implement relation/entity loading and setting them into properties within a separate query
    // .loadAndMap("post.categories", "post.categories", qb => ...)
    // .loadAndMap("post.categories", Category, qb => ...)
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class QueryBuilder {
        /**
         * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.
         */
        constructor(connectionOrQueryBuilder, queryRunner) {
            if (connectionOrQueryBuilder instanceof QueryBuilder) {
                this.connection = connectionOrQueryBuilder.connection;
                this.queryRunner = connectionOrQueryBuilder.queryRunner;
                this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();
            }
            else {
                this.connection = connectionOrQueryBuilder;
                this.queryRunner = queryRunner;
                this.expressionMap = new QueryExpressionMap_1.QueryExpressionMap(this.connection);
            }
        }
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        /**
         * Gets the main alias string used in this query builder.
         */
        get alias() {
            if (!this.expressionMap.mainAlias)
                throw new Error(`Main alias is not set`); // todo: better exception
            return this.expressionMap.mainAlias.name;
        }
        /**
         * Creates SELECT query and selects given data.
         * Replaces all previous selections if they exist.
         */
        select(selection, selectionAliasName) {
            this.expressionMap.queryType = "select";
            if (Array.isArray(selection)) {
                this.expressionMap.selects = selection.map(selection => ({ selection: selection }));
            }
            else if (selection) {
                this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];
            }
            // loading it dynamically because of circular issue
            const SelectQueryBuilderCls = require("./SelectQueryBuilder").SelectQueryBuilder;
            if (this instanceof SelectQueryBuilderCls)
                return this;
            return new SelectQueryBuilderCls(this);
        }
        /**
         * Creates INSERT query.
         */
        insert() {
            this.expressionMap.queryType = "insert";
            // loading it dynamically because of circular issue
            const InsertQueryBuilderCls = require("./InsertQueryBuilder").InsertQueryBuilder;
            if (this instanceof InsertQueryBuilderCls)
                return this;
            return new InsertQueryBuilderCls(this);
        }
        /**
         * Creates UPDATE query and applies given update values.
         */
        update(entityOrTableNameUpdateSet, maybeUpdateSet) {
            const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet;
            entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof __1.EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;
            if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === "string") {
                const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);
                this.expressionMap.setMainAlias(mainAlias);
            }
            this.expressionMap.queryType = "update";
            this.expressionMap.valuesSet = updateSet;
            // loading it dynamically because of circular issue
            const UpdateQueryBuilderCls = require("./UpdateQueryBuilder").UpdateQueryBuilder;
            if (this instanceof UpdateQueryBuilderCls)
                return this;
            return new UpdateQueryBuilderCls(this);
        }
        /**
         * Creates DELETE query.
         */
        delete() {
            this.expressionMap.queryType = "delete";
            // loading it dynamically because of circular issue
            const DeleteQueryBuilderCls = require("./DeleteQueryBuilder").DeleteQueryBuilder;
            if (this instanceof DeleteQueryBuilderCls)
                return this;
            return new DeleteQueryBuilderCls(this);
        }
        softDelete() {
            this.expressionMap.queryType = "soft-delete";
            // loading it dynamically because of circular issue
            const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
            if (this instanceof SoftDeleteQueryBuilderCls)
                return this;
            return new SoftDeleteQueryBuilderCls(this);
        }
        restore() {
            this.expressionMap.queryType = "restore";
            // loading it dynamically because of circular issue
            const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
            if (this instanceof SoftDeleteQueryBuilderCls)
                return this;
            return new SoftDeleteQueryBuilderCls(this);
        }
        /**
         * Sets entity's relation with which this query builder gonna work.
         */
        relation(entityTargetOrPropertyPath, maybePropertyPath) {
            const entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;
            const propertyPath = arguments.length === 2 ? maybePropertyPath : entityTargetOrPropertyPath;
            this.expressionMap.queryType = "relation";
            this.expressionMap.relationPropertyPath = propertyPath;
            if (entityTarget) {
                const mainAlias = this.createFromAlias(entityTarget);
                this.expressionMap.setMainAlias(mainAlias);
            }
            // loading it dynamically because of circular issue
            const RelationQueryBuilderCls = require("./RelationQueryBuilder").RelationQueryBuilder;
            if (this instanceof RelationQueryBuilderCls)
                return this;
            return new RelationQueryBuilderCls(this);
        }
        /**
         * Checks if given relation or relations exist in the entity.
         * Returns true if relation exists, false otherwise.
         *
         * todo: move this method to manager? or create a shortcut?
         */
        hasRelation(target, relation) {
            const entityMetadata = this.connection.getMetadata(target);
            const relations = Array.isArray(relation) ? relation : [relation];
            return relations.every(relation => {
                return !!entityMetadata.findRelationWithPropertyPath(relation);
            });
        }
        /**
         * Sets parameter name and its value.
         */
        setParameter(key, value) {
            this.expressionMap.parameters[key] = value;
            return this;
        }
        /**
         * Adds all parameters from the given object.
         */
        setParameters(parameters) {
            // remove function parameters
            Object.keys(parameters).forEach(key => {
                if (parameters[key] instanceof Function) {
                    throw new Error(`Function parameter isn't supported in the parameters. Please check "${key}" parameter.`);
                }
            });
            // set parent query builder parameters as well in sub-query mode
            if (this.expressionMap.parentQueryBuilder)
                this.expressionMap.parentQueryBuilder.setParameters(parameters);
            Object.keys(parameters).forEach(key => this.setParameter(key, parameters[key]));
            return this;
        }
        /**
         * Adds native parameters from the given object.
         */
        setNativeParameters(parameters) {
            // set parent query builder parameters as well in sub-query mode
            if (this.expressionMap.parentQueryBuilder)
                this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);
            Object.keys(parameters).forEach(key => {
                this.expressionMap.nativeParameters[key] = parameters[key];
            });
            return this;
        }
        /**
         * Gets all parameters.
         */
        getParameters() {
            const parameters = Object.assign({}, this.expressionMap.parameters);
            // add discriminator column parameter if it exist
            if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {
                const metadata = this.expressionMap.mainAlias.metadata;
                if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {
                    const values = metadata.childEntityMetadatas
                        .filter(childMetadata => childMetadata.discriminatorColumn)
                        .map(childMetadata => childMetadata.discriminatorValue);
                    values.push(metadata.discriminatorValue);
                    parameters["discriminatorColumnValues"] = values;
                }
            }
            return parameters;
        }
        /**
         * Prints sql to stdout using console.log.
         */
        printSql() {
            const [query, parameters] = this.getQueryAndParameters();
            this.connection.logger.logQuery(query, parameters);
            return this;
        }
        /**
         * Gets generated sql that will be executed.
         * Parameters in the query are escaped for the currently used driver.
         */
        getSql() {
            return this.getQueryAndParameters()[0];
        }
        /**
         * Gets query to be executed with all parameters used in it.
         */
        getQueryAndParameters() {
            // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values
            const query = this.getQuery();
            const parameters = this.getParameters();
            return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);
        }
        /**
         * Executes sql generated by query builder and returns raw database results.
         */
        async execute() {
            const [sql, parameters] = this.getQueryAndParameters();
            const queryRunner = this.obtainQueryRunner();
            try {
                return await queryRunner.query(sql, parameters); // await is needed here because we are using finally
            }
            finally {
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
                if (this.connection.driver instanceof SqljsDriver_5.SqljsDriver) {
                    await this.connection.driver.autoSave();
                }
            }
        }
        /**
         * Creates a completely new query builder.
         * Uses same query runner as current QueryBuilder.
         */
        createQueryBuilder() {
            return new this.constructor(this.connection, this.queryRunner);
        }
        /**
         * Clones query builder as it is.
         * Note: it uses new query runner, if you want query builder that uses exactly same query runner,
         * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)
         * where queryBuilder is cloned QueryBuilder.
         */
        clone() {
            return new this.constructor(this);
        }
        /**
         * Includes a Query comment in the query builder.  This is helpful for debugging purposes,
         * such as finding a specific query in the database server's logs, or for categorization using
         * an APM product.
         */
        comment(comment) {
            this.expressionMap.comment = comment;
            return this;
        }
        /**
         * Disables escaping.
         */
        disableEscaping() {
            this.expressionMap.disableEscaping = false;
            return this;
        }
        /**
         * Escapes table name, column name or alias name using current database's escaping character.
         */
        escape(name) {
            if (!this.expressionMap.disableEscaping)
                return name;
            return this.connection.driver.escape(name);
        }
        /**
         * Sets or overrides query builder's QueryRunner.
         */
        setQueryRunner(queryRunner) {
            this.queryRunner = queryRunner;
            return this;
        }
        /**
         * Indicates if listeners and subscribers must be called before and after query execution.
         * Enabled by default.
         */
        callListeners(enabled) {
            this.expressionMap.callListeners = enabled;
            return this;
        }
        /**
         * If set to true the query will be wrapped into a transaction.
         */
        useTransaction(enabled) {
            this.expressionMap.useTransaction = enabled;
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Gets escaped table name with schema name if SqlServer driver used with custom
         * schema name, otherwise returns escaped table name.
         */
        getTableName(tablePath) {
            return tablePath.split(".")
                .map(i => {
                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string
                if (i === "")
                    return i;
                return this.escape(i);
            }).join(".");
        }
        /**
         * Gets name of the table where insert should be performed.
         */
        getMainTableName() {
            if (!this.expressionMap.mainAlias)
                throw new Error(`Entity where values should be inserted is not specified. Call "qb.into(entity)" method to specify it.`);
            if (this.expressionMap.mainAlias.hasMetadata)
                return this.expressionMap.mainAlias.metadata.tablePath;
            return this.expressionMap.mainAlias.tablePath;
        }
        /**
         * Specifies FROM which entity's table select/update/delete will be executed.
         * Also sets a main string alias of the selection data.
         */
        createFromAlias(entityTarget, aliasName) {
            // if table has a metadata then find it to properly escape its properties
            // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);
            if (this.connection.hasMetadata(entityTarget)) {
                const metadata = this.connection.getMetadata(entityTarget);
                return this.expressionMap.createAlias({
                    type: "from",
                    name: aliasName,
                    metadata: this.connection.getMetadata(entityTarget),
                    tablePath: metadata.tablePath
                });
            }
            else {
                if (typeof entityTarget === "string") {
                    const isSubquery = entityTarget.substr(0, 1) === "(" && entityTarget.substr(-1) === ")";
                    return this.expressionMap.createAlias({
                        type: "from",
                        name: aliasName,
                        tablePath: !isSubquery ? entityTarget : undefined,
                        subQuery: isSubquery ? entityTarget : undefined,
                    });
                }
                const subQueryBuilder = entityTarget(this.subQuery());
                this.setParameters(subQueryBuilder.getParameters());
                const subquery = subQueryBuilder.getQuery();
                return this.expressionMap.createAlias({
                    type: "from",
                    name: aliasName,
                    subQuery: subquery
                });
            }
        }
        /**
         * Replaces all entity's propertyName to name in the given statement.
         */
        replacePropertyNames(statement) {
            // Escape special characters in regular expressions
            // Per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
            const escapeRegExp = (s) => s.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
            for (const alias of this.expressionMap.aliases) {
                if (!alias.hasMetadata)
                    continue;
                const replaceAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? `${alias.name}.` : "";
                const replacementAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? `${this.escape(alias.name)}.` : "";
                const replacements = {};
                // Insert & overwrite the replacements from least to most relevant in our replacements object.
                // To do this we iterate and overwrite in the order of relevance.
                // Least to Most Relevant:
                // * Relation Property Path to first join column key
                // * Relation Property Path + Column Path
                // * Column Database Name
                // * Column Propety Name
                // * Column Property Path
                for (const relation of alias.metadata.relations) {
                    if (relation.joinColumns.length > 0)
                        replacements[relation.propertyPath] = relation.joinColumns[0].databaseName;
                }
                for (const relation of alias.metadata.relations) {
                    for (const joinColumn of [...relation.joinColumns, ...relation.inverseJoinColumns]) {
                        const propertyKey = `${relation.propertyPath}.${joinColumn.referencedColumn.propertyPath}`;
                        replacements[propertyKey] = joinColumn.databaseName;
                    }
                }
                for (const column of alias.metadata.columns) {
                    replacements[column.databaseName] = column.databaseName;
                }
                for (const column of alias.metadata.columns) {
                    replacements[column.propertyName] = column.databaseName;
                }
                for (const column of alias.metadata.columns) {
                    replacements[column.propertyPath] = column.databaseName;
                }
                const replacementKeys = Object.keys(replacements);
                if (replacementKeys.length) {
                    statement = statement.replace(new RegExp(
                    // Avoid a lookbehind here since it's not well supported
                    `([ =\(]|^.{0})` +
                        `${escapeRegExp(replaceAliasNamePrefix)}(${replacementKeys.map(escapeRegExp).join("|")})` +
                        `(?=[ =\)\,]|.{0}$)`, "gm"), (_, pre, p) => `${pre}${replacementAliasNamePrefix}${this.escape(replacements[p])}`);
                }
            }
            return statement;
        }
        createComment() {
            if (!this.expressionMap.comment) {
                return "";
            }
            // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`
            // In some dialects query nesting is available - but not all.  Because of this, we'll need
            // to scrub "ending" characters from the SQL but otherwise we can leave everything else
            // as-is and it should be valid.
            return `/* ${this.expressionMap.comment.replace("*/", "")} */ `;
        }
        /**
         * Creates "WHERE" expression.
         */
        createWhereExpression() {
            const conditionsArray = [];
            const whereExpression = this.createWhereExpressionString();
            whereExpression.trim() && conditionsArray.push(this.createWhereExpressionString());
            if (this.expressionMap.mainAlias.hasMetadata) {
                const metadata = this.expressionMap.mainAlias.metadata;
                // Adds the global condition of "non-deleted" for the entity with delete date columns in select query.
                if (this.expressionMap.queryType === "select" && !this.expressionMap.withDeleted && metadata.deleteDateColumn) {
                    const column = this.expressionMap.aliasNamePrefixingEnabled
                        ? this.expressionMap.mainAlias.name + "." + metadata.deleteDateColumn.propertyName
                        : metadata.deleteDateColumn.propertyName;
                    const condition = `${this.replacePropertyNames(column)} IS NULL`;
                    conditionsArray.push(condition);
                }
                if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {
                    const column = this.expressionMap.aliasNamePrefixingEnabled
                        ? this.expressionMap.mainAlias.name + "." + metadata.discriminatorColumn.databaseName
                        : metadata.discriminatorColumn.databaseName;
                    const condition = `${this.replacePropertyNames(column)} IN (:...discriminatorColumnValues)`;
                    conditionsArray.push(condition);
                }
            }
            if (this.expressionMap.extraAppendedAndWhereCondition) {
                const condition = this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);
                conditionsArray.push(condition);
            }
            if (!conditionsArray.length) {
                return "";
            }
            else if (conditionsArray.length === 1) {
                return ` WHERE ${conditionsArray[0]}`;
            }
            else {
                return ` WHERE ( ${conditionsArray.join(" ) AND ( ")} )`;
            }
        }
        /**
         * Creates "RETURNING" / "OUTPUT" expression.
         */
        createReturningExpression() {
            const columns = this.getReturningColumns();
            const driver = this.connection.driver;
            // also add columns we must auto-return to perform entity updation
            // if user gave his own returning
            if (typeof this.expressionMap.returning !== "string" &&
                this.expressionMap.extraReturningColumns.length > 0 &&
                driver.isReturningSqlSupported()) {
                columns.push(...this.expressionMap.extraReturningColumns.filter(column => {
                    return columns.indexOf(column) === -1;
                }));
            }
            if (columns.length) {
                let columnsExpression = columns.map(column => {
                    const name = this.escape(column.databaseName);
                    if (driver instanceof SqlServerDriver_5.SqlServerDriver) {
                        if (this.expressionMap.queryType === "insert" || this.expressionMap.queryType === "update" || this.expressionMap.queryType === "soft-delete" || this.expressionMap.queryType === "restore") {
                            return "INSERTED." + name;
                        }
                        else {
                            return this.escape(this.getMainTableName()) + "." + name;
                        }
                    }
                    else {
                        return name;
                    }
                }).join(", ");
                if (driver instanceof OracleDriver_8.OracleDriver) {
                    columnsExpression += " INTO " + columns.map(column => {
                        const parameterName = "output_" + column.databaseName;
                        this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };
                        return this.connection.driver.createParameter(parameterName, Object.keys(this.expressionMap.nativeParameters).length);
                    }).join(", ");
                }
                if (driver instanceof SqlServerDriver_5.SqlServerDriver) {
                    if (this.expressionMap.queryType === "insert" || this.expressionMap.queryType === "update") {
                        columnsExpression += " INTO @OutputTable";
                    }
                }
                return columnsExpression;
            }
            else if (typeof this.expressionMap.returning === "string") {
                return this.expressionMap.returning;
            }
            return "";
        }
        /**
         * If returning / output cause is set to array of column names,
         * then this method will return all column metadatas of those column names.
         */
        getReturningColumns() {
            const columns = [];
            if (Array.isArray(this.expressionMap.returning)) {
                this.expressionMap.returning.forEach(columnName => {
                    if (this.expressionMap.mainAlias.hasMetadata) {
                        columns.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName));
                    }
                });
            }
            return columns;
        }
        /**
         * Concatenates all added where expressions into one string.
         */
        createWhereExpressionString() {
            return this.expressionMap.wheres.map((where, index) => {
                switch (where.type) {
                    case "and":
                        return (index > 0 ? "AND " : "") + this.replacePropertyNames(where.condition);
                    case "or":
                        return (index > 0 ? "OR " : "") + this.replacePropertyNames(where.condition);
                    default:
                        return this.replacePropertyNames(where.condition);
                }
            }).join(" ");
        }
        /**
         * Creates "WHERE" expression and variables for the given "ids".
         */
        createWhereIdsExpression(ids) {
            const metadata = this.expressionMap.mainAlias.metadata;
            const normalized = (Array.isArray(ids) ? ids : [ids]).map(id => metadata.ensureEntityIdMap(id));
            // using in(...ids) for single primary key entities
            if (!metadata.hasMultiplePrimaryKeys
                && metadata.embeddeds.length === 0) {
                const primaryColumn = metadata.primaryColumns[0];
                // getEntityValue will try to transform `In`, it is a bug
                // todo: remove this transformer check after #2390 is fixed
                if (!primaryColumn.transformer) {
                    return this.computeWhereParameter({
                        [primaryColumn.propertyName]: In_1.In(normalized.map(id => primaryColumn.getEntityValue(id, false)))
                    });
                }
            }
            // create shortcuts for better readability
            const alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias.name) + "." : "";
            let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;
            const whereStrings = normalized.map((id, index) => {
                const whereSubStrings = [];
                metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {
                    const parameterName = "id_" + index + "_" + secondIndex;
                    // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + "=:id_" + index + "_" + secondIndex);
                    whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + " = " + this.connection.driver.createParameter(parameterName, parameterIndex));
                    this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);
                    parameterIndex++;
                });
                return whereSubStrings.join(" AND ");
            });
            return whereStrings.length > 1
                ? "(" + whereStrings.map(whereString => "(" + whereString + ")").join(" OR ") + ")"
                : whereStrings[0];
        }
        /**
         * Computes given where argument - transforms to a where string all forms it can take.
         */
        computeWhereParameter(where) {
            if (typeof where === "string")
                return where;
            if (where instanceof Brackets_1.Brackets) {
                const whereQueryBuilder = this.createQueryBuilder();
                whereQueryBuilder.expressionMap.mainAlias = this.expressionMap.mainAlias;
                whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled = this.expressionMap.aliasNamePrefixingEnabled;
                whereQueryBuilder.expressionMap.nativeParameters = this.expressionMap.nativeParameters;
                where.whereFactory(whereQueryBuilder);
                const whereString = whereQueryBuilder.createWhereExpressionString();
                this.setParameters(whereQueryBuilder.getParameters());
                return whereString ? "(" + whereString + ")" : "";
            }
            else if (where instanceof Function) {
                return where(this);
            }
            else if (where instanceof Object) {
                const wheres = Array.isArray(where) ? where : [where];
                let andConditions;
                let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;
                if (this.expressionMap.mainAlias.hasMetadata) {
                    andConditions = wheres.map((where, whereIndex) => {
                        const propertyPaths = EntityMetadata_4.EntityMetadata.createPropertyPath(this.expressionMap.mainAlias.metadata, where);
                        return propertyPaths.map((propertyPath, propertyIndex) => {
                            const columns = this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(propertyPath);
                            if (!columns.length) {
                                throw new EntityColumnNotFound_2.EntityColumnNotFound(propertyPath);
                            }
                            return columns.map((column, columnIndex) => {
                                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${propertyPath}` : column.propertyPath;
                                let parameterValue = column.getEntityValue(where, true);
                                const parameterName = "where_" + whereIndex + "_" + propertyIndex + "_" + columnIndex;
                                const parameterBaseCount = Object.keys(this.expressionMap.nativeParameters).filter(x => x.startsWith(parameterName)).length;
                                if (parameterValue === null) {
                                    return `${aliasPath} IS NULL`;
                                }
                                else if (parameterValue instanceof FindOperator_2.FindOperator) {
                                    let parameters = [];
                                    if (parameterValue.useParameter) {
                                        if (parameterValue.objectLiteralParameters) {
                                            this.setParameters(parameterValue.objectLiteralParameters);
                                        }
                                        else {
                                            const realParameterValues = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];
                                            realParameterValues.forEach((realParameterValue, realParameterValueIndex) => {
                                                this.expressionMap.nativeParameters[parameterName + (parameterBaseCount + realParameterValueIndex)] = realParameterValue;
                                                parameterIndex++;
                                                parameters.push(this.connection.driver.createParameter(parameterName + (parameterBaseCount + realParameterValueIndex), parameterIndex - 1));
                                            });
                                        }
                                    }
                                    return this.computeFindOperatorExpression(parameterValue, aliasPath, parameters);
                                }
                                else {
                                    this.expressionMap.nativeParameters[parameterName] = parameterValue;
                                    parameterIndex++;
                                    const parameter = this.connection.driver.createParameter(parameterName, parameterIndex - 1);
                                    return `${aliasPath} = ${parameter}`;
                                }
                            }).filter(expression => !!expression).join(" AND ");
                        }).filter(expression => !!expression).join(" AND ");
                    });
                }
                else {
                    andConditions = wheres.map((where, whereIndex) => {
                        return Object.keys(where).map((key, parameterIndex) => {
                            const parameterValue = where[key];
                            const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${key}` : key;
                            if (parameterValue === null) {
                                return `${aliasPath} IS NULL`;
                            }
                            else {
                                const parameterName = "where_" + whereIndex + "_" + parameterIndex;
                                this.expressionMap.nativeParameters[parameterName] = parameterValue;
                                parameterIndex++;
                                return `${aliasPath} = ${this.connection.driver.createParameter(parameterName, parameterIndex - 1)}`;
                            }
                        }).join(" AND ");
                    });
                }
                if (andConditions.length > 1)
                    return andConditions.map(where => "(" + where + ")").join(" OR ");
                return andConditions.join("");
            }
            return "";
        }
        /**
         * Gets SQL needs to be inserted into final query.
         */
        computeFindOperatorExpression(operator, aliasPath, parameters) {
            const { driver } = this.connection;
            switch (operator.type) {
                case "not":
                    if (operator.child) {
                        return `NOT(${this.computeFindOperatorExpression(operator.child, aliasPath, parameters)})`;
                    }
                    else {
                        return `${aliasPath} != ${parameters[0]}`;
                    }
                case "lessThan":
                    return `${aliasPath} < ${parameters[0]}`;
                case "lessThanOrEqual":
                    return `${aliasPath} <= ${parameters[0]}`;
                case "moreThan":
                    return `${aliasPath} > ${parameters[0]}`;
                case "moreThanOrEqual":
                    return `${aliasPath} >= ${parameters[0]}`;
                case "equal":
                    return `${aliasPath} = ${parameters[0]}`;
                case "ilike":
                    if (driver instanceof PostgresDriver_6.PostgresDriver || driver instanceof CockroachDriver_6.CockroachDriver) {
                        return `${aliasPath} ILIKE ${parameters[0]}`;
                    }
                    return `UPPER(${aliasPath}) LIKE UPPER(${parameters[0]})`;
                case "like":
                    return `${aliasPath} LIKE ${parameters[0]}`;
                case "between":
                    return `${aliasPath} BETWEEN ${parameters[0]} AND ${parameters[1]}`;
                case "in":
                    if (parameters.length === 0) {
                        return "0=1";
                    }
                    return `${aliasPath} IN (${parameters.join(", ")})`;
                case "any":
                    return `${aliasPath} = ANY(${parameters[0]})`;
                case "isNull":
                    return `${aliasPath} IS NULL`;
                case "raw":
                    if (operator.getSql) {
                        return operator.getSql(aliasPath);
                    }
                    else {
                        return `${aliasPath} = ${operator.value}`;
                    }
            }
            throw new TypeError(`Unsupported FindOperator ${FindOperator_2.FindOperator.constructor.name}`);
        }
        /**
         * Creates a query builder used to execute sql queries inside this query builder.
         */
        obtainQueryRunner() {
            return this.queryRunner || this.connection.createQueryRunner();
        }
    }
    exports.QueryBuilder = QueryBuilder;
});
define("typeorm/query-builder/SelectQueryBuilderOption", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/query-builder/QueryExpressionMap", ["require", "exports", "typeorm/query-builder/Alias", "typeorm/query-builder/JoinAttribute", "typeorm/query-builder/relation-id/RelationIdAttribute", "typeorm/query-builder/relation-count/RelationCountAttribute"], function (require, exports, Alias_1, JoinAttribute_1, RelationIdAttribute_1, RelationCountAttribute_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryExpressionMap = void 0;
    /**
     * Contains all properties of the QueryBuilder that needs to be build a final query.
     */
    class QueryExpressionMap {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
            // -------------------------------------------------------------------------
            // Public Properties
            // -------------------------------------------------------------------------
            /**
             * Indicates if QueryBuilder used to select entities and not a raw results.
             */
            this.queryEntity = false;
            /**
             * All aliases (including main alias) used in the query.
             */
            this.aliases = [];
            /**
             * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.
             */
            this.queryType = "select";
            /**
             * Data needs to be SELECT-ed.
             */
            this.selects = [];
            /**
             * Whether SELECT is DISTINCT.
             */
            this.selectDistinct = false;
            /**
             * SELECT DISTINCT ON query (postgres).
             */
            this.selectDistinctOn = [];
            /**
             * Extra returning columns to be added to the returning statement if driver supports it.
             */
            this.extraReturningColumns = [];
            /**
             * Optional on conflict statement used in insertion query in postgres.
             */
            this.onConflict = "";
            /**
             * Optional on ignore statement used in insertion query in databases.
             */
            this.onIgnore = false;
            /**
             * JOIN queries.
             */
            this.joinAttributes = [];
            /**
             * RelationId queries.
             */
            this.relationIdAttributes = [];
            /**
             * Relation count queries.
             */
            this.relationCountAttributes = [];
            /**
             * WHERE queries.
             */
            this.wheres = [];
            /**
             * HAVING queries.
             */
            this.havings = [];
            /**
             * ORDER BY queries.
             */
            this.orderBys = {};
            /**
             * GROUP BY queries.
             */
            this.groupBys = [];
            /**
             * Indicates if soft-deleted rows should be included in entity result.
             * By default the soft-deleted rows are not included.
             */
            this.withDeleted = false;
            /**
             * Parameters used to be escaped in final query.
             */
            this.parameters = {};
            /**
             * Indicates if alias, table names and column names will be ecaped by driver, or not.
             *
             * todo: rename to isQuotingDisabled, also think if it should be named "escaping"
             */
            this.disableEscaping = true;
            /**
             * Indicates if virtual columns should be included in entity result.
             *
             * todo: what to do with it? is it properly used? what about persistence?
             */
            this.enableRelationIdValues = false;
            /**
             * Extra where condition appended to the end of original where conditions with AND keyword.
             * Original condition will be wrapped into brackets.
             */
            this.extraAppendedAndWhereCondition = "";
            /**
             * Indicates if query builder creates a subquery.
             */
            this.subQuery = false;
            /**
             * Indicates if property names are prefixed with alias names during property replacement.
             * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,
             * but user can use them in WHERE expressions.
             */
            this.aliasNamePrefixingEnabled = true;
            /**
             * Indicates if query result cache is enabled or not.
             */
            this.cache = false;
            /**
             * Options that define QueryBuilder behaviour.
             */
            this.options = [];
            /**
             * List of columns where data should be inserted.
             * Used in INSERT query.
             */
            this.insertColumns = [];
            /**
             * Used if user wants to update or delete a specific entities.
             */
            this.whereEntities = [];
            /**
             * Indicates if entity must be updated after insertion / updation.
             * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).
             */
            this.updateEntity = true;
            /**
             * Indicates if listeners and subscribers must be called before and after query execution.
             */
            this.callListeners = true;
            /**
             * Indicates if query must be wrapped into transaction.
             */
            this.useTransaction = false;
            /**
             * Extra parameters.
             * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.
             */
            this.nativeParameters = {};
        }
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        /**
         * Get all ORDER BY queries - if order by is specified by user then it uses them,
         * otherwise it uses default entity order by if it was set.
         */
        get allOrderBys() {
            if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf("disable-global-order") === -1) {
                const entityOrderBy = this.mainAlias.metadata.orderBy || {};
                return Object.keys(entityOrderBy).reduce((orderBy, key) => {
                    orderBy[this.mainAlias.name + "." + key] = entityOrderBy[key];
                    return orderBy;
                }, {});
            }
            return this.orderBys;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a main alias and adds it to the current expression map.
         */
        setMainAlias(alias) {
            // if main alias is already set then remove it from the array
            // if (this.mainAlias)
            //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));
            // set new main alias
            this.mainAlias = alias;
            return alias;
        }
        /**
         * Creates a new alias and adds it to the current expression map.
         */
        createAlias(options) {
            let aliasName = options.name;
            if (!aliasName && options.tablePath)
                aliasName = options.tablePath;
            if (!aliasName && options.target instanceof Function)
                aliasName = options.target.name;
            if (!aliasName && typeof options.target === "string")
                aliasName = options.target;
            const alias = new Alias_1.Alias();
            alias.type = options.type;
            if (aliasName)
                alias.name = aliasName;
            if (options.metadata)
                alias.metadata = options.metadata;
            if (options.target && !alias.hasMetadata)
                alias.metadata = this.connection.getMetadata(options.target);
            if (options.tablePath)
                alias.tablePath = options.tablePath;
            if (options.subQuery)
                alias.subQuery = options.subQuery;
            this.aliases.push(alias);
            return alias;
        }
        /**
         * Finds alias with the given name.
         * If alias was not found it throw an exception.
         */
        findAliasByName(aliasName) {
            const alias = this.aliases.find(alias => alias.name === aliasName);
            if (!alias)
                throw new Error(`"${aliasName}" alias was not found. Maybe you forgot to join it?`);
            return alias;
        }
        findColumnByAliasExpression(aliasExpression) {
            const [aliasName, propertyPath] = aliasExpression.split(".");
            const alias = this.findAliasByName(aliasName);
            return alias.metadata.findColumnWithPropertyName(propertyPath);
        }
        /**
         * Gets relation metadata of the relation this query builder works with.
         *
         * todo: add proper exceptions
         */
        get relationMetadata() {
            if (!this.mainAlias)
                throw new Error(`Entity to work with is not specified!`); // todo: better message
            const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);
            if (!relationMetadata)
                throw new Error(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message
            return relationMetadata;
        }
        /**
         * Copies all properties of the current QueryExpressionMap into a new one.
         * Useful when QueryBuilder needs to create a copy of itself.
         */
        clone() {
            const map = new QueryExpressionMap(this.connection);
            map.queryType = this.queryType;
            map.selects = this.selects.map(select => select);
            map.selectDistinct = this.selectDistinct;
            map.selectDistinctOn = this.selectDistinctOn;
            this.aliases.forEach(alias => map.aliases.push(new Alias_1.Alias(alias)));
            map.mainAlias = this.mainAlias;
            map.valuesSet = this.valuesSet;
            map.returning = this.returning;
            map.onConflict = this.onConflict;
            map.onIgnore = this.onIgnore;
            map.onUpdate = this.onUpdate;
            map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute_1.JoinAttribute(this.connection, this, join));
            map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute_1.RelationIdAttribute(this, relationId));
            map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute_1.RelationCountAttribute(this, relationCount));
            map.wheres = this.wheres.map(where => (Object.assign({}, where)));
            map.havings = this.havings.map(having => (Object.assign({}, having)));
            map.orderBys = Object.assign({}, this.orderBys);
            map.groupBys = this.groupBys.map(groupBy => groupBy);
            map.limit = this.limit;
            map.offset = this.offset;
            map.skip = this.skip;
            map.take = this.take;
            map.lockMode = this.lockMode;
            map.lockVersion = this.lockVersion;
            map.lockTables = this.lockTables;
            map.withDeleted = this.withDeleted;
            map.parameters = Object.assign({}, this.parameters);
            map.disableEscaping = this.disableEscaping;
            map.enableRelationIdValues = this.enableRelationIdValues;
            map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;
            map.subQuery = this.subQuery;
            map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;
            map.cache = this.cache;
            map.cacheId = this.cacheId;
            map.cacheDuration = this.cacheDuration;
            map.relationPropertyPath = this.relationPropertyPath;
            map.of = this.of;
            map.insertColumns = this.insertColumns;
            map.whereEntities = this.whereEntities;
            map.updateEntity = this.updateEntity;
            map.callListeners = this.callListeners;
            map.useTransaction = this.useTransaction;
            map.nativeParameters = Object.assign({}, this.nativeParameters);
            map.comment = this.comment;
            return map;
        }
    }
    exports.QueryExpressionMap = QueryExpressionMap;
});
define("typeorm/query-builder/relation-id/RelationIdAttribute", ["require", "exports", "typeorm/query-builder/QueryBuilderUtils", "typeorm/util/ObjectUtils"], function (require, exports, QueryBuilderUtils_3, ObjectUtils_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationIdAttribute = void 0;
    /**
     * Stores all join relation id attributes which will be used to build a JOIN query.
     */
    class RelationIdAttribute {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(queryExpressionMap, relationIdAttribute) {
            this.queryExpressionMap = queryExpressionMap;
            /**
             * Indicates if relation id should NOT be loaded as id map.
             */
            this.disableMixedMap = false;
            ObjectUtils_7.ObjectUtils.assign(this, relationIdAttribute || {});
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        get joinInverseSideMetadata() {
            return this.relation.inverseEntityMetadata;
        }
        /**
         * Alias of the parent of this join.
         * For example, if we join ("post.category", "categoryAlias") then "post" is a parent alias.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get parentAlias() {
            if (!QueryBuilderUtils_3.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value must be a string representation of alias property`);
            return this.relationName.substr(0, this.relationName.indexOf("."));
        }
        /**
         * Relation property name of the parent.
         * This is used to understand what is joined.
         * For example, if we join ("post.category", "categoryAlias") then "category" is a relation property.
         * This value is extracted from entityOrProperty value.
         * This is available when join was made using "post.category" syntax.
         */
        get relationPropertyPath() {
            if (!QueryBuilderUtils_3.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value must be a string representation of alias property`);
            return this.relationName.substr(this.relationName.indexOf(".") + 1);
        }
        /**
         * Relation of the parent.
         * This is used to understand what is joined.
         * This is available when join was made using "post.category" syntax.
         */
        get relation() {
            if (!QueryBuilderUtils_3.QueryBuilderUtils.isAliasProperty(this.relationName))
                throw new Error(`Given value must be a string representation of alias property`);
            const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);
            const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);
            if (!relation)
                throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);
            return relation;
        }
        /**
         * Generates alias of junction table, whose ids we get.
         */
        get junctionAlias() {
            const [parentAlias, relationProperty] = this.relationName.split(".");
            return parentAlias + "_" + relationProperty + "_rid";
        }
        /**
         * Metadata of the joined entity.
         * If extra condition without entity was joined, then it will return undefined.
         */
        get junctionMetadata() {
            return this.relation.junctionEntityMetadata;
        }
        get mapToPropertyParentAlias() {
            return this.mapToProperty.substr(0, this.mapToProperty.indexOf("."));
        }
        get mapToPropertyPropertyPath() {
            return this.mapToProperty.substr(this.mapToProperty.indexOf(".") + 1);
        }
    }
    exports.RelationIdAttribute = RelationIdAttribute;
});
define("typeorm/query-builder/relation-id/RelationIdLoadResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/query-builder/relation-count/RelationCountLoadResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer", ["require", "exports", "typeorm/util/OrmUtils", "typeorm/driver/DriverUtils"], function (require, exports, OrmUtils_25, DriverUtils_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSqlResultsToEntityTransformer = void 0;
    /**
     * Transforms raw sql results returned from the database into entity object.
     * Entity is constructed based on its entity metadata.
     */
    class RawSqlResultsToEntityTransformer {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {
            this.expressionMap = expressionMap;
            this.driver = driver;
            this.rawRelationIdResults = rawRelationIdResults;
            this.rawRelationCountResults = rawRelationCountResults;
            this.queryRunner = queryRunner;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated
         * we need to group our result and we must have some unique id (primary key in our case)
         */
        transform(rawResults, alias) {
            const group = this.group(rawResults, alias);
            const entities = [];
            group.forEach(results => {
                const entity = this.transformRawResultsGroup(results, alias);
                if (entity !== undefined)
                    entities.push(entity);
            });
            return entities;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Groups given raw results by ids of given alias.
         */
        group(rawResults, alias) {
            const map = new Map();
            const keys = [];
            if (alias.metadata.tableType === "view") {
                keys.push(...alias.metadata.columns.map(column => DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));
            }
            else {
                keys.push(...alias.metadata.primaryColumns.map(column => DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));
            }
            rawResults.forEach(rawResult => {
                const id = keys.map(key => {
                    const keyValue = rawResult[key];
                    if (Buffer.isBuffer(keyValue)) {
                        return keyValue.toString("hex");
                    }
                    if (typeof keyValue === "object") {
                        return JSON.stringify(keyValue);
                    }
                    return keyValue;
                }).join("_"); // todo: check partial
                const items = map.get(id);
                if (!items) {
                    map.set(id, [rawResult]);
                }
                else {
                    items.push(rawResult);
                }
            });
            return map;
        }
        /**
         * Transforms set of data results into single entity.
         */
        transformRawResultsGroup(rawResults, alias) {
            // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;
            let metadata = alias.metadata;
            if (metadata.discriminatorColumn) {
                const discriminatorValues = rawResults.map(result => result[DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, alias.name, alias.metadata.discriminatorColumn.databaseName)]);
                const discriminatorMetadata = metadata.childEntityMetadatas.find(childEntityMetadata => {
                    return typeof discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue) !== 'undefined';
                });
                if (discriminatorMetadata)
                    metadata = discriminatorMetadata;
            }
            let entity = this.expressionMap.options.indexOf("create-pojo") !== -1 ? {} : metadata.create(this.queryRunner);
            // get value from columns selections and put them into newly created entity
            const hasColumns = this.transformColumns(rawResults, alias, entity, metadata);
            const hasRelations = this.transformJoins(rawResults, entity, alias, metadata);
            const hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);
            const hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);
            // if we have at least one selected column then return this entity
            // since entity must have at least primary columns to be really selected and transformed into entity
            if (hasColumns)
                return entity;
            // if we don't have any selected column we should not return entity,
            // except for the case when entity only contain a primary column as a relation to another entity
            // in this case its absolutely possible our entity to not have any columns except a single relation
            const hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(column => column.isVirtual === false).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns
            if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))
                return entity;
            return undefined;
        }
        // get value from columns selections and put them into object
        transformColumns(rawResults, alias, entity, metadata) {
            let hasData = false;
            metadata.columns.forEach(column => {
                // if table inheritance is used make sure this column is not child's column
                if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)
                    return;
                const value = rawResults[0][DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)];
                if (value === undefined || column.isVirtual)
                    return;
                // if user does not selected the whole entity or he used partial selection and does not select this particular column
                // then we don't add this column and its value into the entity
                if (!this.expressionMap.selects.find(select => select.selection === alias.name || select.selection === alias.name + "." + column.propertyPath))
                    return;
                column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));
                if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object
                    hasData = true;
            });
            return hasData;
        }
        /**
         * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity
         */
        transformJoins(rawResults, entity, alias, metadata) {
            let hasData = false;
            // let discriminatorValue: string = "";
            // if (metadata.discriminatorColumn)
            //     discriminatorValue = rawResults[0][DriverUtils.buildColumnAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];
            this.expressionMap.joinAttributes.forEach(join => {
                // skip joins without metadata
                if (!join.metadata)
                    return;
                // if simple left or inner join was performed without selection then we don't need to do anything
                if (!join.isSelected)
                    return;
                // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)
                // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);
                if (join.relation && !metadata.relations.find(relation => relation === join.relation))
                    return;
                // some checks to make sure this join is for current alias
                if (join.mapToProperty) {
                    if (join.mapToPropertyParentAlias !== alias.name)
                        return;
                }
                else {
                    if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation.propertyPath)
                        return;
                }
                // transform joined data into entities
                let result = this.transform(rawResults, join.alias);
                result = !join.isMany ? result[0] : result;
                result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database
                if (result === undefined) // if nothing was joined then simply return
                    return;
                // if join was mapped to some property then save result to that property
                if (join.mapToPropertyPropertyName) {
                    entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds
                }
                else { // otherwise set to relation
                    join.relation.setEntityValue(entity, result);
                }
                hasData = true;
            });
            return hasData;
        }
        transformRelationIds(rawSqlResults, alias, entity, metadata) {
            let hasData = false;
            this.rawRelationIdResults.forEach(rawRelationIdResult => {
                if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)
                    return;
                const relation = rawRelationIdResult.relationIdAttribute.relation;
                const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);
                if (valueMap === undefined || valueMap === null)
                    return;
                const idMaps = rawRelationIdResult.results.map(result => {
                    const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);
                    if (OrmUtils_25.OrmUtils.compareIds(entityPrimaryIds, valueMap) === false)
                        return;
                    let columns;
                    if (relation.isManyToOne || relation.isOneToOneOwner) {
                        columns = relation.joinColumns.map(joinColumn => joinColumn);
                    }
                    else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                        columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);
                        // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);
                    }
                    else { // ManyToMany
                        if (relation.isOwning) {
                            columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);
                        }
                        else {
                            columns = relation.inverseRelation.joinColumns.map(joinColumn => joinColumn);
                        }
                    }
                    const idMap = columns.reduce((idMap, column) => {
                        let value = result[column.databaseName];
                        if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                            if (column.isVirtual && column.referencedColumn && column.referencedColumn.propertyName !== column.propertyName) // if column is a relation
                                value = column.referencedColumn.createValueMap(value);
                            return OrmUtils_25.OrmUtils.mergeDeep(idMap, column.createValueMap(value));
                        }
                        else {
                            if (column.referencedColumn.referencedColumn) // if column is a relation
                                value = column.referencedColumn.referencedColumn.createValueMap(value);
                            return OrmUtils_25.OrmUtils.mergeDeep(idMap, column.referencedColumn.createValueMap(value));
                        }
                    }, {});
                    if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {
                        if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                            return columns[0].getEntityValue(idMap);
                        }
                        else {
                            return columns[0].referencedColumn.getEntityValue(idMap);
                        }
                    }
                    return idMap;
                }).filter(result => result !== undefined);
                const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(".");
                const mapToProperty = (properties, map, value) => {
                    const property = properties.shift();
                    if (property && properties.length === 0) {
                        map[property] = value;
                        return map;
                    }
                    else if (property && properties.length > 0) {
                        mapToProperty(properties, map[property], value);
                    }
                    else {
                        return map;
                    }
                };
                if (relation.isOneToOne || relation.isManyToOne) {
                    if (idMaps[0] !== undefined) {
                        mapToProperty(properties, entity, idMaps[0]);
                        hasData = true;
                    }
                }
                else {
                    mapToProperty(properties, entity, idMaps);
                    if (idMaps.length > 0) {
                        hasData = true;
                    }
                }
            });
            return hasData;
        }
        transformRelationCounts(rawSqlResults, alias, entity) {
            let hasData = false;
            this.rawRelationCountResults
                .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)
                .forEach(rawRelationCountResult => {
                const relation = rawRelationCountResult.relationCountAttribute.relation;
                let referenceColumnName;
                if (relation.isOneToMany) {
                    referenceColumnName = relation.inverseRelation.joinColumns[0].referencedColumn.databaseName; // todo: fix joinColumns[0]
                }
                else {
                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn.databaseName : relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;
                }
                const referenceColumnValue = rawSqlResults[0][DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work
                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {
                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;
                    rawRelationCountResult.results
                        .filter(result => result["parentId"] === referenceColumnValue)
                        .forEach(result => {
                        entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result["cnt"]);
                        hasData = true;
                    });
                }
            });
            return hasData;
        }
        createValueMapFromJoinColumns(relation, parentAlias, rawSqlResults) {
            let columns;
            if (relation.isManyToOne || relation.isOneToOneOwner) {
                columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);
            }
            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                columns = relation.inverseRelation.joinColumns.map(joinColumn => joinColumn);
            }
            else {
                if (relation.isOwning) {
                    columns = relation.joinColumns.map(joinColumn => joinColumn);
                }
                else {
                    columns = relation.inverseRelation.inverseJoinColumns.map(joinColumn => joinColumn);
                }
            }
            return columns.reduce((valueMap, column) => {
                rawSqlResults.forEach(rawSqlResult => {
                    if (relation.isManyToOne || relation.isOneToOneOwner) {
                        valueMap[column.databaseName] = this.driver.prepareHydratedValue(rawSqlResult[DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, parentAlias, column.databaseName)], column);
                    }
                    else {
                        valueMap[column.databaseName] = this.driver.prepareHydratedValue(rawSqlResult[DriverUtils_7.DriverUtils.buildColumnAlias(this.driver, parentAlias, column.referencedColumn.databaseName)], column);
                    }
                });
                return valueMap;
            }, {});
        }
        extractEntityPrimaryIds(relation, relationIdRawResult) {
            let columns;
            if (relation.isManyToOne || relation.isOneToOneOwner) {
                columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);
            }
            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                columns = relation.inverseRelation.joinColumns.map(joinColumn => joinColumn);
            }
            else {
                if (relation.isOwning) {
                    columns = relation.joinColumns.map(joinColumn => joinColumn);
                }
                else {
                    columns = relation.inverseRelation.inverseJoinColumns.map(joinColumn => joinColumn);
                }
            }
            return columns.reduce((data, column) => {
                data[column.databaseName] = relationIdRawResult[column.databaseName];
                return data;
            }, {});
        }
    }
    exports.RawSqlResultsToEntityTransformer = RawSqlResultsToEntityTransformer;
});
define("typeorm/error/PessimisticLockTransactionRequiredError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PessimisticLockTransactionRequiredError = void 0;
    /**
     * Thrown when a transaction is required for the current operation, but there is none open.
     */
    class PessimisticLockTransactionRequiredError extends Error {
        constructor() {
            super();
            this.name = "PessimisticLockTransactionRequiredError";
            Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);
            this.message = `An open transaction is required for pessimistic lock.`;
        }
    }
    exports.PessimisticLockTransactionRequiredError = PessimisticLockTransactionRequiredError;
});
define("typeorm/error/NoVersionOrUpdateDateColumnError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoVersionOrUpdateDateColumnError = void 0;
    /**
     * Thrown when an entity does not have no version and no update date column.
     */
    class NoVersionOrUpdateDateColumnError extends Error {
        constructor(entity) {
            super();
            this.name = "NoVersionOrUpdateDateColumnError";
            Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);
            this.message = `Entity ${entity} does not have version or update date columns.`;
        }
    }
    exports.NoVersionOrUpdateDateColumnError = NoVersionOrUpdateDateColumnError;
});
define("typeorm/error/OptimisticLockVersionMismatchError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptimisticLockVersionMismatchError = void 0;
    /**
     * Thrown when a version check on an object that uses optimistic locking through a version field fails.
     */
    class OptimisticLockVersionMismatchError extends Error {
        constructor(entity, expectedVersion, actualVersion) {
            super();
            this.name = "OptimisticLockVersionMismatchError";
            Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);
            this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;
        }
    }
    exports.OptimisticLockVersionMismatchError = OptimisticLockVersionMismatchError;
});
define("typeorm/error/OptimisticLockCanNotBeUsedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptimisticLockCanNotBeUsedError = void 0;
    /**
     * Thrown when an optimistic lock cannot be used in query builder.
     */
    class OptimisticLockCanNotBeUsedError extends Error {
        constructor() {
            super();
            this.name = "OptimisticLockCanNotBeUsedError";
            Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);
            this.message = `The optimistic lock can be used only with getOne() method.`;
        }
    }
    exports.OptimisticLockCanNotBeUsedError = OptimisticLockCanNotBeUsedError;
});
define("typeorm/query-builder/relation-id/RelationIdLoader", ["require", "exports", "typeorm/driver/DriverUtils"], function (require, exports, DriverUtils_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationIdLoader = void 0;
    class RelationIdLoader {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner, relationIdAttributes) {
            this.connection = connection;
            this.queryRunner = queryRunner;
            this.relationIdAttributes = relationIdAttributes;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        async load(rawEntities) {
            const promises = this.relationIdAttributes.map(async (relationIdAttr) => {
                if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {
                    // example: Post and Tag
                    // loadRelationIdAndMap("post.tagId", "post.tag")
                    // we expect it to load id of tag
                    if (relationIdAttr.queryBuilderFactory)
                        throw new Error("Additional condition can not be used with ManyToOne or OneToOne owner relations.");
                    const duplicates = [];
                    const results = rawEntities.map(rawEntity => {
                        const result = {};
                        const duplicateParts = [];
                        relationIdAttr.relation.joinColumns.forEach(joinColumn => {
                            result[joinColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils_8.DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn);
                            const duplicatePart = `${joinColumn.databaseName}:${result[joinColumn.databaseName]}`;
                            if (duplicateParts.indexOf(duplicatePart) === -1) {
                                duplicateParts.push(duplicatePart);
                            }
                        });
                        relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {
                            result[primaryColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils_8.DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);
                            const duplicatePart = `${primaryColumn.databaseName}:${result[primaryColumn.databaseName]}`;
                            if (duplicateParts.indexOf(duplicatePart) === -1) {
                                duplicateParts.push(duplicatePart);
                            }
                        });
                        duplicateParts.sort();
                        const duplicate = duplicateParts.join("::");
                        if (duplicates.indexOf(duplicate) !== -1) {
                            return null;
                        }
                        duplicates.push(duplicate);
                        return result;
                    }).filter(v => v);
                    return {
                        relationIdAttribute: relationIdAttr,
                        results: results
                    };
                }
                else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {
                    // example: Post and Category
                    // loadRelationIdAndMap("post.categoryIds", "post.categories")
                    // we expect it to load array of category ids
                    const relation = relationIdAttr.relation; // "post.categories"
                    const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation.joinColumns;
                    const table = relation.inverseEntityMetadata.target; // category
                    const tableName = relation.inverseEntityMetadata.tableName; // category
                    const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined
                    const duplicates = [];
                    const parameters = {};
                    const condition = rawEntities.map((rawEntity, index) => {
                        const duplicateParts = [];
                        const parameterParts = {};
                        const queryPart = joinColumns.map(joinColumn => {
                            const parameterName = joinColumn.databaseName + index;
                            const parameterValue = rawEntity[DriverUtils_8.DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];
                            const duplicatePart = `${tableAlias}:${joinColumn.propertyPath}:${parameterValue}`;
                            if (duplicateParts.indexOf(duplicatePart) !== -1) {
                                return "";
                            }
                            duplicateParts.push(duplicatePart);
                            parameterParts[parameterName] = parameterValue;
                            return tableAlias + "." + joinColumn.propertyPath + " = :" + parameterName;
                        }).filter(v => v).join(" AND ");
                        duplicateParts.sort();
                        const duplicate = duplicateParts.join("::");
                        if (duplicates.indexOf(duplicate) !== -1) {
                            return "";
                        }
                        duplicates.push(duplicate);
                        Object.assign(parameters, parameterParts);
                        return queryPart;
                    }).filter(v => v).map(condition => "(" + condition + ")")
                        .join(" OR ");
                    // ensure we won't perform redundant queries for joined data which was not found in selection
                    // example: if post.category was not found in db then no need to execute query for category.imageIds
                    if (!condition)
                        return { relationIdAttribute: relationIdAttr, results: [] };
                    // generate query:
                    // SELECT category.id, category.postId FROM category category ON category.postId = :postId
                    const qb = this.connection.createQueryBuilder(this.queryRunner);
                    joinColumns.forEach(joinColumn => {
                        qb.addSelect(tableAlias + "." + joinColumn.propertyPath, joinColumn.databaseName);
                    });
                    relation.inverseRelation.entityMetadata.primaryColumns.forEach(primaryColumn => {
                        qb.addSelect(tableAlias + "." + primaryColumn.propertyPath, primaryColumn.databaseName);
                    });
                    qb.from(table, tableAlias)
                        .where("(" + condition + ")") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect
                        .setParameters(parameters);
                    // apply condition (custom query builder factory)
                    if (relationIdAttr.queryBuilderFactory)
                        relationIdAttr.queryBuilderFactory(qb);
                    const results = await qb.getRawMany();
                    results.forEach(result => {
                        joinColumns.forEach(column => {
                            result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);
                        });
                        relation.inverseRelation.entityMetadata.primaryColumns.forEach(column => {
                            result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column);
                        });
                    });
                    return {
                        relationIdAttribute: relationIdAttr,
                        results
                    };
                }
                else {
                    // many-to-many
                    // example: Post and Category
                    // owner side: loadRelationIdAndMap("post.categoryIds", "post.categories")
                    // inverse side: loadRelationIdAndMap("category.postIds", "category.posts")
                    // we expect it to load array of post ids
                    const relation = relationIdAttr.relation;
                    const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation.inverseJoinColumns;
                    const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation.joinColumns;
                    const junctionAlias = relationIdAttr.junctionAlias;
                    const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;
                    const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;
                    const junctionTableName = relation.isOwning ? relation.junctionEntityMetadata.tableName : relation.inverseRelation.junctionEntityMetadata.tableName;
                    const mappedColumns = rawEntities.map(rawEntity => {
                        return joinColumns.reduce((map, joinColumn) => {
                            map[joinColumn.propertyPath] = rawEntity[DriverUtils_8.DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];
                            return map;
                        }, {});
                    });
                    // ensure we won't perform redundant queries for joined data which was not found in selection
                    // example: if post.category was not found in db then no need to execute query for category.imageIds
                    if (mappedColumns.length === 0)
                        return { relationIdAttribute: relationIdAttr, results: [] };
                    const parameters = {};
                    const duplicates = [];
                    const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {
                        const duplicateParts = [];
                        const parameterParts = {};
                        const queryPart = Object.keys(mappedColumn).map(key => {
                            const parameterName = key + index;
                            const parameterValue = mappedColumn[key];
                            const duplicatePart = `${junctionAlias}:${key}:${parameterValue}`;
                            if (duplicateParts.indexOf(duplicatePart) !== -1) {
                                return "";
                            }
                            duplicateParts.push(duplicatePart);
                            parameterParts[parameterName] = parameterValue;
                            return junctionAlias + "." + key + " = :" + parameterName;
                        }).filter(s => s).join(" AND ");
                        duplicateParts.sort();
                        const duplicate = duplicateParts.join("::");
                        if (duplicates.indexOf(duplicate) !== -1) {
                            return "";
                        }
                        duplicates.push(duplicate);
                        Object.assign(parameters, parameterParts);
                        return queryPart;
                    }).filter(s => s);
                    const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {
                        return junctionAlias + "." + joinColumn.propertyPath + " = " + inverseSideTableAlias + "." + joinColumn.referencedColumn.propertyPath;
                    }).join(" AND ");
                    const condition = joinColumnConditions.map(condition => {
                        return "(" + condition + " AND " + inverseJoinColumnCondition + ")";
                    }).join(" OR ");
                    const qb = this.connection.createQueryBuilder(this.queryRunner);
                    inverseJoinColumns.forEach(joinColumn => {
                        qb.addSelect(junctionAlias + "." + joinColumn.propertyPath, joinColumn.databaseName)
                            .addOrderBy(junctionAlias + "." + joinColumn.propertyPath);
                    });
                    joinColumns.forEach(joinColumn => {
                        qb.addSelect(junctionAlias + "." + joinColumn.propertyPath, joinColumn.databaseName)
                            .addOrderBy(junctionAlias + "." + joinColumn.propertyPath);
                    });
                    qb.from(inverseSideTableName, inverseSideTableAlias)
                        .innerJoin(junctionTableName, junctionAlias, condition)
                        .setParameters(parameters);
                    // apply condition (custom query builder factory)
                    if (relationIdAttr.queryBuilderFactory)
                        relationIdAttr.queryBuilderFactory(qb);
                    const results = await qb.getRawMany();
                    results.forEach(result => {
                        [...joinColumns, ...inverseJoinColumns].forEach(column => {
                            result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);
                        });
                    });
                    return {
                        relationIdAttribute: relationIdAttr,
                        results
                    };
                }
            });
            return Promise.all(promises);
        }
    }
    exports.RelationIdLoader = RelationIdLoader;
});
define("typeorm/query-builder/relation-id/RelationIdMetadataToAttributeTransformer", ["require", "exports", "typeorm/query-builder/relation-id/RelationIdAttribute"], function (require, exports, RelationIdAttribute_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationIdMetadataToAttributeTransformer = void 0;
    class RelationIdMetadataToAttributeTransformer {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(expressionMap) {
            this.expressionMap = expressionMap;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        transform() {
            // by example:
            // post has relation id:
            // @RelationId(post => post.categories) categoryIds
            // category has relation id
            // @RelationId(category => category.images) imageIds
            // we load post and join category
            // we expect post.categoryIds and post.category.imageIds to have relation ids
            // first create relation id attributes for all relation id metadatas of the main selected object (post from example)
            if (this.expressionMap.mainAlias) {
                this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {
                    const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationId);
                    this.expressionMap.relationIdAttributes.push(attribute);
                });
            }
            // second create relation id attributes for all relation id metadatas of all joined objects (category from example)
            this.expressionMap.joinAttributes.forEach(join => {
                // ensure this join has a metadata, because relation id can only work for real orm entities
                if (!join.metadata || join.metadata.isJunction)
                    return;
                join.metadata.relationIds.forEach(relationId => {
                    const attribute = this.metadataToAttribute(join.alias.name, relationId);
                    this.expressionMap.relationIdAttributes.push(attribute);
                });
            });
        }
        // -------------------------------------------------------------------------
        // Private Methods
        // -------------------------------------------------------------------------
        metadataToAttribute(parentAliasName, relationId) {
            return new RelationIdAttribute_2.RelationIdAttribute(this.expressionMap, {
                relationName: parentAliasName + "." + relationId.relation.propertyName,
                mapToProperty: parentAliasName + "." + relationId.propertyName,
                alias: relationId.alias,
                queryBuilderFactory: relationId.queryBuilderFactory
            });
        }
    }
    exports.RelationIdMetadataToAttributeTransformer = RelationIdMetadataToAttributeTransformer;
});
define("typeorm/query-builder/relation-count/RelationCountLoader", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationCountLoader = void 0;
    class RelationCountLoader {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner, relationCountAttributes) {
            this.connection = connection;
            this.queryRunner = queryRunner;
            this.relationCountAttributes = relationCountAttributes;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        async load(rawEntities) {
            const onlyUnique = (value, index, self) => {
                return self.indexOf(value) === index;
            };
            const promises = this.relationCountAttributes.map(async (relationCountAttr) => {
                if (relationCountAttr.relation.isOneToMany) {
                    // example: Post and Category
                    // loadRelationCountAndMap("post.categoryCount", "post.categories")
                    // we expect it to load array of post ids
                    // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]
                    const relation = relationCountAttr.relation; // "category.posts"
                    const inverseRelation = relation.inverseRelation; // "post.category"
                    const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn.propertyName; // post id
                    const inverseSideTable = relation.inverseEntityMetadata.target; // Post
                    const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post
                    const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined
                    const inverseSidePropertyName = inverseRelation.propertyName; // "category" from "post.category"
                    let referenceColumnValues = rawEntities
                        .map(rawEntity => rawEntity[relationCountAttr.parentAlias + "_" + referenceColumnName])
                        .filter(value => !!value);
                    referenceColumnValues = referenceColumnValues.filter(onlyUnique);
                    // ensure we won't perform redundant queries for joined data which was not found in selection
                    // example: if post.category was not found in db then no need to execute query for category.imageIds
                    if (referenceColumnValues.length === 0)
                        return { relationCountAttribute: relationCountAttr, results: [] };
                    // generate query:
                    // SELECT category.post as parentId, COUNT(*) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post
                    const qb = this.connection.createQueryBuilder(this.queryRunner);
                    qb.select(inverseSideTableAlias + "." + inverseSidePropertyName, "parentId")
                        .addSelect("COUNT(*)", "cnt")
                        .from(inverseSideTable, inverseSideTableAlias)
                        .where(inverseSideTableAlias + "." + inverseSidePropertyName + " IN (:...ids)")
                        .addGroupBy(inverseSideTableAlias + "." + inverseSidePropertyName)
                        .setParameter("ids", referenceColumnValues);
                    // apply condition (custom query builder factory)
                    if (relationCountAttr.queryBuilderFactory)
                        relationCountAttr.queryBuilderFactory(qb);
                    return {
                        relationCountAttribute: relationCountAttr,
                        results: await qb.getRawMany()
                    };
                }
                else {
                    // example: Post and Category
                    // owner side: loadRelationIdAndMap("post.categoryIds", "post.categories")
                    // inverse side: loadRelationIdAndMap("category.postIds", "category.posts")
                    // we expect it to load array of post ids
                    let joinTableColumnName;
                    let inverseJoinColumnName;
                    let firstJunctionColumn;
                    let secondJunctionColumn;
                    if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].
                        joinTableColumnName = relationCountAttr.relation.joinColumns[0].referencedColumn.databaseName;
                        inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn.databaseName;
                        firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];
                        secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];
                    }
                    else {
                        joinTableColumnName = relationCountAttr.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName;
                        inverseJoinColumnName = relationCountAttr.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;
                        firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];
                        secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];
                    }
                    let referenceColumnValues = rawEntities
                        .map(rawEntity => rawEntity[relationCountAttr.parentAlias + "_" + joinTableColumnName])
                        .filter(value => !!value);
                    referenceColumnValues = referenceColumnValues.filter(onlyUnique);
                    // ensure we won't perform redundant queries for joined data which was not found in selection
                    // example: if post.category was not found in db then no need to execute query for category.imageIds
                    if (referenceColumnValues.length === 0)
                        return { relationCountAttribute: relationCountAttr, results: [] };
                    const junctionAlias = relationCountAttr.junctionAlias;
                    const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;
                    const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;
                    const junctionTableName = relationCountAttr.relation.junctionEntityMetadata.tableName;
                    const condition = junctionAlias + "." + firstJunctionColumn.propertyName + " IN (" + referenceColumnValues.map(vals => isNaN(vals) ? "'" + vals + "'" : vals) + ")" +
                        " AND " + junctionAlias + "." + secondJunctionColumn.propertyName + " = " + inverseSideTableAlias + "." + inverseJoinColumnName;
                    const qb = this.connection.createQueryBuilder(this.queryRunner);
                    qb.select(junctionAlias + "." + firstJunctionColumn.propertyName, "parentId")
                        .addSelect("COUNT(" + qb.escape(inverseSideTableAlias) + "." + qb.escape(inverseJoinColumnName) + ")", "cnt")
                        .from(inverseSideTableName, inverseSideTableAlias)
                        .innerJoin(junctionTableName, junctionAlias, condition)
                        .addGroupBy(junctionAlias + "." + firstJunctionColumn.propertyName);
                    // apply condition (custom query builder factory)
                    if (relationCountAttr.queryBuilderFactory)
                        relationCountAttr.queryBuilderFactory(qb);
                    return {
                        relationCountAttribute: relationCountAttr,
                        results: await qb.getRawMany()
                    };
                }
            });
            return Promise.all(promises);
        }
    }
    exports.RelationCountLoader = RelationCountLoader;
});
define("typeorm/metadata-args/RelationCountMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/RelationCountMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationCountMetadata = void 0;
    /**
     * Contains all information about entity's relation count.
     */
    class RelationCountMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            this.entityMetadata = options.entityMetadata;
            this.target = options.args.target;
            this.propertyName = options.args.propertyName;
            this.relationNameOrFactory = options.args.relation;
            this.alias = options.args.alias;
            this.queryBuilderFactory = options.args.queryBuilderFactory;
        }
        // ---------------------------------------------------------------------
        // Public Builder Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend relation count metadata properties.
         * This builder method should be used only after entity metadata, its properties map and all relations are build.
         */
        build() {
            const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;
            const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);
            if (!relation)
                throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);
            this.relation = relation;
        }
    }
    exports.RelationCountMetadata = RelationCountMetadata;
});
define("typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer", ["require", "exports", "typeorm/query-builder/relation-count/RelationCountAttribute"], function (require, exports, RelationCountAttribute_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationCountMetadataToAttributeTransformer = void 0;
    class RelationCountMetadataToAttributeTransformer {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(expressionMap) {
            this.expressionMap = expressionMap;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        transform() {
            // by example:
            // post has relation count:
            // @RelationCount(post => post.categories) categoryCount
            // category has relation count
            // @RelationCount(category => category.images) imageCount
            // we load post and join category
            // we expect post.categoryCount and post.category.imageCount to have relation counts
            // first create relation count attributes for all relation count metadatas of the main selected object (post from example)
            if (this.expressionMap.mainAlias) {
                this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {
                    const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationCount);
                    this.expressionMap.relationCountAttributes.push(attribute);
                });
            }
            // second create relation count attributes for all relation count metadatas of all joined objects (category from example)
            this.expressionMap.joinAttributes.forEach(join => {
                // ensure this join has a metadata, because relation count can only work for real orm entities
                if (!join.metadata || join.metadata.isJunction)
                    return;
                join.metadata.relationCounts.forEach(relationCount => {
                    const attribute = this.metadataToAttribute(join.alias.name, relationCount);
                    this.expressionMap.relationCountAttributes.push(attribute);
                });
            });
        }
        // -------------------------------------------------------------------------
        // Private Methods
        // -------------------------------------------------------------------------
        metadataToAttribute(parentAliasName, relationCount) {
            return new RelationCountAttribute_2.RelationCountAttribute(this.expressionMap, {
                relationName: parentAliasName + "." + relationCount.relation.propertyName,
                mapToProperty: parentAliasName + "." + relationCount.propertyName,
                alias: relationCount.alias,
                queryBuilderFactory: relationCount.queryBuilderFactory
            });
        }
    }
    exports.RelationCountMetadataToAttributeTransformer = RelationCountMetadataToAttributeTransformer;
});
define("typeorm/error/LockNotSupportedOnGivenDriverError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LockNotSupportedOnGivenDriverError = void 0;
    /**
     * Thrown when selected sql driver does not supports locking.
     */
    class LockNotSupportedOnGivenDriverError extends Error {
        constructor() {
            super();
            this.name = "LockNotSupportedOnGivenDriverError";
            Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);
            this.message = `Locking not supported on given driver.`;
        }
    }
    exports.LockNotSupportedOnGivenDriverError = LockNotSupportedOnGivenDriverError;
});
define("typeorm/error/OffsetWithoutLimitNotSupportedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OffsetWithoutLimitNotSupportedError = void 0;
    /**
     * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.
    */
    class OffsetWithoutLimitNotSupportedError extends Error {
        constructor() {
            super();
            this.name = "OffsetWithoutLimitNotSupportedError";
            Object.setPrototypeOf(this, OffsetWithoutLimitNotSupportedError.prototype);
            this.message = `RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).`;
        }
    }
    exports.OffsetWithoutLimitNotSupportedError = OffsetWithoutLimitNotSupportedError;
});
define("typeorm/query-builder/SelectQueryBuilder", ["require", "exports", "typeorm/driver/sap/SapDriver", "typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/error/PessimisticLockTransactionRequiredError", "typeorm/error/NoVersionOrUpdateDateColumnError", "typeorm/error/OptimisticLockVersionMismatchError", "typeorm/error/OptimisticLockCanNotBeUsedError", "typeorm/query-builder/JoinAttribute", "typeorm/query-builder/relation-id/RelationIdAttribute", "typeorm/query-builder/relation-count/RelationCountAttribute", "typeorm/query-builder/relation-id/RelationIdLoader", "typeorm/query-builder/relation-id/RelationIdMetadataToAttributeTransformer", "typeorm/query-builder/relation-count/RelationCountLoader", "typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer", "typeorm/query-builder/QueryBuilder", "typeorm/error/LockNotSupportedOnGivenDriverError", "typeorm/driver/mysql/MysqlDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/oracle/OracleDriver", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/error/OffsetWithoutLimitNotSupportedError", "typeorm/subscriber/BroadcasterResult", "typeorm/util/ObjectUtils", "typeorm/driver/DriverUtils", "typeorm/driver/aurora-data-api/AuroraDataApiDriver", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/error/EntityNotFoundError"], function (require, exports, SapDriver_5, RawSqlResultsToEntityTransformer_1, SqlServerDriver_6, PessimisticLockTransactionRequiredError_1, NoVersionOrUpdateDateColumnError_1, OptimisticLockVersionMismatchError_1, OptimisticLockCanNotBeUsedError_1, JoinAttribute_2, RelationIdAttribute_3, RelationCountAttribute_3, RelationIdLoader_1, RelationIdMetadataToAttributeTransformer_1, RelationCountLoader_1, RelationCountMetadataToAttributeTransformer_1, QueryBuilder_6, LockNotSupportedOnGivenDriverError_1, MysqlDriver_6, PostgresDriver_7, OracleDriver_9, AbstractSqliteDriver_7, OffsetWithoutLimitNotSupportedError_1, BroadcasterResult_14, ObjectUtils_8, DriverUtils_9, AuroraDataApiDriver_5, CockroachDriver_7, EntityNotFoundError_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SelectQueryBuilder = void 0;
    /**
     * Allows to build complex sql queries in a fashion way and execute those queries.
     */
    class SelectQueryBuilder extends QueryBuilder_6.QueryBuilder {
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Gets generated sql query without parameters being replaced.
         */
        getQuery() {
            let sql = this.createComment();
            sql += this.createSelectExpression();
            sql += this.createJoinExpression();
            sql += this.createWhereExpression();
            sql += this.createGroupByExpression();
            sql += this.createHavingExpression();
            sql += this.createOrderByExpression();
            sql += this.createLimitOffsetExpression();
            sql += this.createLockExpression();
            sql = sql.trim();
            if (this.expressionMap.subQuery)
                sql = "(" + sql + ")";
            return sql;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a subquery - query that can be used inside other queries.
         */
        subQuery() {
            const qb = this.createQueryBuilder();
            qb.expressionMap.subQuery = true;
            qb.expressionMap.parentQueryBuilder = this;
            return qb;
        }
        /**
         * Creates SELECT query and selects given data.
         * Replaces all previous selections if they exist.
         */
        select(selection, selectionAliasName) {
            this.expressionMap.queryType = "select";
            if (Array.isArray(selection)) {
                this.expressionMap.selects = selection.map(selection => ({ selection: selection }));
            }
            else if (selection instanceof Function) {
                const subQueryBuilder = selection(this.subQuery());
                this.setParameters(subQueryBuilder.getParameters());
                this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });
            }
            else if (selection) {
                this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];
            }
            return this;
        }
        /**
         * Adds new selection to the SELECT query.
         */
        addSelect(selection, selectionAliasName) {
            if (!selection)
                return this;
            if (Array.isArray(selection)) {
                this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));
            }
            else if (selection instanceof Function) {
                const subQueryBuilder = selection(this.subQuery());
                this.setParameters(subQueryBuilder.getParameters());
                this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });
            }
            else if (selection) {
                this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });
            }
            return this;
        }
        /**
         * Sets whether the selection is DISTINCT.
         */
        distinct(distinct = true) {
            this.expressionMap.selectDistinct = distinct;
            return this;
        }
        /**
         * Sets the distinct on clause for Postgres.
         */
        distinctOn(distinctOn) {
            this.expressionMap.selectDistinctOn = distinctOn;
            return this;
        }
        /**
         * Specifies FROM which entity's table select/update/delete will be executed.
         * Also sets a main string alias of the selection data.
         * Removes all previously set from-s.
         */
        from(entityTarget, aliasName) {
            const mainAlias = this.createFromAlias(entityTarget, aliasName);
            this.expressionMap.setMainAlias(mainAlias);
            return this;
        }
        /**
         * Specifies FROM which entity's table select/update/delete will be executed.
         * Also sets a main string alias of the selection data.
         */
        addFrom(entityTarget, aliasName) {
            const alias = this.createFromAlias(entityTarget, aliasName);
            if (!this.expressionMap.mainAlias)
                this.expressionMap.setMainAlias(alias);
            return this;
        }
        /**
         * INNER JOINs (without selection).
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        innerJoin(entityOrProperty, alias, condition = "", parameters) {
            this.join("INNER", entityOrProperty, alias, condition, parameters);
            return this;
        }
        /**
         * LEFT JOINs (without selection).
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        leftJoin(entityOrProperty, alias, condition = "", parameters) {
            this.join("LEFT", entityOrProperty, alias, condition, parameters);
            return this;
        }
        /**
         * INNER JOINs and adds all selection properties to SELECT.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        innerJoinAndSelect(entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.innerJoin(entityOrProperty, alias, condition, parameters);
            return this;
        }
        /**
         * LEFT JOINs and adds all selection properties to SELECT.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        leftJoinAndSelect(entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.leftJoin(entityOrProperty, alias, condition, parameters);
            return this;
        }
        /**
         * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
         * This is extremely useful when you want to select some data and map it to some virtual property.
         * It will assume that there are multiple rows of selecting data, and mapped result will be an array.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        innerJoinAndMapMany(mapToProperty, entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.join("INNER", entityOrProperty, alias, condition, parameters, mapToProperty, true);
            return this;
        }
        /**
         * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
         * This is extremely useful when you want to select some data and map it to some virtual property.
         * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        innerJoinAndMapOne(mapToProperty, entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.join("INNER", entityOrProperty, alias, condition, parameters, mapToProperty, false);
            return this;
        }
        /**
         * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
         * This is extremely useful when you want to select some data and map it to some virtual property.
         * It will assume that there are multiple rows of selecting data, and mapped result will be an array.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        leftJoinAndMapMany(mapToProperty, entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.join("LEFT", entityOrProperty, alias, condition, parameters, mapToProperty, true);
            return this;
        }
        /**
         * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.
         * This is extremely useful when you want to select some data and map it to some virtual property.
         * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.
         * You also need to specify an alias of the joined data.
         * Optionally, you can add condition and parameters used in condition.
         */
        leftJoinAndMapOne(mapToProperty, entityOrProperty, alias, condition = "", parameters) {
            this.addSelect(alias);
            this.join("LEFT", entityOrProperty, alias, condition, parameters, mapToProperty, false);
            return this;
        }
        /**
         * LEFT JOINs relation id and maps it into some entity's property.
         * Optionally, you can add condition and parameters used in condition.
         */
        loadRelationIdAndMap(mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {
            const relationIdAttribute = new RelationIdAttribute_3.RelationIdAttribute(this.expressionMap);
            relationIdAttribute.mapToProperty = mapToProperty;
            relationIdAttribute.relationName = relationName;
            if (typeof aliasNameOrOptions === "string")
                relationIdAttribute.alias = aliasNameOrOptions;
            if (aliasNameOrOptions instanceof Object && aliasNameOrOptions.disableMixedMap)
                relationIdAttribute.disableMixedMap = true;
            relationIdAttribute.queryBuilderFactory = queryBuilderFactory;
            this.expressionMap.relationIdAttributes.push(relationIdAttribute);
            if (relationIdAttribute.relation.junctionEntityMetadata) {
                this.expressionMap.createAlias({
                    type: "other",
                    name: relationIdAttribute.junctionAlias,
                    metadata: relationIdAttribute.relation.junctionEntityMetadata
                });
            }
            return this;
        }
        /**
         * Counts number of entities of entity's relation and maps the value into some entity's property.
         * Optionally, you can add condition and parameters used in condition.
         */
        loadRelationCountAndMap(mapToProperty, relationName, aliasName, queryBuilderFactory) {
            const relationCountAttribute = new RelationCountAttribute_3.RelationCountAttribute(this.expressionMap);
            relationCountAttribute.mapToProperty = mapToProperty;
            relationCountAttribute.relationName = relationName;
            relationCountAttribute.alias = aliasName;
            relationCountAttribute.queryBuilderFactory = queryBuilderFactory;
            this.expressionMap.relationCountAttributes.push(relationCountAttribute);
            this.expressionMap.createAlias({
                type: "other",
                name: relationCountAttribute.junctionAlias
            });
            if (relationCountAttribute.relation.junctionEntityMetadata) {
                this.expressionMap.createAlias({
                    type: "other",
                    name: relationCountAttribute.junctionAlias,
                    metadata: relationCountAttribute.relation.junctionEntityMetadata
                });
            }
            return this;
        }
        /**
         * Loads all relation ids for all relations of the selected entity.
         * All relation ids will be mapped to relation property themself.
         * If array of strings is given then loads only relation ids of the given properties.
         */
        loadAllRelationIds(options) {
            this.expressionMap.mainAlias.metadata.relations.forEach(relation => {
                if (options !== undefined && options.relations !== undefined && options.relations.indexOf(relation.propertyPath) === -1)
                    return;
                this.loadRelationIdAndMap(this.expressionMap.mainAlias.name + "." + relation.propertyPath, this.expressionMap.mainAlias.name + "." + relation.propertyPath, options);
            });
            return this;
        }
        /**
         * Sets WHERE condition in the query builder.
         * If you had previously WHERE expression defined,
         * calling this function will override previously set WHERE conditions.
         * Additionally you can add parameters used in where expression.
         */
        where(where, parameters) {
            this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions
            const condition = this.computeWhereParameter(where);
            if (condition)
                this.expressionMap.wheres = [{ type: "simple", condition: condition }];
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        andWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "and", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new OR WHERE condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        orWhere(where, parameters) {
            this.expressionMap.wheres.push({ type: "or", condition: this.computeWhereParameter(where) });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         *
         * Ids are mixed.
         * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
         * If you have multiple primary keys you need to pass object with property names and values specified,
         * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
         */
        whereInIds(ids) {
            return this.where(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new AND WHERE with conditions for the given ids.
         *
         * Ids are mixed.
         * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
         * If you have multiple primary keys you need to pass object with property names and values specified,
         * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
         */
        andWhereInIds(ids) {
            return this.andWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Adds new OR WHERE with conditions for the given ids.
         *
         * Ids are mixed.
         * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].
         * If you have multiple primary keys you need to pass object with property names and values specified,
         * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]
         */
        orWhereInIds(ids) {
            return this.orWhere(this.createWhereIdsExpression(ids));
        }
        /**
         * Sets HAVING condition in the query builder.
         * If you had previously HAVING expression defined,
         * calling this function will override previously set HAVING conditions.
         * Additionally you can add parameters used in where expression.
         */
        having(having, parameters) {
            this.expressionMap.havings.push({ type: "simple", condition: having });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new AND HAVING condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        andHaving(having, parameters) {
            this.expressionMap.havings.push({ type: "and", condition: having });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Adds new OR HAVING condition in the query builder.
         * Additionally you can add parameters used in where expression.
         */
        orHaving(having, parameters) {
            this.expressionMap.havings.push({ type: "or", condition: having });
            if (parameters)
                this.setParameters(parameters);
            return this;
        }
        /**
         * Sets GROUP BY condition in the query builder.
         * If you had previously GROUP BY expression defined,
         * calling this function will override previously set GROUP BY conditions.
         */
        groupBy(groupBy) {
            if (groupBy) {
                this.expressionMap.groupBys = [groupBy];
            }
            else {
                this.expressionMap.groupBys = [];
            }
            return this;
        }
        /**
         * Adds GROUP BY condition in the query builder.
         */
        addGroupBy(groupBy) {
            this.expressionMap.groupBys.push(groupBy);
            return this;
        }
        /**
         * Sets ORDER BY condition in the query builder.
         * If you had previously ORDER BY expression defined,
         * calling this function will override previously set ORDER BY conditions.
         */
        orderBy(sort, order = "ASC", nulls) {
            if (order !== undefined && order !== "ASC" && order !== "DESC")
                throw new Error(`SelectQueryBuilder.addOrderBy "order" can accept only "ASC" and "DESC" values.`);
            if (nulls !== undefined && nulls !== "NULLS FIRST" && nulls !== "NULLS LAST")
                throw new Error(`SelectQueryBuilder.addOrderBy "nulls" can accept only "NULLS FIRST" and "NULLS LAST" values.`);
            if (sort) {
                if (sort instanceof Object) {
                    this.expressionMap.orderBys = sort;
                }
                else {
                    if (nulls) {
                        this.expressionMap.orderBys = { [sort]: { order, nulls } };
                    }
                    else {
                        this.expressionMap.orderBys = { [sort]: order };
                    }
                }
            }
            else {
                this.expressionMap.orderBys = {};
            }
            return this;
        }
        /**
         * Adds ORDER BY condition in the query builder.
         */
        addOrderBy(sort, order = "ASC", nulls) {
            if (order !== undefined && order !== "ASC" && order !== "DESC")
                throw new Error(`SelectQueryBuilder.addOrderBy "order" can accept only "ASC" and "DESC" values.`);
            if (nulls !== undefined && nulls !== "NULLS FIRST" && nulls !== "NULLS LAST")
                throw new Error(`SelectQueryBuilder.addOrderBy "nulls" can accept only "NULLS FIRST" and "NULLS LAST" values.`);
            if (nulls) {
                this.expressionMap.orderBys[sort] = { order, nulls };
            }
            else {
                this.expressionMap.orderBys[sort] = order;
            }
            return this;
        }
        /**
         * Set's LIMIT - maximum number of rows to be selected.
         * NOTE that it may not work as you expect if you are using joins.
         * If you want to implement pagination, and you are having join in your query,
         * then use instead take method instead.
         */
        limit(limit) {
            this.expressionMap.limit = this.normalizeNumber(limit);
            if (this.expressionMap.limit !== undefined && isNaN(this.expressionMap.limit))
                throw new Error(`Provided "limit" value is not a number. Please provide a numeric value.`);
            return this;
        }
        /**
         * Set's OFFSET - selection offset.
         * NOTE that it may not work as you expect if you are using joins.
         * If you want to implement pagination, and you are having join in your query,
         * then use instead skip method instead.
         */
        offset(offset) {
            this.expressionMap.offset = this.normalizeNumber(offset);
            if (this.expressionMap.offset !== undefined && isNaN(this.expressionMap.offset))
                throw new Error(`Provided "offset" value is not a number. Please provide a numeric value.`);
            return this;
        }
        /**
         * Sets maximal number of entities to take.
         */
        take(take) {
            this.expressionMap.take = this.normalizeNumber(take);
            if (this.expressionMap.take !== undefined && isNaN(this.expressionMap.take))
                throw new Error(`Provided "take" value is not a number. Please provide a numeric value.`);
            return this;
        }
        /**
         * Sets number of entities to skip.
         */
        skip(skip) {
            this.expressionMap.skip = this.normalizeNumber(skip);
            if (this.expressionMap.skip !== undefined && isNaN(this.expressionMap.skip))
                throw new Error(`Provided "skip" value is not a number. Please provide a numeric value.`);
            return this;
        }
        /**
         * Sets locking mode.
         */
        setLock(lockMode, lockVersion, lockTables) {
            this.expressionMap.lockMode = lockMode;
            this.expressionMap.lockVersion = lockVersion;
            this.expressionMap.lockTables = lockTables;
            return this;
        }
        /**
         * Disables the global condition of "non-deleted" for the entity with delete date columns.
         */
        withDeleted() {
            this.expressionMap.withDeleted = true;
            return this;
        }
        /**
         * Gets first raw result returned by execution of generated query builder sql.
         */
        async getRawOne() {
            return (await this.getRawMany())[0];
        }
        /**
         * Gets all raw results returned by execution of generated query builder sql.
         */
        async getRawMany() {
            if (this.expressionMap.lockMode === "optimistic")
                throw new OptimisticLockCanNotBeUsedError_1.OptimisticLockCanNotBeUsedError();
            this.expressionMap.queryEntity = false;
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                const results = await this.loadRawResults(queryRunner);
                // close transaction if we started it
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                return results;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) { // means we created our own query runner
                    await queryRunner.release();
                }
            }
        }
        /**
         * Executes sql generated by query builder and returns object with raw results and entities created from them.
         */
        async getRawAndEntities() {
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                this.expressionMap.queryEntity = true;
                const results = await this.executeEntitiesAndRawResults(queryRunner);
                // close transaction if we started it
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                return results;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) // means we created our own query runner
                    await queryRunner.release();
            }
        }
        /**
         * Gets single entity returned by execution of generated query builder sql.
         */
        async getOne() {
            const results = await this.getRawAndEntities();
            const result = results.entities[0];
            if (result && this.expressionMap.lockMode === "optimistic" && this.expressionMap.lockVersion) {
                const metadata = this.expressionMap.mainAlias.metadata;
                if (this.expressionMap.lockVersion instanceof Date) {
                    const actualVersion = metadata.updateDateColumn.getEntityValue(result); // what if columns arent set?
                    if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())
                        throw new OptimisticLockVersionMismatchError_1.OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);
                }
                else {
                    const actualVersion = metadata.versionColumn.getEntityValue(result); // what if columns arent set?
                    if (actualVersion !== this.expressionMap.lockVersion)
                        throw new OptimisticLockVersionMismatchError_1.OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);
                }
            }
            return result;
        }
        /**
         * Gets the first entity returned by execution of generated query builder sql or rejects the returned promise on error.
         */
        async getOneOrFail() {
            const entity = await this.getOne();
            if (!entity) {
                throw new EntityNotFoundError_2.EntityNotFoundError(this.expressionMap.mainAlias.target, this);
            }
            return entity;
        }
        /**
         * Gets entities returned by execution of generated query builder sql.
         */
        async getMany() {
            if (this.expressionMap.lockMode === "optimistic")
                throw new OptimisticLockCanNotBeUsedError_1.OptimisticLockCanNotBeUsedError();
            const results = await this.getRawAndEntities();
            return results.entities;
        }
        /**
         * Gets count - number of entities selected by sql generated by this query builder.
         * Count excludes all limitations set by setFirstResult and setMaxResults methods call.
         */
        async getCount() {
            if (this.expressionMap.lockMode === "optimistic")
                throw new OptimisticLockCanNotBeUsedError_1.OptimisticLockCanNotBeUsedError();
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                this.expressionMap.queryEntity = false;
                const results = await this.executeCountQuery(queryRunner);
                // close transaction if we started it
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                return results;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) // means we created our own query runner
                    await queryRunner.release();
            }
        }
        /**
         * Executes built SQL query and returns entities and overall entities count (without limitation).
         * This method is useful to build pagination.
         */
        async getManyAndCount() {
            if (this.expressionMap.lockMode === "optimistic")
                throw new OptimisticLockCanNotBeUsedError_1.OptimisticLockCanNotBeUsedError();
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                this.expressionMap.queryEntity = true;
                const entitiesAndRaw = await this.executeEntitiesAndRawResults(queryRunner);
                this.expressionMap.queryEntity = false;
                const count = await this.executeCountQuery(queryRunner);
                const results = [entitiesAndRaw.entities, count];
                // close transaction if we started it
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                return results;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
            finally {
                if (queryRunner !== this.queryRunner) // means we created our own query runner
                    await queryRunner.release();
            }
        }
        /**
         * Executes built SQL query and returns raw data stream.
         */
        async stream() {
            this.expressionMap.queryEntity = false;
            const [sql, parameters] = this.getQueryAndParameters();
            const queryRunner = this.obtainQueryRunner();
            let transactionStartedByUs = false;
            try {
                // start transaction if it was enabled
                if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {
                    await queryRunner.startTransaction();
                    transactionStartedByUs = true;
                }
                const releaseFn = () => {
                    if (queryRunner !== this.queryRunner) // means we created our own query runner
                        return queryRunner.release();
                    return;
                };
                const results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);
                // close transaction if we started it
                if (transactionStartedByUs) {
                    await queryRunner.commitTransaction();
                }
                return results;
            }
            catch (error) {
                // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try {
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw error;
            }
        }
        /**
         * Enables or disables query result caching.
         */
        cache(enabledOrMillisecondsOrId, maybeMilliseconds) {
            if (typeof enabledOrMillisecondsOrId === "boolean") {
                this.expressionMap.cache = enabledOrMillisecondsOrId;
            }
            else if (typeof enabledOrMillisecondsOrId === "number") {
                this.expressionMap.cache = true;
                this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;
            }
            else if (typeof enabledOrMillisecondsOrId === "string" || typeof enabledOrMillisecondsOrId === "number") {
                this.expressionMap.cache = true;
                this.expressionMap.cacheId = enabledOrMillisecondsOrId;
            }
            if (maybeMilliseconds) {
                this.expressionMap.cacheDuration = maybeMilliseconds;
            }
            return this;
        }
        /**
         * Sets extra options that can be used to configure how query builder works.
         */
        setOption(option) {
            this.expressionMap.options.push(option);
            return this;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        join(direction, entityOrProperty, aliasName, condition, parameters, mapToProperty, isMappingMany) {
            this.setParameters(parameters || {});
            const joinAttribute = new JoinAttribute_2.JoinAttribute(this.connection, this.expressionMap);
            joinAttribute.direction = direction;
            joinAttribute.mapToProperty = mapToProperty;
            joinAttribute.isMappingMany = isMappingMany;
            joinAttribute.entityOrProperty = entityOrProperty; // relationName
            joinAttribute.condition = condition; // joinInverseSideCondition
            // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + "_" + destinationTableAlias : destinationTableAlias + "_" + parentAlias;
            this.expressionMap.joinAttributes.push(joinAttribute);
            if (joinAttribute.metadata) {
                if (joinAttribute.metadata.deleteDateColumn && !this.expressionMap.withDeleted) {
                    const conditionDeleteColumn = `${aliasName}.${joinAttribute.metadata.deleteDateColumn.propertyName} IS NULL`;
                    joinAttribute.condition += joinAttribute.condition ? ` AND ${conditionDeleteColumn}` : `${conditionDeleteColumn}`;
                }
                // todo: find and set metadata right there?
                joinAttribute.alias = this.expressionMap.createAlias({
                    type: "join",
                    name: aliasName,
                    metadata: joinAttribute.metadata
                });
                if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {
                    this.expressionMap.createAlias({
                        type: "join",
                        name: joinAttribute.junctionAlias,
                        metadata: joinAttribute.relation.junctionEntityMetadata
                    });
                }
            }
            else {
                let subQuery = "";
                if (entityOrProperty instanceof Function) {
                    const subQueryBuilder = entityOrProperty(this.subQuery());
                    this.setParameters(subQueryBuilder.getParameters());
                    subQuery = subQueryBuilder.getQuery();
                }
                else {
                    subQuery = entityOrProperty;
                }
                const isSubQuery = entityOrProperty instanceof Function || entityOrProperty.substr(0, 1) === "(" && entityOrProperty.substr(-1) === ")";
                joinAttribute.alias = this.expressionMap.createAlias({
                    type: "join",
                    name: aliasName,
                    tablePath: isSubQuery === false ? entityOrProperty : undefined,
                    subQuery: isSubQuery === true ? subQuery : undefined,
                });
            }
        }
        /**
         * Creates "SELECT FROM" part of SQL query.
         */
        createSelectExpression() {
            if (!this.expressionMap.mainAlias)
                throw new Error("Cannot build query because main alias is not set (call qb#from method)");
            // todo throw exception if selects or from is missing
            const allSelects = [];
            const excludedSelects = [];
            if (this.expressionMap.mainAlias.hasMetadata) {
                const metadata = this.expressionMap.mainAlias.metadata;
                allSelects.push(...this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));
                excludedSelects.push(...this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));
            }
            // add selects from joins
            this.expressionMap.joinAttributes
                .forEach(join => {
                if (join.metadata) {
                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name, join.metadata));
                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name, join.metadata));
                }
                else {
                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);
                    if (hasMainAlias) {
                        allSelects.push({ selection: this.escape(join.alias.name) + ".*" });
                        const excludedSelect = this.expressionMap.selects.find(select => select.selection === join.alias.name);
                        excludedSelects.push(excludedSelect);
                    }
                }
            });
            // add all other selects
            this.expressionMap.selects
                .filter(select => excludedSelects.indexOf(select) === -1)
                .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));
            // if still selection is empty, then simply set it to all (*)
            if (allSelects.length === 0)
                allSelects.push({ selection: "*" });
            let lock = "";
            if (this.connection.driver instanceof SqlServerDriver_6.SqlServerDriver) {
                switch (this.expressionMap.lockMode) {
                    case "pessimistic_read":
                        lock = " WITH (HOLDLOCK, ROWLOCK)";
                        break;
                    case "pessimistic_write":
                        lock = " WITH (UPDLOCK, ROWLOCK)";
                        break;
                    case "dirty_read":
                        lock = " WITH (NOLOCK)";
                        break;
                }
            }
            // create a selection query
            const froms = this.expressionMap.aliases
                .filter(alias => alias.type === "from" && (alias.tablePath || alias.subQuery))
                .map(alias => {
                if (alias.subQuery)
                    return alias.subQuery + " " + this.escape(alias.name);
                return this.getTableName(alias.tablePath) + " " + this.escape(alias.name);
            });
            const select = this.createSelectDistinctExpression();
            const selection = allSelects.map(select => select.selection + (select.aliasName ? " AS " + this.escape(select.aliasName) : "")).join(", ");
            return select + selection + " FROM " + froms.join(", ") + lock;
        }
        /**
         * Creates select | select distinct part of SQL query.
         */
        createSelectDistinctExpression() {
            const { selectDistinct, selectDistinctOn } = this.expressionMap;
            const { driver } = this.connection;
            let select = "SELECT ";
            if (driver instanceof PostgresDriver_7.PostgresDriver && selectDistinctOn.length > 0) {
                const selectDistinctOnMap = selectDistinctOn.map((on) => this.replacePropertyNames(on)).join(", ");
                select = `SELECT DISTINCT ON (${selectDistinctOnMap}) `;
            }
            else if (selectDistinct) {
                select = "SELECT DISTINCT ";
            }
            return select;
        }
        /**
         * Creates "JOIN" part of SQL query.
         */
        createJoinExpression() {
            // examples:
            // select from owning side
            // qb.select("post")
            //     .leftJoinAndSelect("post.category", "category");
            // select from non-owning side
            // qb.select("category")
            //     .leftJoinAndSelect("category.post", "post");
            const joins = this.expressionMap.joinAttributes.map(joinAttr => {
                const relation = joinAttr.relation;
                const destinationTableName = joinAttr.tablePath;
                const destinationTableAlias = joinAttr.alias.name;
                let appendedCondition = joinAttr.condition ? " AND (" + joinAttr.condition + ")" : "";
                const parentAlias = joinAttr.parentAlias;
                // if join was build without relation (e.g. without "post.category") then it means that we have direct
                // table to join, without junction table involved. This means we simply join direct table.
                if (!parentAlias || !relation) {
                    const destinationJoin = joinAttr.alias.subQuery ? joinAttr.alias.subQuery : this.getTableName(destinationTableName);
                    return " " + joinAttr.direction + " JOIN " + destinationJoin + " " + this.escape(destinationTableAlias) +
                        (joinAttr.condition ? " ON " + this.replacePropertyNames(joinAttr.condition) : "");
                }
                // if real entity relation is involved
                if (relation.isManyToOne || relation.isOneToOneOwner) {
                    // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`
                    const condition = relation.joinColumns.map(joinColumn => {
                        return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" +
                            parentAlias + "." + relation.propertyPath + "." + joinColumn.referencedColumn.propertyPath;
                    }).join(" AND ");
                    return " " + joinAttr.direction + " JOIN " + this.getTableName(destinationTableName) + " " + this.escape(destinationTableAlias) + " ON " + this.replacePropertyNames(condition + appendedCondition);
                }
                else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                    // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`
                    const condition = relation.inverseRelation.joinColumns.map(joinColumn => {
                        if (relation.inverseEntityMetadata.tableType === "entity-child" && relation.inverseEntityMetadata.discriminatorColumn) {
                            appendedCondition += " AND " + destinationTableAlias + "." + relation.inverseEntityMetadata.discriminatorColumn.databaseName + "='" + relation.inverseEntityMetadata.discriminatorValue + "'";
                        }
                        return destinationTableAlias + "." + relation.inverseRelation.propertyPath + "." + joinColumn.referencedColumn.propertyPath + "=" +
                            parentAlias + "." + joinColumn.referencedColumn.propertyPath;
                    }).join(" AND ");
                    return " " + joinAttr.direction + " JOIN " + this.getTableName(destinationTableName) + " " + this.escape(destinationTableAlias) + " ON " + this.replacePropertyNames(condition + appendedCondition);
                }
                else { // means many-to-many
                    const junctionTableName = relation.junctionEntityMetadata.tablePath;
                    const junctionAlias = joinAttr.junctionAlias;
                    let junctionCondition = "", destinationCondition = "";
                    if (relation.isOwning) {
                        junctionCondition = relation.joinColumns.map(joinColumn => {
                            // `post_category`.`postId` = `post`.`id`
                            return junctionAlias + "." + joinColumn.propertyPath + "=" + parentAlias + "." + joinColumn.referencedColumn.propertyPath;
                        }).join(" AND ");
                        destinationCondition = relation.inverseJoinColumns.map(joinColumn => {
                            // `category`.`id` = `post_category`.`categoryId`
                            return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" + junctionAlias + "." + joinColumn.propertyPath;
                        }).join(" AND ");
                    }
                    else {
                        junctionCondition = relation.inverseRelation.inverseJoinColumns.map(joinColumn => {
                            // `post_category`.`categoryId` = `category`.`id`
                            return junctionAlias + "." + joinColumn.propertyPath + "=" + parentAlias + "." + joinColumn.referencedColumn.propertyPath;
                        }).join(" AND ");
                        destinationCondition = relation.inverseRelation.joinColumns.map(joinColumn => {
                            // `post`.`id` = `post_category`.`postId`
                            return destinationTableAlias + "." + joinColumn.referencedColumn.propertyPath + "=" + junctionAlias + "." + joinColumn.propertyPath;
                        }).join(" AND ");
                    }
                    return " " + joinAttr.direction + " JOIN " + this.getTableName(junctionTableName) + " " + this.escape(junctionAlias) + " ON " + this.replacePropertyNames(junctionCondition) +
                        " " + joinAttr.direction + " JOIN " + this.getTableName(destinationTableName) + " " + this.escape(destinationTableAlias) + " ON " + this.replacePropertyNames(destinationCondition + appendedCondition);
                }
            });
            return joins.join(" ");
        }
        /**
         * Creates "GROUP BY" part of SQL query.
         */
        createGroupByExpression() {
            if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length)
                return "";
            return " GROUP BY " + this.replacePropertyNames(this.expressionMap.groupBys.join(", "));
        }
        /**
         * Creates "ORDER BY" part of SQL query.
         */
        createOrderByExpression() {
            const orderBys = this.expressionMap.allOrderBys;
            if (Object.keys(orderBys).length > 0)
                return " ORDER BY " + Object.keys(orderBys)
                    .map(columnName => {
                    if (typeof orderBys[columnName] === "string") {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName];
                    }
                    else {
                        return this.replacePropertyNames(columnName) + " " + orderBys[columnName].order + " " + orderBys[columnName].nulls;
                    }
                })
                    .join(", ");
            return "";
        }
        /**
         * Creates "LIMIT" and "OFFSET" parts of SQL query.
         */
        createLimitOffsetExpression() {
            // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results
            // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values
            let offset = this.expressionMap.offset, limit = this.expressionMap.limit;
            if (!offset && !limit && this.expressionMap.joinAttributes.length === 0) {
                offset = this.expressionMap.skip;
                limit = this.expressionMap.take;
            }
            if (this.connection.driver instanceof SqlServerDriver_6.SqlServerDriver) {
                // Due to a limitation in SQL Server's parser implementation it does not support using
                // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the
                // user does not request one we insert a dummy ORDER BY that does nothing and should
                // have no effect on the query planner or on the order of the results returned.
                // https://dba.stackexchange.com/a/193799
                let prefix = "";
                if ((limit || offset) && Object.keys(this.expressionMap.allOrderBys).length <= 0) {
                    prefix = " ORDER BY (SELECT NULL)";
                }
                if (limit && offset)
                    return prefix + " OFFSET " + offset + " ROWS FETCH NEXT " + limit + " ROWS ONLY";
                if (limit)
                    return prefix + " OFFSET 0 ROWS FETCH NEXT " + limit + " ROWS ONLY";
                if (offset)
                    return prefix + " OFFSET " + offset + " ROWS";
            }
            else if (this.connection.driver instanceof MysqlDriver_6.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_5.AuroraDataApiDriver || this.connection.driver instanceof SapDriver_5.SapDriver) {
                if (limit && offset)
                    return " LIMIT " + limit + " OFFSET " + offset;
                if (limit)
                    return " LIMIT " + limit;
                if (offset)
                    throw new OffsetWithoutLimitNotSupportedError_1.OffsetWithoutLimitNotSupportedError();
            }
            else if (this.connection.driver instanceof AbstractSqliteDriver_7.AbstractSqliteDriver) {
                if (limit && offset)
                    return " LIMIT " + limit + " OFFSET " + offset;
                if (limit)
                    return " LIMIT " + limit;
                if (offset)
                    return " LIMIT -1 OFFSET " + offset;
            }
            else if (this.connection.driver instanceof OracleDriver_9.OracleDriver) {
                if (limit && offset)
                    return " OFFSET " + offset + " ROWS FETCH NEXT " + limit + " ROWS ONLY";
                if (limit)
                    return " FETCH NEXT " + limit + " ROWS ONLY";
                if (offset)
                    return " OFFSET " + offset + " ROWS";
            }
            else {
                if (limit && offset)
                    return " LIMIT " + limit + " OFFSET " + offset;
                if (limit)
                    return " LIMIT " + limit;
                if (offset)
                    return " OFFSET " + offset;
            }
            return "";
        }
        /**
         * Creates "LOCK" part of SQL query.
         */
        createLockExpression() {
            const driver = this.connection.driver;
            let lockTablesClause = "";
            if (this.expressionMap.lockTables) {
                if (!(driver instanceof PostgresDriver_7.PostgresDriver)) {
                    throw new Error("Lock tables not supported in selected driver");
                }
                if (this.expressionMap.lockTables.length < 1) {
                    throw new Error("lockTables cannot be an empty array");
                }
                lockTablesClause = " OF " + this.expressionMap.lockTables.join(", ");
            }
            switch (this.expressionMap.lockMode) {
                case "pessimistic_read":
                    if (driver instanceof MysqlDriver_6.MysqlDriver || driver instanceof AuroraDataApiDriver_5.AuroraDataApiDriver) {
                        return " LOCK IN SHARE MODE";
                    }
                    else if (driver instanceof PostgresDriver_7.PostgresDriver) {
                        return " FOR SHARE" + lockTablesClause;
                    }
                    else if (driver instanceof OracleDriver_9.OracleDriver) {
                        return " FOR UPDATE";
                    }
                    else if (driver instanceof SqlServerDriver_6.SqlServerDriver) {
                        return "";
                    }
                    else {
                        throw new LockNotSupportedOnGivenDriverError_1.LockNotSupportedOnGivenDriverError();
                    }
                case "pessimistic_write":
                    if (driver instanceof MysqlDriver_6.MysqlDriver || driver instanceof AuroraDataApiDriver_5.AuroraDataApiDriver || driver instanceof OracleDriver_9.OracleDriver) {
                        return " FOR UPDATE";
                    }
                    else if (driver instanceof PostgresDriver_7.PostgresDriver) {
                        return " FOR UPDATE" + lockTablesClause;
                    }
                    else if (driver instanceof SqlServerDriver_6.SqlServerDriver) {
                        return "";
                    }
                    else {
                        throw new LockNotSupportedOnGivenDriverError_1.LockNotSupportedOnGivenDriverError();
                    }
                case "pessimistic_partial_write":
                    if (driver instanceof PostgresDriver_7.PostgresDriver) {
                        return " FOR UPDATE" + lockTablesClause + " SKIP LOCKED";
                    }
                    else if (driver instanceof MysqlDriver_6.MysqlDriver) {
                        return " FOR UPDATE SKIP LOCKED";
                    }
                    else {
                        throw new LockNotSupportedOnGivenDriverError_1.LockNotSupportedOnGivenDriverError();
                    }
                case "pessimistic_write_or_fail":
                    if (driver instanceof PostgresDriver_7.PostgresDriver) {
                        return " FOR UPDATE" + lockTablesClause + " NOWAIT";
                    }
                    else if (driver instanceof MysqlDriver_6.MysqlDriver) {
                        return " FOR UPDATE NOWAIT";
                    }
                    else {
                        throw new LockNotSupportedOnGivenDriverError_1.LockNotSupportedOnGivenDriverError();
                    }
                case "for_no_key_update":
                    if (driver instanceof PostgresDriver_7.PostgresDriver) {
                        return " FOR NO KEY UPDATE" + lockTablesClause;
                    }
                    else {
                        throw new LockNotSupportedOnGivenDriverError_1.LockNotSupportedOnGivenDriverError();
                    }
                default:
                    return "";
            }
        }
        /**
         * Creates "HAVING" part of SQL query.
         */
        createHavingExpression() {
            if (!this.expressionMap.havings || !this.expressionMap.havings.length)
                return "";
            const conditions = this.expressionMap.havings.map((having, index) => {
                switch (having.type) {
                    case "and":
                        return (index > 0 ? "AND " : "") + this.replacePropertyNames(having.condition);
                    case "or":
                        return (index > 0 ? "OR " : "") + this.replacePropertyNames(having.condition);
                    default:
                        return this.replacePropertyNames(having.condition);
                }
            }).join(" ");
            if (!conditions.length)
                return "";
            return " HAVING " + conditions;
        }
        buildEscapedEntityColumnSelects(aliasName, metadata) {
            const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);
            const columns = [];
            if (hasMainAlias) {
                columns.push(...metadata.columns.filter(column => column.isSelect === true));
            }
            columns.push(...metadata.columns.filter(column => {
                return this.expressionMap.selects.some(select => select.selection === aliasName + "." + column.propertyPath);
            }));
            // if user used partial selection and did not select some primary columns which are required to be selected
            // we select those primary columns and mark them as "virtual". Later virtual column values will be removed from final entity
            // to make entity contain exactly what user selected
            if (columns.length === 0) // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)
                return [];
            const nonSelectedPrimaryColumns = this.expressionMap.queryEntity ? metadata.primaryColumns.filter(primaryColumn => columns.indexOf(primaryColumn) === -1) : [];
            const allColumns = [...columns, ...nonSelectedPrimaryColumns];
            return allColumns.map(column => {
                const selection = this.expressionMap.selects.find(select => select.selection === aliasName + "." + column.propertyPath);
                let selectionPath = this.escape(aliasName) + "." + this.escape(column.databaseName);
                if (this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {
                    if (this.connection.driver instanceof MysqlDriver_6.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_5.AuroraDataApiDriver) {
                        const useLegacy = this.connection.driver.options.legacySpatialSupport;
                        const asText = useLegacy ? "AsText" : "ST_AsText";
                        selectionPath = `${asText}(${selectionPath})`;
                    }
                    if (this.connection.driver instanceof PostgresDriver_7.PostgresDriver)
                        // cast to JSON to trigger parsing in the driver
                        if (column.precision) {
                            selectionPath = `ST_AsGeoJSON(${selectionPath}, ${column.precision})::json`;
                        }
                        else {
                            selectionPath = `ST_AsGeoJSON(${selectionPath})::json`;
                        }
                    if (this.connection.driver instanceof SqlServerDriver_6.SqlServerDriver)
                        selectionPath = `${selectionPath}.ToString()`;
                }
                return {
                    selection: selectionPath,
                    aliasName: selection && selection.aliasName ? selection.aliasName : DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column.databaseName),
                    // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!
                    virtual: selection ? selection.virtual === true : (hasMainAlias ? false : true),
                };
            });
        }
        findEntityColumnSelects(aliasName, metadata) {
            const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);
            if (mainSelect)
                return [mainSelect];
            return this.expressionMap.selects.filter(select => {
                return metadata.columns.some(column => select.selection === aliasName + "." + column.propertyPath);
            });
        }
        computeCountExpression() {
            const mainAlias = this.expressionMap.mainAlias.name; // todo: will this work with "fromTableName"?
            const metadata = this.expressionMap.mainAlias.metadata;
            const primaryColumns = metadata.primaryColumns;
            const distinctAlias = this.escape(mainAlias);
            // If we aren't doing anything that will create a join, we can use a simpler `COUNT` instead
            // so we prevent poor query patterns in the most likely cases
            if (this.expressionMap.joinAttributes.length === 0 &&
                this.expressionMap.relationIdAttributes.length === 0 &&
                this.expressionMap.relationCountAttributes.length === 0) {
                return "COUNT(1)";
            }
            // For everything else, we'll need to do some hackery to get the correct count values.
            if (this.connection.driver instanceof CockroachDriver_7.CockroachDriver || this.connection.driver instanceof PostgresDriver_7.PostgresDriver) {
                // Postgres and CockroachDB can pass multiple parameters to the `DISTINCT` function
                // https://www.postgresql.org/docs/9.5/sql-select.html#SQL-DISTINCT
                return "COUNT(DISTINCT(" +
                    primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(", ") +
                    "))";
            }
            if (this.connection.driver instanceof MysqlDriver_6.MysqlDriver) {
                // MySQL & MariaDB can pass multiple parameters to the `DISTINCT` language construct
                // https://mariadb.com/kb/en/count-distinct/
                return "COUNT(DISTINCT " +
                    primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(", ") +
                    ")";
            }
            if (this.connection.driver instanceof SqlServerDriver_6.SqlServerDriver) {
                // SQL Server has gotta be different from everyone else.  They don't support
                // distinct counting multiple columns & they don't have the same operator
                // characteristic for concatenating, so we gotta use the `CONCAT` function.
                // However, If it's exactly 1 column we can omit the `CONCAT` for better performance.
                const columnsExpression = primaryColumns.map(primaryColumn => `${distinctAlias}.${this.escape(primaryColumn.databaseName)}`).join(", '|;|', ");
                if (primaryColumns.length === 1) {
                    return `COUNT(DISTINCT(${columnsExpression}))`;
                }
                return `COUNT(DISTINCT(CONCAT(${columnsExpression})))`;
            }
            // If all else fails, fall back to a `COUNT` and `DISTINCT` across all the primary columns concatenated.
            // Per the SQL spec, this is the canonical string concatenation mechanism which is most
            // likely to work across servers implementing the SQL standard.
            // Please note, if there is only one primary column that the concatenation does not occur in this
            // query and the query is a standard `COUNT DISTINCT` in that case.
            return `COUNT(DISTINCT(` +
                primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(" || '|;|' || ") +
                "))";
        }
        async executeCountQuery(queryRunner) {
            const countSql = this.computeCountExpression();
            const results = await this.clone()
                .orderBy()
                .groupBy()
                .offset(undefined)
                .limit(undefined)
                .skip(undefined)
                .take(undefined)
                .select(countSql, "cnt")
                .setOption("disable-global-order")
                .loadRawResults(queryRunner);
            if (!results || !results[0] || !results[0]["cnt"])
                return 0;
            return parseInt(results[0]["cnt"]);
        }
        /**
         * Executes sql generated by query builder and returns object with raw results and entities created from them.
         */
        async executeEntitiesAndRawResults(queryRunner) {
            if (!this.expressionMap.mainAlias)
                throw new Error(`Alias is not set. Use "from" method to set an alias.`);
            if ((this.expressionMap.lockMode === "pessimistic_read" || this.expressionMap.lockMode === "pessimistic_write" || this.expressionMap.lockMode === "pessimistic_partial_write" || this.expressionMap.lockMode === "pessimistic_write_or_fail" || this.expressionMap.lockMode === "for_no_key_update") && !queryRunner.isTransactionActive)
                throw new PessimisticLockTransactionRequiredError_1.PessimisticLockTransactionRequiredError();
            if (this.expressionMap.lockMode === "optimistic") {
                const metadata = this.expressionMap.mainAlias.metadata;
                if (!metadata.versionColumn && !metadata.updateDateColumn)
                    throw new NoVersionOrUpdateDateColumnError_1.NoVersionOrUpdateDateColumnError(metadata.name);
            }
            const relationIdLoader = new RelationIdLoader_1.RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);
            const relationCountLoader = new RelationCountLoader_1.RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);
            const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer_1.RelationIdMetadataToAttributeTransformer(this.expressionMap);
            relationIdMetadataTransformer.transform();
            const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer_1.RelationCountMetadataToAttributeTransformer(this.expressionMap);
            relationCountMetadataTransformer.transform();
            let rawResults = [], entities = [];
            // for pagination enabled (e.g. skip and take) its much more complicated - its a special process
            // where we make two queries to find the data we need
            // first query find ids in skip and take range
            // and second query loads the actual data in given ids range
            if ((this.expressionMap.skip || this.expressionMap.take) && this.expressionMap.joinAttributes.length > 0) {
                // we are skipping order by here because its not working in subqueries anyway
                // to make order by working we need to apply it on a distinct query
                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression("distinctAlias");
                const metadata = this.expressionMap.mainAlias.metadata;
                const mainAliasName = this.expressionMap.mainAlias.name;
                const querySelects = metadata.primaryColumns.map(primaryColumn => {
                    const distinctAlias = this.escape("distinctAlias");
                    const columnAlias = this.escape(DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, mainAliasName, primaryColumn.databaseName));
                    if (!orderBys[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction
                        orderBys[columnAlias] = "ASC";
                    const alias = DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, "ids_" + mainAliasName, primaryColumn.databaseName);
                    return `${distinctAlias}.${columnAlias} as "${alias}"`;
                });
                rawResults = await new SelectQueryBuilder(this.connection, queryRunner)
                    .select(`DISTINCT ${querySelects.join(", ")}`)
                    .addSelect(selects)
                    .from(`(${this.clone().orderBy().getQuery()})`, "distinctAlias")
                    .offset(this.expressionMap.skip)
                    .limit(this.expressionMap.take)
                    .orderBy(orderBys)
                    .cache(this.expressionMap.cache ? this.expressionMap.cache : this.expressionMap.cacheId, this.expressionMap.cacheDuration)
                    .setParameters(this.getParameters())
                    .setNativeParameters(this.expressionMap.nativeParameters)
                    .getRawMany();
                if (rawResults.length > 0) {
                    let condition = "";
                    const parameters = {};
                    if (metadata.hasMultiplePrimaryKeys) {
                        condition = rawResults.map((result, index) => {
                            return metadata.primaryColumns.map(primaryColumn => {
                                const paramKey = `orm_distinct_ids_${index}_${primaryColumn.databaseName}`;
                                parameters[paramKey] = result[`ids_${mainAliasName}_${primaryColumn.databaseName}`];
                                return `${mainAliasName}.${primaryColumn.propertyPath}=:${paramKey}`;
                            }).join(" AND ");
                        }).join(" OR ");
                    }
                    else {
                        const alias = DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, "ids_" + mainAliasName, metadata.primaryColumns[0].databaseName);
                        const ids = rawResults.map(result => result[alias]);
                        const areAllNumbers = ids.every((id) => typeof id === "number");
                        if (areAllNumbers) {
                            // fixes #190. if all numbers then its safe to perform query without parameter
                            condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyPath} IN (${ids.join(", ")})`;
                        }
                        else {
                            parameters["orm_distinct_ids"] = ids;
                            condition = mainAliasName + "." + metadata.primaryColumns[0].propertyPath + " IN (:...orm_distinct_ids)";
                        }
                    }
                    rawResults = await this.clone()
                        .mergeExpressionMap({ extraAppendedAndWhereCondition: condition })
                        .setParameters(parameters)
                        .loadRawResults(queryRunner);
                }
            }
            else {
                rawResults = await this.loadRawResults(queryRunner);
            }
            if (rawResults.length > 0) {
                // transform raw results into entities
                const rawRelationIdResults = await relationIdLoader.load(rawResults);
                const rawRelationCountResults = await relationCountLoader.load(rawResults);
                const transformer = new RawSqlResultsToEntityTransformer_1.RawSqlResultsToEntityTransformer(this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);
                entities = transformer.transform(rawResults, this.expressionMap.mainAlias);
                // broadcast all "after load" events
                if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {
                    const broadcastResult = new BroadcasterResult_14.BroadcasterResult();
                    queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);
                    if (broadcastResult.promises.length > 0)
                        await Promise.all(broadcastResult.promises);
                }
            }
            return {
                raw: rawResults,
                entities: entities,
            };
        }
        createOrderByCombinedWithSelectExpression(parentAlias) {
            // if table has a default order then apply it
            const orderBys = this.expressionMap.allOrderBys;
            const selectString = Object.keys(orderBys)
                .map(orderCriteria => {
                if (orderCriteria.indexOf(".") !== -1) {
                    const criteriaParts = orderCriteria.split(".");
                    const aliasName = criteriaParts[0];
                    const propertyPath = criteriaParts.slice(1).join(".");
                    const alias = this.expressionMap.findAliasByName(aliasName);
                    const column = alias.metadata.findColumnWithPropertyPath(propertyPath);
                    return this.escape(parentAlias) + "." + this.escape(DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column.databaseName));
                }
                else {
                    if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria))
                        return this.escape(parentAlias) + "." + orderCriteria;
                    return "";
                }
            })
                .join(", ");
            const orderByObject = {};
            Object.keys(orderBys).forEach(orderCriteria => {
                if (orderCriteria.indexOf(".") !== -1) {
                    const criteriaParts = orderCriteria.split(".");
                    const aliasName = criteriaParts[0];
                    const propertyPath = criteriaParts.slice(1).join(".");
                    const alias = this.expressionMap.findAliasByName(aliasName);
                    const column = alias.metadata.findColumnWithPropertyPath(propertyPath);
                    orderByObject[this.escape(parentAlias) + "." + this.escape(DriverUtils_9.DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column.databaseName))] = orderBys[orderCriteria];
                }
                else {
                    if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria)) {
                        orderByObject[this.escape(parentAlias) + "." + orderCriteria] = orderBys[orderCriteria];
                    }
                    else {
                        orderByObject[orderCriteria] = orderBys[orderCriteria];
                    }
                }
            });
            return [selectString, orderByObject];
        }
        /**
         * Loads raw results from the database.
         */
        async loadRawResults(queryRunner) {
            const [sql, parameters] = this.getQueryAndParameters();
            const queryId = sql + " -- PARAMETERS: " + JSON.stringify(parameters);
            const cacheOptions = typeof this.connection.options.cache === "object" ? this.connection.options.cache : {};
            let savedQueryResultCacheOptions = undefined;
            if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {
                savedQueryResultCacheOptions = await this.connection.queryResultCache.getFromCache({
                    identifier: this.expressionMap.cacheId,
                    query: queryId,
                    duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000
                }, queryRunner);
                if (savedQueryResultCacheOptions && !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions))
                    return JSON.parse(savedQueryResultCacheOptions.result);
            }
            const results = await queryRunner.query(sql, parameters);
            if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {
                await this.connection.queryResultCache.storeInCache({
                    identifier: this.expressionMap.cacheId,
                    query: queryId,
                    time: new Date().getTime(),
                    duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000,
                    result: JSON.stringify(results)
                }, savedQueryResultCacheOptions, queryRunner);
            }
            return results;
        }
        /**
         * Merges into expression map given expression map properties.
         */
        mergeExpressionMap(expressionMap) {
            ObjectUtils_8.ObjectUtils.assign(this.expressionMap, expressionMap);
            return this;
        }
        /**
         * Normalizes a give number - converts to int if possible.
         */
        normalizeNumber(num) {
            if (typeof num === "number" || num === undefined || num === null)
                return num;
            return Number(num);
        }
        /**
         * Creates a query builder used to execute sql queries inside this query builder.
         */
        obtainQueryRunner() {
            return this.queryRunner || this.connection.createQueryRunner("slave");
        }
    }
    exports.SelectQueryBuilder = SelectQueryBuilder;
});
define("typeorm/metadata-args/RelationIdMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/RelationIdMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationIdMetadata = void 0;
    /**
     * Contains all information about entity's relation count.
     */
    class RelationIdMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            this.entityMetadata = options.entityMetadata;
            this.target = options.args.target;
            this.propertyName = options.args.propertyName;
            this.relationNameOrFactory = options.args.relation;
            this.alias = options.args.alias;
            this.queryBuilderFactory = options.args.queryBuilderFactory;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Sets relation id value from the given entity.
         *
         * todo: make it to work in embeds as well.
         */
        setValue(entity) {
            const inverseEntity = this.relation.getEntityValue(entity);
            if (Array.isArray(inverseEntity)) {
                entity[this.propertyName] = inverseEntity.map(item => {
                    return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);
                }).filter(item => item !== null && item !== undefined);
            }
            else {
                const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);
                if (value !== undefined)
                    entity[this.propertyName] = value;
            }
        }
        // ---------------------------------------------------------------------
        // Public Builder Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend relation id properties.
         * This builder method should be used only after entity metadata, its properties map and all relations are build.
         */
        build() {
            const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;
            const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);
            if (!relation)
                throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);
            this.relation = relation;
        }
    }
    exports.RelationIdMetadata = RelationIdMetadata;
});
define("typeorm/metadata/types/EventListenerTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventListenerTypes = void 0;
    /**
     * Provides a constants for each entity listener type.
     */
    class EventListenerTypes {
    }
    exports.EventListenerTypes = EventListenerTypes;
    EventListenerTypes.AFTER_LOAD = "after-load";
    EventListenerTypes.BEFORE_INSERT = "before-insert";
    EventListenerTypes.AFTER_INSERT = "after-insert";
    EventListenerTypes.BEFORE_UPDATE = "before-update";
    EventListenerTypes.AFTER_UPDATE = "after-update";
    EventListenerTypes.BEFORE_REMOVE = "before-remove";
    EventListenerTypes.AFTER_REMOVE = "after-remove";
});
define("typeorm/metadata-args/EntityListenerMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/EntityListenerMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityListenerMetadata = void 0;
    /**
     * This metadata contains all information about entity's listeners.
     */
    class EntityListenerMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            this.entityMetadata = options.entityMetadata;
            this.embeddedMetadata = options.embeddedMetadata;
            this.target = options.args.target;
            this.propertyName = options.args.propertyName;
            this.type = options.args.type;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Checks if entity listener is allowed to be executed on the given entity.
         */
        isAllowed(entity) {
            return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?
                (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance
        }
        /**
         * Executes listener method of the given entity.
         */
        execute(entity) {
            if (!this.embeddedMetadata)
                return entity[this.propertyName]();
            this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split("."));
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        /**
         * Calls embedded entity listener method no matter how nested it is.
         */
        callEntityEmbeddedMethod(entity, propertyPaths) {
            const propertyPath = propertyPaths.shift();
            if (!propertyPath || !entity[propertyPath])
                return;
            if (propertyPaths.length === 0) {
                entity[propertyPath][this.propertyName]();
            }
            else {
                if (entity[propertyPath])
                    this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);
            }
        }
    }
    exports.EntityListenerMetadata = EntityListenerMetadata;
});
define("typeorm/metadata/EmbeddedMetadata", ["require", "exports", "typeorm/driver/mongodb/MongoDriver"], function (require, exports, MongoDriver_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddedMetadata = void 0;
    /**
     * Contains all information about entity's embedded property.
     */
    class EmbeddedMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Columns inside this embed.
             */
            this.columns = [];
            /**
             * Relations inside this embed.
             */
            this.relations = [];
            /**
             * Entity listeners inside this embed.
             */
            this.listeners = [];
            /**
             * Indices applied to the embed columns.
             */
            this.indices = [];
            /**
             * Uniques applied to the embed columns.
             */
            this.uniques = [];
            /**
             * Relation ids inside this embed.
             */
            this.relationIds = [];
            /**
             * Relation counts inside this embed.
             */
            this.relationCounts = [];
            /**
             * Nested embeddable in this embeddable (which has current embedded as parent embedded).
             */
            this.embeddeds = [];
            /**
             * Indicates if this embedded is in array mode.
             *
             * This option works only in mongodb.
             */
            this.isArray = false;
            /**
             * Returns array of property names of current embed and all its parent embeds.
             *
             * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
             * we need to get value of "id" column from the post real entity object.
             * this method will return ["data", "information", "counters"]
             */
            this.parentPropertyNames = [];
            /**
             * Returns array of prefixes of current embed and all its parent embeds.
             */
            this.parentPrefixes = [];
            /**
             * Returns embed metadatas from all levels of the parent tree.
             *
             * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
             * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]
             */
            this.embeddedMetadataTree = [];
            /**
             * Embed metadatas from all levels of the parent tree.
             *
             * example: post[data][information][counters].id where "data", "information" and "counters" are embeds
             * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]
             */
            this.columnsFromTree = [];
            /**
             * Relations of this embed and all relations from its child embeds.
             */
            this.relationsFromTree = [];
            /**
             * Relations of this embed and all relations from its child embeds.
             */
            this.listenersFromTree = [];
            /**
             * Indices of this embed and all indices from its child embeds.
             */
            this.indicesFromTree = [];
            /**
             * Uniques of this embed and all uniques from its child embeds.
             */
            this.uniquesFromTree = [];
            /**
             * Relation ids of this embed and all relation ids from its child embeds.
             */
            this.relationIdsFromTree = [];
            /**
             * Relation counts of this embed and all relation counts from its child embeds.
             */
            this.relationCountsFromTree = [];
            this.entityMetadata = options.entityMetadata;
            this.type = options.args.type();
            this.propertyName = options.args.propertyName;
            this.customPrefix = options.args.prefix;
            this.isArray = options.args.isArray;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Creates a new embedded object.
         */
        create() {
            return new this.type;
        }
        // ---------------------------------------------------------------------
        // Builder Methods
        // ---------------------------------------------------------------------
        build(connection) {
            this.embeddeds.forEach(embedded => embedded.build(connection));
            this.prefix = this.buildPrefix(connection);
            this.parentPropertyNames = this.buildParentPropertyNames();
            this.parentPrefixes = this.buildParentPrefixes();
            this.propertyPath = this.parentPropertyNames.join(".");
            this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();
            this.columnsFromTree = this.buildColumnsFromTree();
            this.relationsFromTree = this.buildRelationsFromTree();
            this.listenersFromTree = this.buildListenersFromTree();
            this.indicesFromTree = this.buildIndicesFromTree();
            this.uniquesFromTree = this.buildUniquesFromTree();
            this.relationIdsFromTree = this.buildRelationIdsFromTree();
            this.relationCountsFromTree = this.buildRelationCountsFromTree();
            return this;
        }
        // ---------------------------------------------------------------------
        // Protected Methods
        // ---------------------------------------------------------------------
        buildPartialPrefix() {
            // if prefix option was not set or explicitly set to true - default prefix
            if (this.customPrefix === undefined || this.customPrefix === true) {
                return [this.propertyName];
            }
            // if prefix option was set to empty string or explicity set to false - disable prefix
            if (this.customPrefix === "" || this.customPrefix === false) {
                return [];
            }
            // use custom prefix
            if (typeof this.customPrefix === "string") {
                return [this.customPrefix];
            }
            throw new Error(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);
        }
        buildPrefix(connection) {
            if (connection.driver instanceof MongoDriver_4.MongoDriver)
                return this.propertyName;
            let prefixes = [];
            if (this.parentEmbeddedMetadata)
                prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));
            prefixes.push(...this.buildPartialPrefix());
            return prefixes.join("_"); // todo: use naming strategy instead of "_"  !!!
        }
        buildParentPropertyNames() {
            return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];
        }
        buildParentPrefixes() {
            return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();
        }
        buildEmbeddedMetadataTree() {
            return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];
        }
        buildColumnsFromTree() {
            return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);
        }
        buildRelationsFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);
        }
        buildListenersFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);
        }
        buildIndicesFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);
        }
        buildUniquesFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);
        }
        buildRelationIdsFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);
        }
        buildRelationCountsFromTree() {
            return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);
        }
    }
    exports.EmbeddedMetadata = EmbeddedMetadata;
});
define("typeorm/decorator/options/ColumnCommonOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/types/ColumnMode", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/ColumnMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/ColumnMetadata", ["require", "exports", "typeorm/util/OrmUtils", "typeorm/driver/mongodb/MongoDriver", "typeorm/find-options/FindOperator", "typeorm/util/ApplyValueTransformers"], function (require, exports, OrmUtils_26, MongoDriver_5, FindOperator_3, ApplyValueTransformers_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ColumnMetadata = void 0;
    /**
     * This metadata contains all information about entity's column.
     */
    class ColumnMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Type's length in the database.
             */
            this.length = "";
            /**
             * Indicates if this column is a primary key.
             */
            this.isPrimary = false;
            /**
             * Indicates if this column is generated (auto increment or generated other way).
             */
            this.isGenerated = false;
            /**
             * Indicates if column can contain nulls or not.
             */
            this.isNullable = false;
            /**
             * Indicates if column is selected by query builder or not.
             */
            this.isSelect = true;
            /**
             * Indicates if column is inserted by default or not.
             */
            this.isInsert = true;
            /**
             * Indicates if column allows updates or not.
             */
            this.isUpdate = true;
            /**
             * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.
             * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
             */
            this.zerofill = false;
            /**
             * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.
             */
            this.unsigned = false;
            /**
             * Indicates if this column is an array.
             */
            this.isArray = false;
            /**
             * Indicates if column is virtual. Virtual columns are not mapped to the entity.
             */
            this.isVirtual = false;
            /**
             * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.
             */
            this.isDiscriminator = false;
            /**
             * Indicates if column is tree-level column. Tree-level columns are used in closure entities.
             */
            this.isTreeLevel = false;
            /**
             * Indicates if this column contains an entity creation date.
             */
            this.isCreateDate = false;
            /**
             * Indicates if this column contains an entity update date.
             */
            this.isUpdateDate = false;
            /**
             * Indicates if this column contains an entity delete date.
             */
            this.isDeleteDate = false;
            /**
             * Indicates if this column contains an entity version.
             */
            this.isVersion = false;
            /**
             * Indicates if this column contains an object id.
             */
            this.isObjectId = false;
            /**
             * Indicates if this column is nested set's left column.
             * Used only in tree entities with nested-set type.
             */
            this.isNestedSetLeft = false;
            /**
             * Indicates if this column is nested set's right column.
             * Used only in tree entities with nested-set type.
             */
            this.isNestedSetRight = false;
            /**
             * Indicates if this column is materialized path's path column.
             * Used only in tree entities with materialized path type.
             */
            this.isMaterializedPath = false;
            this.entityMetadata = options.entityMetadata;
            this.embeddedMetadata = options.embeddedMetadata;
            this.referencedColumn = options.referencedColumn;
            if (options.args.target)
                this.target = options.args.target;
            if (options.args.propertyName)
                this.propertyName = options.args.propertyName;
            if (options.args.options.name)
                this.givenDatabaseName = options.args.options.name;
            if (options.args.options.type)
                this.type = options.args.options.type;
            if (options.args.options.length)
                this.length = options.args.options.length ? options.args.options.length.toString() : "";
            if (options.args.options.width)
                this.width = options.args.options.width;
            if (options.args.options.charset)
                this.charset = options.args.options.charset;
            if (options.args.options.collation)
                this.collation = options.args.options.collation;
            if (options.args.options.primary)
                this.isPrimary = options.args.options.primary;
            if (options.args.options.default === null) // to make sure default: null is the same as nullable: true
                this.isNullable = true;
            if (options.args.options.nullable !== undefined)
                this.isNullable = options.args.options.nullable;
            if (options.args.options.select !== undefined)
                this.isSelect = options.args.options.select;
            if (options.args.options.insert !== undefined)
                this.isInsert = options.args.options.insert;
            if (options.args.options.update !== undefined)
                this.isUpdate = options.args.options.update;
            if (options.args.options.readonly !== undefined)
                this.isUpdate = !options.args.options.readonly;
            if (options.args.options.comment)
                this.comment = options.args.options.comment;
            if (options.args.options.default !== undefined)
                this.default = options.args.options.default;
            if (options.args.options.onUpdate)
                this.onUpdate = options.args.options.onUpdate;
            if (options.args.options.scale !== null && options.args.options.scale !== undefined)
                this.scale = options.args.options.scale;
            if (options.args.options.zerofill) {
                this.zerofill = options.args.options.zerofill;
                this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column
            }
            if (options.args.options.unsigned)
                this.unsigned = options.args.options.unsigned;
            if (options.args.options.precision !== undefined)
                this.precision = options.args.options.precision;
            if (options.args.options.enum) {
                if (options.args.options.enum instanceof Object && !Array.isArray(options.args.options.enum)) {
                    this.enum = Object.keys(options.args.options.enum)
                        .filter(key => isNaN(+key)) // remove numeric keys - typescript numeric enum types generate them
                        .map(key => options.args.options.enum[key]);
                }
                else {
                    this.enum = options.args.options.enum;
                }
            }
            if (options.args.options.enumName) {
                this.enumName = options.args.options.enumName;
            }
            if (options.args.options.asExpression) {
                this.asExpression = options.args.options.asExpression;
                this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : "VIRTUAL";
            }
            if (options.args.options.hstoreType)
                this.hstoreType = options.args.options.hstoreType;
            if (options.args.options.array)
                this.isArray = options.args.options.array;
            if (options.args.mode) {
                this.isVirtual = options.args.mode === "virtual";
                this.isTreeLevel = options.args.mode === "treeLevel";
                this.isCreateDate = options.args.mode === "createDate";
                this.isUpdateDate = options.args.mode === "updateDate";
                this.isDeleteDate = options.args.mode === "deleteDate";
                this.isVersion = options.args.mode === "version";
                this.isObjectId = options.args.mode === "objectId";
            }
            if (options.args.options.transformer)
                this.transformer = options.args.options.transformer;
            if (options.args.options.spatialFeatureType)
                this.spatialFeatureType = options.args.options.spatialFeatureType;
            if (options.args.options.srid !== undefined)
                this.srid = options.args.options.srid;
            if (this.isTreeLevel)
                this.type = options.connection.driver.mappedDataTypes.treeLevel;
            if (this.isCreateDate) {
                if (!this.type)
                    this.type = options.connection.driver.mappedDataTypes.createDate;
                if (!this.default)
                    this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;
                if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)
                    this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;
            }
            if (this.isUpdateDate) {
                if (!this.type)
                    this.type = options.connection.driver.mappedDataTypes.updateDate;
                if (!this.default)
                    this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;
                if (!this.onUpdate)
                    this.onUpdate = options.connection.driver.mappedDataTypes.updateDateDefault;
                if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)
                    this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;
            }
            if (this.isDeleteDate) {
                if (!this.type)
                    this.type = options.connection.driver.mappedDataTypes.deleteDate;
                if (!this.isNullable)
                    this.isNullable = options.connection.driver.mappedDataTypes.deleteDateNullable;
                if (this.precision === undefined && options.connection.driver.mappedDataTypes.deleteDatePrecision)
                    this.precision = options.connection.driver.mappedDataTypes.deleteDatePrecision;
            }
            if (this.isVersion)
                this.type = options.connection.driver.mappedDataTypes.version;
            if (options.closureType)
                this.closureType = options.closureType;
            if (options.nestedSetLeft)
                this.isNestedSetLeft = options.nestedSetLeft;
            if (options.nestedSetRight)
                this.isNestedSetRight = options.nestedSetRight;
            if (options.materializedPath)
                this.isMaterializedPath = options.materializedPath;
        }
        // ---------------------------------------------------------------------
        // Public Methods
        // ---------------------------------------------------------------------
        /**
         * Creates entity id map from the given entity ids array.
         */
        createValueMap(value, useDatabaseName = false) {
            // extract column value from embeds of entity if column is in embedded
            if (this.embeddedMetadata) {
                // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
                // we need to get value of "id" column from the post real entity object and return it in a
                // { data: { information: { counters: { id: ... } } } } format
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const propertyNames = [...this.embeddedMetadata.parentPropertyNames];
                // now need to access post[data][information][counters] to get column value from the counters
                // and on each step we need to create complex literal object, e.g. first { data },
                // then { data: { information } }, then { data: { information: { counters } } },
                // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
                // this recursive function helps doing that
                const extractEmbeddedColumnValue = (propertyNames, map) => {
                    const propertyName = propertyNames.shift();
                    if (propertyName) {
                        map[propertyName] = {};
                        extractEmbeddedColumnValue(propertyNames, map[propertyName]);
                        return map;
                    }
                    // this is bugfix for #720 when increment number is bigint we need to make sure its a string
                    if ((this.generationStrategy === "increment" || this.generationStrategy === "rowid") && this.type === "bigint" && value !== null)
                        value = String(value);
                    map[useDatabaseName ? this.databaseName : this.propertyName] = value;
                    return map;
                };
                return extractEmbeddedColumnValue(propertyNames, {});
            }
            else { // no embeds - no problems. Simply return column property name and its value of the entity
                // this is bugfix for #720 when increment number is bigint we need to make sure its a string
                if ((this.generationStrategy === "increment" || this.generationStrategy === "rowid") && this.type === "bigint" && value !== null)
                    value = String(value);
                return { [useDatabaseName ? this.databaseName : this.propertyName]: value };
            }
        }
        /**
         * Extracts column value and returns its column name with this value in a literal object.
         * If column is in embedded (or recursive embedded) it returns complex literal object.
         *
         * Examples what this method can return depend if this column is in embeds.
         * { id: 1 } or { title: "hello" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }
         */
        getEntityValueMap(entity, options) {
            const returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.
            // extract column value from embeds of entity if column is in embedded
            if (this.embeddedMetadata) {
                // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
                // we need to get value of "id" column from the post real entity object and return it in a
                // { data: { information: { counters: { id: ... } } } } format
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const propertyNames = [...this.embeddedMetadata.parentPropertyNames];
                // now need to access post[data][information][counters] to get column value from the counters
                // and on each step we need to create complex literal object, e.g. first { data },
                // then { data: { information } }, then { data: { information: { counters } } },
                // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }
                // this recursive function helps doing that
                const extractEmbeddedColumnValue = (propertyNames, value, map) => {
                    const propertyName = propertyNames.shift();
                    if (value === undefined)
                        return map;
                    if (propertyName) {
                        const submap = {};
                        extractEmbeddedColumnValue(propertyNames, value[propertyName], submap);
                        if (Object.keys(submap).length > 0) {
                            map[propertyName] = submap;
                        }
                        return map;
                    }
                    if (value[this.propertyName] !== undefined && (returnNulls === false || value[this.propertyName] !== null))
                        map[this.propertyName] = value[this.propertyName];
                    return map;
                };
                const map = {};
                extractEmbeddedColumnValue(propertyNames, entity, map);
                return Object.keys(map).length > 0 ? map : undefined;
            }
            else { // no embeds - no problems. Simply return column property name and its value of the entity
                if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {
                    const map = this.relationMetadata.joinColumns.reduce((map, joinColumn) => {
                        const value = joinColumn.referencedColumn.getEntityValueMap(entity[this.propertyName]);
                        if (value === undefined)
                            return map;
                        return OrmUtils_26.OrmUtils.mergeDeep(map, value);
                    }, {});
                    if (Object.keys(map).length > 0)
                        return { [this.propertyName]: map };
                    return undefined;
                }
                else {
                    if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))
                        return { [this.propertyName]: entity[this.propertyName] };
                    return undefined;
                }
            }
        }
        /**
         * Extracts column value from the given entity.
         * If column is in embedded (or recursive embedded) it extracts its value from there.
         */
        getEntityValue(entity, transform = false) {
            if (entity === undefined || entity === null)
                return undefined;
            // extract column value from embeddeds of entity if column is in embedded
            let value = undefined;
            if (this.embeddedMetadata) {
                // example: post[data][information][counters].id where "data", "information" and "counters" are embeddeds
                // we need to get value of "id" column from the post real entity object
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const propertyNames = [...this.embeddedMetadata.parentPropertyNames];
                // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters
                // this recursive function takes array of generated property names and gets the post[data][information][counters] embed
                const extractEmbeddedColumnValue = (propertyNames, value) => {
                    const propertyName = propertyNames.shift();
                    return propertyName && value ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;
                };
                // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]
                const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);
                if (embeddedObject) {
                    if (this.relationMetadata && this.referencedColumn) {
                        const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);
                        if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_3.FindOperator)) {
                            value = this.referencedColumn.getEntityValue(relatedEntity);
                        }
                        else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator_3.FindOperator)) {
                            value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);
                        }
                        else {
                            value = embeddedObject[this.propertyName];
                        }
                    }
                    else if (this.referencedColumn) {
                        value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);
                    }
                    else {
                        value = embeddedObject[this.propertyName];
                    }
                }
            }
            else { // no embeds - no problems. Simply return column name by property name of the entity
                if (this.relationMetadata && this.referencedColumn) {
                    const relatedEntity = this.relationMetadata.getEntityValue(entity);
                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_3.FindOperator) && !(relatedEntity instanceof Function)) {
                        value = this.referencedColumn.getEntityValue(relatedEntity);
                    }
                    else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator_3.FindOperator) && !(entity[this.propertyName] instanceof Function)) {
                        value = this.referencedColumn.getEntityValue(entity[this.propertyName]);
                    }
                    else {
                        value = entity[this.propertyName];
                    }
                }
                else if (this.referencedColumn) {
                    value = this.referencedColumn.getEntityValue(entity[this.propertyName]);
                }
                else {
                    value = entity[this.propertyName];
                }
            }
            if (transform && this.transformer)
                value = ApplyValueTransformers_10.ApplyValueTransformers.transformTo(this.transformer, value);
            return value;
        }
        /**
         * Sets given entity's column value.
         * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.
         */
        setEntityValue(entity, value) {
            if (this.embeddedMetadata) {
                // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]
                const extractEmbeddedColumnValue = (embeddedMetadatas, map) => {
                    // if (!object[embeddedMetadata.propertyName])
                    //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();
                    const embeddedMetadata = embeddedMetadatas.shift();
                    if (embeddedMetadata) {
                        if (!map[embeddedMetadata.propertyName])
                            map[embeddedMetadata.propertyName] = embeddedMetadata.create();
                        extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);
                        return map;
                    }
                    map[this.propertyName] = value;
                    return map;
                };
                return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);
            }
            else {
                // we write a deep object in this entity only if the column is virtual
                // because if its not virtual it means the user defined a real column for this relation
                // also we don't do it if column is inside a junction table
                if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName) {
                    if (!(this.propertyName in entity)) {
                        entity[this.propertyName] = {};
                    }
                    entity[this.propertyName][this.referencedColumn.propertyName] = value;
                }
                else {
                    entity[this.propertyName] = value;
                }
            }
        }
        // ---------------------------------------------------------------------
        // Builder Methods
        // ---------------------------------------------------------------------
        build(connection) {
            this.propertyPath = this.buildPropertyPath();
            this.propertyAliasName = this.propertyPath.replace(".", "_");
            this.databaseName = this.buildDatabaseName(connection);
            this.databasePath = this.buildDatabasePath();
            this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);
            return this;
        }
        buildPropertyPath() {
            let path = "";
            if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)
                path = this.embeddedMetadata.parentPropertyNames.join(".") + ".";
            path += this.propertyName;
            // we add reference column to property path only if this column is virtual
            // because if its not virtual it means user defined a real column for this relation
            // also we don't do it if column is inside a junction table
            if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)
                path += "." + this.referencedColumn.propertyName;
            return path;
        }
        buildDatabasePath() {
            let path = "";
            if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)
                path = this.embeddedMetadata.parentPropertyNames.join(".") + ".";
            path += this.databaseName;
            // we add reference column to property path only if this column is virtual
            // because if its not virtual it means user defined a real column for this relation
            // also we don't do it if column is inside a junction table
            if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)
                path += "." + this.referencedColumn.databaseName;
            return path;
        }
        buildDatabaseName(connection) {
            let propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];
            if (connection.driver instanceof MongoDriver_5.MongoDriver) // we don't need to include embedded name for the mongodb column names
                propertyNames = [];
            return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);
        }
    }
    exports.ColumnMetadata = ColumnMetadata;
});
define("typeorm/driver/postgres/PostgresQueryRunner", ["require", "exports", "typeorm/error/QueryFailedError", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/query-runner/BaseQueryRunner", "typeorm/schema-builder/table/Table", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableExclusion", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/view/View", "typeorm/subscriber/Broadcaster", "typeorm/util/OrmUtils", "typeorm/driver/Query", "typeorm/subscriber/BroadcasterResult"], function (require, exports, QueryFailedError_7, QueryRunnerAlreadyReleasedError_9, TransactionAlreadyStartedError_8, TransactionNotStartedError_8, BaseQueryRunner_8, Table_9, TableCheck_7, TableColumn_10, TableExclusion_3, TableForeignKey_9, TableIndex_9, TableUnique_9, View_9, Broadcaster_10, OrmUtils_27, Query_9, BroadcasterResult_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PostgresQueryRunner = void 0;
    /**
     * Runs queries on a single postgres database connection.
     */
    class PostgresQueryRunner extends BaseQueryRunner_8.BaseQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, mode) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.mode = mode;
            this.broadcaster = new Broadcaster_10.Broadcaster(this);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            if (this.databaseConnection)
                return Promise.resolve(this.databaseConnection);
            if (this.databaseConnectionPromise)
                return this.databaseConnectionPromise;
            if (this.mode === "slave" && this.driver.isReplicated) {
                this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    const onErrorCallback = () => this.release();
                    this.releaseCallback = () => {
                        this.databaseConnection.removeListener("error", onErrorCallback);
                        release();
                    };
                    this.databaseConnection.on("error", onErrorCallback);
                    return this.databaseConnection;
                });
            }
            else { // master
                this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    const onErrorCallback = () => this.release();
                    this.releaseCallback = () => {
                        this.databaseConnection.removeListener("error", onErrorCallback);
                        release();
                    };
                    this.databaseConnection.on("error", onErrorCallback);
                    return this.databaseConnection;
                });
            }
            return this.databaseConnectionPromise;
        }
        /**
         * Releases used database connection.
         * You cannot use query runner methods once its released.
         */
        release() {
            if (this.isReleased) {
                return Promise.resolve();
            }
            this.isReleased = true;
            if (this.releaseCallback)
                this.releaseCallback();
            const index = this.driver.connectedQueryRunners.indexOf(this);
            if (index !== -1)
                this.driver.connectedQueryRunners.splice(index);
            return Promise.resolve();
        }
        /**
         * Starts transaction.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_8.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            await this.query("START TRANSACTION");
            if (isolationLevel) {
                await this.query("SET TRANSACTION ISOLATION LEVEL " + isolationLevel);
            }
            const afterBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_8.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("COMMIT");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_8.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.query("ROLLBACK");
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_15.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_9.QueryRunnerAlreadyReleasedError();
            const databaseConnection = await this.connect();
            this.driver.connection.logger.logQuery(query, parameters, this);
            try {
                const queryStartTime = +new Date();
                const result = await databaseConnection.query(query, parameters);
                // log slow queries if maxQueryExecution time is set
                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                const queryEndTime = +new Date();
                const queryExecutionTime = queryEndTime - queryStartTime;
                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                switch (result.command) {
                    case "DELETE":
                    case "UPDATE":
                        // for UPDATE and DELETE query additionally return number of affected rows
                        return [result.rows, result.rowCount];
                        break;
                    default:
                        return result.rows;
                }
            }
            catch (err) {
                this.driver.connection.logger.logQueryError(err, query, parameters, this);
                throw new QueryFailedError_7.QueryFailedError(query, parameters, err);
            }
        }
        /**
         * Returns raw data stream.
         */
        stream(query, parameters, onEnd, onError) {
            const QueryStream = this.driver.loadStreamDependency();
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_9.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                try {
                    const databaseConnection = await this.connect();
                    this.driver.connection.logger.logQuery(query, parameters, this);
                    const stream = databaseConnection.query(new QueryStream(query, parameters));
                    if (onEnd)
                        stream.on("end", onEnd);
                    if (onError)
                        stream.on("error", onError);
                    ok(stream);
                }
                catch (err) {
                    fail(err);
                }
            });
        }
        /**
         * Returns all available database names including system databases.
         */
        async getDatabases() {
            return Promise.resolve([]);
        }
        /**
         * Returns all available schema names including system schemas.
         * If database parameter specified, returns schemas of that database.
         */
        async getSchemas(database) {
            return Promise.resolve([]);
        }
        /**
         * Checks if database with the given name exist.
         */
        async hasDatabase(database) {
            return Promise.resolve(false);
        }
        /**
         * Checks if schema with the given name exist.
         */
        async hasSchema(schema) {
            const result = await this.query(`SELECT * FROM "information_schema"."schemata" WHERE "schema_name" = '${schema}'`);
            return result.length ? true : false;
        }
        /**
         * Checks if table with the given name exist in the database.
         */
        async hasTable(tableOrName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "information_schema"."tables" WHERE "table_schema" = ${parsedTableName.schema} AND "table_name" = ${parsedTableName.tableName}`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Checks if column with the given name exist in the given table.
         */
        async hasColumn(tableOrName, columnName) {
            const parsedTableName = this.parseTableName(tableOrName);
            const sql = `SELECT * FROM "information_schema"."columns" WHERE "table_schema" = ${parsedTableName.schema} AND "table_name" = ${parsedTableName.tableName} AND "column_name" = '${columnName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Creates a new database.
         * Postgres does not supports database creation inside a transaction block.
         */
        async createDatabase(database, ifNotExist) {
            await Promise.resolve();
        }
        /**
         * Drops database.
         * Postgres does not supports database drop inside a transaction block.
         */
        async dropDatabase(database, ifExist) {
            return Promise.resolve();
        }
        /**
         * Creates a new table schema.
         */
        async createSchema(schema, ifNotExist) {
            const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS "${schema}"` : `CREATE SCHEMA "${schema}"`;
            const down = `DROP SCHEMA "${schema}" CASCADE`;
            await this.executeQueries(new Query_9.Query(up), new Query_9.Query(down));
        }
        /**
         * Drops table schema.
         */
        async dropSchema(schemaPath, ifExist, isCascade) {
            const schema = schemaPath.indexOf(".") === -1 ? schemaPath : schemaPath.split(".")[0];
            const up = ifExist ? `DROP SCHEMA IF EXISTS "${schema}" ${isCascade ? "CASCADE" : ""}` : `DROP SCHEMA "${schema}" ${isCascade ? "CASCADE" : ""}`;
            const down = `CREATE SCHEMA "${schema}"`;
            await this.executeQueries(new Query_9.Query(up), new Query_9.Query(down));
        }
        /**
         * Creates a new table.
         */
        async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {
            if (ifNotExist) {
                const isTableExist = await this.hasTable(table);
                if (isTableExist)
                    return Promise.resolve();
            }
            const upQueries = [];
            const downQueries = [];
            // if table have column with ENUM type, we must create this type in postgres.
            await Promise.all(table.columns
                .filter(column => column.type === "enum" || column.type === "simple-enum")
                .map(async (column) => {
                const hasEnum = await this.hasEnumType(table, column);
                // TODO: Should also check if values of existing type matches expected ones
                if (!hasEnum) {
                    upQueries.push(this.createEnumTypeSql(table, column));
                    downQueries.push(this.dropEnumTypeSql(table, column));
                }
                return Promise.resolve();
            }));
            upQueries.push(this.createTableSql(table, createForeignKeys));
            downQueries.push(this.dropTableSql(table));
            // if createForeignKeys is true, we must drop created foreign keys in down query.
            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.
            if (createForeignKeys)
                table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));
            if (createIndices) {
                table.indices.forEach(index => {
                    // new index may be passed without name. In this case we generate index name manually.
                    if (!index.name)
                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
                    upQueries.push(this.createIndexSql(table, index));
                    downQueries.push(this.dropIndexSql(table, index));
                });
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the table.
         */
        async dropTable(target, ifExist, dropForeignKeys = true, dropIndices = true) {
            // to perform drop queries for foreign keys and indices.
            if (ifExist) {
                const isTableExist = await this.hasTable(target);
                if (!isTableExist)
                    return Promise.resolve();
            }
            // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.
            const createForeignKeys = dropForeignKeys;
            const tableName = target instanceof Table_9.Table ? target.name : target;
            const table = await this.getCachedTable(tableName);
            const upQueries = [];
            const downQueries = [];
            if (dropIndices) {
                table.indices.forEach(index => {
                    upQueries.push(this.dropIndexSql(table, index));
                    downQueries.push(this.createIndexSql(table, index));
                });
            }
            if (dropForeignKeys)
                table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));
            upQueries.push(this.dropTableSql(table));
            downQueries.push(this.createTableSql(table, createForeignKeys));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new view.
         */
        async createView(view) {
            const upQueries = [];
            const downQueries = [];
            upQueries.push(this.createViewSql(view));
            upQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.dropViewSql(view));
            downQueries.push(await this.deleteViewDefinitionSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Drops the view.
         */
        async dropView(target) {
            const viewName = target instanceof View_9.View ? target.name : target;
            const view = await this.getCachedView(viewName);
            const upQueries = [];
            const downQueries = [];
            upQueries.push(await this.deleteViewDefinitionSql(view));
            upQueries.push(this.dropViewSql(view));
            downQueries.push(await this.insertViewDefinitionSql(view));
            downQueries.push(this.createViewSql(view));
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Renames the given table.
         */
        async renameTable(oldTableOrName, newTableName) {
            const upQueries = [];
            const downQueries = [];
            const oldTable = oldTableOrName instanceof Table_9.Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);
            const newTable = oldTable.clone();
            const oldTableName = oldTable.name.indexOf(".") === -1 ? oldTable.name : oldTable.name.split(".")[1];
            const schemaName = oldTable.name.indexOf(".") === -1 ? undefined : oldTable.name.split(".")[0];
            newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;
            upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO "${newTableName}"`));
            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO "${oldTableName}"`));
            // rename column primary key constraint
            if (newTable.primaryColumns.length > 0) {
                const columnNames = newTable.primaryColumns.map(column => column.name);
                const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);
                const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
            }
            // rename unique constraints
            newTable.uniques.forEach(unique => {
                // build new constraint name
                const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);
                // build queries
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                // replace constraint name
                unique.name = newUniqueName;
            });
            // rename index constraints
            newTable.indices.forEach(index => {
                // build new constraint name
                const schema = this.extractSchema(newTable);
                const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);
                // build queries
                const up = schema ? `ALTER INDEX "${schema}"."${index.name}" RENAME TO "${newIndexName}"` : `ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`;
                const down = schema ? `ALTER INDEX "${schema}"."${newIndexName}" RENAME TO "${index.name}"` : `ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`;
                upQueries.push(new Query_9.Query(up));
                downQueries.push(new Query_9.Query(down));
                // replace constraint name
                index.name = newIndexName;
            });
            // rename foreign key constraints
            newTable.foreignKeys.forEach(foreignKey => {
                // build new constraint name
                const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                // build queries
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                // replace constraint name
                foreignKey.name = newForeignKeyName;
            });
            // rename ENUM types
            const enumColumns = newTable.columns.filter(column => column.type === "enum" || column.type === "simple-enum");
            for (let column of enumColumns) {
                const oldEnumType = await this.getEnumTypeName(oldTable, column);
                upQueries.push(new Query_9.Query(`ALTER TYPE "${oldEnumType.enumTypeSchema}"."${oldEnumType.enumTypeName}" RENAME TO ${this.buildEnumName(newTable, column, false)}`));
                downQueries.push(new Query_9.Query(`ALTER TYPE ${this.buildEnumName(newTable, column)} RENAME TO "${oldEnumType.enumTypeName}"`));
            }
            await this.executeQueries(upQueries, downQueries);
        }
        /**
         * Creates a new column from the column in the table.
         */
        async addColumn(tableOrName, column) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            if (column.type === "enum" || column.type === "simple-enum") {
                const hasEnum = await this.hasEnumType(table, column);
                if (!hasEnum) {
                    upQueries.push(this.createEnumTypeSql(table, column));
                    downQueries.push(this.dropEnumTypeSql(table, column));
                }
            }
            upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));
            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            // create or update primary key constraint
            if (column.isPrimary) {
                const primaryColumns = clonedTable.primaryColumns;
                // if table already have primary key, me must drop it and recreate again
                if (primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                    const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                }
                primaryColumns.push(column);
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            }
            // create column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                upQueries.push(this.createIndexSql(table, columnIndex));
                downQueries.push(this.dropIndexSql(table, columnIndex));
            }
            // create unique constraint
            if (column.isUnique) {
                const uniqueConstraint = new TableUnique_9.TableUnique({
                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                    columnNames: [column.name]
                });
                clonedTable.uniques.push(uniqueConstraint);
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${column.name}")`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
            }
            // create column's comment
            if (column.comment) {
                upQueries.push(new Query_9.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${column.name}" IS ${this.escapeComment(column.comment)}`));
                downQueries.push(new Query_9.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${column.name}" IS ${this.escapeComment(column.comment)}`));
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.addColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Creates a new columns from the column in the table.
         */
        async addColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.addColumn(tableOrName, column);
            }
        }
        /**
         * Renames column in the given table.
         */
        async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const oldColumn = oldTableColumnOrName instanceof TableColumn_10.TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            let newColumn;
            if (newTableColumnOrName instanceof TableColumn_10.TableColumn) {
                newColumn = newTableColumnOrName;
            }
            else {
                newColumn = oldColumn.clone();
                newColumn.name = newTableColumnOrName;
            }
            return this.changeColumn(table, oldColumn, newColumn);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            let clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            const oldColumn = oldTableColumnOrName instanceof TableColumn_10.TableColumn
                ? oldTableColumnOrName
                : table.columns.find(column => column.name === oldTableColumnOrName);
            if (!oldColumn)
                throw new Error(`Column "${oldTableColumnOrName}" was not found in the "${table.name}" table.`);
            if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {
                // To avoid data conversion, we just recreate column
                await this.dropColumn(table, oldColumn);
                await this.addColumn(table, newColumn);
                // update cloned table
                clonedTable = table.clone();
            }
            else {
                if (oldColumn.name !== newColumn.name) {
                    // rename column
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN "${oldColumn.name}" TO "${newColumn.name}"`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN "${newColumn.name}" TO "${oldColumn.name}"`));
                    // rename ENUM type
                    if (oldColumn.type === "enum" || oldColumn.type === "simple-enum") {
                        const oldEnumType = await this.getEnumTypeName(table, oldColumn);
                        upQueries.push(new Query_9.Query(`ALTER TYPE "${oldEnumType.enumTypeSchema}"."${oldEnumType.enumTypeName}" RENAME TO ${this.buildEnumName(table, newColumn, false)}`));
                        downQueries.push(new Query_9.Query(`ALTER TYPE ${this.buildEnumName(table, newColumn)} RENAME TO "${oldEnumType.enumTypeName}"`));
                    }
                    // rename column primary key constraint
                    if (oldColumn.isPrimary === true) {
                        const primaryColumns = clonedTable.primaryColumns;
                        // build old primary constraint name
                        const columnNames = primaryColumns.map(column => column.name);
                        const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        // replace old column name with new column name
                        columnNames.splice(columnNames.indexOf(oldColumn.name), 1);
                        columnNames.push(newColumn.name);
                        // build new primary constraint name
                        const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${oldPkName}" TO "${newPkName}"`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newPkName}" TO "${oldPkName}"`));
                    }
                    // rename column sequence
                    if (oldColumn.isGenerated === true && newColumn.generationStrategy === "increment") {
                        const schema = this.extractSchema(table);
                        // building sequence name. Sequence without schema needed because it must be supplied in RENAME TO without
                        // schema name, but schema needed in ALTER SEQUENCE argument.
                        const seqName = this.buildSequenceName(table, oldColumn.name, undefined, true, true);
                        const newSeqName = this.buildSequenceName(table, newColumn.name, undefined, true, true);
                        const up = schema ? `ALTER SEQUENCE "${schema}"."${seqName}" RENAME TO "${newSeqName}"` : `ALTER SEQUENCE "${seqName}" RENAME TO "${newSeqName}"`;
                        const down = schema ? `ALTER SEQUENCE "${schema}"."${newSeqName}" RENAME TO "${seqName}"` : `ALTER SEQUENCE "${newSeqName}" RENAME TO "${seqName}"`;
                        upQueries.push(new Query_9.Query(up));
                        downQueries.push(new Query_9.Query(down));
                    }
                    // rename unique constraints
                    clonedTable.findColumnUniques(oldColumn).forEach(unique => {
                        // build new constraint name
                        unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);
                        unique.columnNames.push(newColumn.name);
                        const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);
                        // build queries
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${unique.name}" TO "${newUniqueName}"`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newUniqueName}" TO "${unique.name}"`));
                        // replace constraint name
                        unique.name = newUniqueName;
                    });
                    // rename index constraints
                    clonedTable.findColumnIndices(oldColumn).forEach(index => {
                        // build new constraint name
                        index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);
                        index.columnNames.push(newColumn.name);
                        const schema = this.extractSchema(table);
                        const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);
                        // build queries
                        const up = schema ? `ALTER INDEX "${schema}"."${index.name}" RENAME TO "${newIndexName}"` : `ALTER INDEX "${index.name}" RENAME TO "${newIndexName}"`;
                        const down = schema ? `ALTER INDEX "${schema}"."${newIndexName}" RENAME TO "${index.name}"` : `ALTER INDEX "${newIndexName}" RENAME TO "${index.name}"`;
                        upQueries.push(new Query_9.Query(up));
                        downQueries.push(new Query_9.Query(down));
                        // replace constraint name
                        index.name = newIndexName;
                    });
                    // rename foreign key constraints
                    clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {
                        // build new constraint name
                        foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);
                        foreignKey.columnNames.push(newColumn.name);
                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
                        // build queries
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${foreignKey.name}" TO "${newForeignKeyName}"`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT "${newForeignKeyName}" TO "${foreignKey.name}"`));
                        // replace constraint name
                        foreignKey.name = newForeignKeyName;
                    });
                    // rename old column in the Table object
                    const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);
                    clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;
                    oldColumn.name = newColumn.name;
                }
                if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(newColumn)}`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(oldColumn)}`));
                }
                if ((newColumn.type === "enum" || newColumn.type === "simple-enum")
                    && (oldColumn.type === "enum" || oldColumn.type === "simple-enum")
                    && !OrmUtils_27.OrmUtils.isArraysEqual(newColumn.enum, oldColumn.enum)) {
                    const enumName = this.buildEnumName(table, newColumn);
                    const arraySuffix = newColumn.isArray ? "[]" : "";
                    const oldEnumName = this.buildEnumName(table, newColumn, true, false, true);
                    const oldEnumNameWithoutSchema = this.buildEnumName(table, newColumn, false, false, true);
                    const enumTypeBeforeColumnChange = await this.getEnumTypeName(table, oldColumn);
                    // rename old ENUM
                    upQueries.push(new Query_9.Query(`ALTER TYPE "${enumTypeBeforeColumnChange.enumTypeSchema}"."${enumTypeBeforeColumnChange.enumTypeName}" RENAME TO ${oldEnumNameWithoutSchema}`));
                    downQueries.push(new Query_9.Query(`ALTER TYPE ${oldEnumName} RENAME TO  "${enumTypeBeforeColumnChange.enumTypeName}"`));
                    // create new ENUM
                    upQueries.push(this.createEnumTypeSql(table, newColumn));
                    downQueries.push(this.dropEnumTypeSql(table, oldColumn));
                    // if column have default value, we must drop it to avoid issues with type casting
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${newColumn.default}`));
                    }
                    // build column types
                    const upType = `${enumName}${arraySuffix} USING "${newColumn.name}"::"text"::${enumName}${arraySuffix}`;
                    const downType = `${oldEnumName}${arraySuffix} USING "${newColumn.name}"::"text"::${oldEnumName}${arraySuffix}`;
                    // update column to use new type
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${upType}`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${downType}`));
                    // if column have default value and we dropped it before, we must bring it back
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${newColumn.default}`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                    }
                    // remove old ENUM
                    upQueries.push(this.dropEnumTypeSql(table, newColumn, oldEnumName));
                    downQueries.push(this.createEnumTypeSql(table, oldColumn, oldEnumName));
                }
                if (oldColumn.isNullable !== newColumn.isNullable) {
                    if (newColumn.isNullable) {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" DROP NOT NULL`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" SET NOT NULL`));
                    }
                    else {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" SET NOT NULL`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${oldColumn.name}" DROP NOT NULL`));
                    }
                }
                if (oldColumn.comment !== newColumn.comment) {
                    upQueries.push(new Query_9.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${oldColumn.name}" IS ${this.escapeComment(newColumn.comment)}`));
                    downQueries.push(new Query_9.Query(`COMMENT ON COLUMN ${this.escapePath(table)}."${newColumn.name}" IS ${this.escapeComment(oldColumn.comment)}`));
                }
                if (newColumn.isPrimary !== oldColumn.isPrimary) {
                    const primaryColumns = clonedTable.primaryColumns;
                    // if primary column state changed, we must always drop existed constraint.
                    if (primaryColumns.length > 0) {
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    }
                    if (newColumn.isPrimary === true) {
                        primaryColumns.push(newColumn);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = true;
                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                        const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                    }
                    else {
                        const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);
                        primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);
                        // update column in table
                        const column = clonedTable.columns.find(column => column.name === newColumn.name);
                        column.isPrimary = false;
                        // if we have another primary keys, we must recreate constraint.
                        if (primaryColumns.length > 0) {
                            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                            const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                            upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                        }
                    }
                }
                if (newColumn.isUnique !== oldColumn.isUnique) {
                    if (newColumn.isUnique === true) {
                        const uniqueConstraint = new TableUnique_9.TableUnique({
                            name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),
                            columnNames: [newColumn.name]
                        });
                        clonedTable.uniques.push(uniqueConstraint);
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
                    }
                    else {
                        const uniqueConstraint = clonedTable.uniques.find(unique => {
                            return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);
                        });
                        clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueConstraint.name}"`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE ("${newColumn.name}")`));
                    }
                }
                if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== "uuid") {
                    if (newColumn.isGenerated === true) {
                        upQueries.push(new Query_9.Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}."${newColumn.name}"`));
                        downQueries.push(new Query_9.Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                    }
                    else {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));
                        upQueries.push(new Query_9.Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));
                        downQueries.push(new Query_9.Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}."${newColumn.name}"`));
                    }
                }
                if (newColumn.default !== oldColumn.default) {
                    if (newColumn.default !== null && newColumn.default !== undefined) {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${newColumn.default}`));
                        if (oldColumn.default !== null && oldColumn.default !== undefined) {
                            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${oldColumn.default}`));
                        }
                        else {
                            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        }
                    }
                    else if (oldColumn.default !== null && oldColumn.default !== undefined) {
                        upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" DROP DEFAULT`));
                        downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" SET DEFAULT ${oldColumn.default}`));
                    }
                }
                if ((newColumn.spatialFeatureType || "").toLowerCase() !== (oldColumn.spatialFeatureType || "").toLowerCase() || newColumn.srid !== oldColumn.srid) {
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(newColumn)}`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN "${newColumn.name}" TYPE ${this.driver.createFullType(oldColumn)}`));
                }
            }
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Changes a column in the table.
         */
        async changeColumns(tableOrName, changedColumns) {
            for (const { oldColumn, newColumn } of changedColumns) {
                await this.changeColumn(tableOrName, oldColumn, newColumn);
            }
        }
        /**
         * Drops column in the table.
         */
        async dropColumn(tableOrName, columnOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const column = columnOrName instanceof TableColumn_10.TableColumn ? columnOrName : table.findColumnByName(columnOrName);
            if (!column)
                throw new Error(`Column "${columnOrName}" was not found in table "${table.name}"`);
            const clonedTable = table.clone();
            const upQueries = [];
            const downQueries = [];
            // drop primary key constraint
            if (column.isPrimary) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                // update column in table
                const tableColumn = clonedTable.findColumnByName(column.name);
                tableColumn.isPrimary = false;
                // if primary key have multiple columns, we must recreate it without dropped column
                if (clonedTable.primaryColumns.length > 0) {
                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));
                    const columnNames = clonedTable.primaryColumns.map(primaryColumn => `"${primaryColumn.name}"`).join(", ");
                    upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNames})`));
                    downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT "${pkName}"`));
                }
            }
            // drop column index
            const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);
            if (columnIndex) {
                clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);
                upQueries.push(this.dropIndexSql(table, columnIndex));
                downQueries.push(this.createIndexSql(table, columnIndex));
            }
            // drop column check
            const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);
            if (columnCheck) {
                clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);
                upQueries.push(this.dropCheckConstraintSql(table, columnCheck));
                downQueries.push(this.createCheckConstraintSql(table, columnCheck));
            }
            // drop column unique
            const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
            if (columnUnique) {
                clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);
                upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));
                downQueries.push(this.createUniqueConstraintSql(table, columnUnique));
            }
            upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN "${column.name}"`));
            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));
            // drop enum type
            if (column.type === "enum" || column.type === "simple-enum") {
                const hasEnum = await this.hasEnumType(table, column);
                if (hasEnum) {
                    const enumType = await this.getEnumTypeName(table, column);
                    const escapedEnumName = `"${enumType.enumTypeSchema}"."${enumType.enumTypeName}"`;
                    upQueries.push(this.dropEnumTypeSql(table, column, escapedEnumName));
                    downQueries.push(this.createEnumTypeSql(table, column, escapedEnumName));
                }
            }
            await this.executeQueries(upQueries, downQueries);
            clonedTable.removeColumn(column);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops the columns in the table.
         */
        async dropColumns(tableOrName, columns) {
            for (const column of columns) {
                await this.dropColumn(tableOrName, column);
            }
        }
        /**
         * Creates a new primary key.
         */
        async createPrimaryKey(tableOrName, columnNames) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const up = this.createPrimaryKeySql(table, columnNames);
            // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.
            clonedTable.columns.forEach(column => {
                if (columnNames.find(columnName => columnName === column.name))
                    column.isPrimary = true;
            });
            const down = this.dropPrimaryKeySql(clonedTable);
            await this.executeQueries(up, down);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Updates composite primary keys.
         */
        async updatePrimaryKeys(tableOrName, columns) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const clonedTable = table.clone();
            const columnNames = columns.map(column => column.name);
            const upQueries = [];
            const downQueries = [];
            // if table already have primary columns, we must drop them.
            const primaryColumns = clonedTable.primaryColumns;
            if (primaryColumns.length > 0) {
                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));
                const columnNamesString = primaryColumns.map(column => `"${column.name}"`).join(", ");
                upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
                downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            }
            // update columns in table.
            clonedTable.columns
                .filter(column => columnNames.indexOf(column.name) !== -1)
                .forEach(column => column.isPrimary = true);
            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            upQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${pkName}" PRIMARY KEY (${columnNamesString})`));
            downQueries.push(new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${pkName}"`));
            await this.executeQueries(upQueries, downQueries);
            this.replaceCachedTable(table, clonedTable);
        }
        /**
         * Drops a primary key.
         */
        async dropPrimaryKey(tableOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const up = this.dropPrimaryKeySql(table);
            const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));
            await this.executeQueries(up, down);
            table.primaryColumns.forEach(column => {
                column.isPrimary = false;
            });
        }
        /**
         * Creates new unique constraint.
         */
        async createUniqueConstraint(tableOrName, uniqueConstraint) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!uniqueConstraint.name)
                uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);
            const up = this.createUniqueConstraintSql(table, uniqueConstraint);
            const down = this.dropUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.addUniqueConstraint(uniqueConstraint);
        }
        /**
         * Creates new unique constraints.
         */
        async createUniqueConstraints(tableOrName, uniqueConstraints) {
            for (const uniqueConstraint of uniqueConstraints) {
                await this.createUniqueConstraint(tableOrName, uniqueConstraint);
            }
        }
        /**
         * Drops unique constraint.
         */
        async dropUniqueConstraint(tableOrName, uniqueOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const uniqueConstraint = uniqueOrName instanceof TableUnique_9.TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);
            if (!uniqueConstraint)
                throw new Error(`Supplied unique constraint was not found in table ${table.name}`);
            const up = this.dropUniqueConstraintSql(table, uniqueConstraint);
            const down = this.createUniqueConstraintSql(table, uniqueConstraint);
            await this.executeQueries(up, down);
            table.removeUniqueConstraint(uniqueConstraint);
        }
        /**
         * Drops unique constraints.
         */
        async dropUniqueConstraints(tableOrName, uniqueConstraints) {
            for (const uniqueConstraint of uniqueConstraints) {
                await this.dropUniqueConstraint(tableOrName, uniqueConstraint);
            }
        }
        /**
         * Creates new check constraint.
         */
        async createCheckConstraint(tableOrName, checkConstraint) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!checkConstraint.name)
                checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);
            const up = this.createCheckConstraintSql(table, checkConstraint);
            const down = this.dropCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.addCheckConstraint(checkConstraint);
        }
        /**
         * Creates new check constraints.
         */
        async createCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops check constraint.
         */
        async dropCheckConstraint(tableOrName, checkOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const checkConstraint = checkOrName instanceof TableCheck_7.TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);
            if (!checkConstraint)
                throw new Error(`Supplied check constraint was not found in table ${table.name}`);
            const up = this.dropCheckConstraintSql(table, checkConstraint);
            const down = this.createCheckConstraintSql(table, checkConstraint);
            await this.executeQueries(up, down);
            table.removeCheckConstraint(checkConstraint);
        }
        /**
         * Drops check constraints.
         */
        async dropCheckConstraints(tableOrName, checkConstraints) {
            const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates new exclusion constraint.
         */
        async createExclusionConstraint(tableOrName, exclusionConstraint) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new unique constraint may be passed without name. In this case we generate unique name manually.
            if (!exclusionConstraint.name)
                exclusionConstraint.name = this.connection.namingStrategy.exclusionConstraintName(table.name, exclusionConstraint.expression);
            const up = this.createExclusionConstraintSql(table, exclusionConstraint);
            const down = this.dropExclusionConstraintSql(table, exclusionConstraint);
            await this.executeQueries(up, down);
            table.addExclusionConstraint(exclusionConstraint);
        }
        /**
         * Creates new exclusion constraints.
         */
        async createExclusionConstraints(tableOrName, exclusionConstraints) {
            const promises = exclusionConstraints.map(exclusionConstraint => this.createExclusionConstraint(tableOrName, exclusionConstraint));
            await Promise.all(promises);
        }
        /**
         * Drops exclusion constraint.
         */
        async dropExclusionConstraint(tableOrName, exclusionOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const exclusionConstraint = exclusionOrName instanceof TableExclusion_3.TableExclusion ? exclusionOrName : table.exclusions.find(c => c.name === exclusionOrName);
            if (!exclusionConstraint)
                throw new Error(`Supplied exclusion constraint was not found in table ${table.name}`);
            const up = this.dropExclusionConstraintSql(table, exclusionConstraint);
            const down = this.createExclusionConstraintSql(table, exclusionConstraint);
            await this.executeQueries(up, down);
            table.removeExclusionConstraint(exclusionConstraint);
        }
        /**
         * Drops exclusion constraints.
         */
        async dropExclusionConstraints(tableOrName, exclusionConstraints) {
            const promises = exclusionConstraints.map(exclusionConstraint => this.dropExclusionConstraint(tableOrName, exclusionConstraint));
            await Promise.all(promises);
        }
        /**
         * Creates a new foreign key.
         */
        async createForeignKey(tableOrName, foreignKey) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new FK may be passed without name. In this case we generate FK name manually.
            if (!foreignKey.name)
                foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);
            const up = this.createForeignKeySql(table, foreignKey);
            const down = this.dropForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.addForeignKey(foreignKey);
        }
        /**
         * Creates a new foreign keys.
         */
        async createForeignKeys(tableOrName, foreignKeys) {
            for (const foreignKey of foreignKeys) {
                await this.createForeignKey(tableOrName, foreignKey);
            }
        }
        /**
         * Drops a foreign key from the table.
         */
        async dropForeignKey(tableOrName, foreignKeyOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const foreignKey = foreignKeyOrName instanceof TableForeignKey_9.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);
            if (!foreignKey)
                throw new Error(`Supplied foreign key was not found in table ${table.name}`);
            const up = this.dropForeignKeySql(table, foreignKey);
            const down = this.createForeignKeySql(table, foreignKey);
            await this.executeQueries(up, down);
            table.removeForeignKey(foreignKey);
        }
        /**
         * Drops a foreign keys from the table.
         */
        async dropForeignKeys(tableOrName, foreignKeys) {
            for (const foreignKey of foreignKeys) {
                await this.dropForeignKey(tableOrName, foreignKey);
            }
        }
        /**
         * Creates a new index.
         */
        async createIndex(tableOrName, index) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            // new index may be passed without name. In this case we generate index name manually.
            if (!index.name)
                index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);
            const up = this.createIndexSql(table, index);
            const down = this.dropIndexSql(table, index);
            await this.executeQueries(up, down);
            table.addIndex(index);
        }
        /**
         * Creates a new indices
         */
        async createIndices(tableOrName, indices) {
            for (const index of indices) {
                await this.createIndex(tableOrName, index);
            }
        }
        /**
         * Drops an index from the table.
         */
        async dropIndex(tableOrName, indexOrName) {
            const table = tableOrName instanceof Table_9.Table ? tableOrName : await this.getCachedTable(tableOrName);
            const index = indexOrName instanceof TableIndex_9.TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);
            if (!index)
                throw new Error(`Supplied index was not found in table ${table.name}`);
            const up = this.dropIndexSql(table, index);
            const down = this.createIndexSql(table, index);
            await this.executeQueries(up, down);
            table.removeIndex(index);
        }
        /**
         * Drops an indices from the table.
         */
        async dropIndices(tableOrName, indices) {
            for (const index of indices) {
                await this.dropIndex(tableOrName, index);
            }
        }
        /**
         * Clears all table contents.
         * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.
         */
        async clearTable(tableName) {
            await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);
        }
        /**
         * Removes all tables from the currently connected database.
         */
        async clearDatabase() {
            const schemas = [];
            this.connection.entityMetadatas
                .filter(metadata => metadata.schema)
                .forEach(metadata => {
                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);
                if (!isSchemaExist)
                    schemas.push(metadata.schema);
            });
            schemas.push(this.driver.options.schema || "current_schema()");
            const schemaNamesString = schemas.map(name => {
                return name === "current_schema()" ? name : "'" + name + "'";
            }).join(", ");
            await this.startTransaction();
            try {
                const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS "' || schemaname || '"."' || viewname || '" CASCADE;' as "query" ` +
                    `FROM "pg_views" WHERE "schemaname" IN (${schemaNamesString}) AND "viewname" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;
                const dropViewQueries = await this.query(selectViewDropsQuery);
                await Promise.all(dropViewQueries.map(q => this.query(q["query"])));
                // ignore spatial_ref_sys; it's a special table supporting PostGIS
                // TODO generalize this as this.driver.ignoreTables
                const selectTableDropsQuery = `SELECT 'DROP TABLE IF EXISTS "' || schemaname || '"."' || tablename || '" CASCADE;' as "query" FROM "pg_tables" WHERE "schemaname" IN (${schemaNamesString}) AND "tablename" NOT IN ('spatial_ref_sys')`;
                const dropTableQueries = await this.query(selectTableDropsQuery);
                await Promise.all(dropTableQueries.map(q => this.query(q["query"])));
                await this.dropEnumTypes(schemaNamesString);
                await this.commitTransaction();
            }
            catch (error) {
                try { // we throw original error even if rollback thrown an error
                    await this.rollbackTransaction();
                }
                catch (rollbackError) { }
                throw error;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        async loadViews(viewNames) {
            const hasTable = await this.hasTable(this.getTypeormMetadataTableName());
            if (!hasTable)
                return Promise.resolve([]);
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const viewsCondition = viewNames.map(viewName => {
                let [schema, name] = viewName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("t"."schema" = '${schema}' AND "t"."name" = '${name}')`;
            }).join(" OR ");
            const query = `SELECT "t".*, "v"."check_option" FROM ${this.escapePath(this.getTypeormMetadataTableName())} "t" ` +
                `INNER JOIN "information_schema"."views" "v" ON "v"."table_schema" = "t"."schema" AND "v"."table_name" = "t"."name" WHERE "t"."type" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : ""}`;
            const dbViews = await this.query(query);
            return dbViews.map((dbView) => {
                const view = new View_9.View();
                const schema = dbView["schema"] === currentSchema && !this.driver.options.schema ? undefined : dbView["schema"];
                view.name = this.driver.buildTableName(dbView["name"], schema);
                view.expression = dbView["value"];
                return view;
            });
        }
        /**
         * Loads all tables (with given names) from the database and creates a Table from them.
         */
        async loadTables(tableNames) {
            // if no tables given then no need to proceed
            if (!tableNames || !tableNames.length)
                return [];
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const tablesCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("table_schema" = '${schema}' AND "table_name" = '${name}')`;
            }).join(" OR ");
            const tablesSql = `SELECT * FROM "information_schema"."tables" WHERE ` + tablesCondition;
            /**
             * Uses standard SQL information_schema.columns table and postgres-specific
             * pg_catalog.pg_attribute table to get column information.
             * @see https://stackoverflow.com/a/19541865
             */
            const columnsSql = `
            SELECT columns.*,
              pg_catalog.col_description(('"' || table_catalog || '"."' || table_schema || '"."' || table_name || '"')::regclass::oid, ordinal_position) AS description,
              ('"' || "udt_schema" || '"."' || "udt_name" || '"')::"regtype" AS "regtype",
              pg_catalog.format_type("col_attr"."atttypid", "col_attr"."atttypmod") AS "format_type"
              FROM "information_schema"."columns"
              LEFT JOIN "pg_catalog"."pg_attribute" AS "col_attr"
              ON "col_attr"."attname" = "columns"."column_name"
              AND "col_attr"."attrelid" = (
                SELECT
                  "cls"."oid" FROM "pg_catalog"."pg_class" AS "cls"
                  LEFT JOIN "pg_catalog"."pg_namespace" AS "ns"
                  ON "ns"."oid" = "cls"."relnamespace"
                WHERE "cls"."relname" = "columns"."table_name"
                AND "ns"."nspname" = "columns"."table_schema"
              )
            WHERE
            ` + tablesCondition;
            const constraintsCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("ns"."nspname" = '${schema}' AND "t"."relname" = '${name}')`;
            }).join(" OR ");
            const constraintsSql = `SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "cnst"."conname" AS "constraint_name", ` +
                `pg_get_constraintdef("cnst"."oid") AS "expression", ` +
                `CASE "cnst"."contype" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS "constraint_type", "a"."attname" AS "column_name" ` +
                `FROM "pg_constraint" "cnst" ` +
                `INNER JOIN "pg_class" "t" ON "t"."oid" = "cnst"."conrelid" ` +
                `INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "cnst"."connamespace" ` +
                `LEFT JOIN "pg_attribute" "a" ON "a"."attrelid" = "cnst"."conrelid" AND "a"."attnum" = ANY ("cnst"."conkey") ` +
                `WHERE "t"."relkind" IN ('r', 'p') AND (${constraintsCondition})`;
            const indicesSql = `SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "i"."relname" AS "constraint_name", "a"."attname" AS "column_name", ` +
                `CASE "ix"."indisunique" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS "is_unique", pg_get_expr("ix"."indpred", "ix"."indrelid") AS "condition", ` +
                `"types"."typname" AS "type_name" ` +
                `FROM "pg_class" "t" ` +
                `INNER JOIN "pg_index" "ix" ON "ix"."indrelid" = "t"."oid" ` +
                `INNER JOIN "pg_attribute" "a" ON "a"."attrelid" = "t"."oid"  AND "a"."attnum" = ANY ("ix"."indkey") ` +
                `INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "t"."relnamespace" ` +
                `INNER JOIN "pg_class" "i" ON "i"."oid" = "ix"."indexrelid" ` +
                `INNER JOIN "pg_type" "types" ON "types"."oid" = "a"."atttypid" ` +
                `LEFT JOIN "pg_constraint" "cnst" ON "cnst"."conname" = "i"."relname" ` +
                `WHERE "t"."relkind" IN ('r', 'p') AND "cnst"."contype" IS NULL AND (${constraintsCondition})`;
            const foreignKeysCondition = tableNames.map(tableName => {
                let [schema, name] = tableName.split(".");
                if (!name) {
                    name = schema;
                    schema = this.driver.options.schema || currentSchema;
                }
                return `("ns"."nspname" = '${schema}' AND "cl"."relname" = '${name}')`;
            }).join(" OR ");
            const hasRelispartitionColumn = await this.hasSupportForPartitionedTables();
            const isPartitionCondition = hasRelispartitionColumn ? ` AND "cl"."relispartition" = 'f'` : "";
            const foreignKeysSql = `SELECT "con"."conname" AS "constraint_name", "con"."nspname" AS "table_schema", "con"."relname" AS "table_name", "att2"."attname" AS "column_name", ` +
                `"ns"."nspname" AS "referenced_table_schema", "cl"."relname" AS "referenced_table_name", "att"."attname" AS "referenced_column_name", "con"."confdeltype" AS "on_delete", ` +
                `"con"."confupdtype" AS "on_update", "con"."condeferrable" AS "deferrable", "con"."condeferred" AS "deferred" ` +
                `FROM ( ` +
                `SELECT UNNEST ("con1"."conkey") AS "parent", UNNEST ("con1"."confkey") AS "child", "con1"."confrelid", "con1"."conrelid", "con1"."conname", "con1"."contype", "ns"."nspname", ` +
                `"cl"."relname", "con1"."condeferrable", ` +
                `CASE WHEN "con1"."condeferred" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, ` +
                `CASE "con1"."confdeltype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confdeltype", ` +
                `CASE "con1"."confupdtype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confupdtype" ` +
                `FROM "pg_class" "cl" ` +
                `INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" ` +
                `INNER JOIN "pg_constraint" "con1" ON "con1"."conrelid" = "cl"."oid" ` +
                `WHERE "con1"."contype" = 'f' AND (${foreignKeysCondition}) ` +
                `) "con" ` +
                `INNER JOIN "pg_attribute" "att" ON "att"."attrelid" = "con"."confrelid" AND "att"."attnum" = "con"."child" ` +
                `INNER JOIN "pg_class" "cl" ON "cl"."oid" = "con"."confrelid" ${isPartitionCondition}` +
                `INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" ` +
                `INNER JOIN "pg_attribute" "att2" ON "att2"."attrelid" = "con"."conrelid" AND "att2"."attnum" = "con"."parent"`;
            const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys] = await Promise.all([
                this.query(tablesSql),
                this.query(columnsSql),
                this.query(constraintsSql),
                this.query(indicesSql),
                this.query(foreignKeysSql),
            ]);
            // if tables were not found in the db, no need to proceed
            if (!dbTables.length)
                return [];
            // create tables for loaded tables
            return Promise.all(dbTables.map(async (dbTable) => {
                const table = new Table_9.Table();
                const getSchemaFromKey = (dbObject, key) => dbObject[key] === currentSchema && !this.driver.options.schema ? undefined : dbObject[key];
                // We do not need to join schema name, when database is by default.
                // In this case we need local variable `tableFullName` for below comparision.
                const schema = getSchemaFromKey(dbTable, "table_schema");
                table.name = this.driver.buildTableName(dbTable["table_name"], schema);
                const tableFullName = this.driver.buildTableName(dbTable["table_name"], dbTable["table_schema"]);
                // create columns from the loaded columns
                table.columns = await Promise.all(dbColumns
                    .filter(dbColumn => this.driver.buildTableName(dbColumn["table_name"], dbColumn["table_schema"]) === tableFullName)
                    .map(async (dbColumn) => {
                    const columnConstraints = dbConstraints.filter(dbConstraint => {
                        return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName && dbConstraint["column_name"] === dbColumn["column_name"];
                    });
                    const tableColumn = new TableColumn_10.TableColumn();
                    tableColumn.name = dbColumn["column_name"];
                    tableColumn.type = dbColumn["regtype"].toLowerCase();
                    if (tableColumn.type === "numeric" || tableColumn.type === "decimal" || tableColumn.type === "float") {
                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property
                        // we set 'undefined' in to unspecified property to avoid changing column on sync
                        if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                            tableColumn.precision = dbColumn["numeric_precision"];
                        }
                        else if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                            tableColumn.precision = undefined;
                        }
                        if (dbColumn["numeric_scale"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn["numeric_scale"])) {
                            tableColumn.scale = dbColumn["numeric_scale"];
                        }
                        else if (dbColumn["numeric_precision"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["numeric_precision"])) {
                            tableColumn.scale = undefined;
                        }
                    }
                    if (dbColumn["data_type"].toLowerCase() === "array") {
                        tableColumn.isArray = true;
                        const type = tableColumn.type.replace("[]", "");
                        tableColumn.type = this.connection.driver.normalizeType({ type: type });
                    }
                    if (tableColumn.type === "interval"
                        || tableColumn.type === "time without time zone"
                        || tableColumn.type === "time with time zone"
                        || tableColumn.type === "timestamp without time zone"
                        || tableColumn.type === "timestamp with time zone") {
                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn["datetime_precision"]) ? dbColumn["datetime_precision"] : undefined;
                    }
                    if (tableColumn.type.indexOf("enum") !== -1) {
                        tableColumn.type = "enum";
                        const sql = `SELECT "e"."enumlabel" AS "value" FROM "pg_enum" "e" ` +
                            `INNER JOIN "pg_type" "t" ON "t"."oid" = "e"."enumtypid" ` +
                            `INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" ` +
                            `WHERE "n"."nspname" = '${dbTable["table_schema"]}' AND "t"."typname" = '${this.buildEnumName(table, tableColumn.name, false, true)}'`;
                        const results = await this.query(sql);
                        tableColumn.enum = results.map(result => result["value"]);
                    }
                    if (tableColumn.type === "geometry") {
                        const geometryColumnSql = `SELECT * FROM (
                        SELECT
                          "f_table_schema" "table_schema",
                          "f_table_name" "table_name",
                          "f_geometry_column" "column_name",
                          "srid",
                          "type"
                        FROM "geometry_columns"
                      ) AS _
                      WHERE (${tablesCondition}) AND "column_name" = '${tableColumn.name}' AND "table_name" = '${dbTable["table_name"]}'`;
                        const results = await this.query(geometryColumnSql);
                        tableColumn.spatialFeatureType = results[0].type;
                        tableColumn.srid = results[0].srid;
                    }
                    if (tableColumn.type === "geography") {
                        const geographyColumnSql = `SELECT * FROM (
                        SELECT
                          "f_table_schema" "table_schema",
                          "f_table_name" "table_name",
                          "f_geography_column" "column_name",
                          "srid",
                          "type"
                        FROM "geography_columns"
                      ) AS _
                      WHERE (${tablesCondition}) AND "column_name" = '${tableColumn.name}' AND "table_name" = '${dbTable["table_name"]}'`;
                        const results = await this.query(geographyColumnSql);
                        tableColumn.spatialFeatureType = results[0].type;
                        tableColumn.srid = results[0].srid;
                    }
                    // check only columns that have length property
                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {
                        let length;
                        if (tableColumn.isArray) {
                            const match = /\((\d+)\)/.exec(dbColumn["format_type"]);
                            length = match ? match[1] : undefined;
                        }
                        else if (dbColumn["character_maximum_length"]) {
                            length = dbColumn["character_maximum_length"].toString();
                        }
                        if (length) {
                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : "";
                        }
                    }
                    tableColumn.isNullable = dbColumn["is_nullable"] === "YES";
                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint["constraint_type"] === "PRIMARY");
                    const uniqueConstraint = columnConstraints.find(constraint => constraint["constraint_type"] === "UNIQUE");
                    const isConstraintComposite = uniqueConstraint
                        ? !!dbConstraints.find(dbConstraint => dbConstraint["constraint_type"] === "UNIQUE"
                            && dbConstraint["constraint_name"] === uniqueConstraint["constraint_name"]
                            && dbConstraint["column_name"] !== dbColumn["column_name"])
                        : false;
                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;
                    if (dbColumn["column_default"] !== null && dbColumn["column_default"] !== undefined) {
                        if (dbColumn["column_default"].replace(/"/gi, "") === `nextval('${this.buildSequenceName(table, dbColumn["column_name"], currentSchema, true)}'::regclass)`) {
                            tableColumn.isGenerated = true;
                            tableColumn.generationStrategy = "increment";
                        }
                        else if (dbColumn["column_default"] === "gen_random_uuid()" || /^uuid_generate_v\d\(\)/.test(dbColumn["column_default"])) {
                            tableColumn.isGenerated = true;
                            tableColumn.generationStrategy = "uuid";
                        }
                        else {
                            tableColumn.default = dbColumn["column_default"].replace(/::.*/, "");
                            tableColumn.default = tableColumn.default.replace(/^(-?\d+)$/, "'$1'");
                        }
                    }
                    tableColumn.comment = dbColumn["description"] ? dbColumn["description"] : undefined;
                    if (dbColumn["character_set_name"])
                        tableColumn.charset = dbColumn["character_set_name"];
                    if (dbColumn["collation_name"])
                        tableColumn.collation = dbColumn["collation_name"];
                    return tableColumn;
                }));
                // find unique constraints of table, group them by constraint name and build TableUnique.
                const tableUniqueConstraints = OrmUtils_27.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "UNIQUE";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.uniques = tableUniqueConstraints.map(constraint => {
                    const uniques = dbConstraints.filter(dbC => dbC["constraint_name"] === constraint["constraint_name"]);
                    return new TableUnique_9.TableUnique({
                        name: constraint["constraint_name"],
                        columnNames: uniques.map(u => u["column_name"])
                    });
                });
                // find check constraints of table, group them by constraint name and build TableCheck.
                const tableCheckConstraints = OrmUtils_27.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "CHECK";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.checks = tableCheckConstraints.map(constraint => {
                    const checks = dbConstraints.filter(dbC => dbC["constraint_name"] === constraint["constraint_name"]);
                    return new TableCheck_7.TableCheck({
                        name: constraint["constraint_name"],
                        columnNames: checks.map(c => c["column_name"]),
                        expression: constraint["expression"].replace(/^\s*CHECK\s*\((.*)\)\s*$/i, "$1")
                    });
                });
                // find exclusion constraints of table, group them by constraint name and build TableExclusion.
                const tableExclusionConstraints = OrmUtils_27.OrmUtils.uniq(dbConstraints.filter(dbConstraint => {
                    return this.driver.buildTableName(dbConstraint["table_name"], dbConstraint["table_schema"]) === tableFullName
                        && dbConstraint["constraint_type"] === "EXCLUDE";
                }), dbConstraint => dbConstraint["constraint_name"]);
                table.exclusions = tableExclusionConstraints.map(constraint => {
                    return new TableExclusion_3.TableExclusion({
                        name: constraint["constraint_name"],
                        expression: constraint["expression"].substring(8) // trim EXCLUDE from start of expression
                    });
                });
                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.
                const tableForeignKeyConstraints = OrmUtils_27.OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {
                    return this.driver.buildTableName(dbForeignKey["table_name"], dbForeignKey["table_schema"]) === tableFullName;
                }), dbForeignKey => dbForeignKey["constraint_name"]);
                table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {
                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk["constraint_name"] === dbForeignKey["constraint_name"]);
                    // if referenced table located in currently used schema, we don't need to concat schema name to table name.
                    const schema = getSchemaFromKey(dbForeignKey, "referenced_table_schema");
                    const referencedTableName = this.driver.buildTableName(dbForeignKey["referenced_table_name"], schema);
                    return new TableForeignKey_9.TableForeignKey({
                        name: dbForeignKey["constraint_name"],
                        columnNames: foreignKeys.map(dbFk => dbFk["column_name"]),
                        referencedTableName: referencedTableName,
                        referencedColumnNames: foreignKeys.map(dbFk => dbFk["referenced_column_name"]),
                        onDelete: dbForeignKey["on_delete"],
                        onUpdate: dbForeignKey["on_update"],
                        deferrable: dbForeignKey["deferrable"] ? dbForeignKey["deferred"] : undefined,
                    });
                });
                // find index constraints of table, group them by constraint name and build TableIndex.
                const tableIndexConstraints = OrmUtils_27.OrmUtils.uniq(dbIndices.filter(dbIndex => {
                    return this.driver.buildTableName(dbIndex["table_name"], dbIndex["table_schema"]) === tableFullName;
                }), dbIndex => dbIndex["constraint_name"]);
                table.indices = tableIndexConstraints.map(constraint => {
                    const indices = dbIndices.filter(index => {
                        return index["table_schema"] === constraint["table_schema"]
                            && index["table_name"] === constraint["table_name"]
                            && index["constraint_name"] === constraint["constraint_name"];
                    });
                    return new TableIndex_9.TableIndex({
                        table: table,
                        name: constraint["constraint_name"],
                        columnNames: indices.map(i => i["column_name"]),
                        isUnique: constraint["is_unique"] === "TRUE",
                        where: constraint["condition"],
                        isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i["type_name"]) >= 0),
                        isFulltext: false
                    });
                });
                return table;
            }));
        }
        /**
         * Builds create table sql.
         */
        createTableSql(table, createForeignKeys) {
            const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(", ");
            let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;
            table.columns
                .filter(column => column.isUnique)
                .forEach(column => {
                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);
                if (!isUniqueExist)
                    table.uniques.push(new TableUnique_9.TableUnique({
                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),
                        columnNames: [column.name]
                    }));
            });
            if (table.uniques.length > 0) {
                const uniquesSql = table.uniques.map(unique => {
                    const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);
                    const columnNames = unique.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    return `CONSTRAINT "${uniqueName}" UNIQUE (${columnNames})`;
                }).join(", ");
                sql += `, ${uniquesSql}`;
            }
            if (table.checks.length > 0) {
                const checksSql = table.checks.map(check => {
                    const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression);
                    return `CONSTRAINT "${checkName}" CHECK (${check.expression})`;
                }).join(", ");
                sql += `, ${checksSql}`;
            }
            if (table.exclusions.length > 0) {
                const exclusionsSql = table.exclusions.map(exclusion => {
                    const exclusionName = exclusion.name ? exclusion.name : this.connection.namingStrategy.exclusionConstraintName(table.name, exclusion.expression);
                    return `CONSTRAINT "${exclusionName}" EXCLUDE ${exclusion.expression}`;
                }).join(", ");
                sql += `, ${exclusionsSql}`;
            }
            if (table.foreignKeys.length > 0 && createForeignKeys) {
                const foreignKeysSql = table.foreignKeys.map(fk => {
                    const columnNames = fk.columnNames.map(columnName => `"${columnName}"`).join(", ");
                    if (!fk.name)
                        fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);
                    const referencedColumnNames = fk.referencedColumnNames.map(columnName => `"${columnName}"`).join(", ");
                    let constraint = `CONSTRAINT "${fk.name}" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;
                    if (fk.onDelete)
                        constraint += ` ON DELETE ${fk.onDelete}`;
                    if (fk.onUpdate)
                        constraint += ` ON UPDATE ${fk.onUpdate}`;
                    if (fk.deferrable)
                        constraint += ` DEFERRABLE ${fk.deferrable}`;
                    return constraint;
                }).join(", ");
                sql += `, ${foreignKeysSql}`;
            }
            const primaryColumns = table.columns.filter(column => column.isPrimary);
            if (primaryColumns.length > 0) {
                const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));
                const columnNames = primaryColumns.map(column => `"${column.name}"`).join(", ");
                sql += `, CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNames})`;
            }
            sql += `)`;
            table.columns
                .filter(it => it.comment)
                .forEach(it => sql += `; COMMENT ON COLUMN ${this.escapePath(table)}."${it.name}" IS ${this.escapeComment(it.comment)}`);
            return new Query_9.Query(sql);
        }
        /**
         * Builds drop table sql.
         */
        dropTableSql(tableOrPath) {
            return new Query_9.Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);
        }
        createViewSql(view) {
            const materializedClause = view.materialized ? "MATERIALIZED " : "";
            const viewName = this.escapePath(view);
            if (typeof view.expression === "string") {
                return new Query_9.Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression}`);
            }
            else {
                return new Query_9.Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression(this.connection).getQuery()}`);
            }
        }
        async insertViewDefinitionSql(view) {
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const splittedName = view.name.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = view.name;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const expression = typeof view.expression === "string" ? view.expression.trim() : view.expression(this.connection).getQuery();
            const [query, parameters] = this.connection.createQueryBuilder()
                .insert()
                .into(this.getTypeormMetadataTableName())
                .values({ type: "VIEW", schema: schema, name: name, value: expression })
                .getQueryAndParameters();
            return new Query_9.Query(query, parameters);
        }
        /**
         * Builds drop view sql.
         */
        dropViewSql(viewOrPath) {
            return new Query_9.Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);
        }
        /**
         * Builds remove view sql.
         */
        async deleteViewDefinitionSql(viewOrPath) {
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            const viewName = viewOrPath instanceof View_9.View ? viewOrPath.name : viewOrPath;
            const splittedName = viewName.split(".");
            let schema = this.driver.options.schema || currentSchema;
            let name = viewName;
            if (splittedName.length === 2) {
                schema = splittedName[0];
                name = splittedName[1];
            }
            const qb = this.connection.createQueryBuilder();
            const [query, parameters] = qb.delete()
                .from(this.getTypeormMetadataTableName())
                .where(`${qb.escape("type")} = 'VIEW'`)
                .andWhere(`${qb.escape("schema")} = :schema`, { schema })
                .andWhere(`${qb.escape("name")} = :name`, { name })
                .getQueryAndParameters();
            return new Query_9.Query(query, parameters);
        }
        /**
         * Extracts schema name from given Table object or table name string.
         */
        extractSchema(target) {
            const tableName = target instanceof Table_9.Table ? target.name : target;
            return tableName.indexOf(".") === -1 ? this.driver.options.schema : tableName.split(".")[0];
        }
        /**
         * Drops ENUM type from given schemas.
         */
        async dropEnumTypes(schemaNames) {
            const selectDropsQuery = `SELECT 'DROP TYPE IF EXISTS "' || n.nspname || '"."' || t.typname || '" CASCADE;' as "query" FROM "pg_type" "t" ` +
                `INNER JOIN "pg_enum" "e" ON "e"."enumtypid" = "t"."oid" ` +
                `INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" ` +
                `WHERE "n"."nspname" IN (${schemaNames}) GROUP BY "n"."nspname", "t"."typname"`;
            const dropQueries = await this.query(selectDropsQuery);
            await Promise.all(dropQueries.map(q => this.query(q["query"])));
        }
        /**
         * Checks if enum with the given name exist in the database.
         */
        async hasEnumType(table, column) {
            const schema = this.parseTableName(table).schema;
            const enumName = this.buildEnumName(table, column, false, true);
            const sql = `SELECT "n"."nspname", "t"."typname" FROM "pg_type" "t" ` +
                `INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" ` +
                `WHERE "n"."nspname" = ${schema} AND "t"."typname" = '${enumName}'`;
            const result = await this.query(sql);
            return result.length ? true : false;
        }
        /**
         * Builds create ENUM type sql.
         */
        createEnumTypeSql(table, column, enumName) {
            if (!enumName)
                enumName = this.buildEnumName(table, column);
            const enumValues = column.enum.map(value => `'${value.replace("'", "''")}'`).join(", ");
            return new Query_9.Query(`CREATE TYPE ${enumName} AS ENUM(${enumValues})`);
        }
        /**
         * Builds create ENUM type sql.
         */
        dropEnumTypeSql(table, column, enumName) {
            if (!enumName)
                enumName = this.buildEnumName(table, column);
            return new Query_9.Query(`DROP TYPE ${enumName}`);
        }
        /**
         * Builds create index sql.
         */
        createIndexSql(table, index) {
            const columns = index.columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_9.Query(`CREATE ${index.isUnique ? "UNIQUE " : ""}INDEX "${index.name}" ON ${this.escapePath(table)} ${index.isSpatial ? "USING GiST " : ""}(${columns}) ${index.where ? "WHERE " + index.where : ""}`);
        }
        /**
         * Builds drop index sql.
         */
        dropIndexSql(table, indexOrName) {
            let indexName = indexOrName instanceof TableIndex_9.TableIndex ? indexOrName.name : indexOrName;
            const schema = this.extractSchema(table);
            return schema ? new Query_9.Query(`DROP INDEX "${schema}"."${indexName}"`) : new Query_9.Query(`DROP INDEX "${indexName}"`);
        }
        /**
         * Builds create primary key sql.
         */
        createPrimaryKeySql(table, columnNames) {
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            const columnNamesString = columnNames.map(columnName => `"${columnName}"`).join(", ");
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${primaryKeyName}" PRIMARY KEY (${columnNamesString})`);
        }
        /**
         * Builds drop primary key sql.
         */
        dropPrimaryKeySql(table) {
            const columnNames = table.primaryColumns.map(column => column.name);
            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${primaryKeyName}"`);
        }
        /**
         * Builds create unique constraint sql.
         */
        createUniqueConstraintSql(table, uniqueConstraint) {
            const columnNames = uniqueConstraint.columnNames.map(column => `"` + column + `"`).join(", ");
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${uniqueConstraint.name}" UNIQUE (${columnNames})`);
        }
        /**
         * Builds drop unique constraint sql.
         */
        dropUniqueConstraintSql(table, uniqueOrName) {
            const uniqueName = uniqueOrName instanceof TableUnique_9.TableUnique ? uniqueOrName.name : uniqueOrName;
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${uniqueName}"`);
        }
        /**
         * Builds create check constraint sql.
         */
        createCheckConstraintSql(table, checkConstraint) {
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${checkConstraint.name}" CHECK (${checkConstraint.expression})`);
        }
        /**
         * Builds drop check constraint sql.
         */
        dropCheckConstraintSql(table, checkOrName) {
            const checkName = checkOrName instanceof TableCheck_7.TableCheck ? checkOrName.name : checkOrName;
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${checkName}"`);
        }
        /**
         * Builds create exclusion constraint sql.
         */
        createExclusionConstraintSql(table, exclusionConstraint) {
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${exclusionConstraint.name}" EXCLUDE ${exclusionConstraint.expression}`);
        }
        /**
         * Builds drop exclusion constraint sql.
         */
        dropExclusionConstraintSql(table, exclusionOrName) {
            const exclusionName = exclusionOrName instanceof TableExclusion_3.TableExclusion ? exclusionOrName.name : exclusionOrName;
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${exclusionName}"`);
        }
        /**
         * Builds create foreign key sql.
         */
        createForeignKeySql(table, foreignKey) {
            const columnNames = foreignKey.columnNames.map(column => `"` + column + `"`).join(", ");
            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `"` + column + `"`).join(",");
            let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT "${foreignKey.name}" FOREIGN KEY (${columnNames}) ` +
                `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;
            if (foreignKey.onDelete)
                sql += ` ON DELETE ${foreignKey.onDelete}`;
            if (foreignKey.onUpdate)
                sql += ` ON UPDATE ${foreignKey.onUpdate}`;
            if (foreignKey.deferrable)
                sql += ` DEFERRABLE ${foreignKey.deferrable}`;
            return new Query_9.Query(sql);
        }
        /**
         * Builds drop foreign key sql.
         */
        dropForeignKeySql(table, foreignKeyOrName) {
            const foreignKeyName = foreignKeyOrName instanceof TableForeignKey_9.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;
            return new Query_9.Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT "${foreignKeyName}"`);
        }
        /**
         * Builds sequence name from given table and column.
         */
        buildSequenceName(table, columnOrName, currentSchema, disableEscape, skipSchema) {
            const columnName = columnOrName instanceof TableColumn_10.TableColumn ? columnOrName.name : columnOrName;
            let schema = undefined;
            let tableName = undefined;
            if (table.name.indexOf(".") === -1) {
                tableName = table.name;
            }
            else {
                schema = table.name.split(".")[0];
                tableName = table.name.split(".")[1];
            }
            let seqName = `${tableName}_${columnName}_seq`;
            if (seqName.length > this.connection.driver.maxAliasLength) // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes
                seqName = `${tableName.substring(0, 29)}_${columnName.substring(0, Math.max(29, 63 - tableName.length - 5))}_seq`;
            if (schema && schema !== currentSchema && !skipSchema) {
                return disableEscape ? `${schema}.${seqName}` : `"${schema}"."${seqName}"`;
            }
            else {
                return disableEscape ? `${seqName}` : `"${seqName}"`;
            }
        }
        /**
         * Builds ENUM type name from given table and column.
         */
        buildEnumName(table, columnOrName, withSchema = true, disableEscape, toOld) {
            /**
             * If enumName is specified in column options then use it instead
             */
            if (columnOrName instanceof TableColumn_10.TableColumn && columnOrName.enumName) {
                let enumName = columnOrName.enumName;
                if (toOld)
                    enumName = enumName + "_old";
                return disableEscape ? enumName : `"${enumName}"`;
            }
            const columnName = columnOrName instanceof TableColumn_10.TableColumn ? columnOrName.name : columnOrName;
            const schema = table.name.indexOf(".") === -1 ? this.driver.options.schema : table.name.split(".")[0];
            const tableName = table.name.indexOf(".") === -1 ? table.name : table.name.split(".")[1];
            let enumName = schema && withSchema ? `${schema}.${tableName}_${columnName.toLowerCase()}_enum` : `${tableName}_${columnName.toLowerCase()}_enum`;
            if (toOld)
                enumName = enumName + "_old";
            return enumName.split(".").map(i => {
                return disableEscape ? i : `"${i}"`;
            }).join(".");
        }
        async getEnumTypeName(table, column) {
            const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);
            const currentSchema = currentSchemaQuery[0]["current_schema"];
            let [schema, name] = table.name.split(".");
            if (!name) {
                name = schema;
                schema = this.driver.options.schema || currentSchema;
            }
            const result = await this.query(`SELECT "udt_schema", "udt_name" ` +
                `FROM "information_schema"."columns" WHERE "table_schema" = '${schema}' AND "table_name" = '${name}' AND "column_name"='${column.name}'`);
            return {
                enumTypeSchema: result[0]["udt_schema"],
                enumTypeName: result[0]["udt_name"]
            };
        }
        /**
         * Escapes a given comment so it's safe to include in a query.
         */
        escapeComment(comment) {
            if (!comment || comment.length === 0) {
                return "NULL";
            }
            comment = comment
                .replace("'", "''")
                .replace("\0", ""); // Null bytes aren't allowed in comments
            return `'${comment}'`;
        }
        /**
         * Escapes given table or view path.
         */
        escapePath(target, disableEscape) {
            let tableName = target instanceof Table_9.Table || target instanceof View_9.View ? target.name : target;
            tableName = tableName.indexOf(".") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;
            return tableName.split(".").map(i => {
                return disableEscape ? i : `"${i}"`;
            }).join(".");
        }
        /**
         * Returns object with table schema and table name.
         */
        parseTableName(target) {
            const tableName = target instanceof Table_9.Table ? target.name : target;
            if (tableName.indexOf(".") === -1) {
                return {
                    schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : "current_schema()",
                    tableName: `'${tableName}'`
                };
            }
            else {
                return {
                    schema: `'${tableName.split(".")[0]}'`,
                    tableName: `'${tableName.split(".")[1]}'`
                };
            }
        }
        /**
         * Builds a query for create column.
         */
        buildCreateColumnSql(table, column) {
            let c = "\"" + column.name + "\"";
            if (column.isGenerated === true && column.generationStrategy !== "uuid") {
                if (column.type === "integer" || column.type === "int" || column.type === "int4")
                    c += " SERIAL";
                if (column.type === "smallint" || column.type === "int2")
                    c += " SMALLSERIAL";
                if (column.type === "bigint" || column.type === "int8")
                    c += " BIGSERIAL";
            }
            if (column.type === "enum" || column.type === "simple-enum") {
                c += " " + this.buildEnumName(table, column);
                if (column.isArray)
                    c += " array";
            }
            else if (!column.isGenerated || column.type === "uuid") {
                c += " " + this.connection.driver.createFullType(column);
            }
            if (column.charset)
                c += " CHARACTER SET \"" + column.charset + "\"";
            if (column.collation)
                c += " COLLATE \"" + column.collation + "\"";
            if (column.isNullable !== true)
                c += " NOT NULL";
            if (column.default !== undefined && column.default !== null)
                c += " DEFAULT " + column.default;
            if (column.isGenerated && column.generationStrategy === "uuid" && !column.default)
                c += ` DEFAULT ${this.driver.uuidGenerator}`;
            return c;
        }
        /**
         * Checks if the PostgreSQL server has support for partitioned tables
         */
        async hasSupportForPartitionedTables() {
            const result = await this.query(`SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'`);
            return result.length ? true : false;
        }
    }
    exports.PostgresQueryRunner = PostgresQueryRunner;
});
define("typeorm/driver/postgres/PostgresDriver", ["require", "exports", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/postgres/PostgresQueryRunner", "typeorm/util/DateUtils", "typeorm/platform/PlatformTools", "typeorm/schema-builder/RdbmsSchemaBuilder", "typeorm/util/OrmUtils", "typeorm/util/ApplyValueTransformers"], function (require, exports, ConnectionIsNotSetError_6, DriverPackageNotInstalledError_9, PostgresQueryRunner_1, DateUtils_9, PlatformTools_12, RdbmsSchemaBuilder_8, OrmUtils_28, ApplyValueTransformers_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PostgresDriver = void 0;
    /**
     * Organizes communication with PostgreSQL DBMS.
     */
    class PostgresDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            /**
             * Pool for slave databases.
             * Used in replication.
             */
            this.slaves = [];
            /**
             * We store all created query runners because we need to release them.
             */
            this.connectedQueryRunners = [];
            /**
             * Indicates if replication is enabled.
             */
            this.isReplicated = false;
            /**
             * Indicates if tree tables are supported by this driver.
             */
            this.treeSupport = true;
            /**
             * Gets list of supported column data types by a driver.
             *
             * @see https://www.tutorialspoint.com/postgresql/postgresql_data_types.htm
             * @see https://www.postgresql.org/docs/9.2/static/datatype.html
             */
            this.supportedDataTypes = [
                "int",
                "int2",
                "int4",
                "int8",
                "smallint",
                "integer",
                "bigint",
                "decimal",
                "numeric",
                "real",
                "float",
                "float4",
                "float8",
                "double precision",
                "money",
                "character varying",
                "varchar",
                "character",
                "char",
                "text",
                "citext",
                "hstore",
                "bytea",
                "bit",
                "varbit",
                "bit varying",
                "timetz",
                "timestamptz",
                "timestamp",
                "timestamp without time zone",
                "timestamp with time zone",
                "date",
                "time",
                "time without time zone",
                "time with time zone",
                "interval",
                "bool",
                "boolean",
                "enum",
                "point",
                "line",
                "lseg",
                "box",
                "path",
                "polygon",
                "circle",
                "cidr",
                "inet",
                "macaddr",
                "tsvector",
                "tsquery",
                "uuid",
                "xml",
                "json",
                "jsonb",
                "int4range",
                "int8range",
                "numrange",
                "tsrange",
                "tstzrange",
                "daterange",
                "geometry",
                "geography",
                "cube",
                "ltree"
            ];
            /**
             * Gets list of spatial column data types.
             */
            this.spatialTypes = [
                "geometry",
                "geography"
            ];
            /**
             * Gets list of column data types that support length by a driver.
             */
            this.withLengthColumnTypes = [
                "character varying",
                "varchar",
                "character",
                "char",
                "bit",
                "varbit",
                "bit varying"
            ];
            /**
             * Gets list of column data types that support precision by a driver.
             */
            this.withPrecisionColumnTypes = [
                "numeric",
                "decimal",
                "interval",
                "time without time zone",
                "time with time zone",
                "timestamp without time zone",
                "timestamp with time zone"
            ];
            /**
             * Gets list of column data types that support scale by a driver.
             */
            this.withScaleColumnTypes = [
                "numeric",
                "decimal"
            ];
            /**
             * Orm has special columns and we need to know what database column types should be for those types.
             * Column types are driver dependant.
             */
            this.mappedDataTypes = {
                createDate: "timestamp",
                createDateDefault: "now()",
                updateDate: "timestamp",
                updateDateDefault: "now()",
                deleteDate: "timestamp",
                deleteDateNullable: true,
                version: "int4",
                treeLevel: "int4",
                migrationId: "int4",
                migrationName: "varchar",
                migrationTimestamp: "int8",
                cacheId: "int4",
                cacheIdentifier: "varchar",
                cacheTime: "int8",
                cacheDuration: "int4",
                cacheQuery: "text",
                cacheResult: "text",
                metadataType: "varchar",
                metadataDatabase: "varchar",
                metadataSchema: "varchar",
                metadataTable: "varchar",
                metadataName: "varchar",
                metadataValue: "text",
            };
            /**
             * Default values of length, precision and scale depends on column data type.
             * Used in the cases when length/precision/scale is not specified by user.
             */
            this.dataTypeDefaults = {
                "character": { length: 1 },
                "bit": { length: 1 },
                "interval": { precision: 6 },
                "time without time zone": { precision: 6 },
                "time with time zone": { precision: 6 },
                "timestamp without time zone": { precision: 6 },
                "timestamp with time zone": { precision: 6 },
            };
            /**
             * Max length allowed by Postgres for aliases.
             * @see https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS
             */
            this.maxAliasLength = 63;
            if (!connection) {
                return;
            }
            this.connection = connection;
            this.options = connection.options;
            this.isReplicated = this.options.replication ? true : false;
            if (this.options.useUTC) {
                process.env.PGTZ = 'UTC';
            }
            // load postgres package
            this.loadDependencies();
            // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way
            // validate options to make sure everything is set
            // todo: revisit validation with replication in mind
            // if (!this.options.host)
            //     throw new DriverOptionNotSetError("host");
            // if (!this.options.username)
            //     throw new DriverOptionNotSetError("username");
            // if (!this.options.database)
            //     throw new DriverOptionNotSetError("database");
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
            if (this.options.replication) {
                this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {
                    return this.createPool(this.options, slave);
                }));
                this.master = await this.createPool(this.options, this.options.replication.master);
                this.database = this.options.replication.master.database;
            }
            else {
                this.master = await this.createPool(this.options, this.options);
                this.database = this.options.database;
            }
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        async afterConnect() {
            const extensionsMetadata = await this.checkMetadataForExtensions();
            if (extensionsMetadata.hasExtensions) {
                await Promise.all([this.master, ...this.slaves].map(pool => {
                    return new Promise((ok, fail) => {
                        pool.connect(async (err, connection, release) => {
                            await this.enableExtensions(extensionsMetadata, connection);
                            if (err)
                                return fail(err);
                            release();
                            ok();
                        });
                    });
                }));
            }
            return Promise.resolve();
        }
        async enableExtensions(extensionsMetadata, connection) {
            const { logger } = this.connection;
            const { hasUuidColumns, hasCitextColumns, hasHstoreColumns, hasCubeColumns, hasGeometryColumns, hasLtreeColumns, hasExclusionConstraints, } = extensionsMetadata;
            if (hasUuidColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "${this.options.uuidExtension || "uuid-ossp"}"`);
                }
                catch (_) {
                    logger.log("warn", `At least one of the entities has uuid column, but the '${this.options.uuidExtension || "uuid-ossp"}' extension cannot be installed automatically. Please install it manually using superuser rights, or select another uuid extension.`);
                }
            if (hasCitextColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "citext"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has citext column, but the 'citext' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
            if (hasHstoreColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "hstore"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has hstore column, but the 'hstore' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
            if (hasGeometryColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "postgis"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has a geometry column, but the 'postgis' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
            if (hasCubeColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "cube"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has a cube column, but the 'cube' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
            if (hasLtreeColumns)
                try {
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "ltree"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has a cube column, but the 'ltree' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
            if (hasExclusionConstraints)
                try {
                    // The btree_gist extension provides operator support in PostgreSQL exclusion constraints
                    await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS "btree_gist"`);
                }
                catch (_) {
                    logger.log("warn", "At least one of the entities has an exclusion constraint, but the 'btree_gist' extension cannot be installed automatically. Please install it manually using superuser rights");
                }
        }
        async checkMetadataForExtensions() {
            const hasUuidColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.generatedColumns.filter(column => column.generationStrategy === "uuid").length > 0;
            });
            const hasCitextColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.columns.filter(column => column.type === "citext").length > 0;
            });
            const hasHstoreColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.columns.filter(column => column.type === "hstore").length > 0;
            });
            const hasCubeColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.columns.filter(column => column.type === "cube").length > 0;
            });
            const hasGeometryColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.columns.filter(column => this.spatialTypes.indexOf(column.type) >= 0).length > 0;
            });
            const hasLtreeColumns = this.connection.entityMetadatas.some(metadata => {
                return metadata.columns.filter(column => column.type === "ltree").length > 0;
            });
            const hasExclusionConstraints = this.connection.entityMetadatas.some(metadata => {
                return metadata.exclusions.length > 0;
            });
            return {
                hasUuidColumns,
                hasCitextColumns,
                hasHstoreColumns,
                hasCubeColumns,
                hasGeometryColumns,
                hasLtreeColumns,
                hasExclusionConstraints,
                hasExtensions: hasUuidColumns || hasCitextColumns || hasHstoreColumns || hasGeometryColumns || hasCubeColumns || hasLtreeColumns || hasExclusionConstraints,
            };
        }
        /**
         * Closes connection with database.
         */
        async disconnect() {
            if (!this.master)
                return Promise.reject(new ConnectionIsNotSetError_6.ConnectionIsNotSetError("postgres"));
            await this.closePool(this.master);
            await Promise.all(this.slaves.map(slave => this.closePool(slave)));
            this.master = undefined;
            this.slaves = [];
        }
        /**
         * Creates a schema builder used to build and sync a schema.
         */
        createSchemaBuilder() {
            return new RdbmsSchemaBuilder_8.RdbmsSchemaBuilder(this.connection);
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new PostgresQueryRunner_1.PostgresQueryRunner(this, mode);
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type and metadata.
         */
        preparePersistentValue(value, columnMetadata) {
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_11.ApplyValueTransformers.transformTo(columnMetadata.transformer, value);
            if (value === null || value === undefined)
                return value;
            if (columnMetadata.type === Boolean) {
                return value === true ? 1 : 0;
            }
            else if (columnMetadata.type === "date") {
                return DateUtils_9.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                return DateUtils_9.DateUtils.mixedDateToTimeString(value);
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp without time zone") {
                return DateUtils_9.DateUtils.mixedDateToDate(value);
            }
            else if (["json", "jsonb", ...this.spatialTypes].indexOf(columnMetadata.type) >= 0) {
                return JSON.stringify(value);
            }
            else if (columnMetadata.type === "hstore") {
                if (typeof value === "string") {
                    return value;
                }
                else {
                    // https://www.postgresql.org/docs/9.0/hstore.html
                    const quoteString = (value) => {
                        // If a string to be quoted is `null` or `undefined`, we return a literal unquoted NULL.
                        // This way, NULL values can be stored in the hstore object.
                        if (value === null || typeof value === "undefined") {
                            return "NULL";
                        }
                        // Convert non-null values to string since HStore only stores strings anyway.
                        // To include a double quote or a backslash in a key or value, escape it with a backslash.
                        return `"${`${value}`.replace(/(?=["\\])/g, "\\")}"`;
                    };
                    return Object.keys(value).map(key => quoteString(key) + "=>" + quoteString(value[key])).join(",");
                }
            }
            else if (columnMetadata.type === "simple-array") {
                return DateUtils_9.DateUtils.simpleArrayToString(value);
            }
            else if (columnMetadata.type === "simple-json") {
                return DateUtils_9.DateUtils.simpleJsonToString(value);
            }
            else if (columnMetadata.type === "cube") {
                if (columnMetadata.isArray) {
                    return `{${value.map((cube) => `"(${cube.join(",")})"`).join(",")}}`;
                }
                return `(${value.join(",")})`;
            }
            else if (columnMetadata.type === "ltree") {
                return value.split(".").filter(Boolean).join(".").replace(/[\s]+/g, "_");
            }
            else if ((columnMetadata.type === "enum"
                || columnMetadata.type === "simple-enum")
                && !columnMetadata.isArray) {
                return "" + value;
            }
            return value;
        }
        /**
         * Prepares given value to a value to be persisted, based on its column type or metadata.
         */
        prepareHydratedValue(value, columnMetadata) {
            if (value === null || value === undefined)
                return columnMetadata.transformer ? ApplyValueTransformers_11.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;
            if (columnMetadata.type === Boolean) {
                value = value ? true : false;
            }
            else if (columnMetadata.type === "datetime"
                || columnMetadata.type === Date
                || columnMetadata.type === "timestamp"
                || columnMetadata.type === "timestamp with time zone"
                || columnMetadata.type === "timestamp without time zone") {
                value = DateUtils_9.DateUtils.normalizeHydratedDate(value);
            }
            else if (columnMetadata.type === "date") {
                value = DateUtils_9.DateUtils.mixedDateToDateString(value);
            }
            else if (columnMetadata.type === "time") {
                value = DateUtils_9.DateUtils.mixedTimeToString(value);
            }
            else if (columnMetadata.type === "hstore") {
                if (columnMetadata.hstoreType === "object") {
                    const unescapeString = (str) => str.replace(/\\./g, (m) => m[1]);
                    const regexp = /"([^"\\]*(?:\\.[^"\\]*)*)"=>(?:(NULL)|"([^"\\]*(?:\\.[^"\\]*)*)")(?:,|$)/g;
                    const object = {};
                    `${value}`.replace(regexp, (_, key, nullValue, stringValue) => {
                        object[unescapeString(key)] = nullValue ? null : unescapeString(stringValue);
                        return "";
                    });
                    return object;
                }
                else {
                    return value;
                }
            }
            else if (columnMetadata.type === "simple-array") {
                value = DateUtils_9.DateUtils.stringToSimpleArray(value);
            }
            else if (columnMetadata.type === "simple-json") {
                value = DateUtils_9.DateUtils.stringToSimpleJson(value);
            }
            else if (columnMetadata.type === "cube") {
                value = value.replace(/[\(\)\s]+/g, ""); // remove whitespace
                if (columnMetadata.isArray) {
                    /**
                     * Strips these groups from `{"1,2,3","",NULL}`:
                     * 1. ["1,2,3", undefined]  <- cube of arity 3
                     * 2. ["", undefined]         <- cube of arity 0
                     * 3. [undefined, "NULL"]     <- NULL
                     */
                    const regexp = /(?:\"((?:[\d\s\.,])*)\")|(?:(NULL))/g;
                    const unparsedArrayString = value;
                    value = [];
                    let cube = null;
                    // Iterate through all regexp matches for cubes/null in array
                    while ((cube = regexp.exec(unparsedArrayString)) !== null) {
                        if (cube[1] !== undefined) {
                            value.push(cube[1].split(",").filter(Boolean).map(Number));
                        }
                        else {
                            value.push(undefined);
                        }
                    }
                }
                else {
                    value = value.split(",").filter(Boolean).map(Number);
                }
            }
            else if (columnMetadata.type === "enum" || columnMetadata.type === "simple-enum") {
                if (columnMetadata.isArray) {
                    // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)
                    value = value !== "{}" ? value.substr(1, value.length - 2).split(",") : [];
                    // convert to number if that exists in poosible enum options
                    value = value.map((val) => {
                        return !isNaN(+val) && columnMetadata.enum.indexOf(parseInt(val)) >= 0 ? parseInt(val) : val;
                    });
                }
                else {
                    // convert to number if that exists in poosible enum options
                    value = !isNaN(+value) && columnMetadata.enum.indexOf(parseInt(value)) >= 0 ? parseInt(value) : value;
                }
            }
            if (columnMetadata.transformer)
                value = ApplyValueTransformers_11.ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);
            return value;
        }
        /**
         * Replaces parameters in the given sql with special escaping character
         * and an array of parameter names to be passed to a query.
         */
        escapeQueryWithParameters(sql, parameters, nativeParameters) {
            const builtParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);
            if (!parameters || !Object.keys(parameters).length)
                return [sql, builtParameters];
            const keys = Object.keys(parameters).map(parameter => "(:(\\.\\.\\.)?" + parameter + "\\b)").join("|");
            sql = sql.replace(new RegExp(keys, "g"), (key) => {
                let value;
                let isArray = false;
                if (key.substr(0, 4) === ":...") {
                    isArray = true;
                    value = parameters[key.substr(4)];
                }
                else {
                    value = parameters[key.substr(1)];
                }
                if (isArray) {
                    return value.map((v) => {
                        builtParameters.push(v);
                        return "$" + builtParameters.length;
                    }).join(", ");
                }
                else if (value instanceof Function) {
                    return value();
                }
                else {
                    builtParameters.push(value);
                    return "$" + builtParameters.length;
                }
            }); // todo: make replace only in value statements, otherwise problems
            return [sql, builtParameters];
        }
        /**
         * Escapes a column name.
         */
        escape(columnName) {
            return "\"" + columnName + "\"";
        }
        /**
         * Build full table name with schema name and table name.
         * E.g. "mySchema"."myTable"
         */
        buildTableName(tableName, schema) {
            return schema ? `${schema}.${tableName}` : tableName;
        }
        /**
         * Creates a database type from a given column metadata.
         */
        normalizeType(column) {
            if (column.type === Number || column.type === "int" || column.type === "int4") {
                return "integer";
            }
            else if (column.type === String || column.type === "varchar") {
                return "character varying";
            }
            else if (column.type === Date || column.type === "timestamp") {
                return "timestamp without time zone";
            }
            else if (column.type === "timestamptz") {
                return "timestamp with time zone";
            }
            else if (column.type === "time") {
                return "time without time zone";
            }
            else if (column.type === "timetz") {
                return "time with time zone";
            }
            else if (column.type === Boolean || column.type === "bool") {
                return "boolean";
            }
            else if (column.type === "simple-array") {
                return "text";
            }
            else if (column.type === "simple-json") {
                return "text";
            }
            else if (column.type === "simple-enum") {
                return "enum";
            }
            else if (column.type === "int2") {
                return "smallint";
            }
            else if (column.type === "int8") {
                return "bigint";
            }
            else if (column.type === "decimal") {
                return "numeric";
            }
            else if (column.type === "float8" || column.type === "float") {
                return "double precision";
            }
            else if (column.type === "float4") {
                return "real";
            }
            else if (column.type === "char") {
                return "character";
            }
            else if (column.type === "varbit") {
                return "bit varying";
            }
            else {
                return column.type || "";
            }
        }
        /**
         * Normalizes "default" value of the column.
         */
        normalizeDefault(columnMetadata) {
            const defaultValue = columnMetadata.default;
            if (columnMetadata.isArray && Array.isArray(defaultValue)) {
                return `'{${defaultValue.map((val) => `${val}`).join(",")}}'`;
            }
            if ((columnMetadata.type === "enum" || columnMetadata.type === "simple-enum")
                && defaultValue !== undefined) {
                return `'${defaultValue}'`;
            }
            if (typeof defaultValue === "number") {
                return `'${defaultValue}'`;
            }
            else if (typeof defaultValue === "boolean") {
                return defaultValue === true ? "true" : "false";
            }
            else if (typeof defaultValue === "function") {
                return defaultValue();
            }
            else if (typeof defaultValue === "string") {
                return `'${defaultValue}'`;
            }
            else if (typeof defaultValue === "object" && defaultValue !== null) {
                return `'${JSON.stringify(defaultValue)}'`;
            }
            else {
                return defaultValue;
            }
        }
        /**
         * Normalizes "isUnique" value of the column.
         */
        normalizeIsUnique(column) {
            return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);
        }
        /**
         * Returns default column lengths, which is required on column creation.
         */
        getColumnLength(column) {
            return column.length ? column.length.toString() : "";
        }
        /**
         * Creates column type definition including length, precision and scale
         */
        createFullType(column) {
            let type = column.type;
            if (column.length) {
                type += "(" + column.length + ")";
            }
            else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {
                type += "(" + column.precision + "," + column.scale + ")";
            }
            else if (column.precision !== null && column.precision !== undefined) {
                type += "(" + column.precision + ")";
            }
            if (column.type === "time without time zone") {
                type = "TIME" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "");
            }
            else if (column.type === "time with time zone") {
                type = "TIME" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "") + " WITH TIME ZONE";
            }
            else if (column.type === "timestamp without time zone") {
                type = "TIMESTAMP" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "");
            }
            else if (column.type === "timestamp with time zone") {
                type = "TIMESTAMP" + (column.precision !== null && column.precision !== undefined ? "(" + column.precision + ")" : "") + " WITH TIME ZONE";
            }
            else if (this.spatialTypes.indexOf(column.type) >= 0) {
                if (column.spatialFeatureType != null && column.srid != null) {
                    type = `${column.type}(${column.spatialFeatureType},${column.srid})`;
                }
                else if (column.spatialFeatureType != null) {
                    type = `${column.type}(${column.spatialFeatureType})`;
                }
                else {
                    type = column.type;
                }
            }
            if (column.isArray)
                type += " array";
            return type;
        }
        /**
         * Obtains a new database connection to a master server.
         * Used for replication.
         * If replication is not setup then returns default connection's database connection.
         */
        obtainMasterConnection() {
            return new Promise((ok, fail) => {
                this.master.connect((err, connection, release) => {
                    err ? fail(err) : ok([connection, release]);
                });
            });
        }
        /**
         * Obtains a new database connection to a slave server.
         * Used for replication.
         * If replication is not setup then returns master (default) connection's database connection.
         */
        obtainSlaveConnection() {
            if (!this.slaves.length)
                return this.obtainMasterConnection();
            return new Promise((ok, fail) => {
                const random = Math.floor(Math.random() * this.slaves.length);
                this.slaves[random].connect((err, connection, release) => {
                    err ? fail(err) : ok([connection, release]);
                });
            });
        }
        /**
         * Creates generated map of values generated or returned by database after INSERT query.
         *
         * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts
         */
        createGeneratedMap(metadata, insertResult) {
            if (!insertResult)
                return undefined;
            return Object.keys(insertResult).reduce((map, key) => {
                const column = metadata.findColumnWithDatabaseName(key);
                if (column) {
                    OrmUtils_28.OrmUtils.mergeDeep(map, column.createValueMap(insertResult[key]));
                    // OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column))); // TODO: probably should be like there, but fails on enums, fix later
                }
                return map;
            }, {});
        }
        /**
         * Differentiate columns of this table and columns from the given column metadatas columns
         * and returns only changed.
         */
        findChangedColumns(tableColumns, columnMetadatas) {
            return columnMetadatas.filter(columnMetadata => {
                const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);
                if (!tableColumn)
                    return false; // we don't need new columns, we only need exist and changed
                const isColumnChanged = tableColumn.name !== columnMetadata.databaseName
                    || tableColumn.type !== this.normalizeType(columnMetadata)
                    || tableColumn.length !== columnMetadata.length
                    || tableColumn.precision !== columnMetadata.precision
                    || (columnMetadata.scale !== undefined && tableColumn.scale !== columnMetadata.scale)
                    || tableColumn.comment !== columnMetadata.comment
                    || (!tableColumn.isGenerated && this.lowerDefaultValueIfNecessary(this.normalizeDefault(columnMetadata)) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values
                    || tableColumn.isPrimary !== columnMetadata.isPrimary
                    || tableColumn.isNullable !== columnMetadata.isNullable
                    || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)
                    || (tableColumn.enum && columnMetadata.enum && !OrmUtils_28.OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + ""))) // enums in postgres are always strings
                    || tableColumn.isGenerated !== columnMetadata.isGenerated
                    || (tableColumn.spatialFeatureType || "").toLowerCase() !== (columnMetadata.spatialFeatureType || "").toLowerCase()
                    || tableColumn.srid !== columnMetadata.srid;
                // DEBUG SECTION
                // if (isColumnChanged) {
                //     console.log("table:", columnMetadata.entityMetadata.tableName);
                //     console.log("name:", tableColumn.name, columnMetadata.databaseName);
                //     console.log("type:", tableColumn.type, this.normalizeType(columnMetadata));
                //     console.log("length:", tableColumn.length, columnMetadata.length);
                //     console.log("precision:", tableColumn.precision, columnMetadata.precision);
                //     console.log("scale:", tableColumn.scale, columnMetadata.scale);
                //     console.log("comment:", tableColumn.comment, columnMetadata.comment);
                //     console.log("enum:", tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + "")));
                //     console.log("onUpdate:", tableColumn.onUpdate, columnMetadata.onUpdate);
                //     console.log("isPrimary:", tableColumn.isPrimary, columnMetadata.isPrimary);
                //     console.log("isNullable:", tableColumn.isNullable, columnMetadata.isNullable);
                //     console.log("isUnique:", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));
                //     console.log("isGenerated:", tableColumn.isGenerated, columnMetadata.isGenerated);
                //     console.log("isGenerated 2:", !tableColumn.isGenerated && this.lowerDefaultValueIfNecessary(this.normalizeDefault(columnMetadata)) !== tableColumn.default);
                //     console.log("spatialFeatureType:", (tableColumn.spatialFeatureType || "").toLowerCase(), (columnMetadata.spatialFeatureType || "").toLowerCase());
                //     console.log("srid", tableColumn.srid, columnMetadata.srid);
                //     console.log("==========================================");
                // }
                return isColumnChanged;
            });
        }
        lowerDefaultValueIfNecessary(value) {
            // Postgres saves function calls in default value as lowercase #2733
            if (!value) {
                return value;
            }
            return value.split(`'`).map((v, i) => {
                return i % 2 === 1 ? v : v.toLowerCase();
            }).join(`'`);
        }
        /**
         * Returns true if driver supports RETURNING / OUTPUT statement.
         */
        isReturningSqlSupported() {
            return true;
        }
        /**
         * Returns true if driver supports uuid values generation on its own.
         */
        isUUIDGenerationSupported() {
            return true;
        }
        /**
         * Returns true if driver supports fulltext indices.
         */
        isFullTextColumnTypeSupported() {
            return false;
        }
        get uuidGenerator() {
            return this.options.uuidExtension === "pgcrypto" ? "gen_random_uuid()" : "uuid_generate_v4()";
        }
        /**
         * Creates an escaped parameter.
         */
        createParameter(parameterName, index) {
            return "$" + (index + 1);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Loads postgres query stream package.
         */
        loadStreamDependency() {
            try {
                return PlatformTools_12.PlatformTools.load("pg-query-stream");
            }
            catch (e) { // todo: better error for browser env
                throw new Error(`To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.`);
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.postgres = PlatformTools_12.PlatformTools.load("pg");
                try {
                    const pgNative = PlatformTools_12.PlatformTools.load("pg-native");
                    if (pgNative && this.postgres.native)
                        this.postgres = this.postgres.native;
                }
                catch (e) { }
            }
            catch (e) { // todo: better error for browser env
                throw new DriverPackageNotInstalledError_9.DriverPackageNotInstalledError("Postgres", "pg");
            }
        }
        /**
         * Creates a new connection pool for a given database credentials.
         */
        async createPool(options, credentials) {
            credentials = Object.assign({}, credentials);
            // build connection options for the driver
            // See: https://github.com/brianc/node-postgres/tree/master/packages/pg-pool#create
            const connectionOptions = Object.assign({}, {
                connectionString: credentials.url,
                host: credentials.host,
                user: credentials.username,
                password: credentials.password,
                database: credentials.database,
                port: credentials.port,
                ssl: credentials.ssl,
                connectionTimeoutMillis: options.connectTimeoutMS
            }, options.extra || {});
            // create a connection pool
            const pool = new this.postgres.Pool(connectionOptions);
            const { logger } = this.connection;
            const poolErrorHandler = options.poolErrorHandler || ((error) => logger.log("warn", `Postgres pool raised an error. ${error}`));
            /*
              Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and
              cause the hosting app to crash.
             */
            pool.on("error", poolErrorHandler);
            return new Promise((ok, fail) => {
                pool.connect((err, connection, release) => {
                    if (err)
                        return fail(err);
                    if (options.logNotifications) {
                        connection.on("notice", (msg) => {
                            msg && this.connection.logger.log("info", msg.message);
                        });
                        connection.on("notification", (msg) => {
                            msg && this.connection.logger.log("info", `Received NOTIFY on channel ${msg.channel}: ${msg.payload}.`);
                        });
                    }
                    release();
                    ok(pool);
                });
            });
        }
        /**
         * Closes connection pool.
         */
        async closePool(pool) {
            await Promise.all(this.connectedQueryRunners.map(queryRunner => queryRunner.release()));
            return new Promise((ok, fail) => {
                pool.end((err) => err ? fail(err) : ok());
            });
        }
        /**
         * Executes given query.
         */
        executeQuery(connection, query) {
            return new Promise((ok, fail) => {
                connection.query(query, (err, result) => {
                    if (err)
                        return fail(err);
                    ok(result);
                });
            });
        }
    }
    exports.PostgresDriver = PostgresDriver;
});
define("typeorm/error/CannotCreateEntityIdMapError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotCreateEntityIdMapError = void 0;
    /**
     * Thrown when user tries to create entity id map from the mixed id value,
     * but id value is a single value when entity requires multiple values.
     */
    class CannotCreateEntityIdMapError extends Error {
        constructor(metadata, id) {
            super();
            this.name = "CannotCreateEntityIdMapError";
            Object.setPrototypeOf(this, CannotCreateEntityIdMapError.prototype);
            const objectExample = metadata.primaryColumns.reduce((object, column, index) => {
                column.setEntityValue(object, index + 1);
                return object;
            }, {});
            this.message = `Cannot use given entity id "${id}" because "${metadata.targetName}" contains multiple primary columns, you must provide object in following form: ${JSON.stringify(objectExample)} as an id.`;
        }
    }
    exports.CannotCreateEntityIdMapError = CannotCreateEntityIdMapError;
});
define("typeorm/metadata-args/TableMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/TreeTypes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/types/ClosureTreeOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/TreeMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/EntityMetadata", ["require", "exports", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/sap/SapDriver", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/oracle/OracleDriver", "typeorm/error/CannotCreateEntityIdMapError", "typeorm/util/OrmUtils", "typeorm/util/StringUtils"], function (require, exports, PostgresDriver_8, SapDriver_6, SqlServerDriver_7, OracleDriver_10, CannotCreateEntityIdMapError_1, OrmUtils_29, StringUtils_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMetadata = void 0;
    /**
     * Contains all entity metadata.
     */
    class EntityMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Children entity metadatas. Used in inheritance patterns.
             */
            this.childEntityMetadatas = [];
            /**
             * All "inheritance tree" from a target entity.
             * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].
             * It also contains child entities for single table inheritance.
             */
            this.inheritanceTree = [];
            /**
             * Table type. Tables can be abstract, closure, junction, embedded, etc.
             */
            this.tableType = "regular";
            /**
             * Enables Sqlite "WITHOUT ROWID" modifier for the "CREATE TABLE" statement
             */
            this.withoutRowid = false;
            /**
             * Indicates if schema will be synchronized for this entity or not.
             */
            this.synchronize = true;
            /**
             * Checks if there any non-nullable column exist in this entity.
             */
            this.hasNonNullableRelations = false;
            /**
             * Indicates if this entity metadata of a junction table, or not.
             * Junction table is a table created by many-to-many relationship.
             *
             * Its also possible to understand if entity is junction via tableType.
             */
            this.isJunction = false;
            /**
             * Checks if this table is a junction table of the closure table.
             * This type is for tables that contain junction metadata of the closure tables.
             */
            this.isClosureJunction = false;
            /**
             * Checks if entity's table has multiple primary columns.
             */
            this.hasMultiplePrimaryKeys = false;
            /**
             * Indicates if this entity metadata has uuid generated columns.
             */
            this.hasUUIDGeneratedColumns = false;
            /**
             * Entity's column metadatas defined by user.
             */
            this.ownColumns = [];
            /**
             * Columns of the entity, including columns that are coming from the embeddeds of this entity.
             */
            this.columns = [];
            /**
             * Ancestor columns used only in closure junction tables.
             */
            this.ancestorColumns = [];
            /**
             * Descendant columns used only in closure junction tables.
             */
            this.descendantColumns = [];
            /**
             * All columns except for virtual columns.
             */
            this.nonVirtualColumns = [];
            /**
             * In the case if this entity metadata is junction table's entity metadata,
             * this will contain all referenced columns of owner entity.
             */
            this.ownerColumns = [];
            /**
             * In the case if this entity metadata is junction table's entity metadata,
             * this will contain all referenced columns of inverse entity.
             */
            this.inverseColumns = [];
            /**
             * Gets the column with generated flag.
             */
            this.generatedColumns = [];
            /**
             * Gets the primary columns.
             */
            this.primaryColumns = [];
            /**
             * Entity's relation metadatas.
             */
            this.ownRelations = [];
            /**
             * Relations of the entity, including relations that are coming from the embeddeds of this entity.
             */
            this.relations = [];
            /**
             * List of eager relations this metadata has.
             */
            this.eagerRelations = [];
            /**
             * List of eager relations this metadata has.
             */
            this.lazyRelations = [];
            /**
             * Gets only one-to-one relations of the entity.
             */
            this.oneToOneRelations = [];
            /**
             * Gets only owner one-to-one relations of the entity.
             */
            this.ownerOneToOneRelations = [];
            /**
             * Gets only one-to-many relations of the entity.
             */
            this.oneToManyRelations = [];
            /**
             * Gets only many-to-one relations of the entity.
             */
            this.manyToOneRelations = [];
            /**
             * Gets only many-to-many relations of the entity.
             */
            this.manyToManyRelations = [];
            /**
             * Gets only owner many-to-many relations of the entity.
             */
            this.ownerManyToManyRelations = [];
            /**
             * Gets only owner one-to-one and many-to-one relations.
             */
            this.relationsWithJoinColumns = [];
            /**
             * Entity's relation id metadatas.
             */
            this.relationIds = [];
            /**
             * Entity's relation id metadatas.
             */
            this.relationCounts = [];
            /**
             * Entity's foreign key metadatas.
             */
            this.foreignKeys = [];
            /**
             * Entity's embedded metadatas.
             */
            this.embeddeds = [];
            /**
             * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.
             */
            this.allEmbeddeds = [];
            /**
             * Entity's own indices.
             */
            this.ownIndices = [];
            /**
             * Entity's index metadatas.
             */
            this.indices = [];
            /**
             * Entity's unique metadatas.
             */
            this.uniques = [];
            /**
             * Entity's own uniques.
             */
            this.ownUniques = [];
            /**
             * Entity's check metadatas.
             */
            this.checks = [];
            /**
             * Entity's exclusion metadatas.
             */
            this.exclusions = [];
            /**
             * Entity's own listener metadatas.
             */
            this.ownListeners = [];
            /**
             * Entity listener metadatas.
             */
            this.listeners = [];
            /**
             * Listener metadatas with "AFTER LOAD" type.
             */
            this.afterLoadListeners = [];
            /**
             * Listener metadatas with "AFTER INSERT" type.
             */
            this.beforeInsertListeners = [];
            /**
             * Listener metadatas with "AFTER INSERT" type.
             */
            this.afterInsertListeners = [];
            /**
             * Listener metadatas with "AFTER UPDATE" type.
             */
            this.beforeUpdateListeners = [];
            /**
             * Listener metadatas with "AFTER UPDATE" type.
             */
            this.afterUpdateListeners = [];
            /**
             * Listener metadatas with "AFTER REMOVE" type.
             */
            this.beforeRemoveListeners = [];
            /**
             * Listener metadatas with "AFTER REMOVE" type.
             */
            this.afterRemoveListeners = [];
            this.connection = options.connection;
            this.inheritanceTree = options.inheritanceTree || [];
            this.inheritancePattern = options.inheritancePattern;
            this.treeType = options.tableTree ? options.tableTree.type : undefined;
            this.treeOptions = options.tableTree ? options.tableTree.options : undefined;
            this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;
            this.tableMetadataArgs = options.args;
            this.target = this.tableMetadataArgs.target;
            this.tableType = this.tableMetadataArgs.type;
            this.expression = this.tableMetadataArgs.expression;
            this.withoutRowid = this.tableMetadataArgs.withoutRowid;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new entity.
         */
        create(queryRunner) {
            // if target is set to a function (e.g. class) that can be created then create it
            let ret;
            if (this.target instanceof Function) {
                ret = new this.target();
                this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner));
                return ret;
            }
            // otherwise simply return a new empty object
            const newObject = {};
            this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner));
            return newObject;
        }
        /**
         * Checks if given entity has an id.
         */
        hasId(entity) {
            if (!entity)
                return false;
            return this.primaryColumns.every(primaryColumn => {
                const value = primaryColumn.getEntityValue(entity);
                return value !== null && value !== undefined && value !== "";
            });
        }
        /**
         * Checks if given entity / object contains ALL primary keys entity must have.
         * Returns true if it contains all of them, false if at least one of them is not defined.
         */
        hasAllPrimaryKeys(entity) {
            return this.primaryColumns.every(primaryColumn => {
                const value = primaryColumn.getEntityValue(entity);
                return value !== null && value !== undefined;
            });
        }
        /**
         * Ensures that given object is an entity id map.
         * If given id is an object then it means its already id map.
         * If given id isn't an object then it means its a value of the id column
         * and it creates a new id map with this value and name of the primary column.
         */
        ensureEntityIdMap(id) {
            if (id instanceof Object)
                return id;
            if (this.hasMultiplePrimaryKeys)
                throw new CannotCreateEntityIdMapError_1.CannotCreateEntityIdMapError(this, id);
            return this.primaryColumns[0].createValueMap(id);
        }
        /**
         * Gets primary keys of the entity and returns them in a literal object.
         * For example, for Post{ id: 1, title: "hello" } where id is primary it will return { id: 1 }
         * For multiple primary keys it returns multiple keys in object.
         * For primary keys inside embeds it returns complex object literal with keys in them.
         */
        getEntityIdMap(entity) {
            if (!entity)
                return undefined;
            return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });
        }
        /**
         * Creates a "mixed id map".
         * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.
         * But if entity has a single primary key then it will return just value of the id column of the entity, just value.
         * This is called mixed id map.
         */
        getEntityIdMixedMap(entity) {
            if (!entity)
                return entity;
            const idMap = this.getEntityIdMap(entity);
            if (this.hasMultiplePrimaryKeys) {
                return idMap;
            }
            else if (idMap) {
                return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?
            }
            return idMap;
        }
        /**
         * Compares two different entities by their ids.
         * Returns true if they match, false otherwise.
         */
        compareEntities(firstEntity, secondEntity) {
            const firstEntityIdMap = this.getEntityIdMap(firstEntity);
            if (!firstEntityIdMap)
                return false;
            const secondEntityIdMap = this.getEntityIdMap(secondEntity);
            if (!secondEntityIdMap)
                return false;
            return OrmUtils_29.OrmUtils.compareIds(firstEntityIdMap, secondEntityIdMap);
        }
        /**
         * Finds column with a given property name.
         */
        findColumnWithPropertyName(propertyName) {
            return this.columns.find(column => column.propertyName === propertyName);
        }
        /**
         * Finds column with a given database name.
         */
        findColumnWithDatabaseName(databaseName) {
            return this.columns.find(column => column.databaseName === databaseName);
        }
        /**
         * Finds column with a given property path.
         */
        findColumnWithPropertyPath(propertyPath) {
            const column = this.columns.find(column => column.propertyPath === propertyPath);
            if (column)
                return column;
            // in the case if column with property path was not found, try to find a relation with such property path
            // if we find relation and it has a single join column then its the column user was seeking
            const relation = this.relations.find(relation => relation.propertyPath === propertyPath);
            if (relation && relation.joinColumns.length === 1)
                return relation.joinColumns[0];
            return undefined;
        }
        /**
         * Finds columns with a given property path.
         * Property path can match a relation, and relations can contain multiple columns.
         */
        findColumnsWithPropertyPath(propertyPath) {
            const column = this.columns.find(column => column.propertyPath === propertyPath);
            if (column)
                return [column];
            // in the case if column with property path was not found, try to find a relation with such property path
            // if we find relation and it has a single join column then its the column user was seeking
            const relation = this.relations.find(relation => relation.propertyPath === propertyPath);
            if (relation && relation.joinColumns)
                return relation.joinColumns;
            return [];
        }
        /**
         * Finds relation with the given property path.
         */
        findRelationWithPropertyPath(propertyPath) {
            return this.relations.find(relation => relation.propertyPath === propertyPath);
        }
        /**
         * Checks if there is an embedded with a given property path.
         */
        hasEmbeddedWithPropertyPath(propertyPath) {
            return this.allEmbeddeds.some(embedded => embedded.propertyPath === propertyPath);
        }
        /**
         * Finds embedded with a given property path.
         */
        findEmbeddedWithPropertyPath(propertyPath) {
            return this.allEmbeddeds.find(embedded => embedded.propertyPath === propertyPath);
        }
        /**
         * Iterates through entity and finds and extracts all values from relations in the entity.
         * If relation value is an array its being flattened.
         */
        extractRelationValuesFromEntity(entity, relations) {
            const relationsAndValues = [];
            relations.forEach(relation => {
                const value = relation.getEntityValue(entity);
                if (Array.isArray(value)) {
                    value.forEach(subValue => relationsAndValues.push([relation, subValue, this.getInverseEntityMetadata(subValue, relation)]));
                }
                else if (value) {
                    relationsAndValues.push([relation, value, this.getInverseEntityMetadata(value, relation)]);
                }
            });
            return relationsAndValues;
        }
        getInverseEntityMetadata(value, relation) {
            const childEntityMetadata = relation.inverseEntityMetadata.childEntityMetadatas.find(metadata => metadata.target === value.constructor);
            return childEntityMetadata ? childEntityMetadata : relation.inverseEntityMetadata;
        }
        // -------------------------------------------------------------------------
        // Public Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a property paths for a given entity.
         */
        static createPropertyPath(metadata, entity, prefix = "") {
            const paths = [];
            Object.keys(entity).forEach(key => {
                // check for function is needed in the cases when createPropertyPath used on values containg a function as a value
                // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })
                const parentPath = prefix ? prefix + "." + key : key;
                if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {
                    const subPaths = this.createPropertyPath(metadata, entity[key], parentPath);
                    paths.push(...subPaths);
                }
                else {
                    const path = prefix ? prefix + "." + key : key;
                    paths.push(path);
                }
            });
            return paths;
        }
        /**
         * Finds difference between two entity id maps.
         * Returns items that exist in the first array and absent in the second array.
         */
        static difference(firstIdMaps, secondIdMaps) {
            return firstIdMaps.filter(firstIdMap => {
                return !secondIdMaps.find(secondIdMap => OrmUtils_29.OrmUtils.compareIds(firstIdMap, secondIdMap));
            });
        }
        /**
         * Creates value map from the given values and columns.
         * Examples of usages are primary columns map and join columns map.
         */
        static getValueMap(entity, columns, options) {
            return columns.reduce((map, column) => {
                const value = column.getEntityValueMap(entity, options);
                // make sure that none of the values of the columns are not missing
                if (map === undefined || value === null || value === undefined)
                    return undefined;
                return column.isObjectId ? Object.assign(map, value) : OrmUtils_29.OrmUtils.mergeDeep(map, value);
            }, {});
        }
        // ---------------------------------------------------------------------
        // Public Builder Methods
        // ---------------------------------------------------------------------
        build() {
            const namingStrategy = this.connection.namingStrategy;
            const entityPrefix = this.connection.options.entityPrefix;
            this.engine = this.tableMetadataArgs.engine;
            this.database = this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata ? this.parentEntityMetadata.database : this.tableMetadataArgs.database;
            if (this.tableMetadataArgs.schema) {
                this.schema = this.tableMetadataArgs.schema;
            }
            else if ((this.tableMetadataArgs.type === "entity-child") && this.parentEntityMetadata) {
                this.schema = this.parentEntityMetadata.schema;
            }
            else {
                this.schema = this.connection.options.schema;
            }
            this.givenTableName = this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;
            this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;
            this.targetName = this.tableMetadataArgs.target instanceof Function ? this.tableMetadataArgs.target.name : this.tableMetadataArgs.target;
            if (this.tableMetadataArgs.type === "closure-junction") {
                this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName);
            }
            else if (this.tableMetadataArgs.type === "entity-child" && this.parentEntityMetadata) {
                this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);
            }
            else {
                this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);
                if (this.connection.driver.maxAliasLength && this.connection.driver.maxAliasLength > 0 && this.tableNameWithoutPrefix.length > this.connection.driver.maxAliasLength) {
                    this.tableNameWithoutPrefix = StringUtils_3.shorten(this.tableNameWithoutPrefix, { separator: "_", segmentLength: 3 });
                }
            }
            this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;
            this.target = this.target ? this.target : this.tableName;
            this.name = this.targetName ? this.targetName : this.tableName;
            this.expression = this.tableMetadataArgs.expression;
            this.withoutRowid = this.tableMetadataArgs.withoutRowid === true ? true : false;
            this.tablePath = this.buildTablePath();
            this.schemaPath = this.buildSchemaPath();
            this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not
            this.isJunction = this.tableMetadataArgs.type === "closure-junction" || this.tableMetadataArgs.type === "junction";
            this.isClosureJunction = this.tableMetadataArgs.type === "closure-junction";
        }
        /**
         * Registers a new column in the entity and recomputes all depend properties.
         */
        registerColumn(column) {
            if (this.ownColumns.indexOf(column) !== -1)
                return;
            this.ownColumns.push(column);
            this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);
            this.primaryColumns = this.columns.filter(column => column.isPrimary);
            this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;
            this.hasUUIDGeneratedColumns = this.columns.filter(column => column.isGenerated || column.generationStrategy === "uuid").length > 0;
            this.propertiesMap = this.createPropertiesMap();
            if (this.childEntityMetadatas)
                this.childEntityMetadatas.forEach(entityMetadata => entityMetadata.registerColumn(column));
        }
        /**
         * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)
         * in a special format - { propertyName: propertyName }.
         *
         * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.
         * This method will create following object:
         * { id: "id", counterEmbed: { count: "counterEmbed.count" }, category: "category" }
         */
        createPropertiesMap() {
            const map = {};
            this.columns.forEach(column => OrmUtils_29.OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));
            this.relations.forEach(relation => OrmUtils_29.OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));
            return map;
        }
        /**
         * Builds table path using database name, schema name and table name.
         */
        buildTablePath() {
            let tablePath = this.tableName;
            if (this.schema && ((this.connection.driver instanceof OracleDriver_10.OracleDriver) || (this.connection.driver instanceof PostgresDriver_8.PostgresDriver) || (this.connection.driver instanceof SqlServerDriver_7.SqlServerDriver) || (this.connection.driver instanceof SapDriver_6.SapDriver))) {
                tablePath = this.schema + "." + tablePath;
            }
            if (this.database && !(this.connection.driver instanceof PostgresDriver_8.PostgresDriver)) {
                if (!this.schema && this.connection.driver instanceof SqlServerDriver_7.SqlServerDriver) {
                    tablePath = this.database + ".." + tablePath;
                }
                else {
                    tablePath = this.database + "." + tablePath;
                }
            }
            return tablePath;
        }
        /**
         * Builds table path using schema name and database name.
         */
        buildSchemaPath() {
            if (!this.schema)
                return undefined;
            return this.database && !(this.connection.driver instanceof PostgresDriver_8.PostgresDriver) ? this.database + "." + this.schema : this.schema;
        }
    }
    exports.EntityMetadata = EntityMetadata;
});
define("typeorm/metadata-args/IndexMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata/IndexMetadata", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IndexMetadata = void 0;
    /**
     * Index metadata contains all information about table's index.
     */
    class IndexMetadata {
        // ---------------------------------------------------------------------
        // Constructor
        // ---------------------------------------------------------------------
        constructor(options) {
            /**
             * Indicates if this index must be unique.
             */
            this.isUnique = false;
            /**
             * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.
             * Works only in MySQL.
             */
            this.isSpatial = false;
            /**
             * The FULLTEXT modifier indexes the entire column and does not allow prefixing.
             * Works only in MySQL.
             */
            this.isFulltext = false;
            /**
             * Indicates if this index must synchronize with database index.
             */
            this.synchronize = true;
            /**
             * Indexed columns.
             */
            this.columns = [];
            /**
             * Map of column names with order set.
             * Used only by MongoDB driver.
             */
            this.columnNamesWithOrderingMap = {};
            this.entityMetadata = options.entityMetadata;
            this.embeddedMetadata = options.embeddedMetadata;
            if (options.columns)
                this.columns = options.columns;
            if (options.args) {
                this.target = options.args.target;
                if (options.args.synchronize !== null && options.args.synchronize !== undefined)
                    this.synchronize = options.args.synchronize;
                this.isUnique = !!options.args.unique;
                this.isSpatial = !!options.args.spatial;
                this.isFulltext = !!options.args.fulltext;
                this.parser = options.args.parser;
                this.where = options.args.where;
                this.isSparse = options.args.sparse;
                this.isBackground = options.args.background;
                this.expireAfterSeconds = options.args.expireAfterSeconds;
                this.givenName = options.args.name;
                this.givenColumnNames = options.args.columns;
            }
        }
        // ---------------------------------------------------------------------
        // Public Build Methods
        // ---------------------------------------------------------------------
        /**
         * Builds some depend index properties.
         * Must be called after all entity metadata's properties map, columns and relations are built.
         */
        build(namingStrategy) {
            if (this.synchronize === false) {
                this.name = this.givenName;
                return this;
            }
            const map = {};
            // if columns already an array of string then simply return it
            if (this.givenColumnNames) {
                let columnPropertyPaths = [];
                if (Array.isArray(this.givenColumnNames)) {
                    columnPropertyPaths = this.givenColumnNames.map(columnName => {
                        if (this.embeddedMetadata)
                            return this.embeddedMetadata.propertyPath + "." + columnName;
                        return columnName;
                    });
                    columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);
                }
                else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?
                    // if columns is a function that returns array of field names then execute it and get columns names from it
                    const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);
                    if (Array.isArray(columnsFnResult)) {
                        columnPropertyPaths = columnsFnResult.map((i) => String(i));
                        columnPropertyPaths.forEach(name => map[name] = 1);
                    }
                    else {
                        columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));
                        Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);
                    }
                }
                this.columns = columnPropertyPaths.map(propertyPath => {
                    const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);
                    if (columnWithSameName) {
                        return [columnWithSameName];
                    }
                    const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);
                    if (relationWithSameName) {
                        return relationWithSameName.joinColumns;
                    }
                    const indexName = this.givenName ? "\"" + this.givenName + "\" " : "";
                    const entityName = this.entityMetadata.targetName;
                    throw new Error(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);
                })
                    .reduce((a, b) => a.concat(b));
            }
            this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {
                const column = this.entityMetadata.columns.find(column => column.propertyPath === key);
                if (column)
                    updatedMap[column.databasePath] = map[key];
                return updatedMap;
            }, {});
            this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName), this.where);
            return this;
        }
    }
    exports.IndexMetadata = IndexMetadata;
});
define("typeorm/schema-builder/table/TableIndex", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableIndex = void 0;
    /**
     * Database's table index stored in this class.
     */
    class TableIndex {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Columns included in this index.
             */
            this.columnNames = [];
            this.name = options.name;
            this.columnNames = options.columnNames;
            this.isUnique = !!options.isUnique;
            this.isSpatial = !!options.isSpatial;
            this.isFulltext = !!options.isFulltext;
            this.parser = options.parser;
            this.where = options.where ? options.where : "";
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new copy of this index with exactly same properties.
         */
        clone() {
            return new TableIndex({
                name: this.name,
                columnNames: [...this.columnNames],
                isUnique: this.isUnique,
                isSpatial: this.isSpatial,
                isFulltext: this.isFulltext,
                parser: this.parser,
                where: this.where
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates index from the index metadata object.
         */
        static create(indexMetadata) {
            return new TableIndex({
                name: indexMetadata.name,
                columnNames: indexMetadata.columns.map(column => column.databaseName),
                isUnique: indexMetadata.isUnique,
                isSpatial: indexMetadata.isSpatial,
                isFulltext: indexMetadata.isFulltext,
                parser: indexMetadata.parser,
                where: indexMetadata.where
            });
        }
    }
    exports.TableIndex = TableIndex;
});
define("typeorm/schema-builder/options/TableOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/schema-builder/table/Table", ["require", "exports", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/util/TableUtils", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableExclusion"], function (require, exports, TableColumn_11, TableIndex_10, TableForeignKey_10, TableUtils_2, TableUnique_10, TableCheck_8, TableExclusion_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Table = void 0;
    /**
     * Table in the database represented in this class.
     */
    class Table {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Table columns.
             */
            this.columns = [];
            /**
             * Table indices.
             */
            this.indices = [];
            /**
             * Table foreign keys.
             */
            this.foreignKeys = [];
            /**
             * Table unique constraints.
             */
            this.uniques = [];
            /**
             * Table check constraints.
             */
            this.checks = [];
            /**
             * Table exclusion constraints.
             */
            this.exclusions = [];
            /**
             * Indicates if table was just created.
             * This is needed, for example to check if we need to skip primary keys creation
             * for new tables.
             */
            this.justCreated = false;
            if (options) {
                this.name = options.name;
                if (options.columns)
                    this.columns = options.columns.map(column => new TableColumn_11.TableColumn(column));
                if (options.indices)
                    this.indices = options.indices.map(index => new TableIndex_10.TableIndex(index));
                if (options.foreignKeys)
                    this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey_10.TableForeignKey(foreignKey));
                if (options.uniques)
                    this.uniques = options.uniques.map(unique => new TableUnique_10.TableUnique(unique));
                if (options.checks)
                    this.checks = options.checks.map(check => new TableCheck_8.TableCheck(check));
                if (options.exclusions)
                    this.exclusions = options.exclusions.map(exclusion => new TableExclusion_4.TableExclusion(exclusion));
                if (options.justCreated !== undefined)
                    this.justCreated = options.justCreated;
                this.engine = options.engine;
            }
        }
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        get primaryColumns() {
            return this.columns.filter(column => column.isPrimary);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Clones this table to a new table with all properties cloned.
         */
        clone() {
            return new Table({
                name: this.name,
                columns: this.columns.map(column => column.clone()),
                indices: this.indices.map(constraint => constraint.clone()),
                foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),
                uniques: this.uniques.map(constraint => constraint.clone()),
                checks: this.checks.map(constraint => constraint.clone()),
                exclusions: this.exclusions.map(constraint => constraint.clone()),
                justCreated: this.justCreated,
                engine: this.engine,
            });
        }
        /**
         * Add column and creates its constraints.
         */
        addColumn(column) {
            this.columns.push(column);
        }
        /**
         * Remove column and its constraints.
         */
        removeColumn(column) {
            const foundColumn = this.columns.find(c => c.name === column.name);
            if (foundColumn)
                this.columns.splice(this.columns.indexOf(foundColumn), 1);
        }
        /**
         * Adds unique constraint.
         */
        addUniqueConstraint(uniqueConstraint) {
            this.uniques.push(uniqueConstraint);
            if (uniqueConstraint.columnNames.length === 1) {
                const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);
                if (uniqueColumn)
                    uniqueColumn.isUnique = true;
            }
        }
        /**
         * Removes unique constraint.
         */
        removeUniqueConstraint(removedUnique) {
            const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);
            if (foundUnique) {
                this.uniques.splice(this.uniques.indexOf(foundUnique), 1);
                if (foundUnique.columnNames.length === 1) {
                    const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);
                    if (uniqueColumn)
                        uniqueColumn.isUnique = false;
                }
            }
        }
        /**
         * Adds check constraint.
         */
        addCheckConstraint(checkConstraint) {
            this.checks.push(checkConstraint);
        }
        /**
         * Removes check constraint.
         */
        removeCheckConstraint(removedCheck) {
            const foundCheck = this.checks.find(check => check.name === removedCheck.name);
            if (foundCheck) {
                this.checks.splice(this.checks.indexOf(foundCheck), 1);
            }
        }
        /**
         * Adds exclusion constraint.
         */
        addExclusionConstraint(exclusionConstraint) {
            this.exclusions.push(exclusionConstraint);
        }
        /**
         * Removes exclusion constraint.
         */
        removeExclusionConstraint(removedExclusion) {
            const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);
            if (foundExclusion) {
                this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);
            }
        }
        /**
         * Adds foreign keys.
         */
        addForeignKey(foreignKey) {
            this.foreignKeys.push(foreignKey);
        }
        /**
         * Removes foreign key.
         */
        removeForeignKey(removedForeignKey) {
            const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);
            if (fk)
                this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);
        }
        /**
         * Adds index.
         */
        addIndex(index, isMysql = false) {
            this.indices.push(index);
            // in Mysql unique indices and unique constraints are the same thing
            // if index is unique and have only one column, we mark this column as unique
            if (index.columnNames.length === 1 && index.isUnique && isMysql) {
                const column = this.columns.find(c => c.name === index.columnNames[0]);
                if (column)
                    column.isUnique = true;
            }
        }
        /**
         * Removes index.
         */
        removeIndex(tableIndex, isMysql = false) {
            const index = this.indices.find(index => index.name === tableIndex.name);
            if (index) {
                this.indices.splice(this.indices.indexOf(index), 1);
                // in Mysql unique indices and unique constraints are the same thing
                // if index is unique and have only one column, we move `unique` attribute from its column
                if (index.columnNames.length === 1 && index.isUnique && isMysql) {
                    const column = this.columns.find(c => c.name === index.columnNames[0]);
                    if (column)
                        column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);
                }
            }
        }
        findColumnByName(name) {
            return this.columns.find(column => column.name === name);
        }
        /**
         * Returns all column indices.
         */
        findColumnIndices(column) {
            return this.indices.filter(index => {
                return !!index.columnNames.find(columnName => columnName === column.name);
            });
        }
        /**
         * Returns all column foreign keys.
         */
        findColumnForeignKeys(column) {
            return this.foreignKeys.filter(foreignKey => {
                return !!foreignKey.columnNames.find(columnName => columnName === column.name);
            });
        }
        /**
         * Returns all column uniques.
         */
        findColumnUniques(column) {
            return this.uniques.filter(unique => {
                return !!unique.columnNames.find(columnName => columnName === column.name);
            });
        }
        /**
         * Returns all column checks.
         */
        findColumnChecks(column) {
            return this.checks.filter(check => {
                return !!check.columnNames.find(columnName => columnName === column.name);
            });
        }
        // -------------------------------------------------------------------------
        // Static Methods
        // -------------------------------------------------------------------------
        /**
         * Creates table from a given entity metadata.
         */
        static create(entityMetadata, driver) {
            const options = {
                name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),
                engine: entityMetadata.engine,
                columns: entityMetadata.columns
                    .filter(column => column)
                    .map(column => TableUtils_2.TableUtils.createTableColumnOptions(column, driver)),
                indices: entityMetadata.indices
                    .filter(index => index.synchronize === true)
                    .map(index => TableIndex_10.TableIndex.create(index)),
                uniques: entityMetadata.uniques.map(unique => TableUnique_10.TableUnique.create(unique)),
                checks: entityMetadata.checks.map(check => TableCheck_8.TableCheck.create(check)),
                exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion_4.TableExclusion.create(exclusion)),
            };
            return new Table(options);
        }
    }
    exports.Table = Table;
});
define("typeorm/query-runner/QueryRunner", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/driver/Driver", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/naming-strategy/DefaultNamingStrategy", ["require", "exports", "typeorm/util/RandomGenerator", "typeorm/util/StringUtils", "typeorm/schema-builder/table/Table"], function (require, exports, RandomGenerator_2, StringUtils_4, Table_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultNamingStrategy = void 0;
    /**
     * Naming strategy that is used by default.
     */
    class DefaultNamingStrategy {
        constructor() {
            this.nestedSetColumnNames = { left: "nsleft", right: "nsright" };
            this.materializedPathColumnName = "mpath";
        }
        /**
         * Normalizes table name.
         *
         * @param targetName Name of the target entity that can be used to generate a table name.
         * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity("name")
         */
        tableName(targetName, userSpecifiedName) {
            return userSpecifiedName ? userSpecifiedName : StringUtils_4.snakeCase(targetName);
        }
        /**
         * Creates a table name for a junction table of a closure table.
         *
         * @param originalClosureTableName Name of the closure table which owns this junction table.
         */
        closureJunctionTableName(originalClosureTableName) {
            return originalClosureTableName + "_closure";
        }
        columnName(propertyName, customName, embeddedPrefixes) {
            const name = customName || propertyName;
            if (embeddedPrefixes.length)
                return StringUtils_4.camelCase(embeddedPrefixes.join("_")) + StringUtils_4.titleCase(name);
            return name;
        }
        relationName(propertyName) {
            return propertyName;
        }
        primaryKeyName(tableOrName, columnNames) {
            // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
            const clonedColumnNames = [...columnNames];
            clonedColumnNames.sort();
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${clonedColumnNames.join("_")}`;
            return "PK_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 27);
        }
        uniqueConstraintName(tableOrName, columnNames) {
            // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
            const clonedColumnNames = [...columnNames];
            clonedColumnNames.sort();
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${clonedColumnNames.join("_")}`;
            return "UQ_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 27);
        }
        relationConstraintName(tableOrName, columnNames, where) {
            // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
            const clonedColumnNames = [...columnNames];
            clonedColumnNames.sort();
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            let key = `${replacedTableName}_${clonedColumnNames.join("_")}`;
            if (where)
                key += `_${where}`;
            return "REL_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 26);
        }
        defaultConstraintName(tableOrName, columnName) {
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${columnName}`;
            return "DF_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 27);
        }
        foreignKeyName(tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {
            // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
            const clonedColumnNames = [...columnNames];
            clonedColumnNames.sort();
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${clonedColumnNames.join("_")}`;
            return "FK_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 27);
        }
        indexName(tableOrName, columnNames, where) {
            // sort incoming column names to avoid issue when ["id", "name"] and ["name", "id"] arrays
            const clonedColumnNames = [...columnNames];
            clonedColumnNames.sort();
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            let key = `${replacedTableName}_${clonedColumnNames.join("_")}`;
            if (where)
                key += `_${where}`;
            return "IDX_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 26);
        }
        checkConstraintName(tableOrName, expression) {
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${expression}`;
            return "CHK_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 26);
        }
        exclusionConstraintName(tableOrName, expression) {
            const tableName = tableOrName instanceof Table_10.Table ? tableOrName.name : tableOrName;
            const replacedTableName = tableName.replace(".", "_");
            const key = `${replacedTableName}_${expression}`;
            return "XCL_" + RandomGenerator_2.RandomGenerator.sha1(key).substr(0, 26);
        }
        joinColumnName(relationName, referencedColumnName) {
            return StringUtils_4.camelCase(relationName + "_" + referencedColumnName);
        }
        joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {
            return StringUtils_4.snakeCase(firstTableName + "_" + firstPropertyName.replace(/\./gi, "_") + "_" + secondTableName);
        }
        joinTableColumnDuplicationPrefix(columnName, index) {
            return columnName + "_" + index;
        }
        joinTableColumnName(tableName, propertyName, columnName) {
            return StringUtils_4.camelCase(tableName + "_" + (columnName ? columnName : propertyName));
        }
        joinTableInverseColumnName(tableName, propertyName, columnName) {
            return this.joinTableColumnName(tableName, propertyName, columnName);
        }
        /**
         * Adds globally set prefix to the table name.
         * This method is executed no matter if prefix was set or not.
         * Table name is either user's given table name, either name generated from entity target.
         * Note that table name comes here already normalized by #tableName method.
         */
        prefixTableName(prefix, tableName) {
            return prefix + tableName;
        }
        eagerJoinRelationAlias(alias, propertyPath) {
            return alias + "_" + propertyPath.replace(".", "_");
        }
    }
    exports.DefaultNamingStrategy = DefaultNamingStrategy;
});
define("typeorm/error/CannotExecuteNotConnectedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotExecuteNotConnectedError = void 0;
    /**
     * Thrown when consumer tries to execute operation allowed only if connection is opened.
     */
    class CannotExecuteNotConnectedError extends Error {
        constructor(connectionName) {
            super();
            this.name = "CannotExecuteNotConnectedError";
            Object.setPrototypeOf(this, CannotExecuteNotConnectedError.prototype);
            this.message = `Cannot execute operation on "${connectionName}" connection because connection is not yet established.`;
        }
    }
    exports.CannotExecuteNotConnectedError = CannotExecuteNotConnectedError;
});
define("typeorm/error/CannotConnectAlreadyConnectedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotConnectAlreadyConnectedError = void 0;
    /**
     * Thrown when consumer tries to connect when he already connected.
     */
    class CannotConnectAlreadyConnectedError extends Error {
        constructor(connectionName) {
            super();
            this.name = "CannotConnectAlreadyConnectedError";
            Object.setPrototypeOf(this, CannotConnectAlreadyConnectedError.prototype);
            this.message = `Cannot create a "${connectionName}" connection because connection to the database already established.`;
        }
    }
    exports.CannotConnectAlreadyConnectedError = CannotConnectAlreadyConnectedError;
});
define("typeorm/error/EntityMetadataNotFoundError", ["require", "exports", "typeorm/index"], function (require, exports, index_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMetadataNotFoundError = void 0;
    /**
     */
    class EntityMetadataNotFoundError extends Error {
        constructor(target) {
            super();
            this.name = "EntityMetadataNotFound";
            Object.setPrototypeOf(this, EntityMetadataNotFoundError.prototype);
            let targetName;
            if (target instanceof index_8.EntitySchema) {
                targetName = target.options.name;
            }
            else if (typeof target === "function") {
                targetName = target.name;
            }
            else if (typeof target === "object" && "name" in target) {
                targetName = target.name;
            }
            else {
                targetName = target;
            }
            this.message = `No metadata for "${targetName}" was found.`;
        }
    }
    exports.EntityMetadataNotFoundError = EntityMetadataNotFoundError;
});
define("typeorm/migration/MigrationInterface", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/migration/Migration", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Migration = void 0;
    /**
     * Represents entity of the migration in the database.
     */
    class Migration {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(id, timestamp, name, instance) {
            this.id = id;
            this.timestamp = timestamp;
            this.name = name;
            this.instance = instance;
        }
    }
    exports.Migration = Migration;
});
define("typeorm/migration/MigrationExecutor", ["require", "exports", "typeorm/schema-builder/table/Table", "typeorm/migration/Migration", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/sqlserver/MssqlParameter", "typeorm/driver/mongodb/MongoDriver"], function (require, exports, Table_11, Migration_1, SqlServerDriver_8, MssqlParameter_3, MongoDriver_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MigrationExecutor = void 0;
    /**
     * Executes migrations: runs pending and reverts previously executed migrations.
     */
    class MigrationExecutor {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner) {
            this.connection = connection;
            this.queryRunner = queryRunner;
            // -------------------------------------------------------------------------
            // Public Properties
            // -------------------------------------------------------------------------
            /**
             * Indicates how migrations should be run in transactions.
             *   all: all migrations are run in a single transaction
             *   none: all migrations are run without a transaction
             *   each: each migration is run in a separate transaction
             */
            this.transaction = "all";
            const options = this.connection.driver.options;
            this.migrationsTableName = connection.options.migrationsTableName || "migrations";
            this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Tries to execute a single migration given.
         */
        async executeMigration(migration) {
            return this.withQueryRunner(async (queryRunner) => {
                await this.createMigrationsTableIfNotExist(queryRunner);
                await migration.instance.up(queryRunner);
                await this.insertExecutedMigration(queryRunner, migration);
                return migration;
            });
        }
        /**
         * Returns an array of all migrations.
         */
        async getAllMigrations() {
            return Promise.resolve(this.getMigrations());
        }
        /**
         * Returns an array of all executed migrations.
         */
        async getExecutedMigrations() {
            return this.withQueryRunner(async (queryRunner) => {
                await this.createMigrationsTableIfNotExist(queryRunner);
                return await this.loadExecutedMigrations(queryRunner);
            });
        }
        /**
         * Returns an array of all pending migrations.
         */
        async getPendingMigrations() {
            const allMigrations = await this.getAllMigrations();
            const executedMigrations = await this.getExecutedMigrations();
            return allMigrations.filter(migration => !executedMigrations.find(executedMigration => executedMigration.name === migration.name));
        }
        /**
         * Inserts an executed migration.
         */
        insertMigration(migration) {
            return new Promise((resolve, reject) => {
                this.withQueryRunner(queryRunner => {
                    this.insertExecutedMigration(queryRunner, migration)
                        .then(resolve)
                        .catch(reject);
                });
            });
        }
        /**
         * Deletes an executed migration.
         */
        deleteMigration(migration) {
            return new Promise((resolve, reject) => {
                this.withQueryRunner(queryRunner => {
                    this.deleteExecutedMigration(queryRunner, migration)
                        .then(resolve)
                        .catch(reject);
                });
            });
        }
        /**
         * Lists all migrations and whether they have been executed or not
         * returns true if there are unapplied migrations
         */
        async showMigrations() {
            let hasUnappliedMigrations = false;
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            // create migrations table if its not created yet
            await this.createMigrationsTableIfNotExist(queryRunner);
            // get all migrations that are executed and saved in the database
            const executedMigrations = await this.loadExecutedMigrations(queryRunner);
            // get all user's migrations in the source code
            const allMigrations = this.getMigrations();
            for (const migration of allMigrations) {
                const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);
                if (executedMigration) {
                    this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);
                }
                else {
                    hasUnappliedMigrations = true;
                    this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);
                }
            }
            // if query runner was created by us then release it
            if (!this.queryRunner) {
                await queryRunner.release();
            }
            return hasUnappliedMigrations;
        }
        /**
         * Executes all pending migrations. Pending migrations are migrations that are not yet executed,
         * thus not saved in the database.
         */
        async executePendingMigrations() {
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            // create migrations table if its not created yet
            await this.createMigrationsTableIfNotExist(queryRunner);
            // get all migrations that are executed and saved in the database
            const executedMigrations = await this.loadExecutedMigrations(queryRunner);
            // get the time when last migration was executed
            let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);
            // get all user's migrations in the source code
            const allMigrations = this.getMigrations();
            // variable to store all migrations we did successefuly
            const successMigrations = [];
            // find all migrations that needs to be executed
            const pendingMigrations = allMigrations.filter(migration => {
                // check if we already have executed migration
                const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);
                if (executedMigration)
                    return false;
                // migration is new and not executed. now check if its timestamp is correct
                // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)
                //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);
                // every check is passed means that migration was not run yet and we need to run it
                return true;
            });
            // if no migrations are pending then nothing to do here
            if (!pendingMigrations.length) {
                this.connection.logger.logSchemaBuild(`No migrations are pending`);
                // if query runner was created by us then release it
                if (!this.queryRunner)
                    await queryRunner.release();
                return [];
            }
            // log information about migration execution
            this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);
            this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);
            if (lastTimeExecutedMigration)
                this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);
            this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);
            // start transaction if its not started yet
            let transactionStartedByUs = false;
            if (this.transaction === "all" && !queryRunner.isTransactionActive) {
                await queryRunner.startTransaction();
                transactionStartedByUs = true;
            }
            // run all pending migrations in a sequence
            try {
                for (const migration of pendingMigrations) {
                    if (this.transaction === "each" && !queryRunner.isTransactionActive) {
                        await queryRunner.startTransaction();
                        transactionStartedByUs = true;
                    }
                    await migration.instance.up(queryRunner)
                        .then(async () => {
                        await this.insertExecutedMigration(queryRunner, migration);
                        // commit transaction if we started it
                        if (this.transaction === "each" && transactionStartedByUs)
                            await queryRunner.commitTransaction();
                    })
                        .then(() => {
                        successMigrations.push(migration);
                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);
                    });
                }
                // commit transaction if we started it
                if (this.transaction === "all" && transactionStartedByUs)
                    await queryRunner.commitTransaction();
            }
            catch (err) { // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try { // we throw original error even if rollback thrown an error
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw err;
            }
            finally {
                // if query runner was created by us then release it
                if (!this.queryRunner)
                    await queryRunner.release();
            }
            return successMigrations;
        }
        /**
         * Reverts last migration that were run.
         */
        async undoLastMigration() {
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            // create migrations table if its not created yet
            await this.createMigrationsTableIfNotExist(queryRunner);
            // get all migrations that are executed and saved in the database
            const executedMigrations = await this.loadExecutedMigrations(queryRunner);
            // get the time when last migration was executed
            let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);
            // if no migrations found in the database then nothing to revert
            if (!lastTimeExecutedMigration) {
                this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);
                return;
            }
            // get all user's migrations in the source code
            const allMigrations = this.getMigrations();
            // find the instance of the migration we need to remove
            const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration.name);
            // if no migrations found in the database then nothing to revert
            if (!migrationToRevert)
                throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);
            // log information about migration execution
            this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);
            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);
            this.connection.logger.logSchemaBuild(`Now reverting it...`);
            // start transaction if its not started yet
            let transactionStartedByUs = false;
            if ((this.transaction !== "none") && !queryRunner.isTransactionActive) {
                await queryRunner.startTransaction();
                transactionStartedByUs = true;
            }
            try {
                await migrationToRevert.instance.down(queryRunner);
                await this.deleteExecutedMigration(queryRunner, migrationToRevert);
                this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);
                // commit transaction if we started it
                if (transactionStartedByUs)
                    await queryRunner.commitTransaction();
            }
            catch (err) { // rollback transaction if we started it
                if (transactionStartedByUs) {
                    try { // we throw original error even if rollback thrown an error
                        await queryRunner.rollbackTransaction();
                    }
                    catch (rollbackError) { }
                }
                throw err;
            }
            finally {
                // if query runner was created by us then release it
                if (!this.queryRunner)
                    await queryRunner.release();
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates table "migrations" that will store information about executed migrations.
         */
        async createMigrationsTableIfNotExist(queryRunner) {
            // If driver is mongo no need to create
            if (this.connection.driver instanceof MongoDriver_6.MongoDriver) {
                return;
            }
            const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable
            if (!tableExist) {
                await queryRunner.createTable(new Table_11.Table({
                    name: this.migrationsTable,
                    columns: [
                        {
                            name: "id",
                            type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationId }),
                            isGenerated: true,
                            generationStrategy: "increment",
                            isPrimary: true,
                            isNullable: false
                        },
                        {
                            name: "timestamp",
                            type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),
                            isPrimary: false,
                            isNullable: false
                        },
                        {
                            name: "name",
                            type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),
                            isNullable: false
                        },
                    ]
                }));
            }
        }
        /**
         * Loads all migrations that were executed and saved into the database (sorts by id).
         */
        async loadExecutedMigrations(queryRunner) {
            if (this.connection.driver instanceof MongoDriver_6.MongoDriver) {
                const mongoRunner = queryRunner;
                return await mongoRunner.databaseConnection
                    .db(this.connection.driver.database)
                    .collection(this.migrationsTableName)
                    .find()
                    .sort({ "_id": -1 })
                    .toArray();
            }
            else {
                const migrationsRaw = await this.connection.manager
                    .createQueryBuilder(queryRunner)
                    .select()
                    .orderBy(this.connection.driver.escape("id"), "DESC")
                    .from(this.migrationsTable, this.migrationsTableName)
                    .getRawMany();
                return migrationsRaw.map(migrationRaw => {
                    return new Migration_1.Migration(parseInt(migrationRaw["id"]), parseInt(migrationRaw["timestamp"]), migrationRaw["name"]);
                });
            }
        }
        /**
         * Gets all migrations that setup for this connection.
         */
        getMigrations() {
            const migrations = this.connection.migrations.map(migration => {
                const migrationClassName = migration.name || migration.constructor.name;
                const migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);
                if (!migrationTimestamp || isNaN(migrationTimestamp)) {
                    throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);
                }
                return new Migration_1.Migration(undefined, migrationTimestamp, migrationClassName, migration);
            });
            this.checkForDuplicateMigrations(migrations);
            // sort them by timestamp
            return migrations.sort((a, b) => a.timestamp - b.timestamp);
        }
        checkForDuplicateMigrations(migrations) {
            const migrationNames = migrations.map(migration => migration.name);
            const duplicates = Array.from(new Set(migrationNames.filter((migrationName, index) => migrationNames.indexOf(migrationName) < index)));
            if (duplicates.length > 0) {
                throw Error(`Duplicate migrations: ${duplicates.join(", ")}`);
            }
        }
        /**
         * Finds the latest migration (sorts by timestamp) in the given array of migrations.
         */
        getLatestTimestampMigration(migrations) {
            const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);
            return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;
        }
        /**
         * Finds the latest migration in the given array of migrations.
         * PRE: Migration array must be sorted by descending id.
         */
        getLatestExecutedMigration(sortedMigrations) {
            return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;
        }
        /**
         * Inserts new executed migration's data into migrations table.
         */
        async insertExecutedMigration(queryRunner, migration) {
            const values = {};
            if (this.connection.driver instanceof SqlServerDriver_8.SqlServerDriver) {
                values["timestamp"] = new MssqlParameter_3.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));
                values["name"] = new MssqlParameter_3.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));
            }
            else {
                values["timestamp"] = migration.timestamp;
                values["name"] = migration.name;
            }
            if (this.connection.driver instanceof MongoDriver_6.MongoDriver) {
                const mongoRunner = queryRunner;
                await mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).insert(values);
            }
            else {
                const qb = queryRunner.manager.createQueryBuilder();
                await qb.insert()
                    .into(this.migrationsTable)
                    .values(values)
                    .execute();
            }
        }
        /**
         * Delete previously executed migration's data from the migrations table.
         */
        async deleteExecutedMigration(queryRunner, migration) {
            const conditions = {};
            if (this.connection.driver instanceof SqlServerDriver_8.SqlServerDriver) {
                conditions["timestamp"] = new MssqlParameter_3.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));
                conditions["name"] = new MssqlParameter_3.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));
            }
            else {
                conditions["timestamp"] = migration.timestamp;
                conditions["name"] = migration.name;
            }
            if (this.connection.driver instanceof MongoDriver_6.MongoDriver) {
                const mongoRunner = queryRunner;
                await mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).deleteOne(conditions);
            }
            else {
                const qb = queryRunner.manager.createQueryBuilder();
                await qb.delete()
                    .from(this.migrationsTable)
                    .where(`${qb.escape("timestamp")} = :timestamp`)
                    .andWhere(`${qb.escape("name")} = :name`)
                    .setParameters(conditions)
                    .execute();
            }
        }
        async withQueryRunner(callback) {
            const queryRunner = this.queryRunner || this.connection.createQueryRunner();
            try {
                return callback(queryRunner);
            }
            finally {
                if (!this.queryRunner) {
                    await queryRunner.release();
                }
            }
        }
    }
    exports.MigrationExecutor = MigrationExecutor;
});
define("typeorm/error/MissingPrimaryColumnError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingPrimaryColumnError = void 0;
    /**
     */
    class MissingPrimaryColumnError extends Error {
        constructor(entityMetadata) {
            super();
            this.name = "MissingPrimaryColumnError";
            Object.setPrototypeOf(this, MissingPrimaryColumnError.prototype);
            this.message = `Entity "${entityMetadata.name}" does not have a primary column. Primary column is required to ` +
                `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;
        }
    }
    exports.MissingPrimaryColumnError = MissingPrimaryColumnError;
});
define("typeorm/error/CircularRelationsError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CircularRelationsError = void 0;
    /**
     * Thrown when circular relations detected with nullable set to false.
     */
    class CircularRelationsError extends Error {
        constructor(path) {
            super();
            this.name = "CircularRelationsError";
            Object.setPrototypeOf(this, CircularRelationsError.prototype);
            this.message = `Circular relations detected: ${path}. To resolve this issue you need to set nullable: true somewhere in this dependency structure.`;
        }
    }
    exports.CircularRelationsError = CircularRelationsError;
});
/**
 * This source code is from https://github.com/jriecken/dependency-graph
 * Just added "any" types here, wrapper everything into exported class.
 * We cant use a package itself because we want to package "everything-in-it" for the frontend users of TypeORM.
 */
define("typeorm/util/DepGraph", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DepGraph = void 0;
    /**
     * A simple dependency graph
     */
    /**
     * Helper for creating a Depth-First-Search on
     * a set of edges.
     *
     * Detects cycles and throws an Error if one is detected.
     *
     * @param edges The set of edges to DFS through
     * @param leavesOnly Whether to only return "leaf" nodes (ones who have no edges)
     * @param result An array in which the results will be populated
     */
    function createDFS(edges, leavesOnly, result) {
        let currentPath = [];
        let visited = {};
        return function DFS(currentNode) {
            visited[currentNode] = true;
            currentPath.push(currentNode);
            edges[currentNode].forEach(function (node) {
                if (!visited[node]) {
                    DFS(node);
                }
                else if (currentPath.indexOf(node) >= 0) {
                    currentPath.push(node);
                    throw new Error(`Dependency Cycle Found: ${currentPath.join(" -> ")}`);
                }
            });
            currentPath.pop();
            if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {
                result.push(currentNode);
            }
        };
    }
    class DepGraph {
        constructor() {
            this.nodes = {};
            this.outgoingEdges = {}; // Node -> [Dependency Node]
            this.incomingEdges = {}; // Node -> [Dependant Node]
        }
        /**
         * Add a node to the dependency graph. If a node already exists, this method will do nothing.
         */
        addNode(node, data) {
            if (!this.hasNode(node)) {
                // Checking the arguments length allows the user to add a node with undefined data
                if (arguments.length === 2) {
                    this.nodes[node] = data;
                }
                else {
                    this.nodes[node] = node;
                }
                this.outgoingEdges[node] = [];
                this.incomingEdges[node] = [];
            }
        }
        /**
         * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.
         */
        removeNode(node) {
            if (this.hasNode(node)) {
                delete this.nodes[node];
                delete this.outgoingEdges[node];
                delete this.incomingEdges[node];
                [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {
                    Object.keys(edgeList).forEach(function (key) {
                        let idx = edgeList[key].indexOf(node);
                        if (idx >= 0) {
                            edgeList[key].splice(idx, 1);
                        }
                    }, this);
                });
            }
        }
        /**
         * Check if a node exists in the graph
         */
        hasNode(node) {
            return this.nodes.hasOwnProperty(node);
        }
        /**
         * Get the data associated with a node name
         */
        getNodeData(node) {
            if (this.hasNode(node)) {
                return this.nodes[node];
            }
            else {
                throw new Error(`Node does not exist: ${node}`);
            }
        }
        /**
         * Set the associated data for a given node name. If the node does not exist, this method will throw an error
         */
        setNodeData(node, data) {
            if (this.hasNode(node)) {
                this.nodes[node] = data;
            }
            else {
                throw new Error(`Node does not exist: ${node}`);
            }
        }
        /**
         * Add a dependency between two nodes. If either of the nodes does not exist,
         * an Error will be thrown.
         */
        addDependency(from, to) {
            if (!this.hasNode(from)) {
                throw new Error(`Node does not exist: ${from}`);
            }
            if (!this.hasNode(to)) {
                throw new Error(`Node does not exist: ${to}`);
            }
            if (this.outgoingEdges[from].indexOf(to) === -1) {
                this.outgoingEdges[from].push(to);
            }
            if (this.incomingEdges[to].indexOf(from) === -1) {
                this.incomingEdges[to].push(from);
            }
            return true;
        }
        /**
         * Remove a dependency between two nodes.
         */
        removeDependency(from, to) {
            let idx;
            if (this.hasNode(from)) {
                idx = this.outgoingEdges[from].indexOf(to);
                if (idx >= 0) {
                    this.outgoingEdges[from].splice(idx, 1);
                }
            }
            if (this.hasNode(to)) {
                idx = this.incomingEdges[to].indexOf(from);
                if (idx >= 0) {
                    this.incomingEdges[to].splice(idx, 1);
                }
            }
        }
        /**
         * Get an array containing the nodes that the specified node depends on (transitively).
         *
         * Throws an Error if the graph has a cycle, or the specified node does not exist.
         *
         * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned
         * in the array.
         */
        dependenciesOf(node, leavesOnly) {
            if (this.hasNode(node)) {
                let result = [];
                let DFS = createDFS(this.outgoingEdges, leavesOnly, result);
                DFS(node);
                let idx = result.indexOf(node);
                if (idx >= 0) {
                    result.splice(idx, 1);
                }
                return result;
            }
            else {
                throw new Error(`Node does not exist: ${node}`);
            }
        }
        /**
         * get an array containing the nodes that depend on the specified node (transitively).
         *
         * Throws an Error if the graph has a cycle, or the specified node does not exist.
         *
         * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.
         */
        dependantsOf(node, leavesOnly) {
            if (this.hasNode(node)) {
                let result = [];
                let DFS = createDFS(this.incomingEdges, leavesOnly, result);
                DFS(node);
                let idx = result.indexOf(node);
                if (idx >= 0) {
                    result.splice(idx, 1);
                }
                return result;
            }
            else {
                throw new Error(`Node does not exist: ${node}`);
            }
        }
        /**
         * Construct the overall processing order for the dependency graph.
         *
         * Throws an Error if the graph has a cycle.
         *
         * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.
         */
        overallOrder(leavesOnly) {
            let self = this;
            let result = [];
            let keys = Object.keys(this.nodes);
            if (keys.length === 0) {
                return result; // Empty graph
            }
            else {
                // Look for cycles - we run the DFS starting at all the nodes in case there
                // are several disconnected subgraphs inside this dependency graph.
                let CycleDFS = createDFS(this.outgoingEdges, false, []);
                keys.forEach(function (n) {
                    CycleDFS(n);
                });
                let DFS = createDFS(this.outgoingEdges, leavesOnly, result);
                // Find all potential starting points (nodes with nothing depending on them) an
                // run a DFS starting at these points to get the order
                keys.filter(function (node) {
                    return self.incomingEdges[node].length === 0;
                }).forEach(function (n) {
                    DFS(n);
                });
                return result;
            }
        }
    }
    exports.DepGraph = DepGraph;
});
define("typeorm/error/DataTypeNotSupportedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataTypeNotSupportedError = void 0;
    class DataTypeNotSupportedError extends Error {
        constructor(column, dataType, database) {
            super();
            this.name = "DataTypeNotSupportedError";
            Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);
            const type = typeof dataType === "string" ? dataType : dataType.name;
            this.message = `Data type "${type}" in "${column.entityMetadata.targetName}.${column.propertyName}" is not supported by "${database}" database.`;
        }
    }
    exports.DataTypeNotSupportedError = DataTypeNotSupportedError;
});
define("typeorm/error/NoConnectionOptionError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoConnectionOptionError = void 0;
    /**
     * Thrown when some option is not set in the connection options.
     */
    class NoConnectionOptionError extends Error {
        constructor(optionName) {
            super();
            Object.setPrototypeOf(this, NoConnectionOptionError.prototype);
            this.message = `Option "${optionName}" is not set in your connection options, please define "${optionName}" option in your connection options or ormconfig.json`;
        }
    }
    exports.NoConnectionOptionError = NoConnectionOptionError;
});
define("typeorm/error/InitializedRelationError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InitializedRelationError = void 0;
    /**
     * Thrown when relation has array initialized which is forbidden my ORM.
     *
     * @see https://github.com/typeorm/typeorm/issues/1319
     * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers
     */
    class InitializedRelationError extends Error {
        constructor(relation) {
            super();
            Object.setPrototypeOf(this, InitializedRelationError.prototype);
            this.message = `Array initializations are not allowed in entity relations. ` +
                `Please remove array initialization (= []) from "${relation.entityMetadata.targetName}#${relation.propertyPath}". ` +
                `This is ORM requirement to make relations to work properly. Refer docs for more information.`;
        }
    }
    exports.InitializedRelationError = InitializedRelationError;
});
define("typeorm/metadata-builder/EntityMetadataValidator", ["require", "exports", "typeorm/error/MissingPrimaryColumnError", "typeorm/error/CircularRelationsError", "typeorm/util/DepGraph", "typeorm/error/DataTypeNotSupportedError", "typeorm/driver/mongodb/MongoDriver", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/error/NoConnectionOptionError", "typeorm/error/InitializedRelationError", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, MissingPrimaryColumnError_1, CircularRelationsError_1, DepGraph_1, DataTypeNotSupportedError_1, MongoDriver_7, SqlServerDriver_9, MysqlDriver_7, NoConnectionOptionError_1, InitializedRelationError_1, AuroraDataApiDriver_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMetadataValidator = void 0;
    /// todo: add check if there are multiple tables with the same name
    /// todo: add checks when generated column / table names are too long for the specific driver
    // todo: type in function validation, inverse side function validation
    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage
    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?
    // todo: check if multiple tree parent metadatas in validator
    // todo: tree decorators can be used only on closure table (validation)
    // todo: throw error if parent tree metadata was not specified in a closure table
    // todo: MetadataArgsStorage: type in function validation, inverse side function validation
    // todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage
    // todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?
    // todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too
    // todo: check if relation decorator contains primary: true and nullable: true
    // todo: check column length, precision. scale
    // todo: MySQL index can be unique or spatial or fulltext
    /**
     * Validates built entity metadatas.
     */
    class EntityMetadataValidator {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Validates all given entity metadatas.
         */
        validateMany(entityMetadatas, driver) {
            entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas, driver));
            this.validateDependencies(entityMetadatas);
            this.validateEagerRelations(entityMetadatas);
        }
        /**
         * Validates given entity metadata.
         */
        validate(entityMetadata, allEntityMetadatas, driver) {
            // check if table metadata has an id
            if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)
                throw new MissingPrimaryColumnError_1.MissingPrimaryColumnError(entityMetadata);
            // validate if table is using inheritance it has a discriminator
            // also validate if discriminator values are not empty and not repeated
            if (entityMetadata.inheritancePattern === "STI" || entityMetadata.tableType === "entity-child") {
                if (!entityMetadata.discriminatorColumn)
                    throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);
                if (typeof entityMetadata.discriminatorValue === "undefined")
                    throw new Error(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);
                const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {
                    return metadata !== entityMetadata
                        && (metadata.inheritancePattern === "STI" || metadata.tableType === "entity-child")
                        && metadata.discriminatorValue === entityMetadata.discriminatorValue
                        && metadata.inheritanceTree.some(parent => entityMetadata.inheritanceTree.indexOf(parent) !== -1);
                });
                if (sameDiscriminatorValueEntityMetadata)
                    throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);
            }
            entityMetadata.relationCounts.forEach(relationCount => {
                if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)
                    throw new Error(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);
            });
            if (!(driver instanceof MongoDriver_7.MongoDriver)) {
                entityMetadata.columns.forEach(column => {
                    const normalizedColumn = driver.normalizeType(column);
                    if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)
                        throw new DataTypeNotSupportedError_1.DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);
                    if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)
                        throw new Error(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);
                });
            }
            if (driver instanceof MysqlDriver_7.MysqlDriver || driver instanceof AuroraDataApiDriver_6.AuroraDataApiDriver) {
                const generatedColumns = entityMetadata.columns.filter(column => column.isGenerated && column.generationStrategy !== "uuid");
                if (generatedColumns.length > 1)
                    throw new Error(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);
            }
            // for mysql we are able to not define a default selected database, instead all entities can have their database
            // defined in their decorators. To make everything work either all entities must have database define and we
            // can live without database set in the connection options, either database in the connection options must be set
            if (driver instanceof MysqlDriver_7.MysqlDriver) {
                const metadatasWithDatabase = allEntityMetadatas.filter(metadata => metadata.database);
                if (metadatasWithDatabase.length === 0 && !driver.database)
                    throw new NoConnectionOptionError_1.NoConnectionOptionError("database");
            }
            if (driver instanceof SqlServerDriver_9.SqlServerDriver) {
                const charsetColumns = entityMetadata.columns.filter(column => column.charset);
                if (charsetColumns.length > 1)
                    throw new Error(`Character set specifying is not supported in Sql Server`);
            }
            // check if relations are all without initialized properties
            const entityInstance = entityMetadata.create();
            entityMetadata.relations.forEach(relation => {
                if (relation.isManyToMany || relation.isOneToMany) {
                    // we skip relations for which persistence is disabled since initialization in them cannot harm somehow
                    if (relation.persistenceEnabled === false)
                        return;
                    // get entity relation value and check if its an array
                    const relationInitializedValue = relation.getEntityValue(entityInstance);
                    if (Array.isArray(relationInitializedValue))
                        throw new InitializedRelationError_1.InitializedRelationError(relation);
                }
            });
            // validate relations
            entityMetadata.relations.forEach(relation => {
                // check join tables:
                // using JoinTable is possible only on one side of the many-to-many relation
                // todo(dima): fix
                // if (relation.joinTable) {
                //     if (!relation.isManyToMany)
                //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);
                //     // if there is inverse side of the relation, then check if it does not have join table too
                //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)
                //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);
                // }
                // check join columns:
                // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types
                // first check if relation is one-to-one or many-to-one
                // todo(dima): fix
                /*if (relation.joinColumn) {
    
                    // join column can be applied only on one-to-one and many-to-one relations
                    if (!relation.isOneToOne && !relation.isManyToOne)
                        throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);
    
                    // if there is inverse side of the relation, then check if it does not have join table too
                    if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)
                        throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);
    
                    // check if join column really has referenced column
                    if (relation.joinColumn && !relation.joinColumn.referencedColumn)
                        throw new Error(`Join column does not have referenced column set`);
    
                }
    
                // if its a one-to-one relation and JoinColumn is missing on both sides of the relation
                // or its one-side relation without JoinColumn we should give an error
                if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))
                    throw new MissingJoinColumnError(entityMetadata, relation);*/
                // if its a many-to-many relation and JoinTable is missing on both sides of the relation
                // or its one-side relation without JoinTable we should give an error
                // todo(dima): fix it
                // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))
                //     throw new MissingJoinTableError(entityMetadata, relation);
                // todo: validate if its one-to-one and side which does not have join column MUST have inverse side
                // todo: validate if its many-to-many and side which does not have join table MUST have inverse side
                // todo: if there is a relation, and inverse side is specified only on one side, shall we give error
                // todo: with message like: "Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion".
                // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)
                // todo: check if there are multiple columns on the same column applied.
                // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)
                // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed
                // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all
                // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity
                // todo: check if entity with duplicate names, some decorators exist
            });
            // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)
            entityMetadata.relations.forEach(relation => {
                const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;
                if (isCircularCascadeRemove)
                    throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +
                        `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);
            }); // todo: maybe better just deny removal from one to one relation without join column?
            entityMetadata.eagerRelations.forEach(relation => {
            });
        }
        /**
         * Validates dependencies of the entity metadatas.
         */
        validateDependencies(entityMetadatas) {
            const graph = new DepGraph_1.DepGraph();
            entityMetadatas.forEach(entityMetadata => {
                graph.addNode(entityMetadata.name);
            });
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.relationsWithJoinColumns
                    .filter(relation => !relation.isNullable)
                    .forEach(relation => {
                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);
                });
            });
            try {
                graph.overallOrder();
            }
            catch (err) {
                throw new CircularRelationsError_1.CircularRelationsError(err.toString().replace("Error: Dependency Cycle Found: ", ""));
            }
        }
        /**
         * Validates eager relations to prevent circular dependency in them.
         */
        validateEagerRelations(entityMetadatas) {
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.eagerRelations.forEach(relation => {
                    if (relation.inverseRelation && relation.inverseRelation.isEager)
                        throw new Error(`Circular eager relations are disallowed. ` +
                            `${entityMetadata.targetName}#${relation.propertyPath} contains "eager: true", and its inverse side ` +
                            `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains "eager: true" as well.` +
                            ` Remove "eager: true" from one side of the relation.`);
                });
            });
        }
    }
    exports.EntityMetadataValidator = EntityMetadataValidator;
});
define("typeorm/entity-manager/SqljsEntityManager", ["require", "exports", "typeorm/entity-manager/EntityManager"], function (require, exports, EntityManager_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqljsEntityManager = void 0;
    /**
     * A special EntityManager that includes import/export and load/save function
     * that are unique to Sql.js.
     */
    class SqljsEntityManager extends EntityManager_2.EntityManager {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, queryRunner) {
            super(connection, queryRunner);
            this.driver = connection.driver;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Loads either the definition from a file (Node.js) or localstorage (browser)
         * or uses the given definition to open a new database.
         */
        async loadDatabase(fileNameOrLocalStorageOrData) {
            await this.driver.load(fileNameOrLocalStorageOrData);
        }
        /**
         * Saves the current database to a file (Node.js) or localstorage (browser)
         * if fileNameOrLocalStorage is not set options.location is used.
         */
        async saveDatabase(fileNameOrLocalStorage) {
            await this.driver.save(fileNameOrLocalStorage);
        }
        /**
         * Returns the current database definition.
         */
        exportDatabase() {
            return this.driver.export();
        }
    }
    exports.SqljsEntityManager = SqljsEntityManager;
});
define("typeorm/entity-manager/EntityManagerFactory", ["require", "exports", "typeorm/entity-manager/EntityManager", "typeorm/entity-manager/MongoEntityManager", "typeorm/driver/mongodb/MongoDriver", "typeorm/entity-manager/SqljsEntityManager", "typeorm/driver/sqljs/SqljsDriver"], function (require, exports, EntityManager_3, MongoEntityManager_1, MongoDriver_8, SqljsEntityManager_1, SqljsDriver_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityManagerFactory = void 0;
    /**
     * Helps to create entity managers.
     */
    class EntityManagerFactory {
        /**
         * Creates a new entity manager depend on a given connection's driver.
         */
        create(connection, queryRunner) {
            if (connection.driver instanceof MongoDriver_8.MongoDriver)
                return new MongoEntityManager_1.MongoEntityManager(connection);
            if (connection.driver instanceof SqljsDriver_6.SqljsDriver)
                return new SqljsEntityManager_1.SqljsEntityManager(connection, queryRunner);
            return new EntityManager_3.EntityManager(connection, queryRunner);
        }
    }
    exports.EntityManagerFactory = EntityManagerFactory;
});
define("typeorm/error/MissingDriverError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingDriverError = void 0;
    /**
     * Thrown when consumer specifies driver type that does not exist or supported.
     */
    class MissingDriverError extends Error {
        constructor(driverType) {
            super();
            this.name = "MissingDriverError";
            Object.setPrototypeOf(this, MissingDriverError.prototype);
            this.message = `Wrong driver: "${driverType}" given. Supported drivers are: "cordova", "expo", "mariadb", "mongodb", "mssql", "mysql", "oracle", "postgres", "sqlite", "better-sqlite3", "sqljs", "react-native", "aurora-data-api", "aurora-data-api-pg".`;
        }
    }
    exports.MissingDriverError = MissingDriverError;
});
define("typeorm/driver/sqlite/SqliteQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster", "typeorm/error/ConnectionIsNotSetError"], function (require, exports, QueryRunnerAlreadyReleasedError_10, QueryFailedError_8, AbstractSqliteQueryRunner_3, Broadcaster_11, ConnectionIsNotSetError_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqliteQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     *
     * Does not support compose primary keys with autoincrement field.
     * todo: need to throw exception for this case.
     */
    class SqliteQueryRunner extends AbstractSqliteQueryRunner_3.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_11.Broadcaster(this);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_10.QueryRunnerAlreadyReleasedError();
            const connection = this.driver.connection;
            const options = connection.options;
            if (!connection.isConnected) {
                throw new ConnectionIsNotSetError_7.ConnectionIsNotSetError('sqlite');
            }
            return new Promise(async (ok, fail) => {
                const databaseConnection = await this.connect();
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                const isInsertQuery = query.substr(0, 11) === "INSERT INTO";
                const execute = async () => {
                    if (isInsertQuery) {
                        databaseConnection.run(query, parameters, handler);
                    }
                    else {
                        databaseConnection.all(query, parameters, handler);
                    }
                };
                const handler = function (err, result) {
                    if (err && err.toString().indexOf("SQLITE_BUSY:") !== -1) {
                        if (typeof options.busyErrorRetry === "number" && options.busyErrorRetry > 0) {
                            setTimeout(execute, options.busyErrorRetry);
                            return;
                        }
                    }
                    // log slow queries if maxQueryExecution time is set
                    const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;
                    const queryEndTime = +new Date();
                    const queryExecutionTime = queryEndTime - queryStartTime;
                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                        connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                    if (err) {
                        connection.logger.logQueryError(err, query, parameters, this);
                        fail(new QueryFailedError_8.QueryFailedError(query, parameters, err));
                    }
                    else {
                        ok(isInsertQuery ? this["lastID"] : result);
                    }
                };
                await execute();
            });
        }
    }
    exports.SqliteQueryRunner = SqliteQueryRunner;
});
define("typeorm/driver/sqlite/SqliteDriver", ["require", "exports", "mkdirp", "path", "typeorm/error/DriverPackageNotInstalledError", "typeorm/driver/sqlite/SqliteQueryRunner", "typeorm/error/DriverOptionNotSetError", "typeorm/platform/PlatformTools", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver"], function (require, exports, mkdirp_2, path_2, DriverPackageNotInstalledError_10, SqliteQueryRunner_1, DriverOptionNotSetError_3, PlatformTools_13, AbstractSqliteDriver_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqliteDriver = void 0;
    /**
     * Organizes communication with sqlite DBMS.
     */
    class SqliteDriver extends AbstractSqliteDriver_8.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            this.connection = connection;
            this.options = connection.options;
            this.database = this.options.database;
            // validate options to make sure everything is set
            if (!this.options.database)
                throw new DriverOptionNotSetError_3.DriverOptionNotSetError("database");
            // load sqlite package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.queryRunner = undefined;
                this.databaseConnection.close((err) => err ? fail(err) : ok());
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new SqliteQueryRunner_1.SqliteQueryRunner(this);
            return this.queryRunner;
        }
        normalizeType(column) {
            if (column.type === Buffer) {
                return "blob";
            }
            return super.normalizeType(column);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        async createDatabaseConnection() {
            await this.createDatabaseDirectory(this.options.database);
            const databaseConnection = await new Promise((ok, fail) => {
                const connection = new this.sqlite.Database(this.options.database, (err) => {
                    if (err)
                        return fail(err);
                    ok(connection);
                });
            });
            // Internal function to run a command on the connection and fail if an error occured.
            function run(line) {
                return new Promise((ok, fail) => {
                    databaseConnection.run(line, (err) => {
                        if (err)
                            return fail(err);
                        ok();
                    });
                });
            }
            if (this.options.enableWAL) {
                await run(`PRAGMA journal_mode = WAL;`);
            }
            // we need to enable foreign keys in sqlite to make sure all foreign key related features
            // working properly. this also makes onDelete to work with sqlite.
            await run(`PRAGMA foreign_keys = ON;`);
            // in the options, if encryption key for SQLCipher is setted.
            if (this.options.key) {
                await run(`PRAGMA key = ${JSON.stringify(this.options.key)};`);
            }
            return databaseConnection;
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.sqlite = PlatformTools_13.PlatformTools.load("sqlite3").verbose();
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_10.DriverPackageNotInstalledError("SQLite", "sqlite3");
            }
        }
        /**
         * Auto creates database directory if it does not exist.
         */
        async createDatabaseDirectory(fullPath) {
            await mkdirp_2.default(path_2.default.dirname(fullPath));
        }
    }
    exports.SqliteDriver = SqliteDriver;
});
define("typeorm/driver/cordova/CordovaQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster"], function (require, exports, QueryRunnerAlreadyReleasedError_11, QueryFailedError_9, AbstractSqliteQueryRunner_4, Broadcaster_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CordovaQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class CordovaQueryRunner extends AbstractSqliteQueryRunner_4.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_12.Broadcaster(this);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_11.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                const databaseConnection = await this.connect();
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                databaseConnection.executeSql(query, parameters, (result) => {
                    // log slow queries if maxQueryExecution time is set
                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                    const queryEndTime = +new Date();
                    const queryExecutionTime = queryEndTime - queryStartTime;
                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                    if (query.substr(0, 11) === "INSERT INTO") {
                        ok(result.insertId);
                    }
                    else {
                        let resultSet = [];
                        for (let i = 0; i < result.rows.length; i++) {
                            resultSet.push(result.rows.item(i));
                        }
                        ok(resultSet);
                    }
                }, (err) => {
                    this.driver.connection.logger.logQueryError(err, query, parameters, this);
                    fail(new QueryFailedError_9.QueryFailedError(query, parameters, err));
                });
            });
        }
        /**
         * Insert a new row with given values into the given table.
         * Returns value of the generated column if given and generate column exist in the table.
         // todo: implement new syntax
        async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {
            const keys = Object.keys(keyValues);
            const columns = keys.map(key => `"${key}"`).join(", ");
            const values = keys.map(key => "?").join(",");
            const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];
            const sql = columns.length > 0 ? (`INSERT INTO "${tableName}"(${columns}) VALUES (${values})`) : `INSERT INTO "${tableName}" DEFAULT VALUES`;
            const parameters = keys.map(key => keyValues[key]);
    
            return new Promise<InsertResult>(async (ok, fail) => {
                this.driver.connection.logger.logQuery(sql, parameters, this);
                const __this = this;
                const databaseConnection = await this.connect();
                databaseConnection.executeSql(sql, parameters, (resultSet: any) => {
                    const generatedMap = generatedColumns.reduce((map, generatedColumn) => {
                        const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === "increment" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];
                        if (!value) return map;
                        return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));
                    }, {} as ObjectLiteral);
    
                    ok({
                        result: undefined,
                        generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined
                    });
                }, (err: any) => {
                    __this.driver.connection.logger.logQueryError(err, sql, parameters, this);
                    fail(err);
                });
            });
        }*/
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Parametrizes given object of values. Used to create column=value queries.
         */
        parametrize(objectLiteral, startIndex = 0) {
            return Object.keys(objectLiteral).map((key, index) => `"${key}"` + "=?");
        }
    }
    exports.CordovaQueryRunner = CordovaQueryRunner;
});
define("typeorm/driver/cordova/CordovaDriver", ["require", "exports", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/cordova/CordovaQueryRunner", "typeorm/error/DriverOptionNotSetError", "typeorm/error/DriverPackageNotInstalledError"], function (require, exports, AbstractSqliteDriver_9, CordovaQueryRunner_1, DriverOptionNotSetError_4, DriverPackageNotInstalledError_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CordovaDriver = void 0;
    class CordovaDriver extends AbstractSqliteDriver_9.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            // this.connection = connection;
            // this.options = connection.options as CordovaConnectionOptions;
            this.database = this.options.database;
            // validate options to make sure everything is set
            if (!this.options.database)
                throw new DriverOptionNotSetError_4.DriverOptionNotSetError("database");
            if (!this.options.location)
                throw new DriverOptionNotSetError_4.DriverOptionNotSetError("location");
            // load sqlite package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.queryRunner = undefined;
                this.databaseConnection.close(ok, fail);
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new CordovaQueryRunner_1.CordovaQueryRunner(this);
            return this.queryRunner;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        createDatabaseConnection() {
            return new Promise((ok, fail) => {
                const options = Object.assign({}, {
                    name: this.options.database,
                    location: this.options.location,
                }, this.options.extra || {});
                this.sqlite.openDatabase(options, (db) => {
                    const databaseConnection = db;
                    // we need to enable foreign keys in sqlite to make sure all foreign key related features
                    // working properly. this also makes onDelete to work with sqlite.
                    databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result) => {
                        ok(databaseConnection);
                    }, (error) => {
                        fail(error);
                    });
                }, (error) => {
                    fail(error);
                });
            });
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.sqlite = window.sqlitePlugin;
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_11.DriverPackageNotInstalledError("Cordova-SQLite", "cordova-sqlite-storage");
            }
        }
    }
    exports.CordovaDriver = CordovaDriver;
});
define("typeorm/driver/react-native/ReactNativeQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster"], function (require, exports, QueryRunnerAlreadyReleasedError_12, QueryFailedError_10, AbstractSqliteQueryRunner_5, Broadcaster_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactNativeQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class ReactNativeQueryRunner extends AbstractSqliteQueryRunner_5.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_13.Broadcaster(this);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_12.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                const databaseConnection = await this.connect();
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                databaseConnection.executeSql(query, parameters, (result) => {
                    // log slow queries if maxQueryExecution time is set
                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                    const queryEndTime = +new Date();
                    const queryExecutionTime = queryEndTime - queryStartTime;
                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                    // return id of inserted row, if query was insert statement.
                    if (query.substr(0, 11) === "INSERT INTO") {
                        ok(result.insertId);
                    }
                    else {
                        let resultSet = [];
                        for (let i = 0; i < result.rows.length; i++) {
                            resultSet.push(result.rows.item(i));
                        }
                        ok(resultSet);
                    }
                }, (err) => {
                    this.driver.connection.logger.logQueryError(err, query, parameters, this);
                    fail(new QueryFailedError_10.QueryFailedError(query, parameters, err));
                });
            });
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Parametrizes given object of values. Used to create column=value queries.
         */
        parametrize(objectLiteral, startIndex = 0) {
            return Object.keys(objectLiteral).map((key, index) => `"${key}"` + "=?");
        }
    }
    exports.ReactNativeQueryRunner = ReactNativeQueryRunner;
});
define("typeorm/driver/react-native/ReactNativeDriver", ["require", "exports", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/react-native/ReactNativeQueryRunner", "typeorm/error/DriverOptionNotSetError", "typeorm/error/DriverPackageNotInstalledError"], function (require, exports, AbstractSqliteDriver_10, ReactNativeQueryRunner_1, DriverOptionNotSetError_5, DriverPackageNotInstalledError_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactNativeDriver = void 0;
    class ReactNativeDriver extends AbstractSqliteDriver_10.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            this.database = this.options.database;
            // validate options to make sure everything is set
            if (!this.options.database)
                throw new DriverOptionNotSetError_5.DriverOptionNotSetError("database");
            if (!this.options.location)
                throw new DriverOptionNotSetError_5.DriverOptionNotSetError("location");
            // load sqlite package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.queryRunner = undefined;
                this.databaseConnection.close(ok, fail);
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new ReactNativeQueryRunner_1.ReactNativeQueryRunner(this);
            return this.queryRunner;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        createDatabaseConnection() {
            return new Promise((ok, fail) => {
                const options = Object.assign({}, {
                    name: this.options.database,
                    location: this.options.location,
                }, this.options.extra || {});
                this.sqlite.openDatabase(options, (db) => {
                    const databaseConnection = db;
                    // we need to enable foreign keys in sqlite to make sure all foreign key related features
                    // working properly. this also makes onDelete work with sqlite.
                    databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result) => {
                        ok(databaseConnection);
                    }, (error) => {
                        fail(error);
                    });
                }, (error) => {
                    fail(error);
                });
            });
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            try {
                this.sqlite = require("react-native-sqlite-storage");
            }
            catch (e) {
                throw new DriverPackageNotInstalledError_12.DriverPackageNotInstalledError("React-Native", "react-native-sqlite-storage");
            }
        }
    }
    exports.ReactNativeDriver = ReactNativeDriver;
});
define("typeorm/driver/nativescript/NativescriptQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/subscriber/Broadcaster"], function (require, exports, QueryRunnerAlreadyReleasedError_13, QueryFailedError_11, AbstractSqliteQueryRunner_6, Broadcaster_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativescriptQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class NativescriptQueryRunner extends AbstractSqliteQueryRunner_6.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_14.Broadcaster(this);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_13.QueryRunnerAlreadyReleasedError();
            const connection = this.driver.connection;
            return new Promise((ok, fail) => {
                const isInsertQuery = query.substr(0, 11) === "INSERT INTO";
                const handler = function (err, result) {
                    // log slow queries if maxQueryExecution time is set
                    const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;
                    const queryEndTime = +new Date();
                    const queryExecutionTime = queryEndTime - queryStartTime;
                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
                        connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                    if (err) {
                        connection.logger.logQueryError(err, query, parameters, this);
                        fail(new QueryFailedError_11.QueryFailedError(query, parameters, err));
                    }
                    else {
                        // when isInsertQuery == true, result is the id
                        ok(result);
                    }
                };
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                this.connect().then(databaseConnection => {
                    if (isInsertQuery) {
                        databaseConnection.execSQL(query, parameters, handler);
                    }
                    else {
                        databaseConnection.all(query, parameters, handler);
                    }
                });
            });
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Parametrizes given object of values. Used to create column=value queries.
         */
        parametrize(objectLiteral, startIndex = 0) {
            return Object.keys(objectLiteral).map((key, index) => `"${key}"` + "=?");
        }
    }
    exports.NativescriptQueryRunner = NativescriptQueryRunner;
});
define("typeorm/driver/nativescript/NativescriptDriver", ["require", "exports", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/nativescript/NativescriptQueryRunner", "typeorm/error/DriverOptionNotSetError", "typeorm/error/DriverPackageNotInstalledError"], function (require, exports, AbstractSqliteDriver_11, NativescriptQueryRunner_1, DriverOptionNotSetError_6, DriverPackageNotInstalledError_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativescriptDriver = void 0;
    /**
     * Organizes communication with sqlite DBMS within Nativescript.
     */
    class NativescriptDriver extends AbstractSqliteDriver_11.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            this.connection = connection;
            this.options = connection.options;
            this.database = this.options.database;
            this.driver = this.options.driver;
            // validate options to make sure everything is set
            if (!this.options.database) {
                throw new DriverOptionNotSetError_6.DriverOptionNotSetError("database");
            }
            // load sqlite package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.queryRunner = undefined;
                this.databaseConnection.close().then(ok).catch(fail);
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner) {
                this.queryRunner = new NativescriptQueryRunner_1.NativescriptQueryRunner(this);
            }
            return this.queryRunner;
        }
        normalizeType(column) {
            if (column.type === Buffer) {
                return "blob";
            }
            return super.normalizeType(column);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        createDatabaseConnection() {
            return new Promise((ok, fail) => {
                const options = Object.assign({}, {
                    readOnly: this.options.readOnly,
                    key: this.options.key,
                    multithreading: this.options.multithreading,
                    migrate: this.options.migrate,
                    iosFlags: this.options.iosFlags,
                    androidFlags: this.options.androidFlags,
                }, this.options.extra || {});
                new this.sqlite(this.options.database, options, (err, db) => {
                    if (err)
                        return fail(err);
                    // use object mode to work with TypeORM
                    db.resultType(this.sqlite.RESULTSASOBJECT);
                    // we need to enable foreign keys in sqlite to make sure all foreign key related features
                    // working properly. this also makes onDelete work with sqlite.
                    db.execSQL(`PRAGMA foreign_keys = ON;`, [], (err, result) => {
                        if (err)
                            return fail(err);
                        // We are all set
                        ok(db);
                    });
                });
            });
        }
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            this.sqlite = this.driver;
            if (!this.driver) {
                throw new DriverPackageNotInstalledError_13.DriverPackageNotInstalledError("Nativescript", "nativescript-sqlite");
            }
        }
    }
    exports.NativescriptDriver = NativescriptDriver;
});
define("typeorm/driver/expo/ExpoQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/QueryFailedError", "typeorm/driver/sqlite-abstract/AbstractSqliteQueryRunner", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/subscriber/Broadcaster", "typeorm/subscriber/BroadcasterResult"], function (require, exports, QueryRunnerAlreadyReleasedError_14, QueryFailedError_12, AbstractSqliteQueryRunner_7, TransactionAlreadyStartedError_9, TransactionNotStartedError_9, Broadcaster_15, BroadcasterResult_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpoQueryRunner = void 0;
    /**
     * Runs queries on a single sqlite database connection.
     */
    class ExpoQueryRunner extends AbstractSqliteQueryRunner_7.AbstractSqliteQueryRunner {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver) {
            super();
            this.driver = driver;
            this.connection = driver.connection;
            this.broadcaster = new Broadcaster_15.Broadcaster(this);
        }
        /**
         * Starts transaction. Within Expo, all database operations happen in a
         * transaction context, so issuing a `BEGIN TRANSACTION` command is
         * redundant and will result in the following error:
         *
         * `Error: Error code 1: cannot start a transaction within a transaction`
         *
         * Instead, we keep track of a `Transaction` object in `this.transaction`
         * and continue using the same object until we wish to commit the
         * transaction.
         */
        async startTransaction() {
            if (this.isTransactionActive && typeof this.transaction !== "undefined")
                throw new TransactionAlreadyStartedError_9.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            const afterBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         * Since Expo will automatically commit the transaction once all the
         * callbacks of the transaction object have been completed, "committing" a
         * transaction in this driver's context means that we delete the transaction
         * object and set the stage for the next transaction.
         */
        async commitTransaction() {
            if (!this.isTransactionActive && typeof this.transaction === "undefined")
                throw new TransactionNotStartedError_9.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = false;
            this.transaction = undefined;
            const afterBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         * This method's functionality is identical to `commitTransaction()` because
         * the transaction lifecycle is handled within the Expo transaction object.
         * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive && typeof this.transaction === "undefined")
                throw new TransactionNotStartedError_9.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = false;
            this.transaction = undefined;
            const afterBroadcastResult = new BroadcasterResult_16.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_14.QueryRunnerAlreadyReleasedError();
            return new Promise(async (ok, fail) => {
                const databaseConnection = await this.connect();
                this.driver.connection.logger.logQuery(query, parameters, this);
                const queryStartTime = +new Date();
                // All Expo SQL queries are executed in a transaction context
                databaseConnection.transaction((transaction) => {
                    if (typeof this.transaction === "undefined") {
                        this.startTransaction();
                        this.transaction = transaction;
                    }
                    this.transaction.executeSql(query, parameters, (t, result) => {
                        // log slow queries if maxQueryExecution time is set
                        const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;
                        const queryEndTime = +new Date();
                        const queryExecutionTime = queryEndTime - queryStartTime;
                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {
                            this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);
                        }
                        // return id of inserted row, if query was insert statement.
                        if (query.substr(0, 11) === "INSERT INTO") {
                            ok(result.insertId);
                        }
                        else {
                            let resultSet = [];
                            for (let i = 0; i < result.rows.length; i++) {
                                resultSet.push(result.rows.item(i));
                            }
                            ok(resultSet);
                        }
                    }, (t, err) => {
                        this.driver.connection.logger.logQueryError(err, query, parameters, this);
                        fail(new QueryFailedError_12.QueryFailedError(query, parameters, err));
                    });
                }, (err) => {
                    this.rollbackTransaction();
                }, () => {
                    this.isTransactionActive = false;
                    this.transaction = undefined;
                });
            });
        }
    }
    exports.ExpoQueryRunner = ExpoQueryRunner;
});
define("typeorm/driver/expo/ExpoDriver", ["require", "exports", "typeorm/driver/sqlite-abstract/AbstractSqliteDriver", "typeorm/driver/expo/ExpoQueryRunner", "typeorm/error/DriverOptionNotSetError"], function (require, exports, AbstractSqliteDriver_12, ExpoQueryRunner_1, DriverOptionNotSetError_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpoDriver = void 0;
    class ExpoDriver extends AbstractSqliteDriver_12.AbstractSqliteDriver {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super(connection);
            this.database = this.options.database;
            // validate options to make sure everything is set
            if (!this.options.database)
                throw new DriverOptionNotSetError_7.DriverOptionNotSetError("database");
            if (!this.options.driver)
                throw new DriverOptionNotSetError_7.DriverOptionNotSetError("driver");
            // load sqlite package
            this.sqlite = this.options.driver;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Closes connection with database.
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                try {
                    this.queryRunner = undefined;
                    this.databaseConnection._db.close();
                    this.databaseConnection = undefined;
                    ok();
                }
                catch (error) {
                    fail(error);
                }
            });
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            if (!this.queryRunner)
                this.queryRunner = new ExpoQueryRunner_1.ExpoQueryRunner(this);
            return this.queryRunner;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates connection with the database.
         */
        createDatabaseConnection() {
            return new Promise((ok, fail) => {
                try {
                    const databaseConnection = this.sqlite.openDatabase(this.options.database);
                    /*
                    // we need to enable foreign keys in sqlite to make sure all foreign key related features
                    // working properly. this also makes onDelete work with sqlite.
                    */
                    databaseConnection.transaction((tsx) => {
                        tsx.executeSql(`PRAGMA foreign_keys = ON;`, [], (t, result) => {
                            ok(databaseConnection);
                        }, (t, err) => {
                            fail({ transaction: t, error: err });
                        });
                    }, (err) => {
                        fail(err);
                    });
                }
                catch (error) {
                    fail(error);
                }
            });
        }
    }
    exports.ExpoDriver = ExpoDriver;
});
define("typeorm/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner", ["require", "exports", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/TransactionNotStartedError", "typeorm/driver/postgres/PostgresQueryRunner", "typeorm/subscriber/BroadcasterResult"], function (require, exports, QueryRunnerAlreadyReleasedError_15, TransactionAlreadyStartedError_10, TransactionNotStartedError_10, PostgresQueryRunner_2, BroadcasterResult_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuroraDataApiPostgresQueryRunner = void 0;
    class PostgresQueryRunnerWrapper extends PostgresQueryRunner_2.PostgresQueryRunner {
        constructor(driver, mode) {
            super(driver, mode);
        }
    }
    /**
     * Runs queries on a single postgres database connection.
     */
    class AuroraDataApiPostgresQueryRunner extends PostgresQueryRunnerWrapper {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(driver, client, mode) {
            super(driver, mode);
            this.client = client;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates/uses database connection from the connection pool to perform further operations.
         * Returns obtained database connection.
         */
        connect() {
            if (this.databaseConnection)
                return Promise.resolve(this.databaseConnection);
            if (this.databaseConnectionPromise)
                return this.databaseConnectionPromise;
            if (this.mode === "slave" && this.driver.isReplicated) {
                this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    this.releaseCallback = release;
                    return this.databaseConnection;
                });
            }
            else { // master
                this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]) => {
                    this.driver.connectedQueryRunners.push(this);
                    this.databaseConnection = connection;
                    this.releaseCallback = release;
                    return this.databaseConnection;
                });
            }
            return this.databaseConnectionPromise;
        }
        /**
         * Starts transaction on the current connection.
         */
        async startTransaction(isolationLevel) {
            if (this.isTransactionActive)
                throw new TransactionAlreadyStartedError_10.TransactionAlreadyStartedError();
            const beforeBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            this.isTransactionActive = true;
            await this.client.startTransaction();
            const afterBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Commits transaction.
         * Error will be thrown if transaction was not started.
         */
        async commitTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_10.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.client.commitTransaction();
            this.isTransactionActive = false;
            const afterBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Rollbacks transaction.
         * Error will be thrown if transaction was not started.
         */
        async rollbackTransaction() {
            if (!this.isTransactionActive)
                throw new TransactionNotStartedError_10.TransactionNotStartedError();
            const beforeBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);
            if (beforeBroadcastResult.promises.length > 0)
                await Promise.all(beforeBroadcastResult.promises);
            await this.client.rollbackTransaction();
            const afterBroadcastResult = new BroadcasterResult_17.BroadcasterResult();
            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);
            if (afterBroadcastResult.promises.length > 0)
                await Promise.all(afterBroadcastResult.promises);
        }
        /**
         * Executes a given SQL query.
         */
        async query(query, parameters) {
            if (this.isReleased)
                throw new QueryRunnerAlreadyReleasedError_15.QueryRunnerAlreadyReleasedError();
            const result = await this.client.query(query, parameters);
            if (result.records) {
                return result.records;
            }
            return result;
        }
    }
    exports.AuroraDataApiPostgresQueryRunner = AuroraDataApiPostgresQueryRunner;
});
define("typeorm/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver", ["require", "exports", "typeorm/driver/postgres/PostgresDriver", "typeorm/platform/PlatformTools", "typeorm/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner"], function (require, exports, PostgresDriver_9, PlatformTools_14, AuroraDataApiPostgresQueryRunner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuroraDataApiPostgresDriver = void 0;
    class PostgresWrapper extends PostgresDriver_9.PostgresDriver {
    }
    class AuroraDataApiPostgresDriver extends PostgresWrapper {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            super();
            this.connection = connection;
            this.options = connection.options;
            this.isReplicated = false;
            // load data-api package
            this.loadDependencies();
        }
        // -------------------------------------------------------------------------
        // Public Implemented Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * Based on pooling options, it can either create connection immediately,
         * either create a pool and create connection when needed.
         */
        async connect() {
        }
        /**
         * Closes connection with database.
         */
        async disconnect() {
        }
        /**
         * Creates a query runner used to execute database queries.
         */
        createQueryRunner(mode) {
            return new AuroraDataApiPostgresQueryRunner_1.AuroraDataApiPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * If driver dependency is not given explicitly, then try to load it via "require".
         */
        loadDependencies() {
            const { pg } = PlatformTools_14.PlatformTools.load("typeorm-aurora-data-api-driver");
            this.DataApiDriver = pg;
        }
        /**
         * Executes given query.
         */
        executeQuery(connection, query) {
            return this.connection.query(query);
        }
        /**
         * Makes any action after connection (e.g. create extensions in Postgres driver).
         */
        async afterConnect() {
            const extensionsMetadata = await this.checkMetadataForExtensions();
            if (extensionsMetadata.hasExtensions) {
                await this.enableExtensions(extensionsMetadata, this.connection);
            }
            return Promise.resolve();
        }
    }
    exports.AuroraDataApiPostgresDriver = AuroraDataApiPostgresDriver;
});
define("typeorm/driver/DriverFactory", ["require", "exports", "typeorm/error/MissingDriverError", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/mongodb/MongoDriver", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/oracle/OracleDriver", "typeorm/driver/sqlite/SqliteDriver", "typeorm/driver/cordova/CordovaDriver", "typeorm/driver/react-native/ReactNativeDriver", "typeorm/driver/nativescript/NativescriptDriver", "typeorm/driver/sqljs/SqljsDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/driver/expo/ExpoDriver", "typeorm/driver/aurora-data-api/AuroraDataApiDriver", "typeorm/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver", "typeorm/driver/sap/SapDriver", "typeorm/driver/better-sqlite3/BetterSqlite3Driver"], function (require, exports, MissingDriverError_1, CockroachDriver_8, MongoDriver_9, SqlServerDriver_10, OracleDriver_11, SqliteDriver_1, CordovaDriver_1, ReactNativeDriver_1, NativescriptDriver_1, SqljsDriver_7, MysqlDriver_8, PostgresDriver_10, ExpoDriver_1, AuroraDataApiDriver_7, AuroraDataApiPostgresDriver_1, SapDriver_7, BetterSqlite3Driver_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DriverFactory = void 0;
    /**
     * Helps to create drivers.
     */
    class DriverFactory {
        /**
         * Creates a new driver depend on a given connection's driver type.
         */
        create(connection) {
            const { type } = connection.options;
            switch (type) {
                case "mysql":
                    return new MysqlDriver_8.MysqlDriver(connection);
                case "postgres":
                    return new PostgresDriver_10.PostgresDriver(connection);
                case "cockroachdb":
                    return new CockroachDriver_8.CockroachDriver(connection);
                case "sap":
                    return new SapDriver_7.SapDriver(connection);
                case "mariadb":
                    return new MysqlDriver_8.MysqlDriver(connection);
                case "sqlite":
                    return new SqliteDriver_1.SqliteDriver(connection);
                case "better-sqlite3":
                    return new BetterSqlite3Driver_3.BetterSqlite3Driver(connection);
                case "cordova":
                    return new CordovaDriver_1.CordovaDriver(connection);
                case "nativescript":
                    return new NativescriptDriver_1.NativescriptDriver(connection);
                case "react-native":
                    return new ReactNativeDriver_1.ReactNativeDriver(connection);
                case "sqljs":
                    return new SqljsDriver_7.SqljsDriver(connection);
                case "oracle":
                    return new OracleDriver_11.OracleDriver(connection);
                case "mssql":
                    return new SqlServerDriver_10.SqlServerDriver(connection);
                case "mongodb":
                    return new MongoDriver_9.MongoDriver(connection);
                case "expo":
                    return new ExpoDriver_1.ExpoDriver(connection);
                case "aurora-data-api":
                    return new AuroraDataApiDriver_7.AuroraDataApiDriver(connection);
                case "aurora-data-api-pg":
                    return new AuroraDataApiPostgresDriver_1.AuroraDataApiPostgresDriver(connection);
                default:
                    throw new MissingDriverError_1.MissingDriverError(type);
            }
        }
    }
    exports.DriverFactory = DriverFactory;
});
define("typeorm/util/DirectoryExportedClassesLoader", ["require", "exports", "glob", "typeorm/platform/PlatformTools", "typeorm/index"], function (require, exports, glob_1, PlatformTools_15, index_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.importJsonsFromDirectories = exports.importClassesFromDirectories = void 0;
    /**
     * Loads all exported classes from the given directory.
     */
    function importClassesFromDirectories(logger, directories, formats = [".js", ".cjs", ".ts"]) {
        const logLevel = "info";
        const classesNotFoundMessage = "No classes were found using the provided glob pattern: ";
        const classesFoundMessage = "All classes found using provided glob pattern";
        function loadFileClasses(exported, allLoaded) {
            if (typeof exported === "function" || exported instanceof index_9.EntitySchema) {
                allLoaded.push(exported);
            }
            else if (Array.isArray(exported)) {
                exported.forEach((i) => loadFileClasses(i, allLoaded));
            }
            else if (typeof exported === "object" && exported !== null) {
                Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));
            }
            return allLoaded;
        }
        const allFiles = directories.reduce((allDirs, dir) => {
            return allDirs.concat(glob_1.default.sync(PlatformTools_15.PlatformTools.pathNormalize(dir)));
        }, []);
        if (directories.length > 0 && allFiles.length === 0) {
            logger.log(logLevel, `${classesNotFoundMessage} "${directories}"`);
        }
        else if (allFiles.length > 0) {
            logger.log(logLevel, `${classesFoundMessage} "${directories}" : "${allFiles}"`);
        }
        const dirs = allFiles
            .filter(file => {
            const dtsExtension = file.substring(file.length - 5, file.length);
            return formats.indexOf(PlatformTools_15.PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== ".d.ts";
        })
            .map(file => require(PlatformTools_15.PlatformTools.pathResolve(file)));
        return loadFileClasses(dirs, []);
    }
    exports.importClassesFromDirectories = importClassesFromDirectories;
    /**
     * Loads all json files from the given directory.
     */
    function importJsonsFromDirectories(directories, format = ".json") {
        const allFiles = directories.reduce((allDirs, dir) => {
            return allDirs.concat(glob_1.default.sync(PlatformTools_15.PlatformTools.pathNormalize(dir)));
        }, []);
        return allFiles
            .filter(file => PlatformTools_15.PlatformTools.pathExtname(file) === format)
            .map(file => require(PlatformTools_15.PlatformTools.pathResolve(file)));
    }
    exports.importJsonsFromDirectories = importJsonsFromDirectories;
});
define("typeorm/metadata-args/NamingStrategyMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/JoinColumnMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/JoinTableMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/EntitySubscriberMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/InheritanceMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/DiscriminatorValueMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/EntityRepositoryMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/TransactionEntityMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/TransactionRepositoryMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-builder/MetadataUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataUtils = void 0;
    /**
     * Metadata args utility functions.
     */
    class MetadataUtils {
        /**
         * Gets given's entity all inherited classes.
         * Gives in order from parents to children.
         * For example Post extends ContentModel which extends Unit it will give
         * [Unit, ContentModel, Post]
         */
        static getInheritanceTree(entity) {
            const tree = [entity];
            const getPrototypeOf = (object) => {
                const proto = Object.getPrototypeOf(object);
                if (proto && proto.name) {
                    tree.push(proto);
                    getPrototypeOf(proto);
                }
            };
            getPrototypeOf(entity);
            return tree;
        }
        /**
         * Checks if this table is inherited from another table.
         */
        static isInherited(target1, target2) {
            return target1.prototype instanceof target2;
        }
        /**
         * Filters given array of targets by a given classes.
         * If classes are not given, then it returns array itself.
         */
        static filterByTarget(array, classes) {
            if (!classes)
                return array;
            return array.filter(item => item.target && classes.indexOf(item.target) !== -1);
        }
    }
    exports.MetadataUtils = MetadataUtils;
});
define("typeorm/metadata-args/GeneratedMetadataArgs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/metadata-args/MetadataArgsStorage", ["require", "exports", "typeorm/metadata-builder/MetadataUtils"], function (require, exports, MetadataUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataArgsStorage = void 0;
    /**
     * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.
     * Each metadata args represents some specifications of what it represents.
     * MetadataArgs used to create a real Metadata objects.
     */
    class MetadataArgsStorage {
        constructor() {
            // -------------------------------------------------------------------------
            // Properties
            // -------------------------------------------------------------------------
            this.tables = [];
            this.trees = [];
            this.entityRepositories = [];
            this.transactionEntityManagers = [];
            this.transactionRepositories = [];
            this.namingStrategies = [];
            this.entitySubscribers = [];
            this.indices = [];
            this.uniques = [];
            this.checks = [];
            this.exclusions = [];
            this.columns = [];
            this.generations = [];
            this.relations = [];
            this.joinColumns = [];
            this.joinTables = [];
            this.entityListeners = [];
            this.relationCounts = [];
            this.relationIds = [];
            this.embeddeds = [];
            this.inheritances = [];
            this.discriminatorValues = [];
        }
        filterTables(target) {
            return this.filterByTarget(this.tables, target);
        }
        filterColumns(target) {
            return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);
        }
        findGenerated(target, propertyName) {
            return this.generations.find(generated => {
                return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;
            });
        }
        findTree(target) {
            return this.trees.find(tree => {
                return (Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target);
            });
        }
        filterRelations(target) {
            return this.filterByTargetAndWithoutDuplicateProperties(this.relations, target);
        }
        filterRelationIds(target) {
            return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);
        }
        filterRelationCounts(target) {
            return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);
        }
        filterIndices(target) {
            // todo: implement parent-entity overrides?
            return this.indices.filter(index => {
                return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;
            });
        }
        filterUniques(target) {
            return this.uniques.filter(unique => {
                return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;
            });
        }
        filterChecks(target) {
            return this.checks.filter(check => {
                return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;
            });
        }
        filterExclusions(target) {
            return this.exclusions.filter(exclusion => {
                return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;
            });
        }
        filterListeners(target) {
            return this.filterByTarget(this.entityListeners, target);
        }
        filterEmbeddeds(target) {
            return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);
        }
        findJoinTable(target, propertyName) {
            return this.joinTables.find(joinTable => {
                return joinTable.target === target && joinTable.propertyName === propertyName;
            });
        }
        filterJoinColumns(target, propertyName) {
            // todo: implement parent-entity overrides?
            return this.joinColumns.filter(joinColumn => {
                return joinColumn.target === target && joinColumn.propertyName === propertyName;
            });
        }
        filterSubscribers(target) {
            return this.filterByTarget(this.entitySubscribers, target);
        }
        filterNamingStrategies(target) {
            return this.filterByTarget(this.namingStrategies, target);
        }
        filterTransactionEntityManagers(target, propertyName) {
            return this.transactionEntityManagers.filter(transactionEm => {
                return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;
            });
        }
        filterTransactionRepository(target, propertyName) {
            return this.transactionRepositories.filter(transactionEm => {
                return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;
            });
        }
        filterSingleTableChildren(target) {
            return this.tables.filter(table => {
                return table.target instanceof Function
                    && target instanceof Function
                    && MetadataUtils_1.MetadataUtils.isInherited(table.target, target)
                    && table.type === "entity-child";
            });
        }
        findInheritanceType(target) {
            return this.inheritances.find(inheritance => inheritance.target === target);
        }
        findDiscriminatorValue(target) {
            return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Filters given array by a given target or targets.
         */
        filterByTarget(array, target) {
            return array.filter(table => {
                return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;
            });
        }
        /**
         * Filters given array by a given target or targets and prevents duplicate property names.
         */
        filterByTargetAndWithoutDuplicateProperties(array, target) {
            const newArray = [];
            array.forEach(item => {
                const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;
                if (sameTarget) {
                    if (!newArray.find(newItem => newItem.propertyName === item.propertyName))
                        newArray.push(item);
                }
            });
            return newArray;
        }
        /**
         * Filters given array by a given target or targets and prevents duplicate embedded property names.
         */
        filterByTargetAndWithoutDuplicateEmbeddedProperties(array, target) {
            const newArray = [];
            array.forEach(item => {
                const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;
                if (sameTarget) {
                    const isDuplicateEmbeddedProperty = newArray.find((newItem) => newItem.prefix === item.prefix && newItem.propertyName === item.propertyName);
                    if (!isDuplicateEmbeddedProperty)
                        newArray.push(item);
                }
            });
            return newArray;
        }
    }
    exports.MetadataArgsStorage = MetadataArgsStorage;
});
define("typeorm/metadata-builder/JunctionEntityMetadataBuilder", ["require", "exports", "typeorm/driver/mysql/MysqlDriver", "typeorm/metadata/ColumnMetadata", "typeorm/metadata/EntityMetadata", "typeorm/metadata/ForeignKeyMetadata", "typeorm/metadata/IndexMetadata", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, MysqlDriver_9, ColumnMetadata_2, EntityMetadata_5, ForeignKeyMetadata_1, IndexMetadata_1, AuroraDataApiDriver_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JunctionEntityMetadataBuilder = void 0;
    /**
     * Creates EntityMetadata for junction tables.
     * Junction tables are tables generated by many-to-many relations.
     */
    class JunctionEntityMetadataBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Builds EntityMetadata for the junction of the given many-to-many relation.
         */
        build(relation, joinTable) {
            const referencedColumns = this.collectReferencedColumns(relation, joinTable);
            const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);
            const joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(relation.entityMetadata.tableNameWithoutPrefix, relation.inverseEntityMetadata.tableNameWithoutPrefix, relation.propertyPath, relation.inverseRelation ? relation.inverseRelation.propertyName : "");
            const entityMetadata = new EntityMetadata_5.EntityMetadata({
                connection: this.connection,
                args: {
                    target: "",
                    name: joinTableName,
                    type: "junction",
                    database: joinTable.database || relation.entityMetadata.database,
                    schema: joinTable.schema || relation.entityMetadata.schema,
                }
            });
            entityMetadata.build();
            // create original side junction columns
            const junctionColumns = referencedColumns.map(referencedColumn => {
                const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {
                    return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&
                        !!joinColumnArgs.name;
                }) : undefined;
                const columnName = joinColumn && joinColumn.name ? joinColumn.name
                    : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);
                return new ColumnMetadata_2.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    referencedColumn: referencedColumn,
                    args: {
                        target: "",
                        mode: "virtual",
                        propertyName: columnName,
                        options: {
                            name: columnName,
                            length: !referencedColumn.length
                                && (this.connection.driver instanceof MysqlDriver_9.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_8.AuroraDataApiDriver)
                                && (referencedColumn.generationStrategy === "uuid" || referencedColumn.type === "uuid")
                                ? "36"
                                : referencedColumn.length,
                            width: referencedColumn.width,
                            type: referencedColumn.type,
                            precision: referencedColumn.precision,
                            scale: referencedColumn.scale,
                            charset: referencedColumn.charset,
                            collation: referencedColumn.collation,
                            zerofill: referencedColumn.zerofill,
                            unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,
                            nullable: false,
                            primary: true,
                        }
                    }
                });
            });
            // create inverse side junction columns
            const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {
                const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {
                    return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&
                        !!joinColumnArgs.name;
                }) : undefined;
                const columnName = joinColumn && joinColumn.name ? joinColumn.name
                    : this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);
                return new ColumnMetadata_2.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    referencedColumn: inverseReferencedColumn,
                    args: {
                        target: "",
                        mode: "virtual",
                        propertyName: columnName,
                        options: {
                            length: !inverseReferencedColumn.length
                                && (this.connection.driver instanceof MysqlDriver_9.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_8.AuroraDataApiDriver)
                                && (inverseReferencedColumn.generationStrategy === "uuid" || inverseReferencedColumn.type === "uuid")
                                ? "36"
                                : inverseReferencedColumn.length,
                            width: inverseReferencedColumn.width,
                            type: inverseReferencedColumn.type,
                            precision: inverseReferencedColumn.precision,
                            scale: inverseReferencedColumn.scale,
                            charset: inverseReferencedColumn.charset,
                            collation: inverseReferencedColumn.collation,
                            zerofill: inverseReferencedColumn.zerofill,
                            unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,
                            name: columnName,
                            nullable: false,
                            primary: true,
                        }
                    }
                });
            });
            this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);
            // set junction table columns
            entityMetadata.ownerColumns = junctionColumns;
            entityMetadata.inverseColumns = inverseJunctionColumns;
            entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];
            entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);
            // create junction table foreign keys
            entityMetadata.foreignKeys = relation.createForeignKeyConstraints ? [
                new ForeignKeyMetadata_1.ForeignKeyMetadata({
                    entityMetadata: entityMetadata,
                    referencedEntityMetadata: relation.entityMetadata,
                    columns: junctionColumns,
                    referencedColumns: referencedColumns,
                    onDelete: relation.onDelete || "CASCADE"
                }),
                new ForeignKeyMetadata_1.ForeignKeyMetadata({
                    entityMetadata: entityMetadata,
                    referencedEntityMetadata: relation.inverseEntityMetadata,
                    columns: inverseJunctionColumns,
                    referencedColumns: inverseReferencedColumns,
                    onDelete: relation.onDelete || "CASCADE"
                }),
            ] : [];
            // create junction table indices
            entityMetadata.ownIndices = [
                new IndexMetadata_1.IndexMetadata({
                    entityMetadata: entityMetadata,
                    columns: junctionColumns,
                    args: {
                        target: entityMetadata.target,
                        synchronize: true
                    }
                }),
                new IndexMetadata_1.IndexMetadata({
                    entityMetadata: entityMetadata,
                    columns: inverseJunctionColumns,
                    args: {
                        target: entityMetadata.target,
                        synchronize: true
                    }
                })
            ];
            // finally return entity metadata
            return entityMetadata;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Collects referenced columns from the given join column args.
         */
        collectReferencedColumns(relation, joinTable) {
            const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;
            if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {
                return relation.entityMetadata.columns.filter(column => column.isPrimary);
            }
            else {
                return joinTable.joinColumns.map(joinColumn => {
                    const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);
                    if (!referencedColumn)
                        throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);
                    return referencedColumn;
                });
            }
        }
        /**
         * Collects inverse referenced columns from the given join column args.
         */
        collectInverseReferencedColumns(relation, joinTable) {
            const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;
            const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;
            if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {
                return relation.inverseEntityMetadata.primaryColumns;
            }
            else {
                return joinTable.inverseJoinColumns.map(joinColumn => {
                    const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);
                    if (!referencedColumn)
                        throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);
                    return referencedColumn;
                });
            }
        }
        changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns) {
            junctionColumns.forEach(junctionColumn => {
                inverseJunctionColumns.forEach(inverseJunctionColumn => {
                    if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {
                        const junctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);
                        junctionColumn.propertyName = junctionColumnName;
                        junctionColumn.givenDatabaseName = junctionColumnName;
                        const inverseJunctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);
                        inverseJunctionColumn.propertyName = inverseJunctionColumnName;
                        inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;
                    }
                });
            });
        }
    }
    exports.JunctionEntityMetadataBuilder = JunctionEntityMetadataBuilder;
});
define("typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder", ["require", "exports", "typeorm/metadata/EntityMetadata", "typeorm/metadata/ColumnMetadata", "typeorm/metadata/ForeignKeyMetadata", "typeorm/metadata/IndexMetadata"], function (require, exports, EntityMetadata_6, ColumnMetadata_3, ForeignKeyMetadata_2, IndexMetadata_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClosureJunctionEntityMetadataBuilder = void 0;
    /**
     * Creates EntityMetadata for junction tables of the closure entities.
     * Closure junction tables are tables generated by closure entities.
     */
    class ClosureJunctionEntityMetadataBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Builds EntityMetadata for the closure junction of the given closure entity.
         */
        build(parentClosureEntityMetadata) {
            // create entity metadata itself
            const entityMetadata = new EntityMetadata_6.EntityMetadata({
                parentClosureEntityMetadata: parentClosureEntityMetadata,
                connection: this.connection,
                args: {
                    target: "",
                    name: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.closureTableName ? parentClosureEntityMetadata.treeOptions.closureTableName : parentClosureEntityMetadata.tableNameWithoutPrefix,
                    type: "closure-junction"
                }
            });
            entityMetadata.build();
            // create ancestor and descendant columns for new closure junction table
            parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {
                entityMetadata.ownColumns.push(new ColumnMetadata_3.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    closureType: "ancestor",
                    referencedColumn: primaryColumn,
                    args: {
                        target: "",
                        mode: "virtual",
                        propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.ancestorColumnName ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(primaryColumn) : primaryColumn.propertyName + "_ancestor",
                        options: {
                            primary: true,
                            length: primaryColumn.length,
                            type: primaryColumn.type
                        }
                    }
                }));
                entityMetadata.ownColumns.push(new ColumnMetadata_3.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    closureType: "descendant",
                    referencedColumn: primaryColumn,
                    args: {
                        target: "",
                        mode: "virtual",
                        propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.descendantColumnName ? parentClosureEntityMetadata.treeOptions.descendantColumnName(primaryColumn) : primaryColumn.propertyName + "_descendant",
                        options: {
                            primary: true,
                            length: primaryColumn.length,
                            type: primaryColumn.type,
                        }
                    }
                }));
            });
            entityMetadata.ownIndices = [
                new IndexMetadata_2.IndexMetadata({
                    entityMetadata: entityMetadata,
                    columns: [entityMetadata.ownColumns[0]],
                    args: {
                        target: entityMetadata.target,
                        synchronize: true
                    }
                }),
                new IndexMetadata_2.IndexMetadata({
                    entityMetadata: entityMetadata,
                    columns: [entityMetadata.ownColumns[1]],
                    args: {
                        target: entityMetadata.target,
                        synchronize: true
                    }
                })
            ];
            // if tree level column was defined by a closure entity then add it to the junction columns as well
            if (parentClosureEntityMetadata.treeLevelColumn) {
                entityMetadata.ownColumns.push(new ColumnMetadata_3.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    args: {
                        target: "",
                        mode: "virtual",
                        propertyName: "level",
                        options: {
                            type: this.connection.driver.mappedDataTypes.treeLevel,
                        }
                    }
                }));
            }
            // create junction table foreign keys
            entityMetadata.foreignKeys = [
                new ForeignKeyMetadata_2.ForeignKeyMetadata({
                    entityMetadata: entityMetadata,
                    referencedEntityMetadata: parentClosureEntityMetadata,
                    columns: [entityMetadata.ownColumns[0]],
                    referencedColumns: parentClosureEntityMetadata.primaryColumns,
                }),
                new ForeignKeyMetadata_2.ForeignKeyMetadata({
                    entityMetadata: entityMetadata,
                    referencedEntityMetadata: parentClosureEntityMetadata,
                    columns: [entityMetadata.ownColumns[1]],
                    referencedColumns: parentClosureEntityMetadata.primaryColumns,
                }),
            ];
            return entityMetadata;
        }
    }
    exports.ClosureJunctionEntityMetadataBuilder = ClosureJunctionEntityMetadataBuilder;
});
define("typeorm/metadata-builder/RelationJoinColumnBuilder", ["require", "exports", "typeorm/driver/mysql/MysqlDriver", "typeorm/metadata/ColumnMetadata", "typeorm/metadata/UniqueMetadata", "typeorm/metadata/ForeignKeyMetadata", "typeorm/driver/oracle/OracleDriver", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, MysqlDriver_10, ColumnMetadata_4, UniqueMetadata_1, ForeignKeyMetadata_3, OracleDriver_12, AuroraDataApiDriver_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationJoinColumnBuilder = void 0;
    /**
     * Builds join column for the many-to-one and one-to-one owner relations.
     *
     * Cases it should cover:
     * 1. when join column is set with custom name and without referenced column name
     * we need automatically set referenced column name - primary ids by default
     * @JoinColumn({ name: "custom_name" })
     *
     * 2. when join column is set with only referenced column name
     * we need automatically set join column name - relation name + referenced column name
     * @JoinColumn({ referencedColumnName: "title" })
     *
     * 3. when join column is set without both referenced column name and join column name
     * we need to automatically set both of them
     * @JoinColumn()
     *
     * 4. when join column is not set at all (as in case of @ManyToOne relation)
     * we need to create join column for it with proper referenced column name and join column name
     *
     * 5. when multiple join columns set none of referencedColumnName and name can be optional
     * both options are required
     * @JoinColumn([
     *      { name: "category_title", referencedColumnName: "type" },
     *      { name: "category_title", referencedColumnName: "name" },
     * ])
     *
     * Since for many-to-one relations having JoinColumn decorator is not required,
     * we need to go thought each many-to-one relation without join column decorator set
     * and create join column metadata args for them.
     */
    class RelationJoinColumnBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Builds a foreign key of the many-to-one or one-to-one owner relations.
         */
        build(joinColumns, relation) {
            const referencedColumns = this.collectReferencedColumns(joinColumns, relation);
            const columns = this.collectColumns(joinColumns, relation, referencedColumns);
            if (!referencedColumns.length || !relation.createForeignKeyConstraints)
                return { foreignKey: undefined, columns, uniqueConstraint: undefined }; // this case is possible for one-to-one non owning side and relations with createForeignKeyConstraints = false
            const foreignKey = new ForeignKeyMetadata_3.ForeignKeyMetadata({
                entityMetadata: relation.entityMetadata,
                referencedEntityMetadata: relation.inverseEntityMetadata,
                namingStrategy: this.connection.namingStrategy,
                columns: columns,
                referencedColumns: referencedColumns,
                onDelete: relation.onDelete,
                onUpdate: relation.onUpdate,
                deferrable: relation.deferrable,
            });
            // Oracle does not allow both primary and unique constraints on the same column
            if (this.connection.driver instanceof OracleDriver_12.OracleDriver && columns.every(column => column.isPrimary))
                return { foreignKey, columns, uniqueConstraint: undefined };
            // CockroachDB requires UNIQUE constraints on referenced columns
            if (referencedColumns.length > 0 && relation.isOneToOne) {
                const uniqueConstraint = new UniqueMetadata_1.UniqueMetadata({
                    entityMetadata: relation.entityMetadata,
                    columns: foreignKey.columns,
                    args: {
                        name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(c => c.databaseName)),
                        target: relation.entityMetadata.target,
                    }
                });
                uniqueConstraint.build(this.connection.namingStrategy);
                return { foreignKey, columns, uniqueConstraint };
            }
            return { foreignKey, columns, uniqueConstraint: undefined };
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Collects referenced columns from the given join column args.
         */
        collectReferencedColumns(joinColumns, relation) {
            const hasAnyReferencedColumnName = joinColumns.find(joinColumnArgs => !!joinColumnArgs.referencedColumnName);
            const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;
            const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;
            if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1
                return relation.inverseEntityMetadata.primaryColumns;
            }
            else { // cases with referenced columns defined
                return joinColumns.map(joinColumn => {
                    const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName); // todo: can we also search in relations?
                    if (!referencedColumn)
                        throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);
                    return referencedColumn;
                });
            }
        }
        /**
         * Collects columns from the given join column args.
         */
        collectColumns(joinColumns, relation, referencedColumns) {
            return referencedColumns.map(referencedColumn => {
                // in the case if relation has join column with only name set we need this check
                const joinColumnMetadataArg = joinColumns.find(joinColumn => {
                    return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&
                        !!joinColumn.name;
                });
                const joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);
                let relationalColumn = relation.entityMetadata.ownColumns.find(column => column.databaseName === joinColumnName);
                if (!relationalColumn) {
                    relationalColumn = new ColumnMetadata_4.ColumnMetadata({
                        connection: this.connection,
                        entityMetadata: relation.entityMetadata,
                        args: {
                            target: "",
                            mode: "virtual",
                            propertyName: relation.propertyName,
                            options: {
                                name: joinColumnName,
                                type: referencedColumn.type,
                                length: !referencedColumn.length
                                    && (this.connection.driver instanceof MysqlDriver_10.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_9.AuroraDataApiDriver)
                                    && (referencedColumn.generationStrategy === "uuid" || referencedColumn.type === "uuid")
                                    ? "36"
                                    : referencedColumn.length,
                                width: referencedColumn.width,
                                charset: referencedColumn.charset,
                                collation: referencedColumn.collation,
                                precision: referencedColumn.precision,
                                scale: referencedColumn.scale,
                                zerofill: referencedColumn.zerofill,
                                unsigned: referencedColumn.unsigned,
                                comment: referencedColumn.comment,
                                primary: relation.isPrimary,
                                nullable: relation.isNullable
                            }
                        }
                    });
                    relation.entityMetadata.registerColumn(relationalColumn);
                }
                relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column
                relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type
                relationalColumn.relationMetadata = relation;
                relationalColumn.build(this.connection);
                return relationalColumn;
            });
        }
    }
    exports.RelationJoinColumnBuilder = RelationJoinColumnBuilder;
});
define("typeorm/metadata-builder/EntityMetadataBuilder", ["require", "exports", "typeorm/driver/cockroachdb/CockroachDriver", "typeorm/driver/sap/SapDriver", "typeorm/metadata/EntityMetadata", "typeorm/metadata/ColumnMetadata", "typeorm/metadata/IndexMetadata", "typeorm/metadata/RelationMetadata", "typeorm/metadata/EmbeddedMetadata", "typeorm/metadata/RelationIdMetadata", "typeorm/metadata/RelationCountMetadata", "typeorm/metadata/types/EventListenerTypes", "typeorm/metadata-builder/MetadataUtils", "typeorm/metadata-builder/JunctionEntityMetadataBuilder", "typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder", "typeorm/metadata-builder/RelationJoinColumnBuilder", "typeorm/metadata/EntityListenerMetadata", "typeorm/metadata/UniqueMetadata", "typeorm/driver/mysql/MysqlDriver", "typeorm/metadata/CheckMetadata", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/postgres/PostgresDriver", "typeorm/metadata/ExclusionMetadata", "typeorm/driver/aurora-data-api/AuroraDataApiDriver"], function (require, exports, CockroachDriver_9, SapDriver_8, EntityMetadata_7, ColumnMetadata_5, IndexMetadata_3, RelationMetadata_1, EmbeddedMetadata_1, RelationIdMetadata_1, RelationCountMetadata_1, EventListenerTypes_1, MetadataUtils_2, JunctionEntityMetadataBuilder_1, ClosureJunctionEntityMetadataBuilder_1, RelationJoinColumnBuilder_1, EntityListenerMetadata_1, UniqueMetadata_2, MysqlDriver_11, CheckMetadata_1, SqlServerDriver_11, PostgresDriver_11, ExclusionMetadata_1, AuroraDataApiDriver_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMetadataBuilder = void 0;
    /**
     * Builds EntityMetadata objects and all its sub-metadatas.
     */
    class EntityMetadataBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, metadataArgsStorage) {
            this.connection = connection;
            this.metadataArgsStorage = metadataArgsStorage;
            this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder_1.JunctionEntityMetadataBuilder(connection);
            this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder_1.ClosureJunctionEntityMetadataBuilder(connection);
            this.relationJoinColumnBuilder = new RelationJoinColumnBuilder_1.RelationJoinColumnBuilder(connection);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Builds a complete entity metadatas for the given entity classes.
         */
        build(entityClasses) {
            // if entity classes to filter entities by are given then do filtering, otherwise use all
            const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;
            // filter out table metadata args for those we really create entity metadatas and tables in the db
            const realTables = allTables.filter(table => table.type === "regular" || table.type === "closure" || table.type === "entity-child" || table.type === "view");
            // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)
            const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));
            // compute parent entity metadatas for table inheritance
            entityMetadatas.forEach(entityMetadata => this.computeParentEntityMetadata(entityMetadatas, entityMetadata));
            // after all metadatas created we set child entity metadatas for table inheritance
            entityMetadatas.forEach(metadata => {
                metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {
                    return metadata.target instanceof Function
                        && childMetadata.target instanceof Function
                        && MetadataUtils_2.MetadataUtils.isInherited(childMetadata.target, metadata.target);
                });
            });
            // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)
            entityMetadatas
                .filter(entityMetadata => entityMetadata.tableType !== "entity-child")
                .forEach(entityMetadata => entityMetadata.build());
            // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)
            entityMetadatas
                .filter(entityMetadata => entityMetadata.tableType === "entity-child")
                .forEach(entityMetadata => entityMetadata.build());
            // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas
            entityMetadatas
                .filter(entityMetadata => entityMetadata.tableType !== "entity-child")
                .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));
            // then do it for single table inheritance children (since they are depend on their parents to be built)
            entityMetadatas
                .filter(entityMetadata => entityMetadata.tableType === "entity-child")
                .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));
            // calculate entity metadata computed properties and all its sub-metadatas
            entityMetadatas.forEach(entityMetadata => this.computeEntityMetadataStep2(entityMetadata));
            // calculate entity metadata's inverse properties
            entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));
            // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations
            entityMetadatas
                .filter(entityMetadata => entityMetadata.tableType !== "entity-child")
                .forEach(entityMetadata => {
                // create entity's relations join columns (for many-to-one and one-to-one owner)
                entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {
                    const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);
                    const { foreignKey, columns, uniqueConstraint } = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args
                    if (foreignKey) {
                        relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column
                        entityMetadata.foreignKeys.push(foreignKey);
                    }
                    if (columns) {
                        relation.registerJoinColumns(columns);
                    }
                    if (uniqueConstraint) {
                        if (this.connection.driver instanceof MysqlDriver_11.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_10.AuroraDataApiDriver
                            || this.connection.driver instanceof SqlServerDriver_11.SqlServerDriver || this.connection.driver instanceof SapDriver_8.SapDriver) {
                            const index = new IndexMetadata_3.IndexMetadata({
                                entityMetadata: uniqueConstraint.entityMetadata,
                                columns: uniqueConstraint.columns,
                                args: {
                                    target: uniqueConstraint.target,
                                    name: uniqueConstraint.name,
                                    unique: true,
                                    synchronize: true
                                }
                            });
                            if (this.connection.driver instanceof SqlServerDriver_11.SqlServerDriver) {
                                index.where = index.columns.map(column => {
                                    return `${this.connection.driver.escape(column.databaseName)} IS NOT NULL`;
                                }).join(" AND ");
                            }
                            if (relation.embeddedMetadata) {
                                relation.embeddedMetadata.indices.push(index);
                            }
                            else {
                                relation.entityMetadata.ownIndices.push(index);
                            }
                            this.computeEntityMetadataStep2(entityMetadata);
                        }
                        else {
                            if (relation.embeddedMetadata) {
                                relation.embeddedMetadata.uniques.push(uniqueConstraint);
                            }
                            else {
                                relation.entityMetadata.ownUniques.push(uniqueConstraint);
                            }
                            this.computeEntityMetadataStep2(entityMetadata);
                        }
                    }
                    if (foreignKey && this.connection.driver instanceof CockroachDriver_9.CockroachDriver) {
                        const index = new IndexMetadata_3.IndexMetadata({
                            entityMetadata: relation.entityMetadata,
                            columns: foreignKey.columns,
                            args: {
                                target: relation.entityMetadata.target,
                                synchronize: true
                            }
                        });
                        if (relation.embeddedMetadata) {
                            relation.embeddedMetadata.indices.push(index);
                        }
                        else {
                            relation.entityMetadata.ownIndices.push(index);
                        }
                        this.computeEntityMetadataStep2(entityMetadata);
                    }
                });
                // create junction entity metadatas for entity many-to-many relations
                entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {
                    const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);
                    if (!joinTable)
                        return; // no join table set - no need to do anything (it means this is many-to-many inverse side)
                    // here we create a junction entity metadata for a new junction table of many-to-many relation
                    const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);
                    relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);
                    relation.registerJoinColumns(junctionEntityMetadata.ownIndices[0].columns, junctionEntityMetadata.ownIndices[1].columns);
                    relation.registerJunctionEntityMetadata(junctionEntityMetadata);
                    // compute new entity metadata properties and push it to entity metadatas pool
                    this.computeEntityMetadataStep2(junctionEntityMetadata);
                    this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);
                    entityMetadatas.push(junctionEntityMetadata);
                });
            });
            // update entity metadata depend properties
            entityMetadatas
                .forEach(entityMetadata => {
                entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);
                entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);
            });
            // generate closure junction tables for all closure tables
            entityMetadatas
                .filter(metadata => metadata.treeType === "closure-table")
                .forEach(entityMetadata => {
                const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);
                entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;
                this.computeEntityMetadataStep2(closureJunctionEntityMetadata);
                this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);
                entityMetadatas.push(closureJunctionEntityMetadata);
            });
            // generate keys for tables with single-table inheritance
            entityMetadatas
                .filter(metadata => metadata.inheritancePattern === "STI" && metadata.discriminatorColumn)
                .forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));
            // build all indices (need to do it after relations and their join columns are built)
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.indices.forEach(index => index.build(this.connection.namingStrategy));
            });
            // build all unique constraints (need to do it after relations and their join columns are built)
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.uniques.forEach(unique => unique.build(this.connection.namingStrategy));
            });
            // build all check constraints
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.checks.forEach(check => check.build(this.connection.namingStrategy));
            });
            // build all exclusion constraints
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.exclusions.forEach(exclusion => exclusion.build(this.connection.namingStrategy));
            });
            // add lazy initializer for entity relations
            entityMetadatas
                .filter(metadata => metadata.target instanceof Function)
                .forEach(entityMetadata => {
                entityMetadata.relations
                    .filter(relation => relation.isLazy)
                    .forEach(relation => {
                    this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);
                });
            });
            entityMetadatas.forEach(entityMetadata => {
                entityMetadata.columns.forEach(column => {
                    // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;
                    const generated = this.metadataArgsStorage.findGenerated(column.target, column.propertyName);
                    if (generated) {
                        column.isGenerated = true;
                        column.generationStrategy = generated.strategy;
                        if (generated.strategy === "uuid") {
                            column.type = "uuid";
                        }
                        else if (generated.strategy === "rowid") {
                            column.type = "int";
                        }
                        else {
                            column.type = column.type || Number;
                        }
                        column.build(this.connection);
                        this.computeEntityMetadataStep2(entityMetadata);
                    }
                });
            });
            return entityMetadatas;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Creates entity metadata from the given table args.
         * Creates column, relation, etc. metadatas for everything this entity metadata owns.
         */
        createEntityMetadata(tableArgs) {
            // we take all "inheritance tree" from a target entity to collect all stored metadata args
            // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit
            // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes
            const inheritanceTree = tableArgs.target instanceof Function
                ? MetadataUtils_2.MetadataUtils.getInheritanceTree(tableArgs.target)
                : [tableArgs.target]; // todo: implement later here inheritance for string-targets
            const tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);
            const tableTree = this.metadataArgsStorage.findTree(tableArgs.target);
            // if single table inheritance used, we need to copy all children columns in to parent table
            let singleTableChildrenTargets;
            if ((tableInheritance && tableInheritance.pattern === "STI") || tableArgs.type === "entity-child") {
                singleTableChildrenTargets = this.metadataArgsStorage
                    .filterSingleTableChildren(tableArgs.target)
                    .map(args => args.target)
                    .filter(target => target instanceof Function);
                inheritanceTree.push(...singleTableChildrenTargets);
            }
            return new EntityMetadata_7.EntityMetadata({
                connection: this.connection,
                args: tableArgs,
                inheritanceTree: inheritanceTree,
                tableTree: tableTree,
                inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined
            });
        }
        computeParentEntityMetadata(allEntityMetadatas, entityMetadata) {
            // after all metadatas created we set parent entity metadata for table inheritance
            if (entityMetadata.tableType === "entity-child") {
                entityMetadata.parentEntityMetadata = allEntityMetadatas.find(allEntityMetadata => {
                    return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === "STI";
                });
            }
        }
        computeEntityMetadataStep1(allEntityMetadatas, entityMetadata) {
            const entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);
            const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);
            if (typeof discriminatorValue !== "undefined") {
                entityMetadata.discriminatorValue = discriminatorValue.value;
            }
            else {
                entityMetadata.discriminatorValue = entityMetadata.target.name;
            }
            // if single table inheritance is used, we need to mark all embedded columns as nullable
            entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree))
                .map((embedded) => {
                if (entityMetadata.inheritancePattern === "STI") {
                    embedded.columns = embedded.columns.map((column) => {
                        column.isNullable = true;
                        return column;
                    });
                }
                return embedded;
            });
            entityMetadata.ownColumns = this.metadataArgsStorage
                .filterColumns(entityMetadata.inheritanceTree)
                .map(args => {
                // for single table children we reuse columns created for their parents
                if (entityMetadata.tableType === "entity-child")
                    return entityMetadata.parentEntityMetadata.ownColumns.find(column => column.propertyName === args.propertyName);
                const column = new ColumnMetadata_5.ColumnMetadata({ connection: this.connection, entityMetadata, args });
                // if single table inheritance used, we need to mark all inherit table columns as nullable
                const columnInSingleTableInheritedChild = allEntityMetadatas.find(otherEntityMetadata => otherEntityMetadata.tableType === "entity-child" && otherEntityMetadata.target === args.target);
                if (columnInSingleTableInheritedChild)
                    column.isNullable = true;
                return column;
            });
            // for table inheritance we need to add a discriminator column
            //
            if (entityInheritance && entityInheritance.column) {
                const discriminatorColumnName = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : "type";
                let discriminatorColumn = entityMetadata.ownColumns.find(column => column.propertyName === discriminatorColumnName);
                if (!discriminatorColumn) {
                    discriminatorColumn = new ColumnMetadata_5.ColumnMetadata({
                        connection: this.connection,
                        entityMetadata: entityMetadata,
                        args: {
                            target: entityMetadata.target,
                            mode: "virtual",
                            propertyName: discriminatorColumnName,
                            options: entityInheritance.column || {
                                name: discriminatorColumnName,
                                type: "varchar",
                                nullable: false
                            }
                        }
                    });
                    discriminatorColumn.isVirtual = true;
                    discriminatorColumn.isDiscriminator = true;
                    entityMetadata.ownColumns.push(discriminatorColumn);
                }
                else {
                    discriminatorColumn.isDiscriminator = true;
                }
            }
            // add discriminator column to the child entity metadatas
            // discriminator column will not be there automatically since we are creating it in the code above
            if (entityMetadata.tableType === "entity-child") {
                const discriminatorColumn = entityMetadata.parentEntityMetadata.ownColumns.find(column => column.isDiscriminator);
                if (discriminatorColumn && !entityMetadata.ownColumns.find(column => column === discriminatorColumn)) {
                    entityMetadata.ownColumns.push(discriminatorColumn);
                }
            }
            const { namingStrategy } = this.connection;
            // check if tree is used then we need to add extra columns for specific tree types
            if (entityMetadata.treeType === "materialized-path") {
                entityMetadata.ownColumns.push(new ColumnMetadata_5.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    materializedPath: true,
                    args: {
                        target: entityMetadata.target,
                        mode: "virtual",
                        propertyName: "mpath",
                        options: /*tree.column || */ {
                            name: namingStrategy.materializedPathColumnName,
                            type: "varchar",
                            nullable: true,
                            default: ""
                        }
                    }
                }));
            }
            else if (entityMetadata.treeType === "nested-set") {
                const { left, right } = namingStrategy.nestedSetColumnNames;
                entityMetadata.ownColumns.push(new ColumnMetadata_5.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    nestedSetLeft: true,
                    args: {
                        target: entityMetadata.target,
                        mode: "virtual",
                        propertyName: left,
                        options: /*tree.column || */ {
                            name: left,
                            type: "integer",
                            nullable: false,
                            default: 1
                        }
                    }
                }));
                entityMetadata.ownColumns.push(new ColumnMetadata_5.ColumnMetadata({
                    connection: this.connection,
                    entityMetadata: entityMetadata,
                    nestedSetRight: true,
                    args: {
                        target: entityMetadata.target,
                        mode: "virtual",
                        propertyName: right,
                        options: /*tree.column || */ {
                            name: right,
                            type: "integer",
                            nullable: false,
                            default: 2
                        }
                    }
                }));
            }
            entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(args => {
                // for single table children we reuse relations created for their parents
                if (entityMetadata.tableType === "entity-child")
                    return entityMetadata.parentEntityMetadata.ownRelations.find(relation => relation.propertyName === args.propertyName);
                return new RelationMetadata_1.RelationMetadata({ entityMetadata, args });
            });
            entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(args => {
                // for single table children we reuse relation ids created for their parents
                if (entityMetadata.tableType === "entity-child")
                    return entityMetadata.parentEntityMetadata.relationIds.find(relationId => relationId.propertyName === args.propertyName);
                return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata, args });
            });
            entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(args => {
                // for single table children we reuse relation counts created for their parents
                if (entityMetadata.tableType === "entity-child")
                    return entityMetadata.parentEntityMetadata.relationCounts.find(relationCount => relationCount.propertyName === args.propertyName);
                return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata, args });
            });
            entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(args => {
                return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });
            });
            entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(args => {
                return new CheckMetadata_1.CheckMetadata({ entityMetadata, args });
            });
            // Only PostgreSQL supports exclusion constraints.
            if (this.connection.driver instanceof PostgresDriver_11.PostgresDriver) {
                entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(args => {
                    return new ExclusionMetadata_1.ExclusionMetadata({ entityMetadata, args });
                });
            }
            if (this.connection.driver instanceof CockroachDriver_9.CockroachDriver) {
                entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)
                    .filter(args => !args.unique)
                    .map(args => {
                    return new IndexMetadata_3.IndexMetadata({ entityMetadata, args });
                });
                const uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)
                    .filter(args => args.unique)
                    .map(args => {
                    return new UniqueMetadata_2.UniqueMetadata({
                        entityMetadata: entityMetadata,
                        args: {
                            target: args.target,
                            name: args.name,
                            columns: args.columns,
                        }
                    });
                });
                entityMetadata.ownUniques.push(...uniques);
            }
            else {
                entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(args => {
                    return new IndexMetadata_3.IndexMetadata({ entityMetadata, args });
                });
            }
            // Mysql and SAP HANA stores unique constraints as unique indices.
            if (this.connection.driver instanceof MysqlDriver_11.MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver_10.AuroraDataApiDriver || this.connection.driver instanceof SapDriver_8.SapDriver) {
                const indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {
                    return new IndexMetadata_3.IndexMetadata({
                        entityMetadata: entityMetadata,
                        args: {
                            target: args.target,
                            name: args.name,
                            columns: args.columns,
                            unique: true,
                            synchronize: true
                        }
                    });
                });
                entityMetadata.ownIndices.push(...indices);
            }
            else {
                const uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {
                    return new UniqueMetadata_2.UniqueMetadata({ entityMetadata, args });
                });
                entityMetadata.ownUniques.push(...uniques);
            }
        }
        /**
         * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,
         * and does the same for all its sub-embeddeds (goes recursively).
         */
        createEmbeddedsRecursively(entityMetadata, embeddedArgs) {
            return embeddedArgs.map(embeddedArgs => {
                const embeddedMetadata = new EmbeddedMetadata_1.EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });
                const targets = MetadataUtils_2.MetadataUtils.getInheritanceTree(embeddedMetadata.type);
                embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(targets).map(args => {
                    return new ColumnMetadata_5.ColumnMetadata({ connection: this.connection, entityMetadata, embeddedMetadata, args });
                });
                embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(targets).map(args => {
                    return new RelationMetadata_1.RelationMetadata({ entityMetadata, embeddedMetadata, args });
                });
                embeddedMetadata.listeners = this.metadataArgsStorage.filterListeners(targets).map(args => {
                    return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata, embeddedMetadata, args });
                });
                embeddedMetadata.indices = this.metadataArgsStorage.filterIndices(targets).map(args => {
                    return new IndexMetadata_3.IndexMetadata({ entityMetadata, embeddedMetadata, args });
                });
                embeddedMetadata.uniques = this.metadataArgsStorage.filterUniques(targets).map(args => {
                    return new UniqueMetadata_2.UniqueMetadata({ entityMetadata, embeddedMetadata, args });
                });
                embeddedMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(targets).map(args => {
                    return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata, args });
                });
                embeddedMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(targets).map(args => {
                    return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata, args });
                });
                embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(targets));
                embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);
                entityMetadata.allEmbeddeds.push(embeddedMetadata);
                return embeddedMetadata;
            });
        }
        /**
         * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).
         */
        computeEntityMetadataStep2(entityMetadata) {
            entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection));
            entityMetadata.embeddeds.forEach(embedded => {
                embedded.columnsFromTree.forEach(column => column.build(this.connection));
                embedded.relationsFromTree.forEach(relation => relation.build());
            });
            entityMetadata.ownColumns.forEach(column => column.build(this.connection));
            entityMetadata.ownRelations.forEach(relation => relation.build());
            entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);
            entityMetadata.eagerRelations = entityMetadata.relations.filter(relation => relation.isEager);
            entityMetadata.lazyRelations = entityMetadata.relations.filter(relation => relation.isLazy);
            entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);
            entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);
            entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);
            entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);
            entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);
            entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);
            entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);
            entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);
            entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);
            entityMetadata.listeners = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.listenersFromTree), entityMetadata.ownListeners);
            entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_LOAD);
            entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_INSERT);
            entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_UPDATE);
            entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_REMOVE);
            entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_INSERT);
            entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_UPDATE);
            entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_REMOVE);
            entityMetadata.indices = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.indicesFromTree), entityMetadata.ownIndices);
            entityMetadata.uniques = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.uniquesFromTree), entityMetadata.ownUniques);
            entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);
            entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(column => !column.isVirtual);
            entityMetadata.ancestorColumns = entityMetadata.columns.filter(column => column.closureType === "ancestor");
            entityMetadata.descendantColumns = entityMetadata.columns.filter(column => column.closureType === "descendant");
            entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;
            entityMetadata.generatedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.isObjectId);
            entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.generationStrategy === "uuid").length > 0;
            entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);
            entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);
            entityMetadata.deleteDateColumn = entityMetadata.columns.find(column => column.isDeleteDate);
            entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);
            entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);
            entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);
            entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(column => column.isNestedSetLeft);
            entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(column => column.isNestedSetRight);
            entityMetadata.materializedPathColumn = entityMetadata.columns.find(column => column.isMaterializedPath);
            entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);
            entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.namingStrategy));
            entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();
            entityMetadata.relationIds.forEach(relationId => relationId.build());
            entityMetadata.relationCounts.forEach(relationCount => relationCount.build());
            entityMetadata.embeddeds.forEach(embedded => {
                embedded.relationIdsFromTree.forEach(relationId => relationId.build());
                embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());
            });
        }
        /**
         * Computes entity metadata's relations inverse side properties.
         */
        computeInverseProperties(entityMetadata, entityMetadatas) {
            entityMetadata.relations.forEach(relation => {
                // compute inverse side (related) entity metadatas for all relation metadatas
                const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === "string" && m.targetName === relation.type));
                if (!inverseEntityMetadata)
                    throw new Error("Entity metadata for " + entityMetadata.name + "#" + relation.propertyPath + " was not found. Check if you specified a correct entity object and if it's connected in the connection options.");
                relation.inverseEntityMetadata = inverseEntityMetadata;
                relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();
                // and compute inverse relation and mark if it has such
                relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);
            });
        }
        /**
         * Creates indices for the table of single table inheritance.
         */
        createKeysForTableInheritance(entityMetadata) {
            entityMetadata.indices.push(new IndexMetadata_3.IndexMetadata({
                entityMetadata: entityMetadata,
                columns: [entityMetadata.discriminatorColumn],
                args: {
                    target: entityMetadata.target,
                    unique: false
                }
            }));
        }
    }
    exports.EntityMetadataBuilder = EntityMetadataBuilder;
});
define("typeorm/decorator/options/JoinTableOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/entity-schema/EntitySchemaTransformer", ["require", "exports", "typeorm/metadata-args/MetadataArgsStorage"], function (require, exports, MetadataArgsStorage_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntitySchemaTransformer = void 0;
    /**
     * Transforms entity schema into metadata args storage.
     * The result will be just like entities read from decorators.
     */
    class EntitySchemaTransformer {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Transforms entity schema into new metadata args storage object.
         */
        transform(schemas) {
            const metadataArgsStorage = new MetadataArgsStorage_1.MetadataArgsStorage();
            schemas.forEach(entitySchema => {
                const options = entitySchema.options;
                // add table metadata args from the schema
                const tableMetadata = {
                    target: options.target || options.name,
                    name: options.tableName,
                    database: options.database,
                    schema: options.schema,
                    type: options.type || "regular",
                    orderBy: options.orderBy,
                    synchronize: options.synchronize,
                    expression: options.expression
                };
                metadataArgsStorage.tables.push(tableMetadata);
                // add columns metadata args from the schema
                Object.keys(options.columns).forEach(columnName => {
                    const column = options.columns[columnName];
                    let mode = "regular";
                    if (column.createDate)
                        mode = "createDate";
                    if (column.updateDate)
                        mode = "updateDate";
                    if (column.deleteDate)
                        mode = "deleteDate";
                    if (column.version)
                        mode = "version";
                    if (column.treeChildrenCount)
                        mode = "treeChildrenCount";
                    if (column.treeLevel)
                        mode = "treeLevel";
                    if (column.objectId)
                        mode = "objectId";
                    const columnAgrs = {
                        target: options.target || options.name,
                        mode: mode,
                        propertyName: columnName,
                        options: {
                            type: column.type,
                            name: column.objectId ? "_id" : column.name,
                            length: column.length,
                            width: column.width,
                            nullable: column.nullable,
                            readonly: column.readonly,
                            update: column.update,
                            select: column.select,
                            insert: column.insert,
                            primary: column.primary,
                            unique: column.unique,
                            comment: column.comment,
                            default: column.default,
                            onUpdate: column.onUpdate,
                            precision: column.precision,
                            scale: column.scale,
                            zerofill: column.zerofill,
                            unsigned: column.unsigned,
                            charset: column.charset,
                            collation: column.collation,
                            enum: column.enum,
                            asExpression: column.asExpression,
                            generatedType: column.generatedType,
                            hstoreType: column.hstoreType,
                            array: column.array,
                            transformer: column.transformer,
                            spatialFeatureType: column.spatialFeatureType,
                            srid: column.srid
                        }
                    };
                    metadataArgsStorage.columns.push(columnAgrs);
                    if (column.generated) {
                        const generationArgs = {
                            target: options.target || options.name,
                            propertyName: columnName,
                            strategy: typeof column.generated === "string" ? column.generated : "increment"
                        };
                        metadataArgsStorage.generations.push(generationArgs);
                    }
                    if (column.unique)
                        metadataArgsStorage.uniques.push({ target: options.target || options.name, columns: [columnName] });
                });
                // add relation metadata args from the schema
                if (options.relations) {
                    Object.keys(options.relations).forEach(relationName => {
                        const relationSchema = options.relations[relationName];
                        const relation = {
                            target: options.target || options.name,
                            propertyName: relationName,
                            relationType: relationSchema.type,
                            isLazy: relationSchema.lazy || false,
                            type: relationSchema.target,
                            inverseSideProperty: relationSchema.inverseSide,
                            isTreeParent: relationSchema.treeParent,
                            isTreeChildren: relationSchema.treeChildren,
                            options: {
                                eager: relationSchema.eager || false,
                                cascade: relationSchema.cascade,
                                nullable: relationSchema.nullable,
                                onDelete: relationSchema.onDelete,
                                onUpdate: relationSchema.onUpdate,
                                deferrable: relationSchema.deferrable,
                                primary: relationSchema.primary,
                                persistence: relationSchema.persistence
                            }
                        };
                        metadataArgsStorage.relations.push(relation);
                        // add join column
                        if (relationSchema.joinColumn) {
                            if (typeof relationSchema.joinColumn === "boolean") {
                                const joinColumn = {
                                    target: options.target || options.name,
                                    propertyName: relationName
                                };
                                metadataArgsStorage.joinColumns.push(joinColumn);
                            }
                            else {
                                const joinColumnsOptions = Array.isArray(relationSchema.joinColumn) ? relationSchema.joinColumn : [relationSchema.joinColumn];
                                for (const joinColumnOption of joinColumnsOptions) {
                                    const joinColumn = {
                                        target: options.target || options.name,
                                        propertyName: relationName,
                                        name: joinColumnOption.name,
                                        referencedColumnName: joinColumnOption.referencedColumnName
                                    };
                                    metadataArgsStorage.joinColumns.push(joinColumn);
                                }
                            }
                        }
                        // add join table
                        if (relationSchema.joinTable) {
                            if (typeof relationSchema.joinTable === "boolean") {
                                const joinTable = {
                                    target: options.target || options.name,
                                    propertyName: relationName
                                };
                                metadataArgsStorage.joinTables.push(joinTable);
                            }
                            else {
                                const joinTable = {
                                    target: options.target || options.name,
                                    propertyName: relationName,
                                    name: relationSchema.joinTable.name,
                                    database: relationSchema.joinTable.database,
                                    schema: relationSchema.joinTable.schema,
                                    joinColumns: (relationSchema.joinTable.joinColumn ? [relationSchema.joinTable.joinColumn] : relationSchema.joinTable.joinColumns),
                                    inverseJoinColumns: (relationSchema.joinTable.inverseJoinColumn ? [relationSchema.joinTable.inverseJoinColumn] : relationSchema.joinTable.inverseJoinColumns),
                                };
                                metadataArgsStorage.joinTables.push(joinTable);
                            }
                        }
                    });
                }
                // add index metadata args from the schema
                if (options.indices) {
                    options.indices.forEach(index => {
                        const indexAgrs = {
                            target: options.target || options.name,
                            name: index.name,
                            unique: index.unique === true ? true : false,
                            spatial: index.spatial === true ? true : false,
                            fulltext: index.fulltext === true ? true : false,
                            parser: index.parser,
                            synchronize: index.synchronize === false ? false : true,
                            where: index.where,
                            sparse: index.sparse,
                            columns: index.columns
                        };
                        metadataArgsStorage.indices.push(indexAgrs);
                    });
                }
                // add unique metadata args from the schema
                if (options.uniques) {
                    options.uniques.forEach(unique => {
                        const uniqueAgrs = {
                            target: options.target || options.name,
                            name: unique.name,
                            columns: unique.columns
                        };
                        metadataArgsStorage.uniques.push(uniqueAgrs);
                    });
                }
                // add check metadata args from the schema
                if (options.checks) {
                    options.checks.forEach(check => {
                        const checkAgrs = {
                            target: options.target || options.name,
                            name: check.name,
                            expression: check.expression
                        };
                        metadataArgsStorage.checks.push(checkAgrs);
                    });
                }
                // add exclusion metadata args from the schema
                if (options.exclusions) {
                    options.exclusions.forEach(exclusion => {
                        const exclusionArgs = {
                            target: options.target || options.name,
                            name: exclusion.name,
                            expression: exclusion.expression
                        };
                        metadataArgsStorage.exclusions.push(exclusionArgs);
                    });
                }
            });
            return metadataArgsStorage;
        }
    }
    exports.EntitySchemaTransformer = EntitySchemaTransformer;
});
define("typeorm/connection/ConnectionMetadataBuilder", ["require", "exports", "typeorm/util/DirectoryExportedClassesLoader", "typeorm/util/OrmUtils", "typeorm/container", "typeorm/index", "typeorm/metadata-builder/EntityMetadataBuilder", "typeorm/entity-schema/EntitySchemaTransformer", "typeorm/entity-schema/EntitySchema"], function (require, exports, DirectoryExportedClassesLoader_1, OrmUtils_30, container_1, index_10, EntityMetadataBuilder_1, EntitySchemaTransformer_1, EntitySchema_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionMetadataBuilder = void 0;
    /**
     * Builds migration instances, subscriber instances and entity metadatas for the given classes.
     */
    class ConnectionMetadataBuilder {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Builds migration instances for the given classes or directories.
         */
        buildMigrations(migrations) {
            const [migrationClasses, migrationDirectories] = OrmUtils_30.OrmUtils.splitClassesAndStrings(migrations);
            const allMigrationClasses = [...migrationClasses, ...DirectoryExportedClassesLoader_1.importClassesFromDirectories(this.connection.logger, migrationDirectories)];
            return allMigrationClasses.map(migrationClass => container_1.getFromContainer(migrationClass));
        }
        /**
         * Builds subscriber instances for the given classes or directories.
         */
        buildSubscribers(subscribers) {
            const [subscriberClasses, subscriberDirectories] = OrmUtils_30.OrmUtils.splitClassesAndStrings(subscribers || []);
            const allSubscriberClasses = [...subscriberClasses, ...DirectoryExportedClassesLoader_1.importClassesFromDirectories(this.connection.logger, subscriberDirectories)];
            return index_10.getMetadataArgsStorage()
                .filterSubscribers(allSubscriberClasses)
                .map(metadata => container_1.getFromContainer(metadata.target));
        }
        /**
         * Builds entity metadatas for the given classes or directories.
         */
        buildEntityMetadatas(entities) {
            // todo: instead we need to merge multiple metadata args storages
            const [entityClassesOrSchemas, entityDirectories] = OrmUtils_30.OrmUtils.splitClassesAndStrings(entities || []);
            const entityClasses = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema_3.EntitySchema) === false);
            const entitySchemas = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema_3.EntitySchema);
            const allEntityClasses = [...entityClasses, ...DirectoryExportedClassesLoader_1.importClassesFromDirectories(this.connection.logger, entityDirectories)];
            allEntityClasses.forEach(entityClass => {
                if (entityClass instanceof EntitySchema_3.EntitySchema) {
                    entitySchemas.push(entityClass);
                    allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);
                }
            });
            const decoratorEntityMetadatas = new EntityMetadataBuilder_1.EntityMetadataBuilder(this.connection, index_10.getMetadataArgsStorage()).build(allEntityClasses);
            const metadataArgsStorageFromSchema = new EntitySchemaTransformer_1.EntitySchemaTransformer().transform(entitySchemas);
            const schemaEntityMetadatas = new EntityMetadataBuilder_1.EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();
            return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];
        }
    }
    exports.ConnectionMetadataBuilder = ConnectionMetadataBuilder;
});
define("typeorm/logger/SimpleConsoleLogger", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimpleConsoleLogger = void 0;
    /**
     * Performs logging of the events in TypeORM.
     * This version of logger uses console to log events and does not use syntax highlighting.
     */
    class SimpleConsoleLogger {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            this.options = options;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Logs query and parameters used in it.
         */
        logQuery(query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("query") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                console.log("query" + ": " + sql);
            }
        }
        /**
         * Logs query that is failed.
         */
        logQueryError(error, query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("error") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                console.log(`query failed: ` + sql);
                console.log(`error:`, error);
            }
        }
        /**
         * Logs query that is slow.
         */
        logQuerySlow(time, query, parameters, queryRunner) {
            const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
            console.log(`query is slow: ` + sql);
            console.log(`execution time: ` + time);
        }
        /**
         * Logs events from the schema build process.
         */
        logSchemaBuild(message, queryRunner) {
            if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("schema") !== -1)) {
                console.log(message);
            }
        }
        /**
         * Logs events from the migrations run process.
         */
        logMigration(message, queryRunner) {
            console.log(message);
        }
        /**
         * Perform logging using given logger, or by default to the console.
         * Log has its own level and message.
         */
        log(level, message, queryRunner) {
            switch (level) {
                case "log":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("log") !== -1))
                        console.log(message);
                    break;
                case "info":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("info") !== -1))
                        console.info(message);
                    break;
                case "warn":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("warn") !== -1))
                        console.warn(message);
                    break;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Converts parameters to a string.
         * Sometimes parameters can have circular objects and therefor we are handle this case too.
         */
        stringifyParams(parameters) {
            try {
                return JSON.stringify(parameters);
            }
            catch (error) { // most probably circular objects in parameters
                return parameters;
            }
        }
    }
    exports.SimpleConsoleLogger = SimpleConsoleLogger;
});
define("typeorm/logger/AdvancedConsoleLogger", ["require", "exports", "typeorm/platform/PlatformTools"], function (require, exports, PlatformTools_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdvancedConsoleLogger = void 0;
    /**
     * Performs logging of the events in TypeORM.
     * This version of logger uses console to log events and use syntax highlighting.
     */
    class AdvancedConsoleLogger {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            this.options = options;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Logs query and parameters used in it.
         */
        logQuery(query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("query") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                PlatformTools_16.PlatformTools.logInfo("query:", PlatformTools_16.PlatformTools.highlightSql(sql));
            }
        }
        /**
         * Logs query that is failed.
         */
        logQueryError(error, query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("error") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                PlatformTools_16.PlatformTools.logError(`query failed:`, PlatformTools_16.PlatformTools.highlightSql(sql));
                PlatformTools_16.PlatformTools.logError(`error:`, error);
            }
        }
        /**
         * Logs query that is slow.
         */
        logQuerySlow(time, query, parameters, queryRunner) {
            const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
            PlatformTools_16.PlatformTools.logWarn(`query is slow:`, PlatformTools_16.PlatformTools.highlightSql(sql));
            PlatformTools_16.PlatformTools.logWarn(`execution time:`, time);
        }
        /**
         * Logs events from the schema build process.
         */
        logSchemaBuild(message, queryRunner) {
            if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("schema") !== -1)) {
                PlatformTools_16.PlatformTools.log(message);
            }
        }
        /**
         * Logs events from the migration run process.
         */
        logMigration(message, queryRunner) {
            PlatformTools_16.PlatformTools.log(message);
        }
        /**
         * Perform logging using given logger, or by default to the console.
         * Log has its own level and message.
         */
        log(level, message, queryRunner) {
            switch (level) {
                case "log":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("log") !== -1))
                        PlatformTools_16.PlatformTools.log(message);
                    break;
                case "info":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("info") !== -1))
                        PlatformTools_16.PlatformTools.logInfo("INFO:", message);
                    break;
                case "warn":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("warn") !== -1))
                        console.warn(PlatformTools_16.PlatformTools.warn(message));
                    break;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Converts parameters to a string.
         * Sometimes parameters can have circular objects and therefor we are handle this case too.
         */
        stringifyParams(parameters) {
            try {
                return JSON.stringify(parameters);
            }
            catch (error) { // most probably circular objects in parameters
                return parameters;
            }
        }
    }
    exports.AdvancedConsoleLogger = AdvancedConsoleLogger;
});
define("typeorm/logger/FileLogger", ["require", "exports", "app-root-path", "typeorm/platform/PlatformTools"], function (require, exports, app_root_path_1, PlatformTools_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileLogger = void 0;
    /**
     * Performs logging of the events in TypeORM.
     * This version of logger logs everything into ormlogs.log file.
     */
    class FileLogger {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options, fileLoggerOptions) {
            this.options = options;
            this.fileLoggerOptions = fileLoggerOptions;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Logs query and parameters used in it.
         */
        logQuery(query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("query") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                this.write("[QUERY]: " + sql);
            }
        }
        /**
         * Logs query that is failed.
         */
        logQueryError(error, query, parameters, queryRunner) {
            if (this.options === "all" || this.options === true || (Array.isArray(this.options) && this.options.indexOf("error") !== -1)) {
                const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
                this.write([
                    `[FAILED QUERY]: ${sql}`,
                    `[QUERY ERROR]: ${error}`
                ]);
            }
        }
        /**
         * Logs query that is slow.
         */
        logQuerySlow(time, query, parameters, queryRunner) {
            const sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");
            this.write(`[SLOW QUERY: ${time} ms]: ` + sql);
        }
        /**
         * Logs events from the schema build process.
         */
        logSchemaBuild(message, queryRunner) {
            if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("schema") !== -1)) {
                this.write(message);
            }
        }
        /**
         * Logs events from the migrations run process.
         */
        logMigration(message, queryRunner) {
            this.write(message);
        }
        /**
         * Perform logging using given logger, or by default to the console.
         * Log has its own level and message.
         */
        log(level, message, queryRunner) {
            switch (level) {
                case "log":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("log") !== -1))
                        this.write("[LOG]: " + message);
                    break;
                case "info":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("info") !== -1))
                        this.write("[INFO]: " + message);
                    break;
                case "warn":
                    if (this.options === "all" || (Array.isArray(this.options) && this.options.indexOf("warn") !== -1))
                        this.write("[WARN]: " + message);
                    break;
            }
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Writes given strings into the log file.
         */
        write(strings) {
            strings = Array.isArray(strings) ? strings : [strings];
            const basePath = app_root_path_1.default.path + "/";
            let logPath = "ormlogs.log";
            if (this.fileLoggerOptions && this.fileLoggerOptions.logPath) {
                logPath = PlatformTools_17.PlatformTools.pathNormalize(this.fileLoggerOptions.logPath);
            }
            strings = strings.map(str => "[" + new Date().toISOString() + "]" + str);
            PlatformTools_17.PlatformTools.appendFileSync(basePath + logPath, strings.join("\r\n") + "\r\n"); // todo: use async or implement promises?
        }
        /**
         * Converts parameters to a string.
         * Sometimes parameters can have circular objects and therefor we are handle this case too.
         */
        stringifyParams(parameters) {
            try {
                return JSON.stringify(parameters);
            }
            catch (error) { // most probably circular objects in parameters
                return parameters;
            }
        }
    }
    exports.FileLogger = FileLogger;
});
define("typeorm/logger/DebugLogger", ["require", "exports", "debug", "typeorm/platform/PlatformTools"], function (require, exports, debug_1, PlatformTools_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DebugLogger = void 0;
    /**
     * Performs logging of the events in TypeORM via debug library.
     */
    class DebugLogger {
        constructor() {
            this.debugQueryLog = debug_1.default("typeorm:query:log");
            this.debugQueryError = debug_1.default("typeorm:query:error");
            this.debugQuerySlow = debug_1.default("typeorm:query:slow");
            this.debugSchemaBuild = debug_1.default("typeorm:schema");
            this.debugMigration = debug_1.default("typeorm:migration");
            this.debugLog = debug_1.default("typeorm:log");
            this.debugInfo = debug_1.default("typeorm:info");
            this.debugWarn = debug_1.default("typeorm:warn");
        }
        /**
         * Logs query and parameters used in it.
         */
        logQuery(query, parameters, queryRunner) {
            if (this.debugQueryLog.enabled) {
                this.debugQueryLog(PlatformTools_18.PlatformTools.highlightSql(query) + ";");
                if (parameters && parameters.length) {
                    this.debugQueryLog("parameters:", parameters);
                }
            }
        }
        /**
         * Logs query that failed.
         */
        logQueryError(error, query, parameters, queryRunner) {
            if (this.debugQueryError.enabled) {
                this.debugQueryError(PlatformTools_18.PlatformTools.highlightSql(query) + ";");
                if (parameters && parameters.length) {
                    this.debugQueryError("parameters:", parameters);
                }
                this.debugQueryError("error: ", error);
            }
        }
        /**
         * Logs query that is slow.
         */
        logQuerySlow(time, query, parameters, queryRunner) {
            if (this.debugQuerySlow.enabled) {
                this.debugQuerySlow(PlatformTools_18.PlatformTools.highlightSql(query) + ";");
                if (parameters && parameters.length) {
                    this.debugQuerySlow("parameters:", parameters);
                }
                this.debugQuerySlow("execution time:", time);
            }
        }
        /**
         * Logs events from the schema build process.
         */
        logSchemaBuild(message, queryRunner) {
            if (this.debugSchemaBuild.enabled) {
                this.debugSchemaBuild(message);
            }
        }
        /**
         * Logs events from the migration run process.
         */
        logMigration(message, queryRunner) {
            if (this.debugMigration.enabled) {
                this.debugMigration(message);
            }
        }
        /**
         * Perform logging using given logger.
         * Log has its own level and message.
         */
        log(level, message, queryRunner) {
            switch (level) {
                case "log":
                    if (this.debugLog.enabled) {
                        this.debugLog(message);
                    }
                    break;
                case "info":
                    if (this.debugInfo.enabled) {
                        this.debugInfo(message);
                    }
                    break;
                case "warn":
                    if (this.debugWarn.enabled) {
                        this.debugWarn(message);
                    }
                    break;
            }
        }
    }
    exports.DebugLogger = DebugLogger;
});
define("typeorm/logger/LoggerFactory", ["require", "exports", "typeorm/logger/SimpleConsoleLogger", "typeorm/logger/AdvancedConsoleLogger", "typeorm/logger/FileLogger", "typeorm/logger/DebugLogger"], function (require, exports, SimpleConsoleLogger_1, AdvancedConsoleLogger_1, FileLogger_1, DebugLogger_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoggerFactory = void 0;
    /**
     * Helps to create logger instances.
     */
    class LoggerFactory {
        /**
         * Creates a new logger depend on a given connection's driver.
         */
        create(logger, options) {
            if (logger instanceof Object)
                return logger;
            if (logger) {
                switch (logger) {
                    case "simple-console":
                        return new SimpleConsoleLogger_1.SimpleConsoleLogger(options);
                    case "file":
                        return new FileLogger_1.FileLogger(options);
                    case "advanced-console":
                        return new AdvancedConsoleLogger_1.AdvancedConsoleLogger(options);
                    case "debug":
                        return new DebugLogger_1.DebugLogger();
                }
            }
            return new AdvancedConsoleLogger_1.AdvancedConsoleLogger(options);
        }
    }
    exports.LoggerFactory = LoggerFactory;
});
define("typeorm/cache/RedisQueryResultCache", ["require", "exports", "typeorm/platform/PlatformTools"], function (require, exports, PlatformTools_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedisQueryResultCache = void 0;
    /**
     * Caches query result into Redis database.
     */
    class RedisQueryResultCache {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection, clientType) {
            this.connection = connection;
            this.clientType = clientType;
            this.redis = this.loadRedis();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a connection with given cache provider.
         */
        async connect() {
            const cacheOptions = this.connection.options.cache;
            if (this.clientType === "redis") {
                if (cacheOptions && cacheOptions.options) {
                    this.client = this.redis.createClient(cacheOptions.options);
                }
                else {
                    this.client = this.redis.createClient();
                }
            }
            else if (this.clientType === "ioredis") {
                if (cacheOptions && cacheOptions.options) {
                    this.client = new this.redis(cacheOptions.options);
                }
                else {
                    this.client = new this.redis();
                }
            }
            else if (this.clientType === "ioredis/cluster") {
                if (cacheOptions && cacheOptions.options && Array.isArray(cacheOptions.options)) {
                    this.client = new this.redis.Cluster(cacheOptions.options);
                }
                else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {
                    this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);
                }
                else {
                    throw new Error(`options.startupNodes required for ${this.clientType}.`);
                }
            }
        }
        /**
         * Disconnects the connection
         */
        async disconnect() {
            return new Promise((ok, fail) => {
                this.client.quit((err, result) => {
                    if (err)
                        return fail(err);
                    ok();
                    this.client = undefined;
                });
            });
        }
        /**
         * Creates table for storing cache if it does not exist yet.
         */
        async synchronize(queryRunner) {
        }
        /**
         * Caches given query result.
         * Returns cache result if found.
         * Returns undefined if result is not cached.
         */
        getFromCache(options, queryRunner) {
            return new Promise((ok, fail) => {
                if (options.identifier) {
                    this.client.get(options.identifier, (err, result) => {
                        if (err)
                            return fail(err);
                        ok(JSON.parse(result));
                    });
                }
                else if (options.query) {
                    this.client.get(options.query, (err, result) => {
                        if (err)
                            return fail(err);
                        ok(JSON.parse(result));
                    });
                }
                else {
                    ok(undefined);
                }
            });
        }
        /**
         * Checks if cache is expired or not.
         */
        isExpired(savedCache) {
            return (savedCache.time + savedCache.duration) < new Date().getTime();
        }
        /**
         * Stores given query result in the cache.
         */
        async storeInCache(options, savedCache, queryRunner) {
            return new Promise((ok, fail) => {
                if (options.identifier) {
                    this.client.set(options.identifier, JSON.stringify(options), "PX", options.duration, (err, result) => {
                        if (err)
                            return fail(err);
                        ok();
                    });
                }
                else if (options.query) {
                    this.client.set(options.query, JSON.stringify(options), "PX", options.duration, (err, result) => {
                        if (err)
                            return fail(err);
                        ok();
                    });
                }
            });
        }
        /**
         * Clears everything stored in the cache.
         */
        async clear(queryRunner) {
            return new Promise((ok, fail) => {
                this.client.flushdb((err, result) => {
                    if (err)
                        return fail(err);
                    ok();
                });
            });
        }
        /**
         * Removes all cached results by given identifiers from cache.
         */
        async remove(identifiers, queryRunner) {
            await Promise.all(identifiers.map(identifier => {
                return this.deleteKey(identifier);
            }));
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Removes a single key from redis database.
         */
        deleteKey(key) {
            return new Promise((ok, fail) => {
                this.client.del(key, (err, result) => {
                    if (err)
                        return fail(err);
                    ok();
                });
            });
        }
        /**
         * Loads redis dependency.
         */
        loadRedis() {
            try {
                if (this.clientType === "ioredis/cluster") {
                    return PlatformTools_19.PlatformTools.load("ioredis");
                }
                else {
                    return PlatformTools_19.PlatformTools.load(this.clientType);
                }
            }
            catch (e) {
                throw new Error(`Cannot use cache because ${this.clientType} is not installed. Please run "npm i ${this.clientType} --save".`);
            }
        }
    }
    exports.RedisQueryResultCache = RedisQueryResultCache;
});
define("typeorm/cache/DbQueryResultCache", ["require", "exports", "typeorm/driver/oracle/OracleDriver", "typeorm/driver/sqlserver/MssqlParameter", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/schema-builder/table/Table"], function (require, exports, OracleDriver_13, MssqlParameter_4, SqlServerDriver_12, Table_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DbQueryResultCache = void 0;
    /**
     * Caches query result into current database, into separate table called "query-result-cache".
     */
    class DbQueryResultCache {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
            const options = this.connection.driver.options;
            const cacheOptions = typeof this.connection.options.cache === "object" ? this.connection.options.cache : {};
            const cacheTableName = cacheOptions.tableName || "query-result-cache";
            this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a connection with given cache provider.
         */
        async connect() {
        }
        /**
         * Disconnects with given cache provider.
         */
        async disconnect() {
        }
        /**
         * Creates table for storing cache if it does not exist yet.
         */
        async synchronize(queryRunner) {
            queryRunner = this.getQueryRunner(queryRunner);
            const driver = this.connection.driver;
            const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable
            if (tableExist)
                return;
            await queryRunner.createTable(new Table_12.Table({
                name: this.queryResultCacheTable,
                columns: [
                    {
                        name: "id",
                        isPrimary: true,
                        isNullable: false,
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheId }),
                        generationStrategy: "increment",
                        isGenerated: true
                    },
                    {
                        name: "identifier",
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheIdentifier }),
                        isNullable: true
                    },
                    {
                        name: "time",
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheTime }),
                        isPrimary: false,
                        isNullable: false
                    },
                    {
                        name: "duration",
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheDuration }),
                        isPrimary: false,
                        isNullable: false
                    },
                    {
                        name: "query",
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheQuery }),
                        isPrimary: false,
                        isNullable: false
                    },
                    {
                        name: "result",
                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheResult }),
                        isNullable: false
                    },
                ]
            }));
        }
        /**
         * Caches given query result.
         * Returns cache result if found.
         * Returns undefined if result is not cached.
         */
        getFromCache(options, queryRunner) {
            queryRunner = this.getQueryRunner(queryRunner);
            const qb = this.connection
                .createQueryBuilder(queryRunner)
                .select()
                .from(this.queryResultCacheTable, "cache");
            if (options.identifier) {
                return qb
                    .where(`${qb.escape("cache")}.${qb.escape("identifier")} = :identifier`)
                    .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver_12.SqlServerDriver ? new MssqlParameter_4.MssqlParameter(options.identifier, "nvarchar") : options.identifier })
                    .getRawOne();
            }
            else if (options.query) {
                if (this.connection.driver instanceof OracleDriver_13.OracleDriver) {
                    return qb
                        .where(`dbms_lob.compare(${qb.escape("cache")}.${qb.escape("query")}, :query) = 0`, { query: options.query })
                        .getRawOne();
                }
                return qb
                    .where(`${qb.escape("cache")}.${qb.escape("query")} = :query`)
                    .setParameters({ query: this.connection.driver instanceof SqlServerDriver_12.SqlServerDriver ? new MssqlParameter_4.MssqlParameter(options.query, "nvarchar") : options.query })
                    .getRawOne();
            }
            return Promise.resolve(undefined);
        }
        /**
         * Checks if cache is expired or not.
         */
        isExpired(savedCache) {
            const duration = typeof savedCache.duration === "string" ? parseInt(savedCache.duration) : savedCache.duration;
            return ((typeof savedCache.time === "string" ? parseInt(savedCache.time) : savedCache.time) + duration) < new Date().getTime();
        }
        /**
         * Stores given query result in the cache.
         */
        async storeInCache(options, savedCache, queryRunner) {
            queryRunner = this.getQueryRunner(queryRunner);
            let insertedValues = options;
            if (this.connection.driver instanceof SqlServerDriver_12.SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table
                insertedValues = {
                    identifier: new MssqlParameter_4.MssqlParameter(options.identifier, "nvarchar"),
                    time: new MssqlParameter_4.MssqlParameter(options.time, "bigint"),
                    duration: new MssqlParameter_4.MssqlParameter(options.duration, "int"),
                    query: new MssqlParameter_4.MssqlParameter(options.query, "nvarchar"),
                    result: new MssqlParameter_4.MssqlParameter(options.result, "nvarchar"),
                };
            }
            if (savedCache && savedCache.identifier) { // if exist then update
                const qb = queryRunner.manager
                    .createQueryBuilder()
                    .update(this.queryResultCacheTable)
                    .set(insertedValues);
                qb.where(`${qb.escape("identifier")} = :condition`, { condition: insertedValues.identifier });
                await qb.execute();
            }
            else if (savedCache && savedCache.query) { // if exist then update
                const qb = queryRunner.manager
                    .createQueryBuilder()
                    .update(this.queryResultCacheTable)
                    .set(insertedValues);
                if (this.connection.driver instanceof OracleDriver_13.OracleDriver) {
                    qb.where(`dbms_lob.compare("query", :condition) = 0`, { condition: insertedValues.query });
                }
                else {
                    qb.where(`${qb.escape("query")} = :condition`, { condition: insertedValues.query });
                }
                await qb.execute();
            }
            else { // otherwise insert
                await queryRunner.manager
                    .createQueryBuilder()
                    .insert()
                    .into(this.queryResultCacheTable)
                    .values(insertedValues)
                    .execute();
            }
        }
        /**
         * Clears everything stored in the cache.
         */
        async clear(queryRunner) {
            return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);
        }
        /**
         * Removes all cached results by given identifiers from cache.
         */
        async remove(identifiers, queryRunner) {
            await Promise.all(identifiers.map(identifier => {
                const qb = this.getQueryRunner(queryRunner).manager.createQueryBuilder();
                return qb.delete()
                    .from(this.queryResultCacheTable)
                    .where(`${qb.escape("identifier")} = :identifier`, { identifier })
                    .execute();
            }));
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Gets a query runner to work with.
         */
        getQueryRunner(queryRunner) {
            if (queryRunner)
                return queryRunner;
            return this.connection.createQueryRunner();
        }
    }
    exports.DbQueryResultCache = DbQueryResultCache;
});
define("typeorm/cache/QueryResultCacheFactory", ["require", "exports", "typeorm/cache/RedisQueryResultCache", "typeorm/cache/DbQueryResultCache"], function (require, exports, RedisQueryResultCache_1, DbQueryResultCache_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryResultCacheFactory = void 0;
    /**
     * Caches query result into Redis database.
     */
    class QueryResultCacheFactory {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Creates a new query result cache based on connection options.
         */
        create() {
            if (!this.connection.options.cache)
                throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);
            const cache = this.connection.options.cache;
            if (cache.provider && typeof cache.provider === "function") {
                return cache.provider(this.connection);
            }
            if (cache.type === "redis" || cache.type === "ioredis" || cache.type === "ioredis/cluster") {
                return new RedisQueryResultCache_1.RedisQueryResultCache(this.connection, cache.type);
            }
            else {
                return new DbQueryResultCache_1.DbQueryResultCache(this.connection);
            }
        }
    }
    exports.QueryResultCacheFactory = QueryResultCacheFactory;
});
define("typeorm/query-builder/RelationLoader", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationLoader = void 0;
    /**
     * Wraps entities and creates getters/setters for their relations
     * to be able to lazily load relations when accessing these relations.
     */
    class RelationLoader {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Loads relation data for the given entity and its relation.
         */
        load(relation, entityOrEntities, queryRunner) {
            if (queryRunner && queryRunner.isReleased)
                queryRunner = undefined; // get new one if already closed
            if (relation.isManyToOne || relation.isOneToOneOwner) {
                return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);
            }
            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);
            }
            else if (relation.isManyToManyOwner) {
                return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);
            }
            else { // many-to-many non owner
                return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);
            }
        }
        /**
         * Loads data for many-to-one and one-to-one owner relations.
         *
         * (ow) post.category<=>category.post
         * loaded: category from post
         * example: SELECT category.id AS category_id, category.name AS category_name FROM category category
         *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1
         */
        loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner) {
            const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
            const columns = relation.entityMetadata.primaryColumns;
            const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation.joinColumns;
            const conditions = joinColumns.map(joinColumn => {
                return `${relation.entityMetadata.name}.${joinColumn.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn.propertyName}`;
            }).join(" AND ");
            const joinAliasName = relation.entityMetadata.name;
            const qb = this.connection
                .createQueryBuilder(queryRunner)
                .select(relation.propertyName) // category
                .from(relation.type, relation.propertyName) // Category, category
                .innerJoin(relation.entityMetadata.target, joinAliasName, conditions);
            if (columns.length === 1) {
                qb.where(`${joinAliasName}.${columns[0].propertyPath} IN (:...${joinAliasName + "_" + columns[0].propertyName})`);
                qb.setParameter(joinAliasName + "_" + columns[0].propertyName, entities.map(entity => columns[0].getEntityValue(entity)));
            }
            else {
                const condition = entities.map((entity, entityIndex) => {
                    return columns.map((column, columnIndex) => {
                        const paramName = joinAliasName + "_entity_" + entityIndex + "_" + columnIndex;
                        qb.setParameter(paramName, column.getEntityValue(entity));
                        return joinAliasName + "." + column.propertyPath + " = :" + paramName;
                    }).join(" AND ");
                }).map(condition => "(" + condition + ")").join(" OR ");
                qb.where(condition);
            }
            return qb.getMany();
            // return qb.getOne(); todo: fix all usages
        }
        /**
         * Loads data for one-to-many and one-to-one not owner relations.
         *
         * SELECT post
         * FROM post post
         * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]
         */
        loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner) {
            const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
            const aliasName = relation.propertyName;
            const columns = relation.inverseRelation.joinColumns;
            const qb = this.connection
                .createQueryBuilder(queryRunner)
                .select(aliasName)
                .from(relation.inverseRelation.entityMetadata.target, aliasName);
            if (columns.length === 1) {
                qb.where(`${aliasName}.${columns[0].propertyPath} IN (:...${aliasName + "_" + columns[0].propertyName})`);
                qb.setParameter(aliasName + "_" + columns[0].propertyName, entities.map(entity => columns[0].referencedColumn.getEntityValue(entity)));
            }
            else {
                const condition = entities.map((entity, entityIndex) => {
                    return columns.map((column, columnIndex) => {
                        const paramName = aliasName + "_entity_" + entityIndex + "_" + columnIndex;
                        qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
                        return aliasName + "." + column.propertyPath + " = :" + paramName;
                    }).join(" AND ");
                }).map(condition => "(" + condition + ")").join(" OR ");
                qb.where(condition);
            }
            return qb.getMany();
            // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages
        }
        /**
         * Loads data for many-to-many owner relations.
         *
         * SELECT category
         * FROM category category
         * INNER JOIN post_categories post_categories
         * ON post_categories.postId = :postId
         * AND post_categories.categoryId = category.id
         */
        loadManyToManyOwner(relation, entityOrEntities, queryRunner) {
            const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
            const mainAlias = relation.propertyName;
            const joinAlias = relation.junctionEntityMetadata.tableName;
            const joinColumnConditions = relation.joinColumns.map(joinColumn => {
                return `${joinAlias}.${joinColumn.propertyName} IN (:...${joinColumn.propertyName})`;
            });
            const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {
                return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn.propertyName}`;
            });
            const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {
                parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn.getEntityValue(entity));
                return parameters;
            }, {});
            return this.connection
                .createQueryBuilder(queryRunner)
                .select(mainAlias)
                .from(relation.type, mainAlias)
                .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(" AND "))
                .setParameters(parameters)
                .getMany();
        }
        /**
         * Loads data for many-to-many not owner relations.
         *
         * SELECT post
         * FROM post post
         * INNER JOIN post_categories post_categories
         * ON post_categories.postId = post.id
         * AND post_categories.categoryId = post_categories.categoryId
         */
        loadManyToManyNotOwner(relation, entityOrEntities, queryRunner) {
            const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];
            const mainAlias = relation.propertyName;
            const joinAlias = relation.junctionEntityMetadata.tableName;
            const joinColumnConditions = relation.inverseRelation.joinColumns.map(joinColumn => {
                return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn.propertyName}`;
            });
            const inverseJoinColumnConditions = relation.inverseRelation.inverseJoinColumns.map(inverseJoinColumn => {
                return `${joinAlias}.${inverseJoinColumn.propertyName} IN (:...${inverseJoinColumn.propertyName})`;
            });
            const parameters = relation.inverseRelation.inverseJoinColumns.reduce((parameters, joinColumn) => {
                parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn.getEntityValue(entity));
                return parameters;
            }, {});
            return this.connection
                .createQueryBuilder(queryRunner)
                .select(mainAlias)
                .from(relation.type, mainAlias)
                .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(" AND "))
                .setParameters(parameters)
                .getMany();
        }
        /**
         * Wraps given entity and creates getters/setters for its given relation
         * to be able to lazily load data when accessing this relation.
         */
        enableLazyLoad(relation, entity, queryRunner) {
            const relationLoader = this;
            const dataIndex = "__" + relation.propertyName + "__"; // in what property of the entity loaded data will be stored
            const promiseIndex = "__promise_" + relation.propertyName + "__"; // in what property of the entity loading promise will be stored
            const resolveIndex = "__has_" + relation.propertyName + "__"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty
            const setData = (entity, value) => {
                entity[dataIndex] = value;
                entity[resolveIndex] = true;
                delete entity[promiseIndex];
                return value;
            };
            const setPromise = (entity, value) => {
                delete entity[resolveIndex];
                delete entity[dataIndex];
                entity[promiseIndex] = value;
                value.then(
                // ensure different value is not assigned yet
                result => entity[promiseIndex] === value ? setData(entity, result) : result);
                return value;
            };
            Object.defineProperty(entity, relation.propertyName, {
                get: function () {
                    if (this[resolveIndex] === true || this[dataIndex] !== undefined) // if related data already was loaded then simply return it
                        return Promise.resolve(this[dataIndex]);
                    if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it
                        return this[promiseIndex];
                    // nothing is loaded yet, load relation data and save it in the model once they are loaded
                    const loader = relationLoader.load(relation, this, queryRunner).then(result => relation.isOneToOne || relation.isManyToOne ? (result.length === 0 ? null : result[0]) : result);
                    return setPromise(this, loader);
                },
                set: function (value) {
                    if (value instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object
                        setPromise(this, value);
                    }
                    else { // if its direct data set (non promise, probably not safe-typed)
                        setData(this, value);
                    }
                },
                configurable: true
            });
        }
    }
    exports.RelationLoader = RelationLoader;
});
define("typeorm/query-builder/RelationIdLoader", ["require", "exports", "typeorm/metadata/RelationMetadata"], function (require, exports, RelationMetadata_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationIdLoader = void 0;
    /**
     * Loads relation ids for the given entities.
     */
    class RelationIdLoader {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(connection) {
            this.connection = connection;
        }
        /**
         * Loads relation ids of the given entity or entities.
         */
        async load(relationOrTarget, relationNameOrEntities, entitiesOrRelatedEntities, maybeRelatedEntities) {
            // normalize arguments
            let relation, entities, relatedEntities;
            if (relationOrTarget instanceof RelationMetadata_2.RelationMetadata) {
                relation = relationOrTarget;
                entities = Array.isArray(relationNameOrEntities) ? relationNameOrEntities : [relationNameOrEntities];
                relatedEntities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities] : undefined);
            }
            else {
                const entityMetadata = this.connection.getMetadata(relationOrTarget);
                relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities);
                if (!relation)
                    throw new Error(`Relation "${relation}" was not found in "${entityMetadata.name}".`);
                entities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : [entitiesOrRelatedEntities];
                relatedEntities = Array.isArray(maybeRelatedEntities) ? maybeRelatedEntities : (maybeRelatedEntities ? [maybeRelatedEntities] : undefined);
            }
            // load relation ids depend of relation type
            if (relation.isManyToMany) {
                return this.loadForManyToMany(relation, entities, relatedEntities);
            }
            else if (relation.isManyToOne || relation.isOneToOneOwner) {
                return this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities);
            }
            else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                return this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities);
            }
        }
        /**
         * Loads relation ids of the given entities and groups them into the object with parent and children.
         *
         * todo: extract this method?
         */
        async loadManyToManyRelationIdsAndGroup(relation, entitiesOrEntities, relatedEntityOrEntities) {
            // console.log("relation:", relation.propertyName);
            // console.log("entitiesOrEntities", entitiesOrEntities);
            const isMany = relation.isManyToMany || relation.isOneToMany;
            const entities = Array.isArray(entitiesOrEntities) ? entitiesOrEntities : [entitiesOrEntities];
            if (!relatedEntityOrEntities) {
                relatedEntityOrEntities = await this.connection.relationLoader.load(relation, entitiesOrEntities);
                if (!relatedEntityOrEntities.length)
                    return entities.map(entity => ({ entity: entity, related: isMany ? [] : undefined }));
            }
            // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);
            const relationIds = await this.load(relation, entitiesOrEntities, relatedEntityOrEntities);
            // console.log("relationIds", relationIds);
            const relatedEntities = Array.isArray(relatedEntityOrEntities) ? relatedEntityOrEntities : [relatedEntityOrEntities];
            let columns, inverseColumns;
            if (relation.isManyToManyOwner) {
                columns = relation.junctionEntityMetadata.inverseColumns.map(column => column.referencedColumn);
                inverseColumns = relation.junctionEntityMetadata.ownerColumns.map(column => column.referencedColumn);
            }
            else if (relation.isManyToManyNotOwner) {
                columns = relation.junctionEntityMetadata.ownerColumns.map(column => column.referencedColumn);
                inverseColumns = relation.junctionEntityMetadata.inverseColumns.map(column => column.referencedColumn);
            }
            else if (relation.isManyToOne || relation.isOneToOneOwner) {
                columns = relation.joinColumns.map(column => column.referencedColumn);
                inverseColumns = relation.entityMetadata.primaryColumns;
            }
            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {
                columns = relation.inverseRelation.entityMetadata.primaryColumns;
                inverseColumns = relation.inverseRelation.joinColumns.map(column => column.referencedColumn);
            }
            else {
            }
            return entities.map(entity => {
                const group = { entity: entity, related: isMany ? [] : undefined };
                relationIds.forEach(relationId => {
                    const entityMatched = inverseColumns.every(column => {
                        return column.getEntityValue(entity) === relationId[column.entityMetadata.name + "_" + column.propertyPath.replace(".", "_")];
                    });
                    if (entityMatched) {
                        relatedEntities.forEach(relatedEntity => {
                            const relatedEntityMatched = columns.every(column => {
                                return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.propertyPath.replace(".", "_")];
                            });
                            if (relatedEntityMatched) {
                                if (isMany) {
                                    group.related.push(relatedEntity);
                                }
                                else {
                                    group.related = relatedEntity;
                                }
                            }
                        });
                    }
                });
                return group;
            });
        }
        /**
         * Loads relation ids of the given entities and maps them into the given entity property.
    
        async loadManyToManyRelationIdsAndMap(
            relation: RelationMetadata,
            entityOrEntities: ObjectLiteral|ObjectLiteral[],
            mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],
            propertyName: string
        ): Promise<void> {
    
            const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);
            const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];
            const junctionMetadata = relation.junctionEntityMetadata!;
            const mainAlias = junctionMetadata.name;
            const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;
            const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;
    
            mapToEntities.forEach(mapToEntity => {
                mapToEntity[propertyName] = [];
                relationIds.forEach(relationId => {
                    const match = inverseColumns.every(column => {
                        return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + "_" + column.propertyName];
                    });
                    if (match) {
                        if (columns.length === 1) {
                            mapToEntity[propertyName].push(relationId[mainAlias + "_" + columns[0].propertyName]);
    
                        } else {
                            const value = {};
                            columns.forEach(column => {
                                column.referencedColumn!.setEntityValue(value, relationId[mainAlias + "_" + column.propertyName]);
                            });
                            mapToEntity[propertyName].push(value);
                        }
                    }
                });
            });
        }*/
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Loads relation ids for the many-to-many relation.
         */
        loadForManyToMany(relation, entities, relatedEntities) {
            const junctionMetadata = relation.junctionEntityMetadata;
            const mainAlias = junctionMetadata.name;
            const columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;
            const inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;
            const qb = this.connection.createQueryBuilder();
            // select all columns from junction table
            junctionMetadata.ownerColumns.forEach(column => {
                const columnName = column.referencedColumn.entityMetadata.name + "_" + column.referencedColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
            });
            junctionMetadata.inverseColumns.forEach(column => {
                const columnName = column.referencedColumn.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.referencedColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
            });
            // add conditions for the given entities
            let condition1 = "";
            if (columns.length === 1) {
                qb.setParameter("values1", entities.map(entity => columns[0].referencedColumn.getEntityValue(entity)));
                condition1 = mainAlias + "." + columns[0].propertyPath + " IN (:...values1)"; // todo: use ANY for postgres
            }
            else {
                condition1 = "(" + entities.map((entity, entityIndex) => {
                    return columns.map(column => {
                        const paramName = "entity1_" + entityIndex + "_" + column.propertyName;
                        qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
                        return mainAlias + "." + column.propertyPath + " = :" + paramName;
                    }).join(" AND ");
                }).map(condition => "(" + condition + ")").join(" OR ") + ")";
            }
            // add conditions for the given inverse entities
            let condition2 = "";
            if (relatedEntities) {
                if (inverseColumns.length === 1) {
                    qb.setParameter("values2", relatedEntities.map(entity => inverseColumns[0].referencedColumn.getEntityValue(entity)));
                    condition2 = mainAlias + "." + inverseColumns[0].propertyPath + " IN (:...values2)"; // todo: use ANY for postgres
                }
                else {
                    condition2 = "(" + relatedEntities.map((entity, entityIndex) => {
                        return inverseColumns.map(column => {
                            const paramName = "entity2_" + entityIndex + "_" + column.propertyName;
                            qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));
                            return mainAlias + "." + column.propertyPath + " = :" + paramName;
                        }).join(" AND ");
                    }).map(condition => "(" + condition + ")").join(" OR ") + ")";
                }
            }
            // execute query
            return qb
                .from(junctionMetadata.target, mainAlias)
                .where(condition1 + (condition2 ? " AND " + condition2 : ""))
                .getRawMany();
        }
        /**
         * Loads relation ids for the many-to-one and one-to-one owner relations.
         */
        loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities) {
            const mainAlias = relation.entityMetadata.targetName;
            // select all columns we need
            const qb = this.connection.createQueryBuilder();
            relation.entityMetadata.primaryColumns.forEach(primaryColumn => {
                const columnName = primaryColumn.entityMetadata.name + "_" + primaryColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + primaryColumn.propertyPath, columnName);
            });
            relation.joinColumns.forEach(column => {
                const columnName = column.referencedColumn.entityMetadata.name + "_" + relation.propertyPath.replace(".", "_") + "_" + column.referencedColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
            });
            // add condition for entities
            let condition = "";
            if (relation.entityMetadata.primaryColumns.length === 1) {
                qb.setParameter("values", entities.map(entity => relation.entityMetadata.primaryColumns[0].getEntityValue(entity)));
                condition = mainAlias + "." + relation.entityMetadata.primaryColumns[0].propertyPath + " IN (:...values)";
            }
            else {
                condition = entities.map((entity, entityIndex) => {
                    return relation.entityMetadata.primaryColumns.map((column, columnIndex) => {
                        const paramName = "entity" + entityIndex + "_" + columnIndex;
                        qb.setParameter(paramName, column.getEntityValue(entity));
                        return mainAlias + "." + column.propertyPath + " = :" + paramName;
                    }).join(" AND ");
                }).map(condition => "(" + condition + ")").join(" OR ");
            }
            // execute query
            return qb.from(relation.entityMetadata.target, mainAlias)
                .where(condition)
                .getRawMany();
        }
        /**
         * Loads relation ids for the one-to-many and one-to-one not owner relations.
         */
        loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities) {
            relation = relation.inverseRelation;
            const mainAlias = relation.entityMetadata.targetName;
            // select all columns we need
            const qb = this.connection.createQueryBuilder();
            relation.entityMetadata.primaryColumns.forEach(primaryColumn => {
                const columnName = primaryColumn.entityMetadata.name + "_" + relation.inverseRelation.propertyPath.replace(".", "_") + "_" + primaryColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + primaryColumn.propertyPath, columnName);
            });
            relation.joinColumns.forEach(column => {
                const columnName = column.referencedColumn.entityMetadata.name + "_" + column.referencedColumn.propertyPath.replace(".", "_");
                qb.addSelect(mainAlias + "." + column.propertyPath, columnName);
            });
            // add condition for entities
            let condition = "";
            if (relation.joinColumns.length === 1) {
                qb.setParameter("values", entities.map(entity => relation.joinColumns[0].referencedColumn.getEntityValue(entity)));
                condition = mainAlias + "." + relation.joinColumns[0].propertyPath + " IN (:...values)";
            }
            else {
                condition = entities.map((entity, entityIndex) => {
                    return relation.joinColumns.map((joinColumn, joinColumnIndex) => {
                        const paramName = "entity" + entityIndex + "_" + joinColumnIndex;
                        qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));
                        return mainAlias + "." + joinColumn.propertyPath + " = :" + paramName;
                    }).join(" AND ");
                }).map(condition => "(" + condition + ")").join(" OR ");
            }
            // execute query
            return qb.from(relation.entityMetadata.target, mainAlias)
                .where(condition)
                .getRawMany();
        }
    }
    exports.RelationIdLoader = RelationIdLoader;
});
define("typeorm/connection/Connection", ["require", "exports", "typeorm/naming-strategy/DefaultNamingStrategy", "typeorm/error/CannotExecuteNotConnectedError", "typeorm/error/CannotConnectAlreadyConnectedError", "typeorm/error/EntityMetadataNotFoundError", "typeorm/migration/MigrationExecutor", "typeorm/driver/mongodb/MongoDriver", "typeorm/entity-manager/MongoEntityManager", "typeorm/metadata-builder/EntityMetadataValidator", "typeorm/error/QueryRunnerProviderAlreadyReleasedError", "typeorm/entity-manager/EntityManagerFactory", "typeorm/driver/DriverFactory", "typeorm/connection/ConnectionMetadataBuilder", "typeorm/query-builder/SelectQueryBuilder", "typeorm/logger/LoggerFactory", "typeorm/cache/QueryResultCacheFactory", "typeorm/entity-manager/SqljsEntityManager", "typeorm/query-builder/RelationLoader", "typeorm/query-builder/RelationIdLoader", "typeorm/index", "typeorm/driver/sqlserver/SqlServerDriver", "typeorm/driver/mysql/MysqlDriver", "typeorm/util/ObjectUtils", "typeorm/driver/aurora-data-api/AuroraDataApiDriver", "typeorm/driver/DriverUtils"], function (require, exports, DefaultNamingStrategy_1, CannotExecuteNotConnectedError_1, CannotConnectAlreadyConnectedError_1, EntityMetadataNotFoundError_1, MigrationExecutor_1, MongoDriver_10, MongoEntityManager_2, EntityMetadataValidator_1, QueryRunnerProviderAlreadyReleasedError_2, EntityManagerFactory_1, DriverFactory_1, ConnectionMetadataBuilder_1, SelectQueryBuilder_1, LoggerFactory_1, QueryResultCacheFactory_1, SqljsEntityManager_2, RelationLoader_1, RelationIdLoader_2, __2, SqlServerDriver_13, MysqlDriver_12, ObjectUtils_9, AuroraDataApiDriver_11, DriverUtils_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Connection = void 0;
    /**
     * Connection is a single database ORM connection to a specific database.
     * Its not required to be a database connection, depend on database type it can create connection pool.
     * You can have multiple connections to multiple databases in your application.
     */
    class Connection {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            /**
             * Migration instances that are registered for this connection.
             */
            this.migrations = [];
            /**
             * Entity subscriber instances that are registered for this connection.
             */
            this.subscribers = [];
            /**
             * All entity metadatas that are registered for this connection.
             */
            this.entityMetadatas = [];
            this.name = options.name || "default";
            this.options = options;
            this.logger = new LoggerFactory_1.LoggerFactory().create(this.options.logger, this.options.logging);
            this.driver = new DriverFactory_1.DriverFactory().create(this);
            this.manager = this.createEntityManager();
            this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy_1.DefaultNamingStrategy();
            this.queryResultCache = options.cache ? new QueryResultCacheFactory_1.QueryResultCacheFactory(this).create() : undefined;
            this.relationLoader = new RelationLoader_1.RelationLoader(this);
            this.relationIdLoader = new RelationIdLoader_2.RelationIdLoader(this);
            this.isConnected = false;
        }
        // -------------------------------------------------------------------------
        // Public Accessors
        // -------------------------------------------------------------------------
        /**
         * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations
         * with any entity in this connection.
         *
         * Available only in mongodb connections.
         */
        get mongoManager() {
            if (!(this.manager instanceof MongoEntityManager_2.MongoEntityManager))
                throw new Error(`MongoEntityManager is only available for MongoDB databases.`);
            return this.manager;
        }
        /**
         * Gets a sql.js specific Entity Manager that allows to perform special load and save operations
         *
         * Available only in connection with the sqljs driver.
         */
        get sqljsManager() {
            if (!(this.manager instanceof SqljsEntityManager_2.SqljsEntityManager))
                throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);
            return this.manager;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Performs connection to the database.
         * This method should be called once on application bootstrap.
         * This method not necessarily creates database connection (depend on database type),
         * but it also can setup a connection pool with database to use.
         */
        async connect() {
            if (this.isConnected)
                throw new CannotConnectAlreadyConnectedError_1.CannotConnectAlreadyConnectedError(this.name);
            // connect to the database via its driver
            await this.driver.connect();
            // connect to the cache-specific database if cache is enabled
            if (this.queryResultCache)
                await this.queryResultCache.connect();
            // set connected status for the current connection
            ObjectUtils_9.ObjectUtils.assign(this, { isConnected: true });
            try {
                // build all metadatas registered in the current connection
                this.buildMetadatas();
                await this.driver.afterConnect();
                // if option is set - drop schema once connection is done
                if (this.options.dropSchema)
                    await this.dropDatabase();
                // if option is set - automatically synchronize a schema
                if (this.options.synchronize)
                    await this.synchronize();
                // if option is set - automatically synchronize a schema
                if (this.options.migrationsRun)
                    await this.runMigrations({ transaction: this.options.migrationsTransactionMode });
            }
            catch (error) {
                // if for some reason build metadata fail (for example validation error during entity metadata check)
                // connection needs to be closed
                await this.close();
                throw error;
            }
            return this;
        }
        /**
         * Closes connection with the database.
         * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.
         */
        async close() {
            if (!this.isConnected)
                throw new CannotExecuteNotConnectedError_1.CannotExecuteNotConnectedError(this.name);
            await this.driver.disconnect();
            // disconnect from the cache-specific database if cache was enabled
            if (this.queryResultCache)
                await this.queryResultCache.disconnect();
            ObjectUtils_9.ObjectUtils.assign(this, { isConnected: false });
        }
        /**
         * Creates database schema for all entities registered in this connection.
         * Can be used only after connection to the database is established.
         *
         * @param dropBeforeSync If set to true then it drops the database with all its tables and data
         */
        async synchronize(dropBeforeSync = false) {
            if (!this.isConnected)
                throw new CannotExecuteNotConnectedError_1.CannotExecuteNotConnectedError(this.name);
            if (dropBeforeSync)
                await this.dropDatabase();
            const schemaBuilder = this.driver.createSchemaBuilder();
            await schemaBuilder.build();
        }
        /**
         * Drops the database and all its data.
         * Be careful with this method on production since this method will erase all your database tables and their data.
         * Can be used only after connection to the database is established.
         */
        // TODO rename
        async dropDatabase() {
            const queryRunner = this.createQueryRunner();
            try {
                if (this.driver instanceof SqlServerDriver_13.SqlServerDriver || this.driver instanceof MysqlDriver_12.MysqlDriver || this.driver instanceof AuroraDataApiDriver_11.AuroraDataApiDriver) {
                    const databases = this.driver.database ? [this.driver.database] : [];
                    this.entityMetadatas.forEach(metadata => {
                        if (metadata.database && databases.indexOf(metadata.database) === -1)
                            databases.push(metadata.database);
                    });
                    for (const database of databases) {
                        await queryRunner.clearDatabase(database);
                    }
                }
                else {
                    await queryRunner.clearDatabase();
                }
            }
            finally {
                await queryRunner.release();
            }
        }
        /**
         * Runs all pending migrations.
         * Can be used only after connection to the database is established.
         */
        async runMigrations(options) {
            if (!this.isConnected)
                throw new CannotExecuteNotConnectedError_1.CannotExecuteNotConnectedError(this.name);
            const migrationExecutor = new MigrationExecutor_1.MigrationExecutor(this);
            migrationExecutor.transaction = (options && options.transaction) || "all";
            const successMigrations = await migrationExecutor.executePendingMigrations();
            return successMigrations;
        }
        /**
         * Reverts last executed migration.
         * Can be used only after connection to the database is established.
         */
        async undoLastMigration(options) {
            if (!this.isConnected)
                throw new CannotExecuteNotConnectedError_1.CannotExecuteNotConnectedError(this.name);
            const migrationExecutor = new MigrationExecutor_1.MigrationExecutor(this);
            migrationExecutor.transaction = (options && options.transaction) || "all";
            await migrationExecutor.undoLastMigration();
        }
        /**
         * Lists all migrations and whether they have been run.
         * Returns true if there are pending migrations
         */
        async showMigrations() {
            if (!this.isConnected) {
                throw new CannotExecuteNotConnectedError_1.CannotExecuteNotConnectedError(this.name);
            }
            const migrationExecutor = new MigrationExecutor_1.MigrationExecutor(this);
            return await migrationExecutor.showMigrations();
        }
        /**
         * Checks if entity metadata exist for the given entity class, target name or table name.
         */
        hasMetadata(target) {
            return !!this.findMetadata(target);
        }
        /**
         * Gets entity metadata for the given entity class or schema name.
         */
        getMetadata(target) {
            const metadata = this.findMetadata(target);
            if (!metadata)
                throw new EntityMetadataNotFoundError_1.EntityMetadataNotFoundError(target);
            return metadata;
        }
        /**
         * Gets repository for the given entity.
         */
        getRepository(target) {
            return this.manager.getRepository(target);
        }
        /**
         * Gets tree repository for the given entity class or name.
         * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.
         */
        getTreeRepository(target) {
            return this.manager.getTreeRepository(target);
        }
        /**
         * Gets mongodb-specific repository for the given entity class or name.
         * Works only if connection is mongodb-specific.
         */
        getMongoRepository(target) {
            if (!(this.driver instanceof MongoDriver_10.MongoDriver))
                throw new Error(`You can use getMongoRepository only for MongoDB connections.`);
            return this.manager.getRepository(target);
        }
        /**
         * Gets custom entity repository marked with @EntityRepository decorator.
         */
        getCustomRepository(customRepository) {
            return this.manager.getCustomRepository(customRepository);
        }
        async transaction(isolationOrRunInTransaction, runInTransactionParam) {
            return this.manager.transaction(isolationOrRunInTransaction, runInTransactionParam);
        }
        /**
         * Executes raw SQL query and returns raw database results.
         */
        async query(query, parameters, queryRunner) {
            if (this instanceof MongoEntityManager_2.MongoEntityManager)
                throw new Error(`Queries aren't supported by MongoDB.`);
            if (queryRunner && queryRunner.isReleased)
                throw new QueryRunnerProviderAlreadyReleasedError_2.QueryRunnerProviderAlreadyReleasedError();
            const usedQueryRunner = queryRunner || this.createQueryRunner();
            try {
                return await usedQueryRunner.query(query, parameters); // await is needed here because we are using finally
            }
            finally {
                if (!queryRunner)
                    await usedQueryRunner.release();
            }
        }
        /**
         * Creates a new query builder that can be used to build a sql query.
         */
        createQueryBuilder(entityOrRunner, alias, queryRunner) {
            if (this instanceof MongoEntityManager_2.MongoEntityManager)
                throw new Error(`Query Builder is not supported by MongoDB.`);
            if (alias) {
                const metadata = this.getMetadata(entityOrRunner);
                return new SelectQueryBuilder_1.SelectQueryBuilder(this, queryRunner)
                    .select(alias)
                    .from(metadata.target, alias);
            }
            else {
                return new SelectQueryBuilder_1.SelectQueryBuilder(this, entityOrRunner);
            }
        }
        /**
         * Creates a query runner used for perform queries on a single database connection.
         * Using query runners you can control your queries to execute using single database connection and
         * manually control your database transaction.
         *
         * Mode is used in replication mode and indicates whatever you want to connect
         * to master database or any of slave databases.
         * If you perform writes you must use master database,
         * if you perform reads you can use slave databases.
         */
        createQueryRunner(mode = "master") {
            const queryRunner = this.driver.createQueryRunner(mode);
            const manager = this.createEntityManager(queryRunner);
            Object.assign(queryRunner, { manager: manager });
            return queryRunner;
        }
        /**
         * Gets entity metadata of the junction table (many-to-many table).
         */
        getManyToManyMetadata(entityTarget, relationPropertyPath) {
            const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);
            if (!relationMetadata)
                throw new Error(`Relation "${relationPropertyPath}" was not found in ${entityTarget} entity.`);
            if (!relationMetadata.isManyToMany)
                throw new Error(`Relation "${entityTarget}#${relationPropertyPath}" does not have a many-to-many relationship.` +
                    `You can use this method only on many-to-many relations.`);
            return relationMetadata.junctionEntityMetadata;
        }
        /**
         * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.
         */
        createEntityManager(queryRunner) {
            return new EntityManagerFactory_1.EntityManagerFactory().create(this, queryRunner);
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Finds exist entity metadata by the given entity class, target name or table name.
         */
        findMetadata(target) {
            return this.entityMetadatas.find(metadata => {
                if (metadata.target === target)
                    return true;
                if (target instanceof __2.EntitySchema) {
                    return metadata.name === target.options.name;
                }
                if (typeof target === "string") {
                    if (target.indexOf(".") !== -1) {
                        return metadata.tablePath === target;
                    }
                    else {
                        return metadata.name === target || metadata.tableName === target;
                    }
                }
                return false;
            });
        }
        /**
         * Builds metadatas for all registered classes inside this connection.
         */
        buildMetadatas() {
            const connectionMetadataBuilder = new ConnectionMetadataBuilder_1.ConnectionMetadataBuilder(this);
            const entityMetadataValidator = new EntityMetadataValidator_1.EntityMetadataValidator();
            // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)
            const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);
            ObjectUtils_9.ObjectUtils.assign(this, { subscribers: subscribers });
            // build entity metadatas
            const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);
            ObjectUtils_9.ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });
            // create migration instances
            const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);
            ObjectUtils_9.ObjectUtils.assign(this, { migrations: migrations });
            this.driver.database = this.getDatabaseName();
            // validate all created entity metadatas to make sure user created entities are valid and correct
            entityMetadataValidator.validateMany(this.entityMetadatas.filter(metadata => metadata.tableType !== "view"), this.driver);
        }
        // This database name property is nested for replication configs.
        getDatabaseName() {
            const options = this.options;
            switch (options.type) {
                case "mysql":
                case "mariadb":
                case "postgres":
                case "cockroachdb":
                case "mssql":
                case "oracle":
                    return DriverUtils_10.DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;
                case "mongodb":
                    return DriverUtils_10.DriverUtils.buildMongoDBDriverOptions(options).database;
                default:
                    return DriverUtils_10.DriverUtils.buildDriverOptions(options).database;
            }
        }
    }
    exports.Connection = Connection;
});
define("typeorm/error/ConnectionNotFoundError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionNotFoundError = void 0;
    /**
     * Thrown when consumer tries to get connection that does not exist.
     */
    class ConnectionNotFoundError extends Error {
        constructor(name) {
            super();
            this.name = "ConnectionNotFoundError";
            Object.setPrototypeOf(this, ConnectionNotFoundError.prototype);
            this.message = `Connection "${name}" was not found.`;
        }
    }
    exports.ConnectionNotFoundError = ConnectionNotFoundError;
});
define("typeorm/error/AlreadyHasActiveConnectionError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlreadyHasActiveConnectionError = void 0;
    /**
     * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.
     */
    class AlreadyHasActiveConnectionError extends Error {
        constructor(connectionName) {
            super();
            this.name = "AlreadyHasActiveConnectionError";
            Object.setPrototypeOf(this, AlreadyHasActiveConnectionError.prototype);
            this.message = `Cannot create a new connection named "${connectionName}", because connection with such name ` +
                `already exist and it now has an active connection session.`;
        }
    }
    exports.AlreadyHasActiveConnectionError = AlreadyHasActiveConnectionError;
});
define("typeorm/connection/ConnectionManager", ["require", "exports", "typeorm/connection/Connection", "typeorm/error/ConnectionNotFoundError", "typeorm/error/AlreadyHasActiveConnectionError"], function (require, exports, Connection_1, ConnectionNotFoundError_1, AlreadyHasActiveConnectionError_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionManager = void 0;
    /**
     * ConnectionManager is used to store and manage multiple orm connections.
     * It also provides useful factory methods to simplify connection creation.
     */
    class ConnectionManager {
        constructor() {
            // -------------------------------------------------------------------------
            // Protected Properties
            // -------------------------------------------------------------------------
            /**
             * List of connections registered in this connection manager.
             */
            this.connections = [];
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Checks if connection with the given name exist in the manager.
         */
        has(name) {
            return !!this.connections.find(connection => connection.name === name);
        }
        /**
         * Gets registered connection with the given name.
         * If connection name is not given then it will get a default connection.
         * Throws error if connection with the given name was not found.
         */
        get(name = "default") {
            const connection = this.connections.find(connection => connection.name === name);
            if (!connection)
                throw new ConnectionNotFoundError_1.ConnectionNotFoundError(name);
            return connection;
        }
        /**
         * Creates a new connection based on the given connection options and registers it in the manager.
         * Connection won't be established, you'll need to manually call connect method to establish connection.
         */
        create(options) {
            // check if such connection is already registered
            const existConnection = this.connections.find(connection => connection.name === (options.name || "default"));
            if (existConnection) {
                // if connection is registered and its not closed then throw an error
                if (existConnection.isConnected)
                    throw new AlreadyHasActiveConnectionError_1.AlreadyHasActiveConnectionError(options.name || "default");
                // if its registered but closed then simply remove it from the manager
                this.connections.splice(this.connections.indexOf(existConnection), 1);
            }
            // create a new connection
            const connection = new Connection_1.Connection(options);
            this.connections.push(connection);
            return connection;
        }
    }
    exports.ConnectionManager = ConnectionManager;
});
define("typeorm/connection/options-reader/ConnectionOptionsEnvReader", ["require", "exports", "typeorm/platform/PlatformTools", "typeorm/util/OrmUtils"], function (require, exports, PlatformTools_20, OrmUtils_31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionOptionsEnvReader = void 0;
    /**
     * Reads connection options from environment variables.
     * Environment variables can have only a single connection.
     * Its strongly required to define TYPEORM_CONNECTION env variable.
     */
    class ConnectionOptionsEnvReader {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Reads connection options from environment variables.
         */
        async read() {
            return [{
                    type: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CONNECTION") || (PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_URL") ? PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_URL").split("://")[0] : undefined),
                    url: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_URL"),
                    host: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_HOST"),
                    port: this.stringToNumber(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_PORT")),
                    username: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_USERNAME"),
                    password: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_PASSWORD"),
                    database: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_DATABASE"),
                    sid: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_SID"),
                    schema: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_SCHEMA"),
                    extra: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_DRIVER_EXTRA") ? JSON.parse(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_DRIVER_EXTRA")) : undefined,
                    synchronize: OrmUtils_31.OrmUtils.toBoolean(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_SYNCHRONIZE")),
                    dropSchema: OrmUtils_31.OrmUtils.toBoolean(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_DROP_SCHEMA")),
                    migrationsRun: OrmUtils_31.OrmUtils.toBoolean(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_MIGRATIONS_RUN")),
                    entities: this.stringToArray(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_ENTITIES")),
                    migrations: this.stringToArray(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_MIGRATIONS")),
                    migrationsTableName: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_MIGRATIONS_TABLE_NAME"),
                    subscribers: this.stringToArray(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_SUBSCRIBERS")),
                    logging: this.transformLogging(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_LOGGING")),
                    logger: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_LOGGER"),
                    entityPrefix: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_ENTITY_PREFIX"),
                    maxQueryExecutionTime: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_MAX_QUERY_EXECUTION_TIME"),
                    debug: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_DEBUG"),
                    cli: {
                        entitiesDir: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_ENTITIES_DIR"),
                        migrationsDir: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_MIGRATIONS_DIR"),
                        subscribersDir: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_SUBSCRIBERS_DIR"),
                    },
                    cache: this.transformCaching(),
                    uuidExtension: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_UUID_EXTENSION")
                }];
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Transforms logging string into real logging value connection requires.
         */
        transformLogging(logging) {
            if (logging === "true" || logging === "TRUE" || logging === "1")
                return true;
            if (logging === "all")
                return "all";
            return this.stringToArray(logging);
        }
        /**
         * Transforms caching option into real caching value option requires.
         */
        transformCaching() {
            const caching = PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CACHE");
            if (caching === "true" || caching === "TRUE" || caching === "1")
                return true;
            if (caching === "false" || caching === "FALSE" || caching === "0")
                return false;
            if (caching === "redis" || caching === "ioredis" || caching === "database")
                return {
                    type: caching,
                    options: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CACHE_OPTIONS") ? JSON.parse(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CACHE_OPTIONS")) : undefined,
                    alwaysEnabled: PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CACHE_ALWAYS_ENABLED"),
                    duration: parseInt(PlatformTools_20.PlatformTools.getEnvVariable("TYPEORM_CACHE_DURATION"))
                };
            return undefined;
        }
        /**
         * Converts a string which contains multiple elements split by comma into a string array of strings.
         */
        stringToArray(variable) {
            if (!variable)
                return [];
            return variable.split(",").map(str => str.trim());
        }
        /**
         * Converts a string which contains a number into a javascript number
         */
        stringToNumber(value) {
            if (!value) {
                return undefined;
            }
            return parseInt(value);
        }
    }
    exports.ConnectionOptionsEnvReader = ConnectionOptionsEnvReader;
});
define("typeorm/connection/options-reader/ConnectionOptionsYmlReader", ["require", "exports", "js-yaml", "typeorm/platform/PlatformTools"], function (require, exports, js_yaml_1, PlatformTools_21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionOptionsYmlReader = void 0;
    /**
     * Reads connection options defined in the yml file.
     */
    class ConnectionOptionsYmlReader {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Reads connection options from given yml file.
         */
        async read(path) {
            const contentsBuffer = PlatformTools_21.PlatformTools.readFileSync(path);
            const contents = contentsBuffer.toString();
            const config = js_yaml_1.default.safeLoad(contents);
            if (typeof config !== 'object') {
                return [];
            }
            return Object.keys(config).map(connectionName => {
                return Object.assign({ name: connectionName }, config[connectionName]);
            });
        }
    }
    exports.ConnectionOptionsYmlReader = ConnectionOptionsYmlReader;
});
define("typeorm/connection/options-reader/ConnectionOptionsXmlReader", ["require", "exports", "xml2js", "typeorm/platform/PlatformTools"], function (require, exports, xml2js_1, PlatformTools_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionOptionsXmlReader = void 0;
    /**
     * Reads connection options defined in the xml file.
     */
    class ConnectionOptionsXmlReader {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Reads connection options from given xml file.
         */
        async read(path) {
            const xml = await this.readXml(path);
            return xml.connection.map(connection => {
                return {
                    name: connection.$.name,
                    type: connection.$.type,
                    url: connection.url ? connection.url[0] : undefined,
                    host: connection.host ? connection.host[0] : undefined,
                    port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,
                    username: connection.username ? connection.username[0] : undefined,
                    password: connection.password ? connection.password[0] : undefined,
                    database: connection.database ? connection.database[0] : undefined,
                    sid: connection.sid ? connection.sid[0] : undefined,
                    extra: connection.extra ? connection.extra[0] : undefined,
                    synchronize: connection.synchronize ? connection.synchronize[0] : undefined,
                    entities: connection.entities ? connection.entities[0].entity : [],
                    subscribers: connection.subscribers ? connection.subscribers[0].entity : [],
                    logging: connection.logging[0] ? connection.logging[0].split(",") : undefined,
                };
            });
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Reads xml file contents and returns them in a promise.
         */
        readXml(path) {
            const xmlOptions = { trim: true, explicitRoot: false };
            return new Promise((ok, fail) => {
                xml2js_1.parseString(PlatformTools_22.PlatformTools.readFileSync(path), xmlOptions, (err, result) => err ? fail(err) : ok(result));
            });
        }
    }
    exports.ConnectionOptionsXmlReader = ConnectionOptionsXmlReader;
});
define("typeorm/connection/ConnectionOptionsReader", ["require", "exports", "app-root-path", "typeorm/platform/PlatformTools", "typeorm/connection/options-reader/ConnectionOptionsEnvReader", "typeorm/connection/options-reader/ConnectionOptionsYmlReader", "typeorm/connection/options-reader/ConnectionOptionsXmlReader"], function (require, exports, app_root_path_2, PlatformTools_23, ConnectionOptionsEnvReader_1, ConnectionOptionsYmlReader_1, ConnectionOptionsXmlReader_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionOptionsReader = void 0;
    /**
     * Reads connection options from the ormconfig.
     * Can read from multiple file extensions including env, json, js, xml and yml.
     */
    class ConnectionOptionsReader {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        constructor(options) {
            this.options = options;
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Returns all connection options read from the ormconfig.
         */
        async all() {
            const options = await this.load();
            if (!options)
                throw new Error(`No connection options were found in any orm configuration files.`);
            return options;
        }
        /**
         * Gets a connection with a given name read from ormconfig.
         * If connection with such name would not be found then it throw error.
         */
        async get(name) {
            const allOptions = await this.all();
            const targetOptions = allOptions.find(options => options.name === name || (name === "default" && !options.name));
            if (!targetOptions)
                throw new Error(`Cannot find connection ${name} because its not defined in any orm configuration files.`);
            return targetOptions;
        }
        /**
         * Checks if there is a TypeORM configuration file.
         */
        async has(name) {
            const allOptions = await this.load();
            if (!allOptions)
                return false;
            const targetOptions = allOptions.find(options => options.name === name || (name === "default" && !options.name));
            return !!targetOptions;
        }
        // -------------------------------------------------------------------------
        // Protected Methods
        // -------------------------------------------------------------------------
        /**
         * Loads all connection options from a configuration file.
         *
         * todo: get in count NODE_ENV somehow
         */
        async load() {
            let connectionOptions = undefined;
            const fileFormats = ["env", "js", "cjs", "ts", "json", "yml", "yaml", "xml"];
            // Detect if baseFilePath contains file extension
            const possibleExtension = this.baseFilePath.substr(this.baseFilePath.lastIndexOf("."));
            const fileExtension = fileFormats.find(extension => `.${extension}` === possibleExtension);
            // try to find any of following configuration formats
            const foundFileFormat = fileExtension || fileFormats.find(format => {
                return PlatformTools_23.PlatformTools.fileExist(this.baseFilePath + "." + format);
            });
            // Determine config file name
            const configFile = fileExtension ? this.baseFilePath : this.baseFilePath + "." + foundFileFormat;
            // if .env file found then load all its variables into process.env using dotenv package
            if (foundFileFormat === "env") {
                PlatformTools_23.PlatformTools.dotenv(configFile);
            }
            else if (PlatformTools_23.PlatformTools.fileExist(this.baseDirectory + "/.env")) {
                PlatformTools_23.PlatformTools.dotenv(this.baseDirectory + "/.env");
            }
            // try to find connection options from any of available sources of configuration
            if (PlatformTools_23.PlatformTools.getEnvVariable("TYPEORM_CONNECTION") || PlatformTools_23.PlatformTools.getEnvVariable("TYPEORM_URL")) {
                connectionOptions = await new ConnectionOptionsEnvReader_1.ConnectionOptionsEnvReader().read();
            }
            else if (foundFileFormat === "js" || foundFileFormat === "cjs" || foundFileFormat === "ts") {
                const configModule = await require(configFile);
                if (configModule && "__esModule" in configModule && "default" in configModule) {
                    connectionOptions = configModule.default;
                }
                else {
                    connectionOptions = configModule;
                }
            }
            else if (foundFileFormat === "json") {
                connectionOptions = require(configFile);
            }
            else if (foundFileFormat === "yml") {
                connectionOptions = await new ConnectionOptionsYmlReader_1.ConnectionOptionsYmlReader().read(configFile);
            }
            else if (foundFileFormat === "yaml") {
                connectionOptions = await new ConnectionOptionsYmlReader_1.ConnectionOptionsYmlReader().read(configFile);
            }
            else if (foundFileFormat === "xml") {
                connectionOptions = await new ConnectionOptionsXmlReader_1.ConnectionOptionsXmlReader().read(configFile);
            }
            // normalize and return connection options
            if (connectionOptions) {
                return this.normalizeConnectionOptions(connectionOptions);
            }
            return undefined;
        }
        /**
         * Normalize connection options.
         */
        normalizeConnectionOptions(connectionOptions) {
            if (!(Array.isArray(connectionOptions)))
                connectionOptions = [connectionOptions];
            connectionOptions.forEach(options => {
                if (options.entities) {
                    const entities = options.entities.map(entity => {
                        if (typeof entity === "string" && entity.substr(0, 1) !== "/")
                            return this.baseDirectory + "/" + entity;
                        return entity;
                    });
                    Object.assign(connectionOptions, { entities: entities });
                }
                if (options.subscribers) {
                    const subscribers = options.subscribers.map(subscriber => {
                        if (typeof subscriber === "string" && subscriber.substr(0, 1) !== "/")
                            return this.baseDirectory + "/" + subscriber;
                        return subscriber;
                    });
                    Object.assign(connectionOptions, { subscribers: subscribers });
                }
                if (options.migrations) {
                    const migrations = options.migrations.map(migration => {
                        if (typeof migration === "string" && migration.substr(0, 1) !== "/")
                            return this.baseDirectory + "/" + migration;
                        return migration;
                    });
                    Object.assign(connectionOptions, { migrations: migrations });
                }
                // make database path file in sqlite relative to package.json
                if (options.type === "sqlite" || options.type === "better-sqlite3") {
                    if (typeof options.database === "string" &&
                        options.database.substr(0, 1) !== "/" && // unix absolute
                        options.database.substr(1, 2) !== ":\\" && // windows absolute
                        options.database !== ":memory:") {
                        Object.assign(options, {
                            database: this.baseDirectory + "/" + options.database
                        });
                    }
                }
            });
            return connectionOptions;
        }
        /**
         * Gets directory where configuration file should be located and configuration file name.
         */
        get baseFilePath() {
            return this.baseDirectory + "/" + this.baseConfigName;
        }
        /**
         * Gets directory where configuration file should be located.
         */
        get baseDirectory() {
            if (this.options && this.options.root)
                return this.options.root;
            return app_root_path_2.default.path;
        }
        /**
         * Gets configuration file name.
         */
        get baseConfigName() {
            if (this.options && this.options.configName)
                return this.options.configName;
            return "ormconfig";
        }
    }
    exports.ConnectionOptionsReader = ConnectionOptionsReader;
});
define("typeorm/error/CannotReflectMethodParameterTypeError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotReflectMethodParameterTypeError = void 0;
    /**
     * Thrown when ORM cannot get method parameter's type.
     * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
     */
    class CannotReflectMethodParameterTypeError extends Error {
        constructor(target, methodName) {
            super();
            this.name = "CannotReflectMethodParameterTypeError";
            Object.setPrototypeOf(this, CannotReflectMethodParameterTypeError.prototype);
            this.message = `Cannot get reflected type for a "${methodName}" method's parameter of "${target.name}" class. ` +
                `Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. ` +
                `Also make sure you have imported "reflect-metadata" on top of the main entry file in your application.`;
        }
    }
    exports.CannotReflectMethodParameterTypeError = CannotReflectMethodParameterTypeError;
});
define("typeorm/error/MetadataAlreadyExistsError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataAlreadyExistsError = void 0;
    /**
     */
    class MetadataAlreadyExistsError extends Error {
        constructor(metadataType, constructor, propertyName) {
            super();
            this.name = "MetadataAlreadyExistsError";
            Object.setPrototypeOf(this, MetadataAlreadyExistsError.prototype);
            this.message = metadataType + " metadata already exists for the class constructor " + JSON.stringify(constructor) +
                (propertyName ? " on property " + propertyName : ". If you previously renamed or moved entity class, make sure" +
                    " that compiled version of old entity class source wasn't left in the compiler output directory.");
        }
    }
    exports.MetadataAlreadyExistsError = MetadataAlreadyExistsError;
});
define("typeorm/error/PrimaryColumnCannotBeNullableError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrimaryColumnCannotBeNullableError = void 0;
    class PrimaryColumnCannotBeNullableError extends Error {
        constructor(object, propertyName) {
            super();
            this.name = "PrimaryColumnCannotBeNullableError";
            Object.setPrototypeOf(this, PrimaryColumnCannotBeNullableError.prototype);
            this.message = `Primary column ${object.constructor.name}#${propertyName} cannot be nullable. ` +
                `Its not allowed for primary keys. Try to remove nullable option.`;
        }
    }
    exports.PrimaryColumnCannotBeNullableError = PrimaryColumnCannotBeNullableError;
});
define("typeorm/error/NoConnectionForRepositoryError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoConnectionForRepositoryError = void 0;
    /**
     * Thrown when consumer tries to access repository before connection is established.
     */
    class NoConnectionForRepositoryError extends Error {
        constructor(connectionName) {
            super();
            this.name = "NoConnectionForRepositoryError";
            Object.setPrototypeOf(this, NoConnectionForRepositoryError.prototype);
            this.message = `Cannot get a Repository for "${connectionName} connection, because connection with the database ` +
                `is not established yet. Call connection#connect method to establish connection.`;
        }
    }
    exports.NoConnectionForRepositoryError = NoConnectionForRepositoryError;
});
define("typeorm/error/UsingJoinTableIsNotAllowedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsingJoinTableIsNotAllowedError = void 0;
    /**
     */
    class UsingJoinTableIsNotAllowedError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "UsingJoinTableIsNotAllowedError";
            Object.setPrototypeOf(this, UsingJoinTableIsNotAllowedError.prototype);
            this.message = `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +
                `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +
                `however you can use JoinTable only on many-to-many relations.`;
        }
    }
    exports.UsingJoinTableIsNotAllowedError = UsingJoinTableIsNotAllowedError;
});
define("typeorm/error/MissingJoinColumnError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingJoinColumnError = void 0;
    /**
     */
    class MissingJoinColumnError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "MissingJoinColumnError";
            Object.setPrototypeOf(this, MissingJoinColumnError.prototype);
            if (relation.inverseRelation) {
                this.message = `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +
                    `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +
                    `You need to put JoinColumn decorator on one of the sides.`;
            }
            else {
                this.message = `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +
                    `You need to put JoinColumn decorator on it.`;
            }
        }
    }
    exports.MissingJoinColumnError = MissingJoinColumnError;
});
define("typeorm/error/CannotGetEntityManagerNotConnectedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotGetEntityManagerNotConnectedError = void 0;
    /**
     * Thrown when consumer tries to access entity manager before connection is established.
     */
    class CannotGetEntityManagerNotConnectedError extends Error {
        constructor(connectionName) {
            super();
            this.name = "CannotGetEntityManagerNotConnectedError";
            Object.setPrototypeOf(this, CannotGetEntityManagerNotConnectedError.prototype);
            this.message = `Cannot get entity manager for "${connectionName}" connection because connection is not yet established.`;
        }
    }
    exports.CannotGetEntityManagerNotConnectedError = CannotGetEntityManagerNotConnectedError;
});
define("typeorm/error/MetadataWithSuchNameAlreadyExistsError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataWithSuchNameAlreadyExistsError = void 0;
    /**
     */
    class MetadataWithSuchNameAlreadyExistsError extends Error {
        constructor(metadataType, name) {
            super();
            this.name = "MetadataWithSuchNameAlreadyExistsError";
            Object.setPrototypeOf(this, MetadataWithSuchNameAlreadyExistsError.prototype);
            this.message = metadataType + " metadata with such name " + name + " already exists. " +
                "Do you apply decorator twice? Or maybe try to change a name?";
        }
    }
    exports.MetadataWithSuchNameAlreadyExistsError = MetadataWithSuchNameAlreadyExistsError;
});
define("typeorm/error/NamingStrategyNotFoundError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamingStrategyNotFoundError = void 0;
    /**
     * Thrown when consumer tries to use naming strategy that does not exist.
     */
    class NamingStrategyNotFoundError extends Error {
        constructor(strategyName, connectionName) {
            super();
            this.name = "NamingStrategyNotFoundError";
            Object.setPrototypeOf(this, NamingStrategyNotFoundError.prototype);
            const name = strategyName instanceof Function ? strategyName.name : strategyName;
            this.message = `Naming strategy "${name}" was not found. Looks like this naming strategy does not ` +
                `exist or it was not registered in current "${connectionName}" connection?`;
        }
    }
    exports.NamingStrategyNotFoundError = NamingStrategyNotFoundError;
});
define("typeorm/error/MissingJoinTableError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingJoinTableError = void 0;
    /**
     */
    class MissingJoinTableError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "MissingJoinTableError";
            Object.setPrototypeOf(this, MissingJoinTableError.prototype);
            if (relation.inverseRelation) {
                this.message = `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +
                    `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +
                    `You need to put decorator decorator on one of the sides.`;
            }
            else {
                this.message = `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +
                    `You need to put JoinTable decorator on it.`;
            }
        }
    }
    exports.MissingJoinTableError = MissingJoinTableError;
});
define("typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsingJoinColumnOnlyOnOneSideAllowedError = void 0;
    /**
     */
    class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "UsingJoinColumnOnlyOnOneSideAllowedError";
            Object.setPrototypeOf(this, UsingJoinColumnOnlyOnOneSideAllowedError.prototype);
            this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +
                `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +
                `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;
        }
    }
    exports.UsingJoinColumnOnlyOnOneSideAllowedError = UsingJoinColumnOnlyOnOneSideAllowedError;
});
define("typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsingJoinTableOnlyOnOneSideAllowedError = void 0;
    /**
     */
    class UsingJoinTableOnlyOnOneSideAllowedError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "UsingJoinTableOnlyOnOneSideAllowedError";
            Object.setPrototypeOf(this, UsingJoinTableOnlyOnOneSideAllowedError.prototype);
            this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +
                `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +
                `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;
        }
    }
    exports.UsingJoinTableOnlyOnOneSideAllowedError = UsingJoinTableOnlyOnOneSideAllowedError;
});
define("typeorm/error/PersistedEntityNotFoundError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersistedEntityNotFoundError = void 0;
    /**
     * Thrown . Theoretically can't be thrown.
     */
    class PersistedEntityNotFoundError extends Error {
        constructor() {
            super();
            this.name = "PersistedEntityNotFoundError";
            Object.setPrototypeOf(this, PersistedEntityNotFoundError.prototype);
            this.message = `Internal error. Persisted entity was not found in the list of prepared operated entities.`;
        }
    }
    exports.PersistedEntityNotFoundError = PersistedEntityNotFoundError;
});
define("typeorm/error/UsingJoinColumnIsNotAllowedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsingJoinColumnIsNotAllowedError = void 0;
    /**
     */
    class UsingJoinColumnIsNotAllowedError extends Error {
        constructor(entityMetadata, relation) {
            super();
            this.name = "UsingJoinColumnIsNotAllowedError";
            Object.setPrototypeOf(this, UsingJoinColumnIsNotAllowedError.prototype);
            this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +
                `You can use JoinColumn only on one-to-one and many-to-one relations.`;
        }
    }
    exports.UsingJoinColumnIsNotAllowedError = UsingJoinColumnIsNotAllowedError;
});
define("typeorm/error/ColumnTypeUndefinedError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ColumnTypeUndefinedError = void 0;
    /**
     * Thrown when ORM cannot get column's type automatically.
     * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
     */
    class ColumnTypeUndefinedError extends Error {
        constructor(object, propertyName) {
            super();
            this.name = "ColumnTypeUndefinedError";
            Object.setPrototypeOf(this, ColumnTypeUndefinedError.prototype);
            this.message = `Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +
                `Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. ` +
                `Also make sure you have imported "reflect-metadata" on top of the main entry file in your application (before any entity imported).` +
                `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`;
        }
    }
    exports.ColumnTypeUndefinedError = ColumnTypeUndefinedError;
});
define("typeorm/error/index", ["require", "exports", "typeorm/error/CannotReflectMethodParameterTypeError", "typeorm/error/AlreadyHasActiveConnectionError", "typeorm/error/SubjectWithoutIdentifierError", "typeorm/error/CannotConnectAlreadyConnectedError", "typeorm/error/LockNotSupportedOnGivenDriverError", "typeorm/error/ConnectionIsNotSetError", "typeorm/error/CannotCreateEntityIdMapError", "typeorm/error/MetadataAlreadyExistsError", "typeorm/error/CannotDetermineEntityError", "typeorm/error/UpdateValuesMissingError", "typeorm/error/TreeRepositoryNotSupportedError", "typeorm/error/CustomRepositoryNotFoundError", "typeorm/error/TransactionNotStartedError", "typeorm/error/TransactionAlreadyStartedError", "typeorm/error/EntityNotFoundError", "typeorm/error/EntityMetadataNotFoundError", "typeorm/error/MustBeEntityError", "typeorm/error/OptimisticLockVersionMismatchError", "typeorm/error/LimitOnUpdateNotSupportedError", "typeorm/error/PrimaryColumnCannotBeNullableError", "typeorm/error/CustomRepositoryCannotInheritRepositoryError", "typeorm/error/QueryRunnerProviderAlreadyReleasedError", "typeorm/error/CannotAttachTreeChildrenEntityError", "typeorm/error/CustomRepositoryDoesNotHaveEntityError", "typeorm/error/MissingDeleteDateColumnError", "typeorm/error/NoConnectionForRepositoryError", "typeorm/error/CircularRelationsError", "typeorm/error/ReturningStatementNotSupportedError", "typeorm/error/UsingJoinTableIsNotAllowedError", "typeorm/error/MissingJoinColumnError", "typeorm/error/MissingPrimaryColumnError", "typeorm/error/EntityColumnNotFound", "typeorm/error/MissingDriverError", "typeorm/error/DriverPackageNotInstalledError", "typeorm/error/CannotGetEntityManagerNotConnectedError", "typeorm/error/ConnectionNotFoundError", "typeorm/error/NoVersionOrUpdateDateColumnError", "typeorm/error/InsertValuesMissingError", "typeorm/error/OptimisticLockCanNotBeUsedError", "typeorm/error/MetadataWithSuchNameAlreadyExistsError", "typeorm/error/DriverOptionNotSetError", "typeorm/error/FindRelationsNotFoundError", "typeorm/error/RepositoryNotFoundError", "typeorm/error/NamingStrategyNotFoundError", "typeorm/error/PessimisticLockTransactionRequiredError", "typeorm/error/RepositoryNotTreeError", "typeorm/error/DataTypeNotSupportedError", "typeorm/error/InitializedRelationError", "typeorm/error/MissingJoinTableError", "typeorm/error/QueryFailedError", "typeorm/error/NoNeedToReleaseEntityManagerError", "typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError", "typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError", "typeorm/error/SubjectRemovedAndUpdatedError", "typeorm/error/PersistedEntityNotFoundError", "typeorm/error/UsingJoinColumnIsNotAllowedError", "typeorm/error/ColumnTypeUndefinedError", "typeorm/error/QueryRunnerAlreadyReleasedError", "typeorm/error/OffsetWithoutLimitNotSupportedError", "typeorm/error/CannotExecuteNotConnectedError", "typeorm/error/NoConnectionOptionError"], function (require, exports, CannotReflectMethodParameterTypeError_1, AlreadyHasActiveConnectionError_2, SubjectWithoutIdentifierError_2, CannotConnectAlreadyConnectedError_2, LockNotSupportedOnGivenDriverError_2, ConnectionIsNotSetError_8, CannotCreateEntityIdMapError_2, MetadataAlreadyExistsError_1, CannotDetermineEntityError_2, UpdateValuesMissingError_3, TreeRepositoryNotSupportedError_2, CustomRepositoryNotFoundError_3, TransactionNotStartedError_11, TransactionAlreadyStartedError_11, EntityNotFoundError_3, EntityMetadataNotFoundError_2, MustBeEntityError_2, OptimisticLockVersionMismatchError_2, LimitOnUpdateNotSupportedError_3, PrimaryColumnCannotBeNullableError_1, CustomRepositoryCannotInheritRepositoryError_2, QueryRunnerProviderAlreadyReleasedError_3, CannotAttachTreeChildrenEntityError_2, CustomRepositoryDoesNotHaveEntityError_2, MissingDeleteDateColumnError_2, NoConnectionForRepositoryError_1, CircularRelationsError_2, ReturningStatementNotSupportedError_5, UsingJoinTableIsNotAllowedError_1, MissingJoinColumnError_1, MissingPrimaryColumnError_2, EntityColumnNotFound_3, MissingDriverError_2, DriverPackageNotInstalledError_14, CannotGetEntityManagerNotConnectedError_1, ConnectionNotFoundError_2, NoVersionOrUpdateDateColumnError_2, InsertValuesMissingError_2, OptimisticLockCanNotBeUsedError_2, MetadataWithSuchNameAlreadyExistsError_1, DriverOptionNotSetError_8, FindRelationsNotFoundError_2, RepositoryNotFoundError_2, NamingStrategyNotFoundError_1, PessimisticLockTransactionRequiredError_2, RepositoryNotTreeError_2, DataTypeNotSupportedError_2, InitializedRelationError_2, MissingJoinTableError_1, QueryFailedError_13, NoNeedToReleaseEntityManagerError_2, UsingJoinColumnOnlyOnOneSideAllowedError_1, UsingJoinTableOnlyOnOneSideAllowedError_1, SubjectRemovedAndUpdatedError_2, PersistedEntityNotFoundError_1, UsingJoinColumnIsNotAllowedError_1, ColumnTypeUndefinedError_1, QueryRunnerAlreadyReleasedError_16, OffsetWithoutLimitNotSupportedError_2, CannotExecuteNotConnectedError_2, NoConnectionOptionError_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(CannotReflectMethodParameterTypeError_1, exports);
    __exportStar(AlreadyHasActiveConnectionError_2, exports);
    __exportStar(SubjectWithoutIdentifierError_2, exports);
    __exportStar(CannotConnectAlreadyConnectedError_2, exports);
    __exportStar(LockNotSupportedOnGivenDriverError_2, exports);
    __exportStar(ConnectionIsNotSetError_8, exports);
    __exportStar(CannotCreateEntityIdMapError_2, exports);
    __exportStar(MetadataAlreadyExistsError_1, exports);
    __exportStar(CannotDetermineEntityError_2, exports);
    __exportStar(UpdateValuesMissingError_3, exports);
    __exportStar(TreeRepositoryNotSupportedError_2, exports);
    __exportStar(CustomRepositoryNotFoundError_3, exports);
    __exportStar(TransactionNotStartedError_11, exports);
    __exportStar(TransactionAlreadyStartedError_11, exports);
    __exportStar(EntityNotFoundError_3, exports);
    __exportStar(EntityMetadataNotFoundError_2, exports);
    __exportStar(MustBeEntityError_2, exports);
    __exportStar(OptimisticLockVersionMismatchError_2, exports);
    __exportStar(LimitOnUpdateNotSupportedError_3, exports);
    __exportStar(PrimaryColumnCannotBeNullableError_1, exports);
    __exportStar(CustomRepositoryCannotInheritRepositoryError_2, exports);
    __exportStar(QueryRunnerProviderAlreadyReleasedError_3, exports);
    __exportStar(CannotAttachTreeChildrenEntityError_2, exports);
    __exportStar(CustomRepositoryDoesNotHaveEntityError_2, exports);
    __exportStar(MissingDeleteDateColumnError_2, exports);
    __exportStar(NoConnectionForRepositoryError_1, exports);
    __exportStar(CircularRelationsError_2, exports);
    __exportStar(ReturningStatementNotSupportedError_5, exports);
    __exportStar(UsingJoinTableIsNotAllowedError_1, exports);
    __exportStar(MissingJoinColumnError_1, exports);
    __exportStar(MissingPrimaryColumnError_2, exports);
    __exportStar(EntityColumnNotFound_3, exports);
    __exportStar(MissingDriverError_2, exports);
    __exportStar(DriverPackageNotInstalledError_14, exports);
    __exportStar(CannotGetEntityManagerNotConnectedError_1, exports);
    __exportStar(ConnectionNotFoundError_2, exports);
    __exportStar(NoVersionOrUpdateDateColumnError_2, exports);
    __exportStar(InsertValuesMissingError_2, exports);
    __exportStar(OptimisticLockCanNotBeUsedError_2, exports);
    __exportStar(MetadataWithSuchNameAlreadyExistsError_1, exports);
    __exportStar(DriverOptionNotSetError_8, exports);
    __exportStar(FindRelationsNotFoundError_2, exports);
    __exportStar(RepositoryNotFoundError_2, exports);
    __exportStar(NamingStrategyNotFoundError_1, exports);
    __exportStar(PessimisticLockTransactionRequiredError_2, exports);
    __exportStar(RepositoryNotTreeError_2, exports);
    __exportStar(DataTypeNotSupportedError_2, exports);
    __exportStar(InitializedRelationError_2, exports);
    __exportStar(MissingJoinTableError_1, exports);
    __exportStar(QueryFailedError_13, exports);
    __exportStar(NoNeedToReleaseEntityManagerError_2, exports);
    __exportStar(UsingJoinColumnOnlyOnOneSideAllowedError_1, exports);
    __exportStar(UsingJoinTableOnlyOnOneSideAllowedError_1, exports);
    __exportStar(SubjectRemovedAndUpdatedError_2, exports);
    __exportStar(PersistedEntityNotFoundError_1, exports);
    __exportStar(UsingJoinColumnIsNotAllowedError_1, exports);
    __exportStar(ColumnTypeUndefinedError_1, exports);
    __exportStar(QueryRunnerAlreadyReleasedError_16, exports);
    __exportStar(OffsetWithoutLimitNotSupportedError_2, exports);
    __exportStar(CannotExecuteNotConnectedError_2, exports);
    __exportStar(NoConnectionOptionError_2, exports);
});
define("typeorm/decorator/options/ColumnWithLengthOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnNumericOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnEnumOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnEmbeddedOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnHstoreOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/ColumnWithWidthOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/columns/Column", ["require", "exports", "typeorm/index", "typeorm/error/ColumnTypeUndefinedError"], function (require, exports, __3, ColumnTypeUndefinedError_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Column = void 0;
    /**
     * Column decorator is used to mark a specific class property as a table column.
     * Only properties decorated with this decorator will be persisted to the database when entity be saved.
     */
    function Column(typeOrOptions, options) {
        return function (object, propertyName) {
            // normalize parameters
            let type;
            if (typeof typeOrOptions === "string" || typeOrOptions instanceof Function) {
                type = typeOrOptions;
            }
            else if (typeOrOptions) {
                options = typeOrOptions;
                type = typeOrOptions.type;
            }
            if (!options)
                options = {};
            // if type is not given explicitly then try to guess it
            const reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
            if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it
                type = reflectMetadataType;
            // check if there is no type in column options then set type from first function argument, or guessed one
            if (!options.type && type)
                options.type = type;
            // specify HSTORE type if column is HSTORE
            if (options.type === "hstore" && !options.hstoreType)
                options.hstoreType = reflectMetadataType === Object ? "object" : "string";
            if (typeOrOptions instanceof Function) { // register an embedded
                __3.getMetadataArgsStorage().embeddeds.push({
                    target: object.constructor,
                    propertyName: propertyName,
                    isArray: reflectMetadataType === Array || options.array === true,
                    prefix: options.prefix !== undefined ? options.prefix : undefined,
                    type: typeOrOptions
                });
            }
            else { // register a regular column
                // if we still don't have a type then we need to give error to user that type is required
                if (!options.type)
                    throw new ColumnTypeUndefinedError_2.ColumnTypeUndefinedError(object, propertyName);
                // create unique
                if (options.unique === true)
                    __3.getMetadataArgsStorage().uniques.push({ target: object.constructor, columns: [propertyName] });
                __3.getMetadataArgsStorage().columns.push({
                    target: object.constructor,
                    propertyName: propertyName,
                    mode: "regular",
                    options: options
                });
                if (options.generated) {
                    __3.getMetadataArgsStorage().generations.push({
                        target: object.constructor,
                        propertyName: propertyName,
                        strategy: typeof options.generated === "string" ? options.generated : "increment"
                    });
                }
            }
        };
    }
    exports.Column = Column;
});
define("typeorm/decorator/columns/CreateDateColumn", ["require", "exports", "typeorm/index"], function (require, exports, __4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDateColumn = void 0;
    /**
     * This column will store a creation date of the inserted object.
     * Creation date is generated and inserted only once,
     * at the first time when you create an object, the value is inserted into the table, and is never touched again.
     */
    function CreateDateColumn(options) {
        return function (object, propertyName) {
            __4.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "createDate",
                options: options || {}
            });
        };
    }
    exports.CreateDateColumn = CreateDateColumn;
});
define("typeorm/decorator/columns/DeleteDateColumn", ["require", "exports", "typeorm/index"], function (require, exports, __5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDateColumn = void 0;
    /**
     * This column will store a delete date of the soft-deleted object.
     * This date is being updated each time you soft-delete the object.
     */
    function DeleteDateColumn(options) {
        return function (object, propertyName) {
            __5.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "deleteDate",
                options: options || {}
            });
        };
    }
    exports.DeleteDateColumn = DeleteDateColumn;
});
define("typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/PrimaryGeneratedColumnUUIDOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/columns/PrimaryGeneratedColumn", ["require", "exports", "typeorm/index"], function (require, exports, __6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrimaryGeneratedColumn = void 0;
    /**
     * Column decorator is used to mark a specific class property as a table column.
     * Only properties decorated with this decorator will be persisted to the database when entity be saved.
     * This column creates an integer PRIMARY COLUMN with generated set to true.
     */
    function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {
        // normalize parameters
        const options = {};
        let strategy;
        if (strategyOrOptions) {
            if (typeof strategyOrOptions === "string")
                strategy = strategyOrOptions;
            if (strategyOrOptions instanceof Object) {
                strategy = "increment";
                Object.assign(options, strategyOrOptions);
            }
        }
        else {
            strategy = "increment";
        }
        if (maybeOptions instanceof Object)
            Object.assign(options, maybeOptions);
        return function (object, propertyName) {
            // if column type is not explicitly set then determine it based on generation strategy
            if (!options.type) {
                if (strategy === "increment") {
                    options.type = Number;
                }
                else if (strategy === "uuid") {
                    options.type = "uuid";
                }
                else if (strategy === "rowid") {
                    options.type = "int";
                }
            }
            // explicitly set a primary and generated to column options
            options.primary = true;
            // register column metadata args
            __6.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "regular",
                options: options
            });
            // register generated metadata args
            __6.getMetadataArgsStorage().generations.push({
                target: object.constructor,
                propertyName: propertyName,
                strategy: strategy
            });
        };
    }
    exports.PrimaryGeneratedColumn = PrimaryGeneratedColumn;
});
define("typeorm/decorator/columns/PrimaryColumn", ["require", "exports", "typeorm/index", "typeorm/error/ColumnTypeUndefinedError", "typeorm/error/PrimaryColumnCannotBeNullableError"], function (require, exports, __7, ColumnTypeUndefinedError_3, PrimaryColumnCannotBeNullableError_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrimaryColumn = void 0;
    /**
     * Column decorator is used to mark a specific class property as a table column.
     * Only properties decorated with this decorator will be persisted to the database when entity be saved.
     * Primary columns also creates a PRIMARY KEY for this column in a db.
     */
    function PrimaryColumn(typeOrOptions, options) {
        return function (object, propertyName) {
            // normalize parameters
            let type;
            if (typeof typeOrOptions === "string") {
                type = typeOrOptions;
            }
            else {
                options = Object.assign({}, typeOrOptions);
            }
            if (!options)
                options = {};
            // if type is not given explicitly then try to guess it
            const reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
            if (!type && reflectMetadataType)
                type = reflectMetadataType;
            // check if there is no type in column options then set type from first function argument, or guessed one
            if (!options.type && type)
                options.type = type;
            // if we still don't have a type then we need to give error to user that type is required
            if (!options.type)
                throw new ColumnTypeUndefinedError_3.ColumnTypeUndefinedError(object, propertyName);
            // check if column is not nullable, because we cannot allow a primary key to be nullable
            if (options.nullable)
                throw new PrimaryColumnCannotBeNullableError_2.PrimaryColumnCannotBeNullableError(object, propertyName);
            // explicitly set a primary to column options
            options.primary = true;
            // create and register a new column metadata
            __7.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "regular",
                options: options
            });
            if (options.generated) {
                __7.getMetadataArgsStorage().generations.push({
                    target: object.constructor,
                    propertyName: propertyName,
                    strategy: typeof options.generated === "string" ? options.generated : "increment"
                });
            }
        };
    }
    exports.PrimaryColumn = PrimaryColumn;
});
define("typeorm/decorator/columns/UpdateDateColumn", ["require", "exports", "typeorm/index"], function (require, exports, __8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDateColumn = void 0;
    /**
     * This column will store an update date of the updated object.
     * This date is being updated each time you persist the object.
     */
    function UpdateDateColumn(options) {
        return function (object, propertyName) {
            __8.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "updateDate",
                options: options ? options : {}
            });
        };
    }
    exports.UpdateDateColumn = UpdateDateColumn;
});
define("typeorm/decorator/columns/VersionColumn", ["require", "exports", "typeorm/index"], function (require, exports, __9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VersionColumn = void 0;
    /**
     * This column will store a number - version of the entity.
     * Every time your entity will be persisted, this number will be increased by one -
     * so you can organize visioning and update strategies of your entity.
     */
    function VersionColumn(options) {
        return function (object, propertyName) {
            __9.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "version",
                options: options || {}
            });
        };
    }
    exports.VersionColumn = VersionColumn;
});
define("typeorm/decorator/options/ViewColumnOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/columns/ViewColumn", ["require", "exports", "typeorm/index"], function (require, exports, __10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewColumn = void 0;
    /**
     * ViewColumn decorator is used to mark a specific class property as a view column.
     */
    function ViewColumn(options) {
        return function (object, propertyName) {
            __10.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "regular",
                options: options || {}
            });
        };
    }
    exports.ViewColumn = ViewColumn;
});
define("typeorm/decorator/columns/ObjectIdColumn", ["require", "exports", "typeorm/index"], function (require, exports, __11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectIdColumn = void 0;
    /**
     * Special type of column that is available only for MongoDB database.
     * Marks your entity's column to be an object id.
     */
    function ObjectIdColumn(options) {
        return function (object, propertyName) {
            // if column options are not given then create a new empty options
            if (!options)
                options = {};
            options.primary = true;
            if (!options.name)
                options.name = "_id";
            // create and register a new column metadata
            __11.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "objectId",
                options: options
            });
        };
    }
    exports.ObjectIdColumn = ObjectIdColumn;
});
define("typeorm/decorator/listeners/AfterInsert", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __12, EventListenerTypes_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AfterInsert = void 0;
    /**
     * Calls a method on which this decorator is applied after this entity insertion.
     */
    function AfterInsert() {
        return function (object, propertyName) {
            __12.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_2.EventListenerTypes.AFTER_INSERT
            });
        };
    }
    exports.AfterInsert = AfterInsert;
});
define("typeorm/decorator/listeners/AfterLoad", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __13, EventListenerTypes_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AfterLoad = void 0;
    /**
     * Calls a method on which this decorator is applied after entity is loaded.
     */
    function AfterLoad() {
        return function (object, propertyName) {
            __13.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_3.EventListenerTypes.AFTER_LOAD
            });
        };
    }
    exports.AfterLoad = AfterLoad;
});
define("typeorm/decorator/listeners/AfterRemove", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __14, EventListenerTypes_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AfterRemove = void 0;
    /**
     * Calls a method on which this decorator is applied after this entity removal.
     */
    function AfterRemove() {
        return function (object, propertyName) {
            __14.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_4.EventListenerTypes.AFTER_REMOVE
            });
        };
    }
    exports.AfterRemove = AfterRemove;
});
define("typeorm/decorator/listeners/AfterUpdate", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __15, EventListenerTypes_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AfterUpdate = void 0;
    /**
     * Calls a method on which this decorator is applied after this entity update.
     */
    function AfterUpdate() {
        return function (object, propertyName) {
            __15.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_5.EventListenerTypes.AFTER_UPDATE
            });
        };
    }
    exports.AfterUpdate = AfterUpdate;
});
define("typeorm/decorator/listeners/BeforeInsert", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __16, EventListenerTypes_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeforeInsert = void 0;
    /**
     * Calls a method on which this decorator is applied before this entity insertion.
     */
    function BeforeInsert() {
        return function (object, propertyName) {
            __16.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_6.EventListenerTypes.BEFORE_INSERT
            });
        };
    }
    exports.BeforeInsert = BeforeInsert;
});
define("typeorm/decorator/listeners/BeforeRemove", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __17, EventListenerTypes_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeforeRemove = void 0;
    /**
     * Calls a method on which this decorator is applied before this entity removal.
     */
    function BeforeRemove() {
        return function (object, propertyName) {
            __17.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_7.EventListenerTypes.BEFORE_REMOVE
            });
        };
    }
    exports.BeforeRemove = BeforeRemove;
});
define("typeorm/decorator/listeners/BeforeUpdate", ["require", "exports", "typeorm/index", "typeorm/metadata/types/EventListenerTypes"], function (require, exports, __18, EventListenerTypes_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeforeUpdate = void 0;
    /**
     * Calls a method on which this decorator is applied before this entity update.
     */
    function BeforeUpdate() {
        return function (object, propertyName) {
            __18.getMetadataArgsStorage().entityListeners.push({
                target: object.constructor,
                propertyName: propertyName,
                type: EventListenerTypes_8.EventListenerTypes.BEFORE_UPDATE
            });
        };
    }
    exports.BeforeUpdate = BeforeUpdate;
});
define("typeorm/decorator/listeners/EventSubscriber", ["require", "exports", "typeorm/index"], function (require, exports, __19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventSubscriber = void 0;
    /**
     * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event
     * occurs. Those classes must implement EventSubscriberInterface interface.
     */
    function EventSubscriber() {
        return function (target) {
            __19.getMetadataArgsStorage().entitySubscribers.push({
                target: target
            });
        };
    }
    exports.EventSubscriber = EventSubscriber;
});
define("typeorm/decorator/options/IndexOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/options/EntityOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/relations/JoinColumn", ["require", "exports", "typeorm/index"], function (require, exports, __20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoinColumn = void 0;
    /**
     * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.
     * It also can be used on both one-to-one and many-to-one relations to specify custom column name
     * or custom referenced column.
     */
    function JoinColumn(optionsOrOptionsArray) {
        return function (object, propertyName) {
            const options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];
            options.forEach(options => {
                __20.getMetadataArgsStorage().joinColumns.push({
                    target: object.constructor,
                    propertyName: propertyName,
                    name: options.name,
                    referencedColumnName: options.referencedColumnName
                });
            });
        };
    }
    exports.JoinColumn = JoinColumn;
});
define("typeorm/decorator/relations/JoinTable", ["require", "exports", "typeorm/index"], function (require, exports, __21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoinTable = void 0;
    /**
     * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.
     * Its also used to set a custom junction table's name, column names and referenced columns.
     */
    function JoinTable(options) {
        return function (object, propertyName) {
            options = options || {};
            __21.getMetadataArgsStorage().joinTables.push({
                target: object.constructor,
                propertyName: propertyName,
                name: options.name,
                joinColumns: (options && options.joinColumn ? [options.joinColumn] : options.joinColumns),
                inverseJoinColumns: (options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns),
                schema: options && options.schema ? options.schema : undefined,
                database: options && options.database ? options.database : undefined,
            });
        };
    }
    exports.JoinTable = JoinTable;
});
define("typeorm/decorator/relations/ManyToMany", ["require", "exports", "typeorm/index"], function (require, exports, __22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManyToMany = void 0;
    /**
     * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have
     * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage
     * entity1 and entity2 ids. This is owner side of the relationship.
     */
    function ManyToMany(typeFunctionOrTarget, inverseSideOrOptions, options) {
        // normalize parameters
        let inverseSideProperty;
        if (typeof inverseSideOrOptions === "object") {
            options = inverseSideOrOptions;
        }
        else {
            inverseSideProperty = inverseSideOrOptions;
        }
        return function (object, propertyName) {
            if (!options)
                options = {};
            // now try to determine it its lazy relation
            let isLazy = options.lazy === true;
            if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination
                const reflectedType = Reflect.getMetadata("design:type", object, propertyName);
                if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise")
                    isLazy = true;
            }
            __22.getMetadataArgsStorage().relations.push({
                target: object.constructor,
                propertyName: propertyName,
                // propertyType: reflectedType,
                relationType: "many-to-many",
                isLazy: isLazy,
                type: typeFunctionOrTarget,
                inverseSideProperty: inverseSideProperty,
                options: options
            });
        };
    }
    exports.ManyToMany = ManyToMany;
});
define("typeorm/decorator/relations/ManyToOne", ["require", "exports", "typeorm/index"], function (require, exports, __23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManyToOne = void 0;
    /**
     * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but
     * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of
     * Entity2 on its side of the relation.
     */
    function ManyToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {
        // Normalize parameters.
        let inverseSideProperty;
        if (typeof inverseSideOrOptions === "object") {
            options = inverseSideOrOptions;
        }
        else {
            inverseSideProperty = inverseSideOrOptions;
        }
        return function (object, propertyName) {
            if (!options)
                options = {};
            // Now try to determine if it is a lazy relation.
            let isLazy = options && options.lazy === true ? true : false;
            if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination
                const reflectedType = Reflect.getMetadata("design:type", object, propertyName);
                if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise")
                    isLazy = true;
            }
            __23.getMetadataArgsStorage().relations.push({
                target: object.constructor,
                propertyName: propertyName,
                // propertyType: reflectedType,
                relationType: "many-to-one",
                isLazy: isLazy,
                type: typeFunctionOrTarget,
                inverseSideProperty: inverseSideProperty,
                options: options
            });
        };
    }
    exports.ManyToOne = ManyToOne;
});
define("typeorm/decorator/relations/OneToMany", ["require", "exports", "typeorm/index"], function (require, exports, __24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OneToMany = void 0;
    /**
     * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,
     * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its
     * side of the relation.
     */
    function OneToMany(typeFunctionOrTarget, inverseSide, options) {
        return function (object, propertyName) {
            if (!options)
                options = {};
            // Now try to determine if it is a lazy relation.
            let isLazy = options && options.lazy === true ? true : false;
            if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination
                const reflectedType = Reflect.getMetadata("design:type", object, propertyName);
                if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise")
                    isLazy = true;
            }
            __24.getMetadataArgsStorage().relations.push({
                target: object.constructor,
                propertyName: propertyName,
                // propertyType: reflectedType,
                isLazy: isLazy,
                relationType: "one-to-many",
                type: typeFunctionOrTarget,
                inverseSideProperty: inverseSide,
                options: options
            });
        };
    }
    exports.OneToMany = OneToMany;
});
define("typeorm/decorator/relations/OneToOne", ["require", "exports", "typeorm/index"], function (require, exports, __25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OneToOne = void 0;
    /**
     * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.
     * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.
     */
    function OneToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {
        // normalize parameters
        let inverseSideProperty;
        if (typeof inverseSideOrOptions === "object") {
            options = inverseSideOrOptions;
        }
        else {
            inverseSideProperty = inverseSideOrOptions;
        }
        return function (object, propertyName) {
            if (!options)
                options = {};
            // now try to determine it its lazy relation
            let isLazy = options && options.lazy === true ? true : false;
            if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination
                const reflectedType = Reflect.getMetadata("design:type", object, propertyName);
                if (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise")
                    isLazy = true;
            }
            __25.getMetadataArgsStorage().relations.push({
                target: object.constructor,
                propertyName: propertyName,
                // propertyType: reflectedType,
                isLazy: isLazy,
                relationType: "one-to-one",
                type: typeFunctionOrTarget,
                inverseSideProperty: inverseSideProperty,
                options: options
            });
        };
    }
    exports.OneToOne = OneToOne;
});
define("typeorm/decorator/relations/RelationCount", ["require", "exports", "typeorm/index"], function (require, exports, __26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationCount = void 0;
    /**
     * Holds a number of children in the closure table of the column.
     *
     * @deprecated Do not use this decorator, it may be removed in the future versions
     */
    function RelationCount(relation, alias, queryBuilderFactory) {
        return function (object, propertyName) {
            __26.getMetadataArgsStorage().relationCounts.push({
                target: object.constructor,
                propertyName: propertyName,
                relation: relation,
                alias: alias,
                queryBuilderFactory: queryBuilderFactory
            });
        };
    }
    exports.RelationCount = RelationCount;
});
define("typeorm/decorator/relations/RelationId", ["require", "exports", "typeorm/index"], function (require, exports, __27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationId = void 0;
    /**
     * Special decorator used to extract relation id into separate entity property.
     *
     * @experimental
     */
    function RelationId(relation, alias, queryBuilderFactory) {
        return function (object, propertyName) {
            __27.getMetadataArgsStorage().relationIds.push({
                target: object.constructor,
                propertyName: propertyName,
                relation: relation,
                alias: alias,
                queryBuilderFactory: queryBuilderFactory
            });
        };
    }
    exports.RelationId = RelationId;
});
define("typeorm/decorator/entity/Entity", ["require", "exports", "typeorm/index"], function (require, exports, __28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Entity = void 0;
    /**
     * This decorator is used to mark classes that will be an entity (table or document depend on database type).
     * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
     */
    function Entity(nameOrOptions, maybeOptions) {
        const options = (typeof nameOrOptions === "object" ? nameOrOptions : maybeOptions) || {};
        const name = typeof nameOrOptions === "string" ? nameOrOptions : options.name;
        return function (target) {
            __28.getMetadataArgsStorage().tables.push({
                target: target,
                name: name,
                type: "regular",
                orderBy: options.orderBy ? options.orderBy : undefined,
                engine: options.engine ? options.engine : undefined,
                database: options.database ? options.database : undefined,
                schema: options.schema ? options.schema : undefined,
                synchronize: options.synchronize,
                withoutRowid: options.withoutRowid
            });
        };
    }
    exports.Entity = Entity;
});
define("typeorm/decorator/entity/ChildEntity", ["require", "exports", "typeorm/index"], function (require, exports, __29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChildEntity = void 0;
    /**
     * Special type of the table used in the single-table inherited tables.
     */
    function ChildEntity(discriminatorValue) {
        return function (target) {
            // register a table metadata
            __29.getMetadataArgsStorage().tables.push({
                target: target,
                type: "entity-child",
            });
            // register discriminator value if it was provided
            if (typeof discriminatorValue !== 'undefined') {
                __29.getMetadataArgsStorage().discriminatorValues.push({
                    target: target,
                    value: discriminatorValue
                });
            }
        };
    }
    exports.ChildEntity = ChildEntity;
});
define("typeorm/decorator/entity/TableInheritance", ["require", "exports", "typeorm/index"], function (require, exports, __30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableInheritance = void 0;
    /**
     * Sets for entity to use table inheritance pattern.
     */
    function TableInheritance(options) {
        return function (target) {
            __30.getMetadataArgsStorage().inheritances.push({
                target: target,
                pattern: options && options.pattern ? options.pattern : "STI",
                column: options && options.column ? typeof options.column === "string" ? { name: options.column } : options.column : undefined
            });
        };
    }
    exports.TableInheritance = TableInheritance;
});
define("typeorm/decorator/options/ViewEntityOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/entity-view/ViewEntity", ["require", "exports", "typeorm/index"], function (require, exports, __31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewEntity = void 0;
    /**
     * This decorator is used to mark classes that will be an entity view.
     * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
     */
    function ViewEntity(nameOrOptions, maybeOptions) {
        const options = (typeof nameOrOptions === "object" ? nameOrOptions : maybeOptions) || {};
        const name = typeof nameOrOptions === "string" ? nameOrOptions : options.name;
        return function (target) {
            __31.getMetadataArgsStorage().tables.push({
                target: target,
                name: name,
                expression: options.expression,
                type: "view",
                database: options.database ? options.database : undefined,
                schema: options.schema ? options.schema : undefined,
                synchronize: options.synchronize === false ? false : true,
                materialized: !!options.materialized
            });
        };
    }
    exports.ViewEntity = ViewEntity;
});
define("typeorm/decorator/options/TransactionOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/decorator/transaction/Transaction", ["require", "exports", "typeorm/index"], function (require, exports, __32) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = void 0;
    function Transaction(connectionOrOptions) {
        return function (target, methodName, descriptor) {
            // save original method - we gonna need it
            const originalMethod = descriptor.value;
            // override method descriptor with proxy method
            descriptor.value = function (...args) {
                let connectionName = "default";
                let isolationLevel = undefined;
                if (connectionOrOptions) {
                    if (typeof connectionOrOptions === "string") {
                        connectionName = connectionOrOptions;
                    }
                    else {
                        if (connectionOrOptions.connectionName) {
                            connectionName = connectionOrOptions.connectionName;
                        }
                        if (connectionOrOptions.isolation) {
                            isolationLevel = connectionOrOptions.isolation;
                        }
                    }
                }
                const transactionCallback = (entityManager) => {
                    let argsWithInjectedTransactionManagerAndRepositories;
                    // filter all @TransactionManager() and @TransactionRepository() decorator usages for this method
                    const transactionEntityManagerMetadatas = __32.getMetadataArgsStorage()
                        .filterTransactionEntityManagers(target.constructor, methodName)
                        .reverse();
                    const transactionRepositoryMetadatas = __32.getMetadataArgsStorage()
                        .filterTransactionRepository(target.constructor, methodName)
                        .reverse();
                    // if there are @TransactionManager() decorator usages the inject them
                    if (transactionEntityManagerMetadatas.length > 0) {
                        argsWithInjectedTransactionManagerAndRepositories = [...args];
                        // replace method params with injection of transactionEntityManager
                        transactionEntityManagerMetadatas.forEach(metadata => {
                            argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);
                        });
                    }
                    else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter
                        argsWithInjectedTransactionManagerAndRepositories = [entityManager, ...args];
                    }
                    else {
                        argsWithInjectedTransactionManagerAndRepositories = [...args];
                    }
                    // for every usage of @TransactionRepository decorator
                    transactionRepositoryMetadatas.forEach(metadata => {
                        let repositoryInstance;
                        // detect type of the repository and get instance from transaction entity manager
                        switch (metadata.repositoryType) {
                            case __32.Repository:
                                repositoryInstance = entityManager.getRepository(metadata.entityType);
                                break;
                            case __32.MongoRepository:
                                repositoryInstance = entityManager.getMongoRepository(metadata.entityType);
                                break;
                            case __32.TreeRepository:
                                repositoryInstance = entityManager.getTreeRepository(metadata.entityType);
                                break;
                            // if not the TypeORM's ones, there must be custom repository classes
                            default:
                                repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);
                        }
                        // replace method param with injection of repository instance
                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);
                    });
                    return originalMethod.apply(this, argsWithInjectedTransactionManagerAndRepositories);
                };
                if (isolationLevel) {
                    return __32.getConnection(connectionName).manager.transaction(isolationLevel, transactionCallback);
                }
                else {
                    return __32.getConnection(connectionName).manager.transaction(transactionCallback);
                }
            };
        };
    }
    exports.Transaction = Transaction;
});
define("typeorm/decorator/transaction/TransactionManager", ["require", "exports", "typeorm/index"], function (require, exports, __33) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionManager = void 0;
    /**
     * Injects transaction's entity manager into the method wrapped with @Transaction decorator.
     */
    function TransactionManager() {
        return function (object, methodName, index) {
            __33.getMetadataArgsStorage().transactionEntityManagers.push({
                target: object.constructor,
                methodName: methodName,
                index: index,
            });
        };
    }
    exports.TransactionManager = TransactionManager;
});
define("typeorm/decorator/transaction/TransactionRepository", ["require", "exports", "typeorm/index", "typeorm/error/CannotReflectMethodParameterTypeError"], function (require, exports, __34, CannotReflectMethodParameterTypeError_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionRepository = void 0;
    /**
     * Injects transaction's repository into the method wrapped with @Transaction decorator.
     */
    function TransactionRepository(entityType) {
        return (object, methodName, index) => {
            // get repository type
            let repositoryType;
            try {
                repositoryType = Reflect.getOwnMetadata("design:paramtypes", object, methodName)[index];
            }
            catch (err) {
                throw new CannotReflectMethodParameterTypeError_2.CannotReflectMethodParameterTypeError(object.constructor, methodName);
            }
            __34.getMetadataArgsStorage().transactionRepositories.push({
                target: object.constructor,
                methodName,
                index,
                repositoryType,
                entityType,
            });
        };
    }
    exports.TransactionRepository = TransactionRepository;
});
define("typeorm/decorator/tree/TreeLevelColumn", ["require", "exports", "typeorm/index"], function (require, exports, __35) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeLevelColumn = void 0;
    /**
     * Creates a "level"/"length" column to the table that holds a closure table.
     */
    function TreeLevelColumn() {
        return function (object, propertyName) {
            __35.getMetadataArgsStorage().columns.push({
                target: object.constructor,
                propertyName: propertyName,
                mode: "treeLevel",
                options: {}
            });
        };
    }
    exports.TreeLevelColumn = TreeLevelColumn;
});
define("typeorm/decorator/tree/TreeParent", ["require", "exports", "typeorm/index"], function (require, exports, __36) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeParent = void 0;
    /**
     * Marks a entity property as a parent of the tree.
     * "Tree parent" indicates who owns (is a parent) of this entity in tree structure.
     */
    function TreeParent() {
        return function (object, propertyName) {
            // now try to determine it its lazy relation
            const reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
            const isLazy = (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") || false;
            __36.getMetadataArgsStorage().relations.push({
                isTreeParent: true,
                target: object.constructor,
                propertyName: propertyName,
                isLazy: isLazy,
                relationType: "many-to-one",
                type: () => object.constructor,
                options: {}
            });
        };
    }
    exports.TreeParent = TreeParent;
});
define("typeorm/decorator/tree/TreeChildren", ["require", "exports", "typeorm/index"], function (require, exports, __37) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeChildren = void 0;
    /**
     * Marks a entity property as a children of the tree.
     * "Tree children" will contain all children (bind) of this entity.
     */
    function TreeChildren(options) {
        return function (object, propertyName) {
            if (!options)
                options = {};
            // now try to determine it its lazy relation
            const reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
            const isLazy = (reflectedType && typeof reflectedType.name === "string" && reflectedType.name.toLowerCase() === "promise") || false;
            // add one-to-many relation for this
            __37.getMetadataArgsStorage().relations.push({
                isTreeChildren: true,
                target: object.constructor,
                propertyName: propertyName,
                isLazy: isLazy,
                relationType: "one-to-many",
                type: () => object.constructor,
                options: options
            });
        };
    }
    exports.TreeChildren = TreeChildren;
});
define("typeorm/decorator/tree/Tree", ["require", "exports", "typeorm/index"], function (require, exports, __38) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tree = void 0;
    /**
     * Marks entity to work like a tree.
     * Tree pattern that will be used for the tree entity should be specified.
     * @TreeParent decorator must be used in tree entities.
     * TreeRepository can be used to manipulate with tree entities.
     */
    function Tree(type, options) {
        return function (target) {
            __38.getMetadataArgsStorage().trees.push({
                target: target,
                type: type,
                options: type === "closure-table" ? options : undefined
            });
        };
    }
    exports.Tree = Tree;
});
define("typeorm/decorator/Index", ["require", "exports", "typeorm/index"], function (require, exports, __39) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Index = void 0;
    /**
     * Creates a database index.
     * Can be used on entity property or on entity.
     * Can create indices with composite columns when used on entity.
     */
    function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {
        // normalize parameters
        const name = typeof nameOrFieldsOrOptions === "string" ? nameOrFieldsOrOptions : undefined;
        const fields = typeof nameOrFieldsOrOptions === "string" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;
        let options = (typeof nameOrFieldsOrOptions === "object" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions : maybeOptions;
        if (!options)
            options = (typeof maybeFieldsOrOptions === "object" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions : maybeOptions;
        return function (clsOrObject, propertyName) {
            __39.getMetadataArgsStorage().indices.push({
                target: propertyName ? clsOrObject.constructor : clsOrObject,
                name: name,
                columns: propertyName ? [propertyName] : fields,
                synchronize: options && options.synchronize === false ? false : true,
                where: options ? options.where : undefined,
                unique: options && options.unique ? true : false,
                spatial: options && options.spatial ? true : false,
                fulltext: options && options.fulltext ? true : false,
                parser: options ? options.parser : undefined,
                sparse: options && options.sparse ? true : false,
                background: options && options.background ? true : false,
                expireAfterSeconds: options ? options.expireAfterSeconds : undefined
            });
        };
    }
    exports.Index = Index;
});
define("typeorm/decorator/Unique", ["require", "exports", "typeorm/index"], function (require, exports, index_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Unique = void 0;
    /**
     * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.
     */
    function Unique(nameOrFields, maybeFields) {
        const name = typeof nameOrFields === "string" ? nameOrFields : undefined;
        const fields = typeof nameOrFields === "string" ? maybeFields : nameOrFields;
        return function (clsOrObject, propertyName) {
            let columns = fields;
            if (propertyName !== undefined) {
                switch (typeof (propertyName)) {
                    case "string":
                        columns = [propertyName];
                        break;
                    case "symbol":
                        columns = [propertyName.toString()];
                        break;
                }
            }
            const args = {
                target: propertyName ? clsOrObject.constructor : clsOrObject,
                name: name,
                columns,
            };
            index_11.getMetadataArgsStorage().uniques.push(args);
        };
    }
    exports.Unique = Unique;
});
define("typeorm/decorator/Check", ["require", "exports", "typeorm/index"], function (require, exports, __40) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Check = void 0;
    /**
     * Creates a database check.
     * Can be used on entity property or on entity.
     * Can create checks with composite columns when used on entity.
     */
    function Check(nameOrExpression, maybeExpression) {
        const name = maybeExpression ? nameOrExpression : undefined;
        const expression = maybeExpression ? maybeExpression : nameOrExpression;
        if (!expression)
            throw new Error(`Check expression is required`);
        return function (clsOrObject, propertyName) {
            __40.getMetadataArgsStorage().checks.push({
                target: propertyName ? clsOrObject.constructor : clsOrObject,
                name: name,
                expression: expression
            });
        };
    }
    exports.Check = Check;
});
define("typeorm/decorator/Exclusion", ["require", "exports", "typeorm/index"], function (require, exports, __41) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Exclusion = void 0;
    /**
     * Creates a database exclusion.
     * Can be used on entity.
     * Can create exclusions with composite columns when used on entity.
     */
    function Exclusion(nameOrExpression, maybeExpression) {
        const name = maybeExpression ? nameOrExpression : undefined;
        const expression = maybeExpression ? maybeExpression : nameOrExpression;
        if (!expression)
            throw new Error(`Exclusion expression is required`);
        return function (clsOrObject, propertyName) {
            __41.getMetadataArgsStorage().exclusions.push({
                target: propertyName ? clsOrObject.constructor : clsOrObject,
                name: name,
                expression: expression
            });
        };
    }
    exports.Exclusion = Exclusion;
});
define("typeorm/decorator/Generated", ["require", "exports", "typeorm/index"], function (require, exports, __42) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Generated = void 0;
    /**
     * Marks a column to generate a value on entity insertion.
     * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).
     * Increment uses a number which increases by one on each insertion.
     * Uuid generates a special UUID token.
     * Rowid supports only in CockroachDB and uses `unique_rowid()` function
     *
     * Note, some databases do not support non-primary generation columns.
     */
    function Generated(strategy = "increment") {
        return function (object, propertyName) {
            __42.getMetadataArgsStorage().generations.push({
                target: object.constructor,
                propertyName: propertyName,
                strategy: strategy
            });
        };
    }
    exports.Generated = Generated;
});
define("typeorm/decorator/EntityRepository", ["require", "exports", "typeorm/index"], function (require, exports, __43) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityRepository = void 0;
    /**
     * Used to declare a class as a custom repository.
     * Custom repository can manage some specific entity or just be generic.
     * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.
     */
    function EntityRepository(entity) {
        return function (target) {
            __43.getMetadataArgsStorage().entityRepositories.push({
                target: target,
                entity: entity,
            });
        };
    }
    exports.EntityRepository = EntityRepository;
});
define("typeorm/find-options/operator/Any", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Any = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: Any([...]) }
     */
    function Any(value) {
        return new FindOperator_4.FindOperator("any", value);
    }
    exports.Any = Any;
});
define("typeorm/find-options/operator/Between", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Between = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: Between(x, y) }
     */
    function Between(from, to) {
        return new FindOperator_5.FindOperator("between", [from, to], true, true);
    }
    exports.Between = Between;
});
define("typeorm/find-options/operator/Equal", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Equal = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: Equal("value") }
     */
    function Equal(value) {
        return new FindOperator_6.FindOperator("equal", value);
    }
    exports.Equal = Equal;
});
define("typeorm/find-options/operator/IsNull", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNull = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: IsNull() }
     */
    function IsNull() {
        return new FindOperator_7.FindOperator("isNull", undefined, false);
    }
    exports.IsNull = IsNull;
});
define("typeorm/find-options/operator/LessThan", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LessThan = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: LessThan(10) }
     */
    function LessThan(value) {
        return new FindOperator_8.FindOperator("lessThan", value);
    }
    exports.LessThan = LessThan;
});
define("typeorm/find-options/operator/LessThanOrEqual", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LessThanOrEqual = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: LessThanOrEqual(10) }
     */
    function LessThanOrEqual(value) {
        return new FindOperator_9.FindOperator("lessThanOrEqual", value);
    }
    exports.LessThanOrEqual = LessThanOrEqual;
});
define("typeorm/find-options/operator/ILike", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ILike = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: ILike("%SOME string%") }
     */
    function ILike(value) {
        return new FindOperator_10.FindOperator("ilike", value);
    }
    exports.ILike = ILike;
});
define("typeorm/find-options/operator/Like", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Like = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: Like("%some sting%") }
     */
    function Like(value) {
        return new FindOperator_11.FindOperator("like", value);
    }
    exports.Like = Like;
});
define("typeorm/find-options/operator/MoreThan", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MoreThan = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: MoreThan(10) }
     */
    function MoreThan(value) {
        return new FindOperator_12.FindOperator("moreThan", value);
    }
    exports.MoreThan = MoreThan;
});
define("typeorm/find-options/operator/MoreThanOrEqual", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MoreThanOrEqual = void 0;
    /**
     * Find Options Operator.
     * Example: { someField: MoreThanOrEqual(10) }
     */
    function MoreThanOrEqual(value) {
        return new FindOperator_13.FindOperator("moreThanOrEqual", value);
    }
    exports.MoreThanOrEqual = MoreThanOrEqual;
});
define("typeorm/find-options/operator/Not", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Not = void 0;
    /**
     * Find Options Operator.
     * Used to negotiate expression.
     * Example: { title: not("hello") } will return entities where title not equal to "hello".
     */
    function Not(value) {
        return new FindOperator_14.FindOperator("not", value);
    }
    exports.Not = Not;
});
define("typeorm/find-options/operator/Raw", ["require", "exports", "typeorm/find-options/FindOperator"], function (require, exports, FindOperator_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Raw = void 0;
    function Raw(valueOrSqlGenerator, sqlGeneratorParameters) {
        if (typeof valueOrSqlGenerator !== 'function') {
            return new FindOperator_15.FindOperator("raw", valueOrSqlGenerator, false);
        }
        return new FindOperator_15.FindOperator("raw", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);
    }
    exports.Raw = Raw;
});
define("typeorm/repository/BaseEntity", ["require", "exports", "typeorm/index", "typeorm/util/ObjectUtils"], function (require, exports, index_12, ObjectUtils_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseEntity = void 0;
    /**
     * Base abstract entity for all entities, used in ActiveRecord patterns.
     */
    class BaseEntity {
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        /**
         * Checks if entity has an id.
         * If entity composite compose ids, it will check them all.
         */
        hasId() {
            return this.constructor.getRepository().hasId(this);
        }
        /**
         * Saves current entity in the database.
         * If entity does not exist in the database then inserts, otherwise updates.
         */
        save(options) {
            return this.constructor.getRepository().save(this, options);
        }
        /**
         * Removes current entity from the database.
         */
        remove(options) {
            return this.constructor.getRepository().remove(this, options);
        }
        /**
         * Records the delete date of current entity.
         */
        softRemove(options) {
            return this.constructor.getRepository().softRemove(this, options);
        }
        /**
         * Recovers a given entity in the database.
         */
        recover(options) {
            return this.constructor.getRepository().recover(this, options);
        }
        /**
         * Reloads entity data from the database.
         */
        async reload() {
            const base = this.constructor;
            const newestEntity = await base.getRepository().findOneOrFail(base.getId(this));
            ObjectUtils_10.ObjectUtils.assign(this, newestEntity);
        }
        // -------------------------------------------------------------------------
        // Public Static Methods
        // -------------------------------------------------------------------------
        /**
         * Sets connection to be used by entity.
         */
        static useConnection(connection) {
            this.usedConnection = connection;
        }
        /**
         * Gets current entity's Repository.
         */
        static getRepository() {
            const connection = this.usedConnection || index_12.getConnection();
            return connection.getRepository(this);
        }
        /**
         * Returns object that is managed by this repository.
         * If this repository manages entity from schema,
         * then it returns a name of that schema instead.
         */
        static get target() {
            return this.getRepository().target;
        }
        /**
         * Checks entity has an id.
         * If entity composite compose ids, it will check them all.
         */
        static hasId(entity) {
            return this.getRepository().hasId(entity);
        }
        /**
         * Gets entity mixed id.
         */
        static getId(entity) {
            return this.getRepository().getId(entity);
        }
        /**
         * Creates a new query builder that can be used to build a sql query.
         */
        static createQueryBuilder(alias) {
            return this.getRepository().createQueryBuilder(alias);
        }
        /**
          * Creates a new entity instance and copies all entity properties from this object into a new entity.
          * Note that it copies only properties that present in entity schema.
          */
        static create(entityOrEntities) {
            return this.getRepository().create(entityOrEntities);
        }
        /**
         * Merges multiple entities (or entity-like objects) into a given entity.
         */
        static merge(mergeIntoEntity, ...entityLikes) {
            return this.getRepository().merge(mergeIntoEntity, ...entityLikes);
        }
        /**
         * Creates a new entity from the given plain javascript object. If entity already exist in the database, then
         * it loads it (and everything related to it), replaces all values with the new ones from the given object
         * and returns this new entity. This new entity is actually a loaded from the db entity with all properties
         * replaced from the new object.
         *
         * Note that given entity-like object must have an entity id / primary key to find entity by.
         * Returns undefined if entity with given id was not found.
         */
        static preload(entityLike) {
            return this.getRepository().preload(entityLike);
        }
        /**
         * Saves one or many given entities.
         */
        static save(entityOrEntities, options) {
            return this.getRepository().save(entityOrEntities, options);
        }
        /**
         * Removes one or many given entities.
         */
        static remove(entityOrEntities, options) {
            return this.getRepository().remove(entityOrEntities, options);
        }
        /**
         * Records the delete date of one or many given entities.
         */
        static softRemove(entityOrEntities, options) {
            return this.getRepository().softRemove(entityOrEntities, options);
        }
        /**
         * Inserts a given entity into the database.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient INSERT query.
         * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.
         */
        static insert(entity, options) {
            return this.getRepository().insert(entity, options);
        }
        /**
         * Updates entity partially. Entity can be found by a given conditions.
         * Unlike save method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient UPDATE query.
         * Does not check if entity exist in the database.
         */
        static update(criteria, partialEntity, options) {
            return this.getRepository().update(criteria, partialEntity, options);
        }
        /**
         * Deletes entities by a given criteria.
         * Unlike remove method executes a primitive operation without cascades, relations and other operations included.
         * Executes fast and efficient DELETE query.
         * Does not check if entity exist in the database.
         */
        static delete(criteria, options) {
            return this.getRepository().delete(criteria, options);
        }
        /**
         * Counts entities that match given find options or conditions.
         */
        static count(optionsOrConditions) {
            return this.getRepository().count(optionsOrConditions);
        }
        /**
         * Finds entities that match given find options or conditions.
         */
        static find(optionsOrConditions) {
            return this.getRepository().find(optionsOrConditions);
        }
        /**
         * Finds entities that match given find options or conditions.
         * Also counts all entities that match given conditions,
         * but ignores pagination settings (from and take options).
         */
        static findAndCount(optionsOrConditions) {
            return this.getRepository().findAndCount(optionsOrConditions);
        }
        /**
         * Finds entities by ids.
         * Optionally find options can be applied.
         */
        static findByIds(ids, optionsOrConditions) {
            return this.getRepository().findByIds(ids, optionsOrConditions);
        }
        /**
         * Finds first entity that matches given conditions.
         */
        static findOne(optionsOrConditions, maybeOptions) {
            return this.getRepository().findOne(optionsOrConditions, maybeOptions);
        }
        /**
         * Finds first entity that matches given conditions.
         */
        static findOneOrFail(optionsOrConditions, maybeOptions) {
            return this.getRepository().findOneOrFail(optionsOrConditions, maybeOptions);
        }
        /**
         * Executes a raw SQL query and returns a raw database results.
         * Raw query execution is supported only by relational databases (MongoDB is not supported).
         */
        static query(query, parameters) {
            return this.getRepository().query(query, parameters);
        }
        /**
         * Clears all the data from the given table/collection (truncates/drops it).
         */
        static clear() {
            return this.getRepository().clear();
        }
    }
    exports.BaseEntity = BaseEntity;
});
define("typeorm/index", ["require", "exports", "typeorm/connection/ConnectionManager", "typeorm/metadata-args/MetadataArgsStorage", "typeorm/container", "typeorm/platform/PlatformTools", "typeorm/connection/ConnectionOptionsReader", "typeorm/container", "typeorm/common/EntityTarget", "typeorm/common/ObjectType", "typeorm/common/ObjectLiteral", "typeorm/common/DeepPartial", "typeorm/error/index", "typeorm/decorator/columns/Column", "typeorm/decorator/columns/CreateDateColumn", "typeorm/decorator/columns/DeleteDateColumn", "typeorm/decorator/columns/PrimaryGeneratedColumn", "typeorm/decorator/columns/PrimaryColumn", "typeorm/decorator/columns/UpdateDateColumn", "typeorm/decorator/columns/VersionColumn", "typeorm/decorator/columns/ViewColumn", "typeorm/decorator/columns/ObjectIdColumn", "typeorm/decorator/listeners/AfterInsert", "typeorm/decorator/listeners/AfterLoad", "typeorm/decorator/listeners/AfterRemove", "typeorm/decorator/listeners/AfterUpdate", "typeorm/decorator/listeners/BeforeInsert", "typeorm/decorator/listeners/BeforeRemove", "typeorm/decorator/listeners/BeforeUpdate", "typeorm/decorator/listeners/EventSubscriber", "typeorm/decorator/options/ColumnOptions", "typeorm/decorator/options/IndexOptions", "typeorm/decorator/options/JoinColumnOptions", "typeorm/decorator/options/JoinTableOptions", "typeorm/decorator/options/RelationOptions", "typeorm/decorator/options/EntityOptions", "typeorm/decorator/options/ValueTransformer", "typeorm/decorator/relations/JoinColumn", "typeorm/decorator/relations/JoinTable", "typeorm/decorator/relations/ManyToMany", "typeorm/decorator/relations/ManyToOne", "typeorm/decorator/relations/OneToMany", "typeorm/decorator/relations/OneToOne", "typeorm/decorator/relations/RelationCount", "typeorm/decorator/relations/RelationId", "typeorm/decorator/entity/Entity", "typeorm/decorator/entity/ChildEntity", "typeorm/decorator/entity/TableInheritance", "typeorm/decorator/entity-view/ViewEntity", "typeorm/decorator/transaction/Transaction", "typeorm/decorator/transaction/TransactionManager", "typeorm/decorator/transaction/TransactionRepository", "typeorm/decorator/tree/TreeLevelColumn", "typeorm/decorator/tree/TreeParent", "typeorm/decorator/tree/TreeChildren", "typeorm/decorator/tree/Tree", "typeorm/decorator/Index", "typeorm/decorator/Unique", "typeorm/decorator/Check", "typeorm/decorator/Exclusion", "typeorm/decorator/Generated", "typeorm/decorator/EntityRepository", "typeorm/find-options/operator/Any", "typeorm/find-options/operator/Between", "typeorm/find-options/operator/Equal", "typeorm/find-options/operator/In", "typeorm/find-options/operator/IsNull", "typeorm/find-options/operator/LessThan", "typeorm/find-options/operator/LessThanOrEqual", "typeorm/find-options/operator/ILike", "typeorm/find-options/operator/Like", "typeorm/find-options/operator/MoreThan", "typeorm/find-options/operator/MoreThanOrEqual", "typeorm/find-options/operator/Not", "typeorm/find-options/operator/Raw", "typeorm/find-options/FindConditions", "typeorm/find-options/FindManyOptions", "typeorm/find-options/FindOneOptions", "typeorm/find-options/FindOperator", "typeorm/find-options/FindOperatorType", "typeorm/find-options/JoinOptions", "typeorm/find-options/OrderByCondition", "typeorm/find-options/FindOptionsUtils", "typeorm/logger/Logger", "typeorm/logger/LoggerOptions", "typeorm/logger/AdvancedConsoleLogger", "typeorm/logger/SimpleConsoleLogger", "typeorm/logger/FileLogger", "typeorm/metadata/EntityMetadata", "typeorm/entity-manager/EntityManager", "typeorm/repository/AbstractRepository", "typeorm/repository/Repository", "typeorm/repository/BaseEntity", "typeorm/repository/TreeRepository", "typeorm/repository/MongoRepository", "typeorm/repository/RemoveOptions", "typeorm/repository/SaveOptions", "typeorm/schema-builder/table/TableCheck", "typeorm/schema-builder/table/TableColumn", "typeorm/schema-builder/table/TableExclusion", "typeorm/schema-builder/table/TableForeignKey", "typeorm/schema-builder/table/TableIndex", "typeorm/schema-builder/table/TableUnique", "typeorm/schema-builder/table/Table", "typeorm/driver/mongodb/typings", "typeorm/driver/types/DatabaseType", "typeorm/driver/types/ReplicationMode", "typeorm/driver/sqlserver/MssqlParameter", "typeorm/connection/ConnectionOptionsReader", "typeorm/connection/Connection", "typeorm/connection/ConnectionManager", "typeorm/query-builder/QueryBuilder", "typeorm/query-builder/SelectQueryBuilder", "typeorm/query-builder/DeleteQueryBuilder", "typeorm/query-builder/InsertQueryBuilder", "typeorm/query-builder/UpdateQueryBuilder", "typeorm/query-builder/RelationQueryBuilder", "typeorm/query-builder/Brackets", "typeorm/query-builder/result/InsertResult", "typeorm/query-builder/result/UpdateResult", "typeorm/query-builder/result/DeleteResult", "typeorm/entity-manager/MongoEntityManager", "typeorm/migration/Migration", "typeorm/migration/MigrationExecutor", "typeorm/naming-strategy/DefaultNamingStrategy", "typeorm/entity-schema/EntitySchema", "reflect-metadata"], function (require, exports, ConnectionManager_1, MetadataArgsStorage_2, container_2, PlatformTools_24, ConnectionOptionsReader_1, container_3, EntityTarget_1, ObjectType_1, ObjectLiteral_1, DeepPartial_1, error_1, Column_1, CreateDateColumn_1, DeleteDateColumn_1, PrimaryGeneratedColumn_1, PrimaryColumn_1, UpdateDateColumn_1, VersionColumn_1, ViewColumn_1, ObjectIdColumn_1, AfterInsert_1, AfterLoad_1, AfterRemove_1, AfterUpdate_1, BeforeInsert_1, BeforeRemove_1, BeforeUpdate_1, EventSubscriber_1, ColumnOptions_1, IndexOptions_1, JoinColumnOptions_1, JoinTableOptions_1, RelationOptions_1, EntityOptions_1, ValueTransformer_1, JoinColumn_1, JoinTable_1, ManyToMany_1, ManyToOne_1, OneToMany_1, OneToOne_1, RelationCount_1, RelationId_1, Entity_1, ChildEntity_1, TableInheritance_1, ViewEntity_1, Transaction_1, TransactionManager_1, TransactionRepository_1, TreeLevelColumn_1, TreeParent_1, TreeChildren_1, Tree_1, Index_1, Unique_1, Check_1, Exclusion_1, Generated_1, EntityRepository_1, Any_1, Between_1, Equal_1, In_2, IsNull_1, LessThan_1, LessThanOrEqual_1, ILike_1, Like_1, MoreThan_1, MoreThanOrEqual_1, Not_1, Raw_1, FindConditions_1, FindManyOptions_1, FindOneOptions_1, FindOperator_16, FindOperatorType_1, JoinOptions_1, OrderByCondition_1, FindOptionsUtils_3, Logger_1, LoggerOptions_1, AdvancedConsoleLogger_2, SimpleConsoleLogger_2, FileLogger_2, EntityMetadata_8, EntityManager_4, AbstractRepository_2, Repository_5, BaseEntity_1, TreeRepository_3, MongoRepository_2, RemoveOptions_1, SaveOptions_1, TableCheck_9, TableColumn_12, TableExclusion_5, TableForeignKey_11, TableIndex_11, TableUnique_11, Table_13, typings_1, DatabaseType_1, ReplicationMode_1, MssqlParameter_5, ConnectionOptionsReader_2, Connection_2, ConnectionManager_2, QueryBuilder_7, SelectQueryBuilder_2, DeleteQueryBuilder_1, InsertQueryBuilder_1, UpdateQueryBuilder_1, RelationQueryBuilder_1, Brackets_2, InsertResult_3, UpdateResult_4, DeleteResult_3, MongoEntityManager_3, Migration_2, MigrationExecutor_2, DefaultNamingStrategy_2, EntitySchema_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createQueryBuilder = exports.getMongoRepository = exports.getCustomRepository = exports.getTreeRepository = exports.getRepository = exports.getSqljsManager = exports.getMongoManager = exports.getManager = exports.getConnection = exports.createConnections = exports.createConnection = exports.getConnectionManager = exports.getConnectionOptions = exports.getMetadataArgsStorage = exports.EntitySchema = exports.DefaultNamingStrategy = exports.MigrationExecutor = exports.Migration = exports.MongoEntityManager = exports.DeleteResult = exports.UpdateResult = exports.InsertResult = exports.Brackets = exports.RelationQueryBuilder = exports.UpdateQueryBuilder = exports.InsertQueryBuilder = exports.DeleteQueryBuilder = exports.SelectQueryBuilder = exports.QueryBuilder = exports.ConnectionManager = exports.Connection = exports.ConnectionOptionsReader = void 0;
    // -------------------------------------------------------------------------
    // Commonly Used exports
    // -------------------------------------------------------------------------
    __exportStar(container_3, exports);
    __exportStar(EntityTarget_1, exports);
    __exportStar(ObjectType_1, exports);
    __exportStar(ObjectLiteral_1, exports);
    __exportStar(DeepPartial_1, exports);
    __exportStar(error_1, exports);
    __exportStar(Column_1, exports);
    __exportStar(CreateDateColumn_1, exports);
    __exportStar(DeleteDateColumn_1, exports);
    __exportStar(PrimaryGeneratedColumn_1, exports);
    __exportStar(PrimaryColumn_1, exports);
    __exportStar(UpdateDateColumn_1, exports);
    __exportStar(VersionColumn_1, exports);
    __exportStar(ViewColumn_1, exports);
    __exportStar(ObjectIdColumn_1, exports);
    __exportStar(AfterInsert_1, exports);
    __exportStar(AfterLoad_1, exports);
    __exportStar(AfterRemove_1, exports);
    __exportStar(AfterUpdate_1, exports);
    __exportStar(BeforeInsert_1, exports);
    __exportStar(BeforeRemove_1, exports);
    __exportStar(BeforeUpdate_1, exports);
    __exportStar(EventSubscriber_1, exports);
    __exportStar(ColumnOptions_1, exports);
    __exportStar(IndexOptions_1, exports);
    __exportStar(JoinColumnOptions_1, exports);
    __exportStar(JoinTableOptions_1, exports);
    __exportStar(RelationOptions_1, exports);
    __exportStar(EntityOptions_1, exports);
    __exportStar(ValueTransformer_1, exports);
    __exportStar(JoinColumn_1, exports);
    __exportStar(JoinTable_1, exports);
    __exportStar(ManyToMany_1, exports);
    __exportStar(ManyToOne_1, exports);
    __exportStar(OneToMany_1, exports);
    __exportStar(OneToOne_1, exports);
    __exportStar(RelationCount_1, exports);
    __exportStar(RelationId_1, exports);
    __exportStar(Entity_1, exports);
    __exportStar(ChildEntity_1, exports);
    __exportStar(TableInheritance_1, exports);
    __exportStar(ViewEntity_1, exports);
    __exportStar(Transaction_1, exports);
    __exportStar(TransactionManager_1, exports);
    __exportStar(TransactionRepository_1, exports);
    __exportStar(TreeLevelColumn_1, exports);
    __exportStar(TreeParent_1, exports);
    __exportStar(TreeChildren_1, exports);
    __exportStar(Tree_1, exports);
    __exportStar(Index_1, exports);
    __exportStar(Unique_1, exports);
    __exportStar(Check_1, exports);
    __exportStar(Exclusion_1, exports);
    __exportStar(Generated_1, exports);
    __exportStar(EntityRepository_1, exports);
    __exportStar(Any_1, exports);
    __exportStar(Between_1, exports);
    __exportStar(Equal_1, exports);
    __exportStar(In_2, exports);
    __exportStar(IsNull_1, exports);
    __exportStar(LessThan_1, exports);
    __exportStar(LessThanOrEqual_1, exports);
    __exportStar(ILike_1, exports);
    __exportStar(Like_1, exports);
    __exportStar(MoreThan_1, exports);
    __exportStar(MoreThanOrEqual_1, exports);
    __exportStar(Not_1, exports);
    __exportStar(Raw_1, exports);
    __exportStar(FindConditions_1, exports);
    __exportStar(FindManyOptions_1, exports);
    __exportStar(FindOneOptions_1, exports);
    __exportStar(FindOperator_16, exports);
    __exportStar(FindOperatorType_1, exports);
    __exportStar(JoinOptions_1, exports);
    __exportStar(OrderByCondition_1, exports);
    __exportStar(FindOptionsUtils_3, exports);
    __exportStar(Logger_1, exports);
    __exportStar(LoggerOptions_1, exports);
    __exportStar(AdvancedConsoleLogger_2, exports);
    __exportStar(SimpleConsoleLogger_2, exports);
    __exportStar(FileLogger_2, exports);
    __exportStar(EntityMetadata_8, exports);
    __exportStar(EntityManager_4, exports);
    __exportStar(AbstractRepository_2, exports);
    __exportStar(Repository_5, exports);
    __exportStar(BaseEntity_1, exports);
    __exportStar(TreeRepository_3, exports);
    __exportStar(MongoRepository_2, exports);
    __exportStar(RemoveOptions_1, exports);
    __exportStar(SaveOptions_1, exports);
    __exportStar(TableCheck_9, exports);
    __exportStar(TableColumn_12, exports);
    __exportStar(TableExclusion_5, exports);
    __exportStar(TableForeignKey_11, exports);
    __exportStar(TableIndex_11, exports);
    __exportStar(TableUnique_11, exports);
    __exportStar(Table_13, exports);
    __exportStar(typings_1, exports);
    __exportStar(DatabaseType_1, exports);
    __exportStar(ReplicationMode_1, exports);
    __exportStar(MssqlParameter_5, exports);
    Object.defineProperty(exports, "ConnectionOptionsReader", { enumerable: true, get: function () { return ConnectionOptionsReader_2.ConnectionOptionsReader; } });
    Object.defineProperty(exports, "Connection", { enumerable: true, get: function () { return Connection_2.Connection; } });
    Object.defineProperty(exports, "ConnectionManager", { enumerable: true, get: function () { return ConnectionManager_2.ConnectionManager; } });
    Object.defineProperty(exports, "QueryBuilder", { enumerable: true, get: function () { return QueryBuilder_7.QueryBuilder; } });
    Object.defineProperty(exports, "SelectQueryBuilder", { enumerable: true, get: function () { return SelectQueryBuilder_2.SelectQueryBuilder; } });
    Object.defineProperty(exports, "DeleteQueryBuilder", { enumerable: true, get: function () { return DeleteQueryBuilder_1.DeleteQueryBuilder; } });
    Object.defineProperty(exports, "InsertQueryBuilder", { enumerable: true, get: function () { return InsertQueryBuilder_1.InsertQueryBuilder; } });
    Object.defineProperty(exports, "UpdateQueryBuilder", { enumerable: true, get: function () { return UpdateQueryBuilder_1.UpdateQueryBuilder; } });
    Object.defineProperty(exports, "RelationQueryBuilder", { enumerable: true, get: function () { return RelationQueryBuilder_1.RelationQueryBuilder; } });
    Object.defineProperty(exports, "Brackets", { enumerable: true, get: function () { return Brackets_2.Brackets; } });
    Object.defineProperty(exports, "InsertResult", { enumerable: true, get: function () { return InsertResult_3.InsertResult; } });
    Object.defineProperty(exports, "UpdateResult", { enumerable: true, get: function () { return UpdateResult_4.UpdateResult; } });
    Object.defineProperty(exports, "DeleteResult", { enumerable: true, get: function () { return DeleteResult_3.DeleteResult; } });
    Object.defineProperty(exports, "MongoEntityManager", { enumerable: true, get: function () { return MongoEntityManager_3.MongoEntityManager; } });
    Object.defineProperty(exports, "Migration", { enumerable: true, get: function () { return Migration_2.Migration; } });
    Object.defineProperty(exports, "MigrationExecutor", { enumerable: true, get: function () { return MigrationExecutor_2.MigrationExecutor; } });
    Object.defineProperty(exports, "DefaultNamingStrategy", { enumerable: true, get: function () { return DefaultNamingStrategy_2.DefaultNamingStrategy; } });
    Object.defineProperty(exports, "EntitySchema", { enumerable: true, get: function () { return EntitySchema_4.EntitySchema; } });
    // -------------------------------------------------------------------------
    // Deprecated
    // -------------------------------------------------------------------------
    // -------------------------------------------------------------------------
    // Commonly used functionality
    // -------------------------------------------------------------------------
    /**
     * Gets metadata args storage.
     */
    function getMetadataArgsStorage() {
        // we should store metadata storage in a global variable otherwise it brings too much problems
        // one of the problem is that if any entity (or any other) will be imported before consumer will call
        // useContainer method with his own container implementation, that entity will be registered in the
        // old old container (default one post probably) and consumer will his entity.
        // calling useContainer before he imports any entity (or any other) is not always convenient.
        // another reason is that when we run migrations typeorm is being called from a global package
        // and it may load entities which register decorators in typeorm of local package
        // this leads to impossibility of usage of entities in migrations and cli related operations
        const globalScope = PlatformTools_24.PlatformTools.getGlobalVariable();
        if (!globalScope.typeormMetadataArgsStorage)
            globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage_2.MetadataArgsStorage();
        return globalScope.typeormMetadataArgsStorage;
    }
    exports.getMetadataArgsStorage = getMetadataArgsStorage;
    /**
     * Reads connection options stored in ormconfig configuration file.
     */
    async function getConnectionOptions(connectionName = "default") {
        return new ConnectionOptionsReader_1.ConnectionOptionsReader().get(connectionName);
    }
    exports.getConnectionOptions = getConnectionOptions;
    /**
     * Gets a ConnectionManager which creates connections.
     */
    function getConnectionManager() {
        return container_2.getFromContainer(ConnectionManager_1.ConnectionManager);
    }
    exports.getConnectionManager = getConnectionManager;
    /**
     * Creates a new connection and registers it in the manager.
     *
     * If connection options were not specified, then it will try to create connection automatically,
     * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.
     * Only one connection from ormconfig will be created (name "default" or connection without name).
     */
    async function createConnection(optionsOrName) {
        const connectionName = typeof optionsOrName === "string" ? optionsOrName : "default";
        const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);
        return getConnectionManager().create(options).connect();
    }
    exports.createConnection = createConnection;
    /**
     * Creates new connections and registers them in the manager.
     *
     * If connection options were not specified, then it will try to create connection automatically,
     * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.
     * All connections from the ormconfig will be created.
     */
    async function createConnections(options) {
        if (!options)
            options = await new ConnectionOptionsReader_1.ConnectionOptionsReader().all();
        const connections = options.map(options => getConnectionManager().create(options));
        return Promise.all(connections.map(connection => connection.connect()));
    }
    exports.createConnections = createConnections;
    /**
     * Gets connection from the connection manager.
     * If connection name wasn't specified, then "default" connection will be retrieved.
     */
    function getConnection(connectionName = "default") {
        return getConnectionManager().get(connectionName);
    }
    exports.getConnection = getConnection;
    /**
     * Gets entity manager from the connection.
     * If connection name wasn't specified, then "default" connection will be retrieved.
     */
    function getManager(connectionName = "default") {
        return getConnectionManager().get(connectionName).manager;
    }
    exports.getManager = getManager;
    /**
     * Gets MongoDB entity manager from the connection.
     * If connection name wasn't specified, then "default" connection will be retrieved.
     */
    function getMongoManager(connectionName = "default") {
        return getConnectionManager().get(connectionName).manager;
    }
    exports.getMongoManager = getMongoManager;
    /**
     * Gets Sqljs entity manager from connection name.
     * "default" connection is used, when no name is specified.
     * Only works when Sqljs driver is used.
     */
    function getSqljsManager(connectionName = "default") {
        return getConnectionManager().get(connectionName).manager;
    }
    exports.getSqljsManager = getSqljsManager;
    /**
     * Gets repository for the given entity class.
     */
    function getRepository(entityClass, connectionName = "default") {
        return getConnectionManager().get(connectionName).getRepository(entityClass);
    }
    exports.getRepository = getRepository;
    /**
     * Gets tree repository for the given entity class.
     */
    function getTreeRepository(entityClass, connectionName = "default") {
        return getConnectionManager().get(connectionName).getTreeRepository(entityClass);
    }
    exports.getTreeRepository = getTreeRepository;
    /**
     * Gets tree repository for the given entity class.
     */
    function getCustomRepository(customRepository, connectionName = "default") {
        return getConnectionManager().get(connectionName).getCustomRepository(customRepository);
    }
    exports.getCustomRepository = getCustomRepository;
    /**
     * Gets mongodb repository for the given entity class or name.
     */
    function getMongoRepository(entityClass, connectionName = "default") {
        return getConnectionManager().get(connectionName).getMongoRepository(entityClass);
    }
    exports.getMongoRepository = getMongoRepository;
    /**
     * Creates a new query builder.
     */
    function createQueryBuilder(entityClass, alias, connectionName = "default") {
        if (entityClass) {
            return getRepository(entityClass, connectionName).createQueryBuilder(alias);
        }
        return getConnection(connectionName).createQueryBuilder();
    }
    exports.createQueryBuilder = createQueryBuilder;
});
define("typeorm/driver/aurora-data-api/AuroraDataApiConnection", ["require", "exports", "typeorm/connection/Connection"], function (require, exports, Connection_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuroraDataApiConnection = void 0;
    /**
     * Organizes communication with MySQL DBMS.
     */
    class AuroraDataApiConnection extends Connection_3.Connection {
        constructor(options, queryRunner) {
            super(options);
            this.queryRunnter = queryRunner;
        }
        createQueryRunner(mode) {
            return this.queryRunnter;
        }
    }
    exports.AuroraDataApiConnection = AuroraDataApiConnection;
});
define("typeorm/query-builder/JoinOptions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("typeorm/repository/EntityId", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=build.js.map